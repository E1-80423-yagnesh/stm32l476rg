
triangular.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006008  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08006198  08006198  00007198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006548  08006548  000081d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006550  08006550  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006558  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001d8  08006730  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08006730  00008398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6b6  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a88  00000000  00000000  000128be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00014348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092f  00000000  00000000  00014f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026aa3  00000000  00000000  00015877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c88f  00000000  00000000  0003c31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee78c  00000000  00000000  00048ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137335  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004140  00000000  00000000  00137378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0013b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006180 	.word	0x08006180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08006180 	.word	0x08006180

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb8:	d127      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x62>
    {
        // Update duty value
        ccr += direction;
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bce:	801a      	strh	r2, [r3, #0]


        // Limit and reverse direction at boundaries
        if (ccr >= 4999)
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	f241 3286 	movw	r2, #4998	@ 0x1386
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d907      	bls.n	8000bee <HAL_TIM_PeriodElapsedCallback+0x46>
        {
            ccr = 4999;
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000be0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000be4:	801a      	strh	r2, [r3, #0]
            direction = -1; // Start going down
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000be8:	22ff      	movs	r2, #255	@ 0xff
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	e007      	b.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x56>
        }
        else if (ccr == 0)
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <HAL_TIM_PeriodElapsedCallback+0x56>
        {
            direction = 1; // Start going up
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
        }

        // Apply updated duty to PWM
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ccr);
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34

    }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	200001f4 	.word	0x200001f4
 8000c20:	200001f8 	.word	0x200001f8

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c28:	f000 faaf 	bl	800118a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2c:	f000 f810 	bl	8000c50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f000 f8d6 	bl	8000de0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c34:	f000 f85e 	bl	8000cf4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);     // Start PWM output
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4804      	ldr	r0, [pc, #16]	@ (8000c4c <main+0x28>)
 8000c3c:	f001 fd2c 	bl	8002698 <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim2);
 8000c40:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <main+0x28>)
 8000c42:	f001 fc57 	bl	80024f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */




	  while (1)
 8000c46:	bf00      	nop
 8000c48:	e7fd      	b.n	8000c46 <main+0x22>
 8000c4a:	bf00      	nop
 8000c4c:	200001f8 	.word	0x200001f8

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b096      	sub	sp, #88	@ 0x58
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2244      	movs	r2, #68	@ 0x44
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fb6d 	bl	800433e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c76:	f000 fdc7 	bl	8001808 <HAL_PWREx_ControlVoltageScaling>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c80:	f000 f8c6 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c84:	2310      	movs	r3, #16
 8000c86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c90:	2360      	movs	r3, #96	@ 0x60
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c94:	2302      	movs	r3, #2
 8000c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000ca0:	2319      	movs	r3, #25
 8000ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ca4:	2307      	movs	r3, #7
 8000ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fdfd 	bl	80018b4 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000cc0:	f000 f8a6 	bl	8000e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000cd8:	463b      	mov	r3, r7
 8000cda:	2103      	movs	r1, #3
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 f9c5 	bl	800206c <HAL_RCC_ClockConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ce8:	f000 f892 	bl	8000e10 <Error_Handler>
  }
}
 8000cec:	bf00      	nop
 8000cee:	3758      	adds	r7, #88	@ 0x58
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08e      	sub	sp, #56	@ 0x38
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
 8000d22:	615a      	str	r2, [r3, #20]
 8000d24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d3c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000d40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d42:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b24      	ldr	r3, [pc, #144]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d4e:	4823      	ldr	r0, [pc, #140]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d50:	f001 fb78 	bl	8002444 <HAL_TIM_Base_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f000 f859 	bl	8000e10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481c      	ldr	r0, [pc, #112]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d6c:	f001 ffb6 	bl	8002cdc <HAL_TIM_ConfigClockSource>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000d76:	f000 f84b 	bl	8000e10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d7a:	4818      	ldr	r0, [pc, #96]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d7c:	f001 fc2a 	bl	80025d4 <HAL_TIM_PWM_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000d86:	f000 f843 	bl	8000e10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d8a:	2320      	movs	r3, #32
 8000d8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	4619      	mov	r1, r3
 8000d98:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000d9a:	f002 fccd 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000da4:	f000 f834 	bl	8000e10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	@ 0x60
 8000daa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000dc0:	f001 fe78 	bl	8002ab4 <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000dca:	f000 f821 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dce:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <MX_TIM2_Init+0xe8>)
 8000dd0:	f000 f86c 	bl	8000eac <HAL_TIM_MspPostInit>

}
 8000dd4:	bf00      	nop
 8000dd6:	3738      	adds	r7, #56	@ 0x38
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200001f8 	.word	0x200001f8

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <MX_GPIO_Init+0x2c>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <MX_GPIO_Init+0x2c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <MX_GPIO_Init+0x2c>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <Error_Handler+0x8>

08000e1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e74:	d113      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <HAL_TIM_Base_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	201c      	movs	r0, #28
 8000e94:	f000 fac9 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e98:	201c      	movs	r0, #28
 8000e9a:	f000 fae2 	bl	8001462 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ecc:	d11c      	bne.n	8000f08 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <HAL_TIM_MspPostInit+0x64>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f10 <HAL_TIM_MspPostInit+0x64>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eda:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <HAL_TIM_MspPostInit+0x64>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f04:	f000 fac8 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f08:	bf00      	nop
 8000f0a:	3720      	adds	r7, #32
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <NMI_Handler+0x4>

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f6a:	f000 f963 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <TIM2_IRQHandler+0x10>)
 8000f7a:	f001 fc93 	bl	80028a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001f8 	.word	0x200001f8

08000f88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return 1;
 8000f8c:	2301      	movs	r3, #1
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_kill>:

int _kill(int pid, int sig)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fa2:	f003 fa1f 	bl	80043e4 <__errno>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2216      	movs	r2, #22
 8000faa:	601a      	str	r2, [r3, #0]
  return -1;
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_exit>:

void _exit (int status)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ffe7 	bl	8000f98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fca:	bf00      	nop
 8000fcc:	e7fd      	b.n	8000fca <_exit+0x12>

08000fce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	e00a      	b.n	8000ff6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fe0:	f3af 8000 	nop.w
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	60ba      	str	r2, [r7, #8]
 8000fec:	b2ca      	uxtb	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	dbf0      	blt.n	8000fe0 <_read+0x12>
  }

  return len;
 8000ffe:	687b      	ldr	r3, [r7, #4]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	e009      	b.n	800102e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	60ba      	str	r2, [r7, #8]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	429a      	cmp	r2, r3
 8001034:	dbf1      	blt.n	800101a <_write+0x12>
  }
  return len;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_close>:

int _close(int file)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001068:	605a      	str	r2, [r3, #4]
  return 0;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_isatty>:

int _isatty(int file)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b0:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <_sbrk+0x5c>)
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <_sbrk+0x60>)
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d102      	bne.n	80010ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c4:	4b11      	ldr	r3, [pc, #68]	@ (800110c <_sbrk+0x64>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	@ (8001110 <_sbrk+0x68>)
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <_sbrk+0x64>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d207      	bcs.n	80010e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d8:	f003 f984 	bl	80043e4 <__errno>
 80010dc:	4603      	mov	r3, r0
 80010de:	220c      	movs	r2, #12
 80010e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e009      	b.n	80010fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <_sbrk+0x64>)
 80010f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20018000 	.word	0x20018000
 8001108:	00000400 	.word	0x00000400
 800110c:	20000244 	.word	0x20000244
 8001110:	20000398 	.word	0x20000398

08001114 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <SystemInit+0x20>)
 800111a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <SystemInit+0x20>)
 8001120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001170 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800113c:	f7ff ffea 	bl	8001114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	@ (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	@ (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001166:	f003 f943 	bl	80043f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116a:	f7ff fd5b 	bl	8000c24 <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001170:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800117c:	08006558 	.word	0x08006558
  ldr r2, =_sbss
 8001180:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001184:	20000398 	.word	0x20000398

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>

0800118a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001194:	2003      	movs	r0, #3
 8001196:	f000 f93d 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119a:	2000      	movs	r0, #0
 800119c:	f000 f80e 	bl	80011bc <HAL_InitTick>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	e001      	b.n	80011b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ac:	f7ff fe36 	bl	8000e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b0:	79fb      	ldrb	r3, [r7, #7]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011c8:	4b17      	ldr	r3, [pc, #92]	@ (8001228 <HAL_InitTick+0x6c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d023      	beq.n	8001218 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <HAL_InitTick+0x70>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <HAL_InitTick+0x6c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f949 	bl	800147e <HAL_SYSTICK_Config>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10f      	bne.n	8001212 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d809      	bhi.n	800120c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f000 f913 	bl	800142a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001204:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <HAL_InitTick+0x74>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e007      	b.n	800121c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e004      	b.n	800121c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	e001      	b.n	800121c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000000c 	.word	0x2000000c
 800122c:	20000004 	.word	0x20000004
 8001230:	20000008 	.word	0x20000008

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000000c 	.word	0x2000000c
 8001258:	20000248 	.word	0x20000248

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000248 	.word	0x20000248

08001274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001290:	4013      	ands	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800129c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a6:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	60d3      	str	r3, [r2, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <__NVIC_GetPriorityGrouping+0x18>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	0a1b      	lsrs	r3, r3, #8
 80012c6:	f003 0307 	and.w	r3, r3, #7
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4907      	ldr	r1, [pc, #28]	@ (8001310 <__NVIC_EnableIRQ+0x38>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	@ (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	@ (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	@ 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	@ 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff29 	bl	8001274 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff3e 	bl	80012bc <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff8e 	bl	8001368 <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5d 	bl	8001314 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff31 	bl	80012d8 <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa2 	bl	80013d0 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a6:	e17f      	b.n	80017a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	4013      	ands	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 8171 	beq.w	80017a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d005      	beq.n	80014d8 <HAL_GPIO_Init+0x40>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d130      	bne.n	800153a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800150e:	2201      	movs	r2, #1
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	091b      	lsrs	r3, r3, #4
 8001524:	f003 0201 	and.w	r2, r3, #1
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b03      	cmp	r3, #3
 8001544:	d118      	bne.n	8001578 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800154c:	2201      	movs	r2, #1
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	f003 0201 	and.w	r2, r3, #1
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b03      	cmp	r3, #3
 8001582:	d017      	beq.n	80015b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d123      	bne.n	8001608 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	6939      	ldr	r1, [r7, #16]
 8001604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0203 	and.w	r2, r3, #3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80ac 	beq.w	80017a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	4b5f      	ldr	r3, [pc, #380]	@ (80017c8 <HAL_GPIO_Init+0x330>)
 800164c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800164e:	4a5e      	ldr	r2, [pc, #376]	@ (80017c8 <HAL_GPIO_Init+0x330>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6613      	str	r3, [r2, #96]	@ 0x60
 8001656:	4b5c      	ldr	r3, [pc, #368]	@ (80017c8 <HAL_GPIO_Init+0x330>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001662:	4a5a      	ldr	r2, [pc, #360]	@ (80017cc <HAL_GPIO_Init+0x334>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	220f      	movs	r2, #15
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800168c:	d025      	beq.n	80016da <HAL_GPIO_Init+0x242>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4f      	ldr	r2, [pc, #316]	@ (80017d0 <HAL_GPIO_Init+0x338>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01f      	beq.n	80016d6 <HAL_GPIO_Init+0x23e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4e      	ldr	r2, [pc, #312]	@ (80017d4 <HAL_GPIO_Init+0x33c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x23a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4d      	ldr	r2, [pc, #308]	@ (80017d8 <HAL_GPIO_Init+0x340>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x236>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4c      	ldr	r2, [pc, #304]	@ (80017dc <HAL_GPIO_Init+0x344>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x232>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4b      	ldr	r2, [pc, #300]	@ (80017e0 <HAL_GPIO_Init+0x348>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x22e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4a      	ldr	r2, [pc, #296]	@ (80017e4 <HAL_GPIO_Init+0x34c>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x22a>
 80016be:	2306      	movs	r3, #6
 80016c0:	e00c      	b.n	80016dc <HAL_GPIO_Init+0x244>
 80016c2:	2307      	movs	r3, #7
 80016c4:	e00a      	b.n	80016dc <HAL_GPIO_Init+0x244>
 80016c6:	2305      	movs	r3, #5
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_Init+0x244>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x244>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x244>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x244>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x244>
 80016da:	2300      	movs	r3, #0
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016ec:	4937      	ldr	r1, [pc, #220]	@ (80017cc <HAL_GPIO_Init+0x334>)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016fa:	4b3b      	ldr	r3, [pc, #236]	@ (80017e8 <HAL_GPIO_Init+0x350>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800171e:	4a32      	ldr	r2, [pc, #200]	@ (80017e8 <HAL_GPIO_Init+0x350>)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001724:	4b30      	ldr	r3, [pc, #192]	@ (80017e8 <HAL_GPIO_Init+0x350>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001748:	4a27      	ldr	r2, [pc, #156]	@ (80017e8 <HAL_GPIO_Init+0x350>)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <HAL_GPIO_Init+0x350>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001772:	4a1d      	ldr	r2, [pc, #116]	@ (80017e8 <HAL_GPIO_Init+0x350>)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001778:	4b1b      	ldr	r3, [pc, #108]	@ (80017e8 <HAL_GPIO_Init+0x350>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800179c:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <HAL_GPIO_Init+0x350>)
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f47f ae78 	bne.w	80014a8 <HAL_GPIO_Init+0x10>
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40010000 	.word	0x40010000
 80017d0:	48000400 	.word	0x48000400
 80017d4:	48000800 	.word	0x48000800
 80017d8:	48000c00 	.word	0x48000c00
 80017dc:	48001000 	.word	0x48001000
 80017e0:	48001400 	.word	0x48001400
 80017e4:	48001800 	.word	0x48001800
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <HAL_PWREx_GetVoltageRange+0x18>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40007000 	.word	0x40007000

08001808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001816:	d130      	bne.n	800187a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001818:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001824:	d038      	beq.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001826:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800182e:	4a1e      	ldr	r2, [pc, #120]	@ (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001830:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001836:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2232      	movs	r2, #50	@ 0x32
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	4a1b      	ldr	r2, [pc, #108]	@ (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0c9b      	lsrs	r3, r3, #18
 8001848:	3301      	adds	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184c:	e002      	b.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3b01      	subs	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001860:	d102      	bne.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f2      	bne.n	800184e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001874:	d110      	bne.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e00f      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001886:	d007      	beq.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001888:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001890:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001896:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000
 80018ac:	20000004 	.word	0x20000004
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e3ca      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c6:	4b97      	ldr	r3, [pc, #604]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d0:	4b94      	ldr	r3, [pc, #592]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80e4 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_RCC_OscConfig+0x4a>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	f040 808b 	bne.w	8001a0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f040 8087 	bne.w	8001a0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018fe:	4b89      	ldr	r3, [pc, #548]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x62>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e3a2      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	4b82      	ldr	r3, [pc, #520]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <HAL_RCC_OscConfig+0x7c>
 8001926:	4b7f      	ldr	r3, [pc, #508]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800192e:	e005      	b.n	800193c <HAL_RCC_OscConfig+0x88>
 8001930:	4b7c      	ldr	r3, [pc, #496]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800193c:	4293      	cmp	r3, r2
 800193e:	d223      	bcs.n	8001988 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fd1d 	bl	8002384 <RCC_SetFlashLatencyFromMSIRange>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e383      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001954:	4b73      	ldr	r3, [pc, #460]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a72      	ldr	r2, [pc, #456]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b70      	ldr	r3, [pc, #448]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	496d      	ldr	r1, [pc, #436]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001972:	4b6c      	ldr	r3, [pc, #432]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	4968      	ldr	r1, [pc, #416]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
 8001986:	e025      	b.n	80019d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001988:	4b66      	ldr	r3, [pc, #408]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a65      	ldr	r2, [pc, #404]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b63      	ldr	r3, [pc, #396]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4960      	ldr	r1, [pc, #384]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	495b      	ldr	r1, [pc, #364]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fcdd 	bl	8002384 <RCC_SetFlashLatencyFromMSIRange>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e343      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d4:	f000 fc4a 	bl	800226c <HAL_RCC_GetSysClockFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b52      	ldr	r3, [pc, #328]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	4950      	ldr	r1, [pc, #320]	@ (8001b28 <HAL_RCC_OscConfig+0x274>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	4a4e      	ldr	r2, [pc, #312]	@ (8001b2c <HAL_RCC_OscConfig+0x278>)
 80019f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b30 <HAL_RCC_OscConfig+0x27c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fbdf 	bl	80011bc <HAL_InitTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d052      	beq.n	8001aae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	e327      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d032      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a14:	4b43      	ldr	r3, [pc, #268]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a42      	ldr	r2, [pc, #264]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fc1c 	bl	800125c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a28:	f7ff fc18 	bl	800125c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e310      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a46:	4b37      	ldr	r3, [pc, #220]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a36      	ldr	r2, [pc, #216]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b34      	ldr	r3, [pc, #208]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4931      	ldr	r1, [pc, #196]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a64:	4b2f      	ldr	r3, [pc, #188]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	492c      	ldr	r1, [pc, #176]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e01a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a29      	ldr	r2, [pc, #164]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fbe9 	bl	800125c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fbe5 	bl	800125c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e2dd      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa0:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x1da>
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d074      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x21a>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d10b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d064      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d160      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e2ba      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x24a>
 8001af0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e026      	b.n	8001b4c <HAL_RCC_OscConfig+0x298>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b06:	d115      	bne.n	8001b34 <HAL_RCC_OscConfig+0x280>
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a02      	ldr	r2, [pc, #8]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	e014      	b.n	8001b4c <HAL_RCC_OscConfig+0x298>
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08006198 	.word	0x08006198
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	20000008 	.word	0x20000008
 8001b34:	4ba0      	ldr	r3, [pc, #640]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a9f      	ldr	r2, [pc, #636]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b9d      	ldr	r3, [pc, #628]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a9c      	ldr	r2, [pc, #624]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff fb82 	bl	800125c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fb7e 	bl	800125c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e276      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6e:	4b92      	ldr	r3, [pc, #584]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2a8>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fb6e 	bl	800125c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff fb6a 	bl	800125c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	@ 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e262      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b96:	4b88      	ldr	r3, [pc, #544]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2d0>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d060      	beq.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x310>
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d119      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d116      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc4:	4b7c      	ldr	r3, [pc, #496]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_OscConfig+0x328>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e23f      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b76      	ldr	r3, [pc, #472]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	4973      	ldr	r1, [pc, #460]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf0:	e040      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d023      	beq.n	8001c42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfa:	4b6f      	ldr	r3, [pc, #444]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6e      	ldr	r2, [pc, #440]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff fb29 	bl	800125c <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fb25 	bl	800125c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e21d      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c20:	4b65      	ldr	r3, [pc, #404]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b62      	ldr	r3, [pc, #392]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	495f      	ldr	r1, [pc, #380]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	e018      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b5d      	ldr	r3, [pc, #372]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a5c      	ldr	r2, [pc, #368]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fb05 	bl	800125c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c56:	f7ff fb01 	bl	800125c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1f9      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c68:	4b53      	ldr	r3, [pc, #332]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d03c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c88:	4b4b      	ldr	r3, [pc, #300]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7ff fae0 	bl	800125c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff fadc 	bl	800125c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1d4      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb2:	4b41      	ldr	r3, [pc, #260]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ef      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x3ec>
 8001cc0:	e01b      	b.n	8001cfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fac3 	bl	800125c <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cda:	f7ff fabf 	bl	800125c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e1b7      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cec:	4b32      	ldr	r3, [pc, #200]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ef      	bne.n	8001cda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80a6 	beq.w	8001e54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	4b27      	ldr	r3, [pc, #156]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	4a26      	ldr	r2, [pc, #152]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d24:	4b24      	ldr	r3, [pc, #144]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d30:	2301      	movs	r3, #1
 8001d32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d34:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <HAL_RCC_OscConfig+0x508>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d118      	bne.n	8001d72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <HAL_RCC_OscConfig+0x508>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	@ (8001dbc <HAL_RCC_OscConfig+0x508>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4c:	f7ff fa86 	bl	800125c <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d54:	f7ff fa82 	bl	800125c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e17a      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_RCC_OscConfig+0x508>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d108      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4d8>
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d80:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d8a:	e029      	b.n	8001de0 <HAL_RCC_OscConfig+0x52c>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d115      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x50c>
 8001d94:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d9a:	4a07      	ldr	r2, [pc, #28]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001da4:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001daa:	4a03      	ldr	r2, [pc, #12]	@ (8001db8 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001db4:	e014      	b.n	8001de0 <HAL_RCC_OscConfig+0x52c>
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	4b9c      	ldr	r3, [pc, #624]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc6:	4a9b      	ldr	r2, [pc, #620]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dd0:	4b98      	ldr	r3, [pc, #608]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd6:	4a97      	ldr	r2, [pc, #604]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d016      	beq.n	8001e16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff fa38 	bl	800125c <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7ff fa34 	bl	800125c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e12a      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e06:	4b8b      	ldr	r3, [pc, #556]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0ed      	beq.n	8001df0 <HAL_RCC_OscConfig+0x53c>
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff fa21 	bl	800125c <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff fa1d 	bl	800125c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e113      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e34:	4b7f      	ldr	r3, [pc, #508]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ed      	bne.n	8001e1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b7a      	ldr	r3, [pc, #488]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e4c:	4a79      	ldr	r2, [pc, #484]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80fe 	beq.w	800205a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	f040 80d0 	bne.w	8002008 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e68:	4b72      	ldr	r3, [pc, #456]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d130      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	3b01      	subs	r3, #1
 8001e88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d127      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d11f      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ea8:	2a07      	cmp	r2, #7
 8001eaa:	bf14      	ite	ne
 8001eac:	2201      	movne	r2, #1
 8001eae:	2200      	moveq	r2, #0
 8001eb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d113      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d109      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d06e      	beq.n	8001fbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	d069      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ee4:	4b53      	ldr	r3, [pc, #332]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ef0:	4b50      	ldr	r3, [pc, #320]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0ad      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f00:	4b4c      	ldr	r3, [pc, #304]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a4b      	ldr	r2, [pc, #300]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001f06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f0c:	f7ff f9a6 	bl	800125c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff f9a2 	bl	800125c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e09a      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f26:	4b43      	ldr	r3, [pc, #268]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f32:	4b40      	ldr	r3, [pc, #256]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b40      	ldr	r3, [pc, #256]	@ (8002038 <HAL_RCC_OscConfig+0x784>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f42:	3a01      	subs	r2, #1
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	4311      	orrs	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f4c:	0212      	lsls	r2, r2, #8
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f54:	0852      	lsrs	r2, r2, #1
 8001f56:	3a01      	subs	r2, #1
 8001f58:	0552      	lsls	r2, r2, #21
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f60:	0852      	lsrs	r2, r2, #1
 8001f62:	3a01      	subs	r2, #1
 8001f64:	0652      	lsls	r2, r2, #25
 8001f66:	4311      	orrs	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f6c:	0912      	lsrs	r2, r2, #4
 8001f6e:	0452      	lsls	r2, r2, #17
 8001f70:	430a      	orrs	r2, r1
 8001f72:	4930      	ldr	r1, [pc, #192]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f78:	4b2e      	ldr	r3, [pc, #184]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f84:	4b2b      	ldr	r3, [pc, #172]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a2a      	ldr	r2, [pc, #168]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f90:	f7ff f964 	bl	800125c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff f960 	bl	800125c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e058      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb6:	e050      	b.n	800205a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e04f      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d148      	bne.n	800205a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a16      	ldr	r2, [pc, #88]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001fda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fe0:	f7ff f93c 	bl	800125c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7ff f938 	bl	800125c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e030      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x734>
 8002006:	e028      	b.n	800205a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d023      	beq.n	8002056 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a08      	ldr	r2, [pc, #32]	@ (8002034 <HAL_RCC_OscConfig+0x780>)
 8002014:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201a:	f7ff f91f 	bl	800125c <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	e00c      	b.n	800203c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff f91b 	bl	800125c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d905      	bls.n	800203c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e013      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
 8002034:	40021000 	.word	0x40021000
 8002038:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203c:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <HAL_RCC_OscConfig+0x7b0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ec      	bne.n	8002022 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_RCC_OscConfig+0x7b0>)
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	4905      	ldr	r1, [pc, #20]	@ (8002064 <HAL_RCC_OscConfig+0x7b0>)
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_RCC_OscConfig+0x7b4>)
 8002050:	4013      	ands	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
 8002054:	e001      	b.n	800205a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	feeefffc 	.word	0xfeeefffc

0800206c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0e7      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b75      	ldr	r3, [pc, #468]	@ (8002258 <HAL_RCC_ClockConfig+0x1ec>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d910      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b72      	ldr	r3, [pc, #456]	@ (8002258 <HAL_RCC_ClockConfig+0x1ec>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 0207 	bic.w	r2, r3, #7
 8002096:	4970      	ldr	r1, [pc, #448]	@ (8002258 <HAL_RCC_ClockConfig+0x1ec>)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b6e      	ldr	r3, [pc, #440]	@ (8002258 <HAL_RCC_ClockConfig+0x1ec>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0cf      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d010      	beq.n	80020de <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b66      	ldr	r3, [pc, #408]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d908      	bls.n	80020de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020cc:	4b63      	ldr	r3, [pc, #396]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4960      	ldr	r1, [pc, #384]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d04c      	beq.n	8002184 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	4b5a      	ldr	r3, [pc, #360]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d121      	bne.n	8002142 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0a6      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210a:	4b54      	ldr	r3, [pc, #336]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d115      	bne.n	8002142 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e09a      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002122:	4b4e      	ldr	r3, [pc, #312]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e08e      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002132:	4b4a      	ldr	r3, [pc, #296]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e086      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002142:	4b46      	ldr	r3, [pc, #280]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f023 0203 	bic.w	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4943      	ldr	r1, [pc, #268]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002154:	f7ff f882 	bl	800125c <HAL_GetTick>
 8002158:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	e00a      	b.n	8002172 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800215c:	f7ff f87e 	bl	800125c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e06e      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	4b3a      	ldr	r3, [pc, #232]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 020c 	and.w	r2, r3, #12
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	429a      	cmp	r2, r3
 8002182:	d1eb      	bne.n	800215c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d010      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	4b31      	ldr	r3, [pc, #196]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800219c:	429a      	cmp	r2, r3
 800219e:	d208      	bcs.n	80021b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	4b2e      	ldr	r3, [pc, #184]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	492b      	ldr	r1, [pc, #172]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b2:	4b29      	ldr	r3, [pc, #164]	@ (8002258 <HAL_RCC_ClockConfig+0x1ec>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d210      	bcs.n	80021e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c0:	4b25      	ldr	r3, [pc, #148]	@ (8002258 <HAL_RCC_ClockConfig+0x1ec>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 0207 	bic.w	r2, r3, #7
 80021c8:	4923      	ldr	r1, [pc, #140]	@ (8002258 <HAL_RCC_ClockConfig+0x1ec>)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d0:	4b21      	ldr	r3, [pc, #132]	@ (8002258 <HAL_RCC_ClockConfig+0x1ec>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e036      	b.n	8002250 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ee:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4918      	ldr	r1, [pc, #96]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d009      	beq.n	8002220 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800220c:	4b13      	ldr	r3, [pc, #76]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4910      	ldr	r1, [pc, #64]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002220:	f000 f824 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b0d      	ldr	r3, [pc, #52]	@ (800225c <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	490b      	ldr	r1, [pc, #44]	@ (8002260 <HAL_RCC_ClockConfig+0x1f4>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <HAL_RCC_ClockConfig+0x1f8>)
 800223e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_RCC_ClockConfig+0x1fc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe ffb9 	bl	80011bc <HAL_InitTick>
 800224a:	4603      	mov	r3, r0
 800224c:	72fb      	strb	r3, [r7, #11]

  return status;
 800224e:	7afb      	ldrb	r3, [r7, #11]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40022000 	.word	0x40022000
 800225c:	40021000 	.word	0x40021000
 8002260:	08006198 	.word	0x08006198
 8002264:	20000004 	.word	0x20000004
 8002268:	20000008 	.word	0x20000008

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b3e      	ldr	r3, [pc, #248]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002284:	4b3b      	ldr	r3, [pc, #236]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d121      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d11e      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022a0:	4b34      	ldr	r3, [pc, #208]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022ac:	4b31      	ldr	r3, [pc, #196]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e005      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10d      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e4:	4b25      	ldr	r3, [pc, #148]	@ (800237c <HAL_RCC_GetSysClockFreq+0x110>)
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	e004      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f0:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x114>)
 80022f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d134      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0xa6>
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d003      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0xac>
 8002310:	e005      	b.n	800231e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002312:	4b1a      	ldr	r3, [pc, #104]	@ (800237c <HAL_RCC_GetSysClockFreq+0x110>)
 8002314:	617b      	str	r3, [r7, #20]
      break;
 8002316:	e005      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002318:	4b19      	ldr	r3, [pc, #100]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x114>)
 800231a:	617b      	str	r3, [r7, #20]
      break;
 800231c:	e002      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	617b      	str	r3, [r7, #20]
      break;
 8002322:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	3301      	adds	r3, #1
 8002330:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002332:	4b10      	ldr	r3, [pc, #64]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	fb03 f202 	mul.w	r2, r3, r2
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x108>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	0e5b      	lsrs	r3, r3, #25
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	3301      	adds	r3, #1
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002364:	69bb      	ldr	r3, [r7, #24]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3724      	adds	r7, #36	@ 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	080061a8 	.word	0x080061a8
 800237c:	00f42400 	.word	0x00f42400
 8002380:	007a1200 	.word	0x007a1200

08002384 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002390:	4b2a      	ldr	r3, [pc, #168]	@ (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800239c:	f7ff fa26 	bl	80017ec <HAL_PWREx_GetVoltageRange>
 80023a0:	6178      	str	r0, [r7, #20]
 80023a2:	e014      	b.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b25      	ldr	r3, [pc, #148]	@ (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	4a24      	ldr	r2, [pc, #144]	@ (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b0:	4b22      	ldr	r3, [pc, #136]	@ (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023bc:	f7ff fa16 	bl	80017ec <HAL_PWREx_GetVoltageRange>
 80023c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b1e      	ldr	r3, [pc, #120]	@ (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c6:	4a1d      	ldr	r2, [pc, #116]	@ (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023d4:	d10b      	bne.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b80      	cmp	r3, #128	@ 0x80
 80023da:	d919      	bls.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2ba0      	cmp	r3, #160	@ 0xa0
 80023e0:	d902      	bls.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023e2:	2302      	movs	r3, #2
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	e013      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e8:	2301      	movs	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e010      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b80      	cmp	r3, #128	@ 0x80
 80023f2:	d902      	bls.n	80023fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023f4:	2303      	movs	r3, #3
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e00a      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b80      	cmp	r3, #128	@ 0x80
 80023fe:	d102      	bne.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002400:	2302      	movs	r3, #2
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e004      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b70      	cmp	r3, #112	@ 0x70
 800240a:	d101      	bne.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800240c:	2301      	movs	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002410:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 0207 	bic.w	r2, r3, #7
 8002418:	4909      	ldr	r1, [pc, #36]	@ (8002440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002420:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	40022000 	.word	0x40022000

08002444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e049      	b.n	80024ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fcfa 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3304      	adds	r3, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f000 fd1c 	bl	8002ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d001      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e04f      	b.n	80025ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a23      	ldr	r2, [pc, #140]	@ (80025b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01d      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x76>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002536:	d018      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x76>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <HAL_TIM_Base_Start_IT+0xc8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x76>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a1e      	ldr	r2, [pc, #120]	@ (80025c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00e      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x76>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d009      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x76>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1b      	ldr	r2, [pc, #108]	@ (80025c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d004      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x76>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d115      	bne.n	8002596 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002572:	4013      	ands	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b06      	cmp	r3, #6
 800257a:	d015      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0xb4>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002582:	d011      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002594:	e008      	b.n	80025a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e000      	b.n	80025aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40012c00 	.word	0x40012c00
 80025bc:	40000400 	.word	0x40000400
 80025c0:	40000800 	.word	0x40000800
 80025c4:	40000c00 	.word	0x40000c00
 80025c8:	40013400 	.word	0x40013400
 80025cc:	40014000 	.word	0x40014000
 80025d0:	00010007 	.word	0x00010007

080025d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e049      	b.n	800267a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f841 	bl	8002682 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f000 fc54 	bl	8002ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d109      	bne.n	80026bc <HAL_TIM_PWM_Start+0x24>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	e03c      	b.n	8002736 <HAL_TIM_PWM_Start+0x9e>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d109      	bne.n	80026d6 <HAL_TIM_PWM_Start+0x3e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e02f      	b.n	8002736 <HAL_TIM_PWM_Start+0x9e>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d109      	bne.n	80026f0 <HAL_TIM_PWM_Start+0x58>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e022      	b.n	8002736 <HAL_TIM_PWM_Start+0x9e>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d109      	bne.n	800270a <HAL_TIM_PWM_Start+0x72>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	bf14      	ite	ne
 8002702:	2301      	movne	r3, #1
 8002704:	2300      	moveq	r3, #0
 8002706:	b2db      	uxtb	r3, r3
 8002708:	e015      	b.n	8002736 <HAL_TIM_PWM_Start+0x9e>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b10      	cmp	r3, #16
 800270e:	d109      	bne.n	8002724 <HAL_TIM_PWM_Start+0x8c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	bf14      	ite	ne
 800271c:	2301      	movne	r3, #1
 800271e:	2300      	moveq	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e008      	b.n	8002736 <HAL_TIM_PWM_Start+0x9e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	bf14      	ite	ne
 8002730:	2301      	movne	r3, #1
 8002732:	2300      	moveq	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e09c      	b.n	8002878 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d104      	bne.n	800274e <HAL_TIM_PWM_Start+0xb6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800274c:	e023      	b.n	8002796 <HAL_TIM_PWM_Start+0xfe>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d104      	bne.n	800275e <HAL_TIM_PWM_Start+0xc6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800275c:	e01b      	b.n	8002796 <HAL_TIM_PWM_Start+0xfe>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d104      	bne.n	800276e <HAL_TIM_PWM_Start+0xd6>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800276c:	e013      	b.n	8002796 <HAL_TIM_PWM_Start+0xfe>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b0c      	cmp	r3, #12
 8002772:	d104      	bne.n	800277e <HAL_TIM_PWM_Start+0xe6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800277c:	e00b      	b.n	8002796 <HAL_TIM_PWM_Start+0xfe>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b10      	cmp	r3, #16
 8002782:	d104      	bne.n	800278e <HAL_TIM_PWM_Start+0xf6>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800278c:	e003      	b.n	8002796 <HAL_TIM_PWM_Start+0xfe>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2201      	movs	r2, #1
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 ffa4 	bl	80036ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a35      	ldr	r2, [pc, #212]	@ (8002880 <HAL_TIM_PWM_Start+0x1e8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_TIM_PWM_Start+0x13e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a34      	ldr	r2, [pc, #208]	@ (8002884 <HAL_TIM_PWM_Start+0x1ec>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d00e      	beq.n	80027d6 <HAL_TIM_PWM_Start+0x13e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a32      	ldr	r2, [pc, #200]	@ (8002888 <HAL_TIM_PWM_Start+0x1f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_TIM_PWM_Start+0x13e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a31      	ldr	r2, [pc, #196]	@ (800288c <HAL_TIM_PWM_Start+0x1f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d004      	beq.n	80027d6 <HAL_TIM_PWM_Start+0x13e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002890 <HAL_TIM_PWM_Start+0x1f8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <HAL_TIM_PWM_Start+0x142>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_TIM_PWM_Start+0x144>
 80027da:	2300      	movs	r3, #0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a22      	ldr	r2, [pc, #136]	@ (8002880 <HAL_TIM_PWM_Start+0x1e8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d01d      	beq.n	8002836 <HAL_TIM_PWM_Start+0x19e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002802:	d018      	beq.n	8002836 <HAL_TIM_PWM_Start+0x19e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a22      	ldr	r2, [pc, #136]	@ (8002894 <HAL_TIM_PWM_Start+0x1fc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_TIM_PWM_Start+0x19e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a21      	ldr	r2, [pc, #132]	@ (8002898 <HAL_TIM_PWM_Start+0x200>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d00e      	beq.n	8002836 <HAL_TIM_PWM_Start+0x19e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1f      	ldr	r2, [pc, #124]	@ (800289c <HAL_TIM_PWM_Start+0x204>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_TIM_PWM_Start+0x19e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <HAL_TIM_PWM_Start+0x1ec>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d004      	beq.n	8002836 <HAL_TIM_PWM_Start+0x19e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a15      	ldr	r2, [pc, #84]	@ (8002888 <HAL_TIM_PWM_Start+0x1f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d115      	bne.n	8002862 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <HAL_TIM_PWM_Start+0x208>)
 800283e:	4013      	ands	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b06      	cmp	r3, #6
 8002846:	d015      	beq.n	8002874 <HAL_TIM_PWM_Start+0x1dc>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800284e:	d011      	beq.n	8002874 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0201 	orr.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002860:	e008      	b.n	8002874 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e000      	b.n	8002876 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002874:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40013400 	.word	0x40013400
 8002888:	40014000 	.word	0x40014000
 800288c:	40014400 	.word	0x40014400
 8002890:	40014800 	.word	0x40014800
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800
 800289c:	40000c00 	.word	0x40000c00
 80028a0:	00010007 	.word	0x00010007

080028a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0202 	mvn.w	r2, #2
 80028d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fac7 	bl	8002e82 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fab9 	bl	8002e6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 faca 	bl	8002e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d020      	beq.n	8002954 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0204 	mvn.w	r2, #4
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 faa1 	bl	8002e82 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fa93 	bl	8002e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 faa4 	bl	8002e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d020      	beq.n	80029a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0308 	and.w	r3, r3, #8
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0208 	mvn.w	r2, #8
 8002970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2204      	movs	r2, #4
 8002976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa7b 	bl	8002e82 <HAL_TIM_IC_CaptureCallback>
 800298c:	e005      	b.n	800299a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fa6d 	bl	8002e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fa7e 	bl	8002e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d020      	beq.n	80029ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0210 	mvn.w	r2, #16
 80029bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2208      	movs	r2, #8
 80029c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa55 	bl	8002e82 <HAL_TIM_IC_CaptureCallback>
 80029d8:	e005      	b.n	80029e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fa47 	bl	8002e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fa58 	bl	8002e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d007      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0201 	mvn.w	r2, #1
 8002a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe f8cc 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d104      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00c      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 ff0f 	bl	800385c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00c      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 ff07 	bl	8003870 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fa12 	bl	8002eaa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00c      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 0220 	mvn.w	r2, #32
 8002aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fecf 	bl	8003848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0ff      	b.n	8002cd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b14      	cmp	r3, #20
 8002ade:	f200 80f0 	bhi.w	8002cc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b3d 	.word	0x08002b3d
 8002aec:	08002cc3 	.word	0x08002cc3
 8002af0:	08002cc3 	.word	0x08002cc3
 8002af4:	08002cc3 	.word	0x08002cc3
 8002af8:	08002b7d 	.word	0x08002b7d
 8002afc:	08002cc3 	.word	0x08002cc3
 8002b00:	08002cc3 	.word	0x08002cc3
 8002b04:	08002cc3 	.word	0x08002cc3
 8002b08:	08002bbf 	.word	0x08002bbf
 8002b0c:	08002cc3 	.word	0x08002cc3
 8002b10:	08002cc3 	.word	0x08002cc3
 8002b14:	08002cc3 	.word	0x08002cc3
 8002b18:	08002bff 	.word	0x08002bff
 8002b1c:	08002cc3 	.word	0x08002cc3
 8002b20:	08002cc3 	.word	0x08002cc3
 8002b24:	08002cc3 	.word	0x08002cc3
 8002b28:	08002c41 	.word	0x08002c41
 8002b2c:	08002cc3 	.word	0x08002cc3
 8002b30:	08002cc3 	.word	0x08002cc3
 8002b34:	08002cc3 	.word	0x08002cc3
 8002b38:	08002c81 	.word	0x08002c81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fa62 	bl	800300c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0208 	orr.w	r2, r2, #8
 8002b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0204 	bic.w	r2, r2, #4
 8002b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	619a      	str	r2, [r3, #24]
      break;
 8002b7a:	e0a5      	b.n	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fad2 	bl	800312c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6999      	ldr	r1, [r3, #24]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	021a      	lsls	r2, r3, #8
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	619a      	str	r2, [r3, #24]
      break;
 8002bbc:	e084      	b.n	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fb3b 	bl	8003240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0208 	orr.w	r2, r2, #8
 8002bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0204 	bic.w	r2, r2, #4
 8002be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	61da      	str	r2, [r3, #28]
      break;
 8002bfc:	e064      	b.n	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fba3 	bl	8003350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69d9      	ldr	r1, [r3, #28]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	021a      	lsls	r2, r3, #8
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	61da      	str	r2, [r3, #28]
      break;
 8002c3e:	e043      	b.n	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fbec 	bl	8003424 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0208 	orr.w	r2, r2, #8
 8002c5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0204 	bic.w	r2, r2, #4
 8002c6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002c7e:	e023      	b.n	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fc30 	bl	80034ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002caa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	021a      	lsls	r2, r3, #8
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002cc0:	e002      	b.n	8002cc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop

08002cdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_TIM_ConfigClockSource+0x1c>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e0b6      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x18a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d34:	d03e      	beq.n	8002db4 <HAL_TIM_ConfigClockSource+0xd8>
 8002d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d3a:	f200 8087 	bhi.w	8002e4c <HAL_TIM_ConfigClockSource+0x170>
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d42:	f000 8086 	beq.w	8002e52 <HAL_TIM_ConfigClockSource+0x176>
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4a:	d87f      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x170>
 8002d4c:	2b70      	cmp	r3, #112	@ 0x70
 8002d4e:	d01a      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0xaa>
 8002d50:	2b70      	cmp	r3, #112	@ 0x70
 8002d52:	d87b      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x170>
 8002d54:	2b60      	cmp	r3, #96	@ 0x60
 8002d56:	d050      	beq.n	8002dfa <HAL_TIM_ConfigClockSource+0x11e>
 8002d58:	2b60      	cmp	r3, #96	@ 0x60
 8002d5a:	d877      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x170>
 8002d5c:	2b50      	cmp	r3, #80	@ 0x50
 8002d5e:	d03c      	beq.n	8002dda <HAL_TIM_ConfigClockSource+0xfe>
 8002d60:	2b50      	cmp	r3, #80	@ 0x50
 8002d62:	d873      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x170>
 8002d64:	2b40      	cmp	r3, #64	@ 0x40
 8002d66:	d058      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0x13e>
 8002d68:	2b40      	cmp	r3, #64	@ 0x40
 8002d6a:	d86f      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x170>
 8002d6c:	2b30      	cmp	r3, #48	@ 0x30
 8002d6e:	d064      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x15e>
 8002d70:	2b30      	cmp	r3, #48	@ 0x30
 8002d72:	d86b      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x170>
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d060      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x15e>
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d867      	bhi.n	8002e4c <HAL_TIM_ConfigClockSource+0x170>
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d05c      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x15e>
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d05a      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x15e>
 8002d84:	e062      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d96:	f000 fc89 	bl	80036ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002da8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	609a      	str	r2, [r3, #8]
      break;
 8002db2:	e04f      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dc4:	f000 fc72 	bl	80036ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dd6:	609a      	str	r2, [r3, #8]
      break;
 8002dd8:	e03c      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	461a      	mov	r2, r3
 8002de8:	f000 fbe6 	bl	80035b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2150      	movs	r1, #80	@ 0x50
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fc3f 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 8002df8:	e02c      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e06:	461a      	mov	r2, r3
 8002e08:	f000 fc05 	bl	8003616 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2160      	movs	r1, #96	@ 0x60
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fc2f 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 8002e18:	e01c      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e26:	461a      	mov	r2, r3
 8002e28:	f000 fbc6 	bl	80035b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2140      	movs	r1, #64	@ 0x40
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fc1f 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 8002e38:	e00c      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f000 fc16 	bl	8003676 <TIM_ITRx_SetConfig>
      break;
 8002e4a:	e003      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e50:	e000      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a46      	ldr	r2, [pc, #280]	@ (8002fec <TIM_Base_SetConfig+0x12c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <TIM_Base_SetConfig+0x40>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ede:	d00f      	beq.n	8002f00 <TIM_Base_SetConfig+0x40>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a43      	ldr	r2, [pc, #268]	@ (8002ff0 <TIM_Base_SetConfig+0x130>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00b      	beq.n	8002f00 <TIM_Base_SetConfig+0x40>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a42      	ldr	r2, [pc, #264]	@ (8002ff4 <TIM_Base_SetConfig+0x134>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d007      	beq.n	8002f00 <TIM_Base_SetConfig+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a41      	ldr	r2, [pc, #260]	@ (8002ff8 <TIM_Base_SetConfig+0x138>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_Base_SetConfig+0x40>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a40      	ldr	r2, [pc, #256]	@ (8002ffc <TIM_Base_SetConfig+0x13c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a35      	ldr	r2, [pc, #212]	@ (8002fec <TIM_Base_SetConfig+0x12c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01f      	beq.n	8002f5a <TIM_Base_SetConfig+0x9a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f20:	d01b      	beq.n	8002f5a <TIM_Base_SetConfig+0x9a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a32      	ldr	r2, [pc, #200]	@ (8002ff0 <TIM_Base_SetConfig+0x130>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d017      	beq.n	8002f5a <TIM_Base_SetConfig+0x9a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a31      	ldr	r2, [pc, #196]	@ (8002ff4 <TIM_Base_SetConfig+0x134>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <TIM_Base_SetConfig+0x9a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a30      	ldr	r2, [pc, #192]	@ (8002ff8 <TIM_Base_SetConfig+0x138>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00f      	beq.n	8002f5a <TIM_Base_SetConfig+0x9a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002ffc <TIM_Base_SetConfig+0x13c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00b      	beq.n	8002f5a <TIM_Base_SetConfig+0x9a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a2e      	ldr	r2, [pc, #184]	@ (8003000 <TIM_Base_SetConfig+0x140>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <TIM_Base_SetConfig+0x9a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003004 <TIM_Base_SetConfig+0x144>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d003      	beq.n	8002f5a <TIM_Base_SetConfig+0x9a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a2c      	ldr	r2, [pc, #176]	@ (8003008 <TIM_Base_SetConfig+0x148>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d108      	bne.n	8002f6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a16      	ldr	r2, [pc, #88]	@ (8002fec <TIM_Base_SetConfig+0x12c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00f      	beq.n	8002fb8 <TIM_Base_SetConfig+0xf8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a18      	ldr	r2, [pc, #96]	@ (8002ffc <TIM_Base_SetConfig+0x13c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00b      	beq.n	8002fb8 <TIM_Base_SetConfig+0xf8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a17      	ldr	r2, [pc, #92]	@ (8003000 <TIM_Base_SetConfig+0x140>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d007      	beq.n	8002fb8 <TIM_Base_SetConfig+0xf8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a16      	ldr	r2, [pc, #88]	@ (8003004 <TIM_Base_SetConfig+0x144>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <TIM_Base_SetConfig+0xf8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a15      	ldr	r2, [pc, #84]	@ (8003008 <TIM_Base_SetConfig+0x148>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d103      	bne.n	8002fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d105      	bne.n	8002fde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f023 0201 	bic.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	611a      	str	r2, [r3, #16]
  }
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00
 8002ffc:	40013400 	.word	0x40013400
 8003000:	40014000 	.word	0x40014000
 8003004:	40014400 	.word	0x40014400
 8003008:	40014800 	.word	0x40014800

0800300c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f023 0201 	bic.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800303a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f023 0302 	bic.w	r3, r3, #2
 8003058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a2c      	ldr	r2, [pc, #176]	@ (8003118 <TIM_OC1_SetConfig+0x10c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00f      	beq.n	800308c <TIM_OC1_SetConfig+0x80>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a2b      	ldr	r2, [pc, #172]	@ (800311c <TIM_OC1_SetConfig+0x110>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00b      	beq.n	800308c <TIM_OC1_SetConfig+0x80>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a2a      	ldr	r2, [pc, #168]	@ (8003120 <TIM_OC1_SetConfig+0x114>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <TIM_OC1_SetConfig+0x80>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a29      	ldr	r2, [pc, #164]	@ (8003124 <TIM_OC1_SetConfig+0x118>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_OC1_SetConfig+0x80>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a28      	ldr	r2, [pc, #160]	@ (8003128 <TIM_OC1_SetConfig+0x11c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d10c      	bne.n	80030a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f023 0308 	bic.w	r3, r3, #8
 8003092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003118 <TIM_OC1_SetConfig+0x10c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00f      	beq.n	80030ce <TIM_OC1_SetConfig+0xc2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <TIM_OC1_SetConfig+0x110>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00b      	beq.n	80030ce <TIM_OC1_SetConfig+0xc2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a19      	ldr	r2, [pc, #100]	@ (8003120 <TIM_OC1_SetConfig+0x114>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <TIM_OC1_SetConfig+0xc2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a18      	ldr	r2, [pc, #96]	@ (8003124 <TIM_OC1_SetConfig+0x118>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_OC1_SetConfig+0xc2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a17      	ldr	r2, [pc, #92]	@ (8003128 <TIM_OC1_SetConfig+0x11c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d111      	bne.n	80030f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	621a      	str	r2, [r3, #32]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40013400 	.word	0x40013400
 8003120:	40014000 	.word	0x40014000
 8003124:	40014400 	.word	0x40014400
 8003128:	40014800 	.word	0x40014800

0800312c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f023 0210 	bic.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800315a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800315e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f023 0320 	bic.w	r3, r3, #32
 800317a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a28      	ldr	r2, [pc, #160]	@ (800322c <TIM_OC2_SetConfig+0x100>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d003      	beq.n	8003198 <TIM_OC2_SetConfig+0x6c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a27      	ldr	r2, [pc, #156]	@ (8003230 <TIM_OC2_SetConfig+0x104>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d10d      	bne.n	80031b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800319e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a1d      	ldr	r2, [pc, #116]	@ (800322c <TIM_OC2_SetConfig+0x100>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00f      	beq.n	80031dc <TIM_OC2_SetConfig+0xb0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a1c      	ldr	r2, [pc, #112]	@ (8003230 <TIM_OC2_SetConfig+0x104>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00b      	beq.n	80031dc <TIM_OC2_SetConfig+0xb0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003234 <TIM_OC2_SetConfig+0x108>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d007      	beq.n	80031dc <TIM_OC2_SetConfig+0xb0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003238 <TIM_OC2_SetConfig+0x10c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_OC2_SetConfig+0xb0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a19      	ldr	r2, [pc, #100]	@ (800323c <TIM_OC2_SetConfig+0x110>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d113      	bne.n	8003204 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4313      	orrs	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	621a      	str	r2, [r3, #32]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40013400 	.word	0x40013400
 8003234:	40014000 	.word	0x40014000
 8003238:	40014400 	.word	0x40014400
 800323c:	40014800 	.word	0x40014800

08003240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800326e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800328c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a27      	ldr	r2, [pc, #156]	@ (800333c <TIM_OC3_SetConfig+0xfc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_OC3_SetConfig+0x6a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a26      	ldr	r2, [pc, #152]	@ (8003340 <TIM_OC3_SetConfig+0x100>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10d      	bne.n	80032c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1c      	ldr	r2, [pc, #112]	@ (800333c <TIM_OC3_SetConfig+0xfc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00f      	beq.n	80032ee <TIM_OC3_SetConfig+0xae>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003340 <TIM_OC3_SetConfig+0x100>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00b      	beq.n	80032ee <TIM_OC3_SetConfig+0xae>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003344 <TIM_OC3_SetConfig+0x104>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <TIM_OC3_SetConfig+0xae>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a19      	ldr	r2, [pc, #100]	@ (8003348 <TIM_OC3_SetConfig+0x108>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d003      	beq.n	80032ee <TIM_OC3_SetConfig+0xae>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a18      	ldr	r2, [pc, #96]	@ (800334c <TIM_OC3_SetConfig+0x10c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d113      	bne.n	8003316 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	621a      	str	r2, [r3, #32]
}
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40012c00 	.word	0x40012c00
 8003340:	40013400 	.word	0x40013400
 8003344:	40014000 	.word	0x40014000
 8003348:	40014400 	.word	0x40014400
 800334c:	40014800 	.word	0x40014800

08003350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800337e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800338a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800339e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	031b      	lsls	r3, r3, #12
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a18      	ldr	r2, [pc, #96]	@ (8003410 <TIM_OC4_SetConfig+0xc0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d00f      	beq.n	80033d4 <TIM_OC4_SetConfig+0x84>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a17      	ldr	r2, [pc, #92]	@ (8003414 <TIM_OC4_SetConfig+0xc4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00b      	beq.n	80033d4 <TIM_OC4_SetConfig+0x84>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a16      	ldr	r2, [pc, #88]	@ (8003418 <TIM_OC4_SetConfig+0xc8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <TIM_OC4_SetConfig+0x84>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a15      	ldr	r2, [pc, #84]	@ (800341c <TIM_OC4_SetConfig+0xcc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_OC4_SetConfig+0x84>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a14      	ldr	r2, [pc, #80]	@ (8003420 <TIM_OC4_SetConfig+0xd0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d109      	bne.n	80033e8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40013400 	.word	0x40013400
 8003418:	40014000 	.word	0x40014000
 800341c:	40014400 	.word	0x40014400
 8003420:	40014800 	.word	0x40014800

08003424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003468:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a17      	ldr	r2, [pc, #92]	@ (80034d8 <TIM_OC5_SetConfig+0xb4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00f      	beq.n	800349e <TIM_OC5_SetConfig+0x7a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a16      	ldr	r2, [pc, #88]	@ (80034dc <TIM_OC5_SetConfig+0xb8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00b      	beq.n	800349e <TIM_OC5_SetConfig+0x7a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a15      	ldr	r2, [pc, #84]	@ (80034e0 <TIM_OC5_SetConfig+0xbc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d007      	beq.n	800349e <TIM_OC5_SetConfig+0x7a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a14      	ldr	r2, [pc, #80]	@ (80034e4 <TIM_OC5_SetConfig+0xc0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <TIM_OC5_SetConfig+0x7a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a13      	ldr	r2, [pc, #76]	@ (80034e8 <TIM_OC5_SetConfig+0xc4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d109      	bne.n	80034b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	621a      	str	r2, [r3, #32]
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40013400 	.word	0x40013400
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40014800 	.word	0x40014800

080034ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800351a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	051b      	lsls	r3, r3, #20
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a18      	ldr	r2, [pc, #96]	@ (80035a4 <TIM_OC6_SetConfig+0xb8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00f      	beq.n	8003568 <TIM_OC6_SetConfig+0x7c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <TIM_OC6_SetConfig+0xbc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00b      	beq.n	8003568 <TIM_OC6_SetConfig+0x7c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a16      	ldr	r2, [pc, #88]	@ (80035ac <TIM_OC6_SetConfig+0xc0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d007      	beq.n	8003568 <TIM_OC6_SetConfig+0x7c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <TIM_OC6_SetConfig+0xc4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_OC6_SetConfig+0x7c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a14      	ldr	r2, [pc, #80]	@ (80035b4 <TIM_OC6_SetConfig+0xc8>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d109      	bne.n	800357c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	029b      	lsls	r3, r3, #10
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	621a      	str	r2, [r3, #32]
}
 8003596:	bf00      	nop
 8003598:	371c      	adds	r7, #28
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40013400 	.word	0x40013400
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40014400 	.word	0x40014400
 80035b4:	40014800 	.word	0x40014800

080035b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f023 0201 	bic.w	r2, r3, #1
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f023 030a 	bic.w	r3, r3, #10
 80035f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	621a      	str	r2, [r3, #32]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003616:	b480      	push	{r7}
 8003618:	b087      	sub	sp, #28
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f023 0210 	bic.w	r2, r3, #16
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	031b      	lsls	r3, r3, #12
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003652:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800368c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	f043 0307 	orr.w	r3, r3, #7
 8003698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	021a      	lsls	r2, r3, #8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	bf00      	nop
 80036e2:	371c      	adds	r7, #28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2201      	movs	r2, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a1a      	ldr	r2, [r3, #32]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	43db      	mvns	r3, r3
 800370e:	401a      	ands	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1a      	ldr	r2, [r3, #32]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	431a      	orrs	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	621a      	str	r2, [r3, #32]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800374c:	2302      	movs	r3, #2
 800374e:	e068      	b.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2e      	ldr	r2, [pc, #184]	@ (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2d      	ldr	r2, [pc, #180]	@ (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d108      	bne.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800378a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01d      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c2:	d018      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1a      	ldr	r2, [pc, #104]	@ (800383c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00e      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a18      	ldr	r2, [pc, #96]	@ (8003840 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a13      	ldr	r2, [pc, #76]	@ (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a14      	ldr	r2, [pc, #80]	@ (8003844 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10c      	bne.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4313      	orrs	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40013400 	.word	0x40013400
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800
 8003840:	40000c00 	.word	0x40000c00
 8003844:	40014000 	.word	0x40014000

08003848 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <__cvt>:
 8003884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003888:	ec57 6b10 	vmov	r6, r7, d0
 800388c:	2f00      	cmp	r7, #0
 800388e:	460c      	mov	r4, r1
 8003890:	4619      	mov	r1, r3
 8003892:	463b      	mov	r3, r7
 8003894:	bfbb      	ittet	lt
 8003896:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800389a:	461f      	movlt	r7, r3
 800389c:	2300      	movge	r3, #0
 800389e:	232d      	movlt	r3, #45	@ 0x2d
 80038a0:	700b      	strb	r3, [r1, #0]
 80038a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80038a8:	4691      	mov	r9, r2
 80038aa:	f023 0820 	bic.w	r8, r3, #32
 80038ae:	bfbc      	itt	lt
 80038b0:	4632      	movlt	r2, r6
 80038b2:	4616      	movlt	r6, r2
 80038b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038b8:	d005      	beq.n	80038c6 <__cvt+0x42>
 80038ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80038be:	d100      	bne.n	80038c2 <__cvt+0x3e>
 80038c0:	3401      	adds	r4, #1
 80038c2:	2102      	movs	r1, #2
 80038c4:	e000      	b.n	80038c8 <__cvt+0x44>
 80038c6:	2103      	movs	r1, #3
 80038c8:	ab03      	add	r3, sp, #12
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	ab02      	add	r3, sp, #8
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	ec47 6b10 	vmov	d0, r6, r7
 80038d4:	4653      	mov	r3, sl
 80038d6:	4622      	mov	r2, r4
 80038d8:	f000 fe3a 	bl	8004550 <_dtoa_r>
 80038dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80038e0:	4605      	mov	r5, r0
 80038e2:	d119      	bne.n	8003918 <__cvt+0x94>
 80038e4:	f019 0f01 	tst.w	r9, #1
 80038e8:	d00e      	beq.n	8003908 <__cvt+0x84>
 80038ea:	eb00 0904 	add.w	r9, r0, r4
 80038ee:	2200      	movs	r2, #0
 80038f0:	2300      	movs	r3, #0
 80038f2:	4630      	mov	r0, r6
 80038f4:	4639      	mov	r1, r7
 80038f6:	f7fd f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80038fa:	b108      	cbz	r0, 8003900 <__cvt+0x7c>
 80038fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003900:	2230      	movs	r2, #48	@ 0x30
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	454b      	cmp	r3, r9
 8003906:	d31e      	bcc.n	8003946 <__cvt+0xc2>
 8003908:	9b03      	ldr	r3, [sp, #12]
 800390a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800390c:	1b5b      	subs	r3, r3, r5
 800390e:	4628      	mov	r0, r5
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	b004      	add	sp, #16
 8003914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003918:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800391c:	eb00 0904 	add.w	r9, r0, r4
 8003920:	d1e5      	bne.n	80038ee <__cvt+0x6a>
 8003922:	7803      	ldrb	r3, [r0, #0]
 8003924:	2b30      	cmp	r3, #48	@ 0x30
 8003926:	d10a      	bne.n	800393e <__cvt+0xba>
 8003928:	2200      	movs	r2, #0
 800392a:	2300      	movs	r3, #0
 800392c:	4630      	mov	r0, r6
 800392e:	4639      	mov	r1, r7
 8003930:	f7fd f8ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8003934:	b918      	cbnz	r0, 800393e <__cvt+0xba>
 8003936:	f1c4 0401 	rsb	r4, r4, #1
 800393a:	f8ca 4000 	str.w	r4, [sl]
 800393e:	f8da 3000 	ldr.w	r3, [sl]
 8003942:	4499      	add	r9, r3
 8003944:	e7d3      	b.n	80038ee <__cvt+0x6a>
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	9103      	str	r1, [sp, #12]
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e7d9      	b.n	8003902 <__cvt+0x7e>

0800394e <__exponent>:
 800394e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003950:	2900      	cmp	r1, #0
 8003952:	bfba      	itte	lt
 8003954:	4249      	neglt	r1, r1
 8003956:	232d      	movlt	r3, #45	@ 0x2d
 8003958:	232b      	movge	r3, #43	@ 0x2b
 800395a:	2909      	cmp	r1, #9
 800395c:	7002      	strb	r2, [r0, #0]
 800395e:	7043      	strb	r3, [r0, #1]
 8003960:	dd29      	ble.n	80039b6 <__exponent+0x68>
 8003962:	f10d 0307 	add.w	r3, sp, #7
 8003966:	461d      	mov	r5, r3
 8003968:	270a      	movs	r7, #10
 800396a:	461a      	mov	r2, r3
 800396c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003970:	fb07 1416 	mls	r4, r7, r6, r1
 8003974:	3430      	adds	r4, #48	@ 0x30
 8003976:	f802 4c01 	strb.w	r4, [r2, #-1]
 800397a:	460c      	mov	r4, r1
 800397c:	2c63      	cmp	r4, #99	@ 0x63
 800397e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003982:	4631      	mov	r1, r6
 8003984:	dcf1      	bgt.n	800396a <__exponent+0x1c>
 8003986:	3130      	adds	r1, #48	@ 0x30
 8003988:	1e94      	subs	r4, r2, #2
 800398a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800398e:	1c41      	adds	r1, r0, #1
 8003990:	4623      	mov	r3, r4
 8003992:	42ab      	cmp	r3, r5
 8003994:	d30a      	bcc.n	80039ac <__exponent+0x5e>
 8003996:	f10d 0309 	add.w	r3, sp, #9
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	42ac      	cmp	r4, r5
 800399e:	bf88      	it	hi
 80039a0:	2300      	movhi	r3, #0
 80039a2:	3302      	adds	r3, #2
 80039a4:	4403      	add	r3, r0
 80039a6:	1a18      	subs	r0, r3, r0
 80039a8:	b003      	add	sp, #12
 80039aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80039b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80039b4:	e7ed      	b.n	8003992 <__exponent+0x44>
 80039b6:	2330      	movs	r3, #48	@ 0x30
 80039b8:	3130      	adds	r1, #48	@ 0x30
 80039ba:	7083      	strb	r3, [r0, #2]
 80039bc:	70c1      	strb	r1, [r0, #3]
 80039be:	1d03      	adds	r3, r0, #4
 80039c0:	e7f1      	b.n	80039a6 <__exponent+0x58>
	...

080039c4 <_printf_float>:
 80039c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c8:	b08d      	sub	sp, #52	@ 0x34
 80039ca:	460c      	mov	r4, r1
 80039cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80039d0:	4616      	mov	r6, r2
 80039d2:	461f      	mov	r7, r3
 80039d4:	4605      	mov	r5, r0
 80039d6:	f000 fcbb 	bl	8004350 <_localeconv_r>
 80039da:	6803      	ldr	r3, [r0, #0]
 80039dc:	9304      	str	r3, [sp, #16]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fc fc46 	bl	8000270 <strlen>
 80039e4:	2300      	movs	r3, #0
 80039e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80039e8:	f8d8 3000 	ldr.w	r3, [r8]
 80039ec:	9005      	str	r0, [sp, #20]
 80039ee:	3307      	adds	r3, #7
 80039f0:	f023 0307 	bic.w	r3, r3, #7
 80039f4:	f103 0208 	add.w	r2, r3, #8
 80039f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80039fc:	f8d4 b000 	ldr.w	fp, [r4]
 8003a00:	f8c8 2000 	str.w	r2, [r8]
 8003a04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a08:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003a0c:	9307      	str	r3, [sp, #28]
 8003a0e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a1a:	4b9c      	ldr	r3, [pc, #624]	@ (8003c8c <_printf_float+0x2c8>)
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	f7fd f884 	bl	8000b2c <__aeabi_dcmpun>
 8003a24:	bb70      	cbnz	r0, 8003a84 <_printf_float+0xc0>
 8003a26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a2a:	4b98      	ldr	r3, [pc, #608]	@ (8003c8c <_printf_float+0x2c8>)
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	f7fd f85e 	bl	8000af0 <__aeabi_dcmple>
 8003a34:	bb30      	cbnz	r0, 8003a84 <_printf_float+0xc0>
 8003a36:	2200      	movs	r2, #0
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	f7fd f84d 	bl	8000adc <__aeabi_dcmplt>
 8003a42:	b110      	cbz	r0, 8003a4a <_printf_float+0x86>
 8003a44:	232d      	movs	r3, #45	@ 0x2d
 8003a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a4a:	4a91      	ldr	r2, [pc, #580]	@ (8003c90 <_printf_float+0x2cc>)
 8003a4c:	4b91      	ldr	r3, [pc, #580]	@ (8003c94 <_printf_float+0x2d0>)
 8003a4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003a52:	bf94      	ite	ls
 8003a54:	4690      	movls	r8, r2
 8003a56:	4698      	movhi	r8, r3
 8003a58:	2303      	movs	r3, #3
 8003a5a:	6123      	str	r3, [r4, #16]
 8003a5c:	f02b 0304 	bic.w	r3, fp, #4
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	f04f 0900 	mov.w	r9, #0
 8003a66:	9700      	str	r7, [sp, #0]
 8003a68:	4633      	mov	r3, r6
 8003a6a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f000 f9d2 	bl	8003e18 <_printf_common>
 8003a74:	3001      	adds	r0, #1
 8003a76:	f040 808d 	bne.w	8003b94 <_printf_float+0x1d0>
 8003a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7e:	b00d      	add	sp, #52	@ 0x34
 8003a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a84:	4642      	mov	r2, r8
 8003a86:	464b      	mov	r3, r9
 8003a88:	4640      	mov	r0, r8
 8003a8a:	4649      	mov	r1, r9
 8003a8c:	f7fd f84e 	bl	8000b2c <__aeabi_dcmpun>
 8003a90:	b140      	cbz	r0, 8003aa4 <_printf_float+0xe0>
 8003a92:	464b      	mov	r3, r9
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	bfbc      	itt	lt
 8003a98:	232d      	movlt	r3, #45	@ 0x2d
 8003a9a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c98 <_printf_float+0x2d4>)
 8003aa0:	4b7e      	ldr	r3, [pc, #504]	@ (8003c9c <_printf_float+0x2d8>)
 8003aa2:	e7d4      	b.n	8003a4e <_printf_float+0x8a>
 8003aa4:	6863      	ldr	r3, [r4, #4]
 8003aa6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003aaa:	9206      	str	r2, [sp, #24]
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	d13b      	bne.n	8003b28 <_printf_float+0x164>
 8003ab0:	2306      	movs	r3, #6
 8003ab2:	6063      	str	r3, [r4, #4]
 8003ab4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003ab8:	2300      	movs	r3, #0
 8003aba:	6022      	str	r2, [r4, #0]
 8003abc:	9303      	str	r3, [sp, #12]
 8003abe:	ab0a      	add	r3, sp, #40	@ 0x28
 8003ac0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003ac4:	ab09      	add	r3, sp, #36	@ 0x24
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	6861      	ldr	r1, [r4, #4]
 8003aca:	ec49 8b10 	vmov	d0, r8, r9
 8003ace:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f7ff fed6 	bl	8003884 <__cvt>
 8003ad8:	9b06      	ldr	r3, [sp, #24]
 8003ada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003adc:	2b47      	cmp	r3, #71	@ 0x47
 8003ade:	4680      	mov	r8, r0
 8003ae0:	d129      	bne.n	8003b36 <_printf_float+0x172>
 8003ae2:	1cc8      	adds	r0, r1, #3
 8003ae4:	db02      	blt.n	8003aec <_printf_float+0x128>
 8003ae6:	6863      	ldr	r3, [r4, #4]
 8003ae8:	4299      	cmp	r1, r3
 8003aea:	dd41      	ble.n	8003b70 <_printf_float+0x1ac>
 8003aec:	f1aa 0a02 	sub.w	sl, sl, #2
 8003af0:	fa5f fa8a 	uxtb.w	sl, sl
 8003af4:	3901      	subs	r1, #1
 8003af6:	4652      	mov	r2, sl
 8003af8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003afc:	9109      	str	r1, [sp, #36]	@ 0x24
 8003afe:	f7ff ff26 	bl	800394e <__exponent>
 8003b02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003b04:	1813      	adds	r3, r2, r0
 8003b06:	2a01      	cmp	r2, #1
 8003b08:	4681      	mov	r9, r0
 8003b0a:	6123      	str	r3, [r4, #16]
 8003b0c:	dc02      	bgt.n	8003b14 <_printf_float+0x150>
 8003b0e:	6822      	ldr	r2, [r4, #0]
 8003b10:	07d2      	lsls	r2, r2, #31
 8003b12:	d501      	bpl.n	8003b18 <_printf_float+0x154>
 8003b14:	3301      	adds	r3, #1
 8003b16:	6123      	str	r3, [r4, #16]
 8003b18:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0a2      	beq.n	8003a66 <_printf_float+0xa2>
 8003b20:	232d      	movs	r3, #45	@ 0x2d
 8003b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b26:	e79e      	b.n	8003a66 <_printf_float+0xa2>
 8003b28:	9a06      	ldr	r2, [sp, #24]
 8003b2a:	2a47      	cmp	r2, #71	@ 0x47
 8003b2c:	d1c2      	bne.n	8003ab4 <_printf_float+0xf0>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1c0      	bne.n	8003ab4 <_printf_float+0xf0>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e7bd      	b.n	8003ab2 <_printf_float+0xee>
 8003b36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b3a:	d9db      	bls.n	8003af4 <_printf_float+0x130>
 8003b3c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003b40:	d118      	bne.n	8003b74 <_printf_float+0x1b0>
 8003b42:	2900      	cmp	r1, #0
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	dd0b      	ble.n	8003b60 <_printf_float+0x19c>
 8003b48:	6121      	str	r1, [r4, #16]
 8003b4a:	b913      	cbnz	r3, 8003b52 <_printf_float+0x18e>
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	07d0      	lsls	r0, r2, #31
 8003b50:	d502      	bpl.n	8003b58 <_printf_float+0x194>
 8003b52:	3301      	adds	r3, #1
 8003b54:	440b      	add	r3, r1
 8003b56:	6123      	str	r3, [r4, #16]
 8003b58:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003b5a:	f04f 0900 	mov.w	r9, #0
 8003b5e:	e7db      	b.n	8003b18 <_printf_float+0x154>
 8003b60:	b913      	cbnz	r3, 8003b68 <_printf_float+0x1a4>
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	07d2      	lsls	r2, r2, #31
 8003b66:	d501      	bpl.n	8003b6c <_printf_float+0x1a8>
 8003b68:	3302      	adds	r3, #2
 8003b6a:	e7f4      	b.n	8003b56 <_printf_float+0x192>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e7f2      	b.n	8003b56 <_printf_float+0x192>
 8003b70:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003b74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b76:	4299      	cmp	r1, r3
 8003b78:	db05      	blt.n	8003b86 <_printf_float+0x1c2>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	6121      	str	r1, [r4, #16]
 8003b7e:	07d8      	lsls	r0, r3, #31
 8003b80:	d5ea      	bpl.n	8003b58 <_printf_float+0x194>
 8003b82:	1c4b      	adds	r3, r1, #1
 8003b84:	e7e7      	b.n	8003b56 <_printf_float+0x192>
 8003b86:	2900      	cmp	r1, #0
 8003b88:	bfd4      	ite	le
 8003b8a:	f1c1 0202 	rsble	r2, r1, #2
 8003b8e:	2201      	movgt	r2, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	e7e0      	b.n	8003b56 <_printf_float+0x192>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	055a      	lsls	r2, r3, #21
 8003b98:	d407      	bmi.n	8003baa <_printf_float+0x1e6>
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	47b8      	blx	r7
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	d12b      	bne.n	8003c00 <_printf_float+0x23c>
 8003ba8:	e767      	b.n	8003a7a <_printf_float+0xb6>
 8003baa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003bae:	f240 80dd 	bls.w	8003d6c <_printf_float+0x3a8>
 8003bb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f7fc ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d033      	beq.n	8003c2a <_printf_float+0x266>
 8003bc2:	4a37      	ldr	r2, [pc, #220]	@ (8003ca0 <_printf_float+0x2dc>)
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4631      	mov	r1, r6
 8003bc8:	4628      	mov	r0, r5
 8003bca:	47b8      	blx	r7
 8003bcc:	3001      	adds	r0, #1
 8003bce:	f43f af54 	beq.w	8003a7a <_printf_float+0xb6>
 8003bd2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003bd6:	4543      	cmp	r3, r8
 8003bd8:	db02      	blt.n	8003be0 <_printf_float+0x21c>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	07d8      	lsls	r0, r3, #31
 8003bde:	d50f      	bpl.n	8003c00 <_printf_float+0x23c>
 8003be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003be4:	4631      	mov	r1, r6
 8003be6:	4628      	mov	r0, r5
 8003be8:	47b8      	blx	r7
 8003bea:	3001      	adds	r0, #1
 8003bec:	f43f af45 	beq.w	8003a7a <_printf_float+0xb6>
 8003bf0:	f04f 0900 	mov.w	r9, #0
 8003bf4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003bf8:	f104 0a1a 	add.w	sl, r4, #26
 8003bfc:	45c8      	cmp	r8, r9
 8003bfe:	dc09      	bgt.n	8003c14 <_printf_float+0x250>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	079b      	lsls	r3, r3, #30
 8003c04:	f100 8103 	bmi.w	8003e0e <_printf_float+0x44a>
 8003c08:	68e0      	ldr	r0, [r4, #12]
 8003c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003c0c:	4298      	cmp	r0, r3
 8003c0e:	bfb8      	it	lt
 8003c10:	4618      	movlt	r0, r3
 8003c12:	e734      	b.n	8003a7e <_printf_float+0xba>
 8003c14:	2301      	movs	r3, #1
 8003c16:	4652      	mov	r2, sl
 8003c18:	4631      	mov	r1, r6
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	47b8      	blx	r7
 8003c1e:	3001      	adds	r0, #1
 8003c20:	f43f af2b 	beq.w	8003a7a <_printf_float+0xb6>
 8003c24:	f109 0901 	add.w	r9, r9, #1
 8003c28:	e7e8      	b.n	8003bfc <_printf_float+0x238>
 8003c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	dc39      	bgt.n	8003ca4 <_printf_float+0x2e0>
 8003c30:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca0 <_printf_float+0x2dc>)
 8003c32:	2301      	movs	r3, #1
 8003c34:	4631      	mov	r1, r6
 8003c36:	4628      	mov	r0, r5
 8003c38:	47b8      	blx	r7
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	f43f af1d 	beq.w	8003a7a <_printf_float+0xb6>
 8003c40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003c44:	ea59 0303 	orrs.w	r3, r9, r3
 8003c48:	d102      	bne.n	8003c50 <_printf_float+0x28c>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	07d9      	lsls	r1, r3, #31
 8003c4e:	d5d7      	bpl.n	8003c00 <_printf_float+0x23c>
 8003c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c54:	4631      	mov	r1, r6
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b8      	blx	r7
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f43f af0d 	beq.w	8003a7a <_printf_float+0xb6>
 8003c60:	f04f 0a00 	mov.w	sl, #0
 8003c64:	f104 0b1a 	add.w	fp, r4, #26
 8003c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c6a:	425b      	negs	r3, r3
 8003c6c:	4553      	cmp	r3, sl
 8003c6e:	dc01      	bgt.n	8003c74 <_printf_float+0x2b0>
 8003c70:	464b      	mov	r3, r9
 8003c72:	e793      	b.n	8003b9c <_printf_float+0x1d8>
 8003c74:	2301      	movs	r3, #1
 8003c76:	465a      	mov	r2, fp
 8003c78:	4631      	mov	r1, r6
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	47b8      	blx	r7
 8003c7e:	3001      	adds	r0, #1
 8003c80:	f43f aefb 	beq.w	8003a7a <_printf_float+0xb6>
 8003c84:	f10a 0a01 	add.w	sl, sl, #1
 8003c88:	e7ee      	b.n	8003c68 <_printf_float+0x2a4>
 8003c8a:	bf00      	nop
 8003c8c:	7fefffff 	.word	0x7fefffff
 8003c90:	080061d8 	.word	0x080061d8
 8003c94:	080061dc 	.word	0x080061dc
 8003c98:	080061e0 	.word	0x080061e0
 8003c9c:	080061e4 	.word	0x080061e4
 8003ca0:	080061e8 	.word	0x080061e8
 8003ca4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ca6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003caa:	4553      	cmp	r3, sl
 8003cac:	bfa8      	it	ge
 8003cae:	4653      	movge	r3, sl
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	4699      	mov	r9, r3
 8003cb4:	dc36      	bgt.n	8003d24 <_printf_float+0x360>
 8003cb6:	f04f 0b00 	mov.w	fp, #0
 8003cba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cbe:	f104 021a 	add.w	r2, r4, #26
 8003cc2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003cc4:	9306      	str	r3, [sp, #24]
 8003cc6:	eba3 0309 	sub.w	r3, r3, r9
 8003cca:	455b      	cmp	r3, fp
 8003ccc:	dc31      	bgt.n	8003d32 <_printf_float+0x36e>
 8003cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cd0:	459a      	cmp	sl, r3
 8003cd2:	dc3a      	bgt.n	8003d4a <_printf_float+0x386>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	07da      	lsls	r2, r3, #31
 8003cd8:	d437      	bmi.n	8003d4a <_printf_float+0x386>
 8003cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cdc:	ebaa 0903 	sub.w	r9, sl, r3
 8003ce0:	9b06      	ldr	r3, [sp, #24]
 8003ce2:	ebaa 0303 	sub.w	r3, sl, r3
 8003ce6:	4599      	cmp	r9, r3
 8003ce8:	bfa8      	it	ge
 8003cea:	4699      	movge	r9, r3
 8003cec:	f1b9 0f00 	cmp.w	r9, #0
 8003cf0:	dc33      	bgt.n	8003d5a <_printf_float+0x396>
 8003cf2:	f04f 0800 	mov.w	r8, #0
 8003cf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cfa:	f104 0b1a 	add.w	fp, r4, #26
 8003cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d00:	ebaa 0303 	sub.w	r3, sl, r3
 8003d04:	eba3 0309 	sub.w	r3, r3, r9
 8003d08:	4543      	cmp	r3, r8
 8003d0a:	f77f af79 	ble.w	8003c00 <_printf_float+0x23c>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	465a      	mov	r2, fp
 8003d12:	4631      	mov	r1, r6
 8003d14:	4628      	mov	r0, r5
 8003d16:	47b8      	blx	r7
 8003d18:	3001      	adds	r0, #1
 8003d1a:	f43f aeae 	beq.w	8003a7a <_printf_float+0xb6>
 8003d1e:	f108 0801 	add.w	r8, r8, #1
 8003d22:	e7ec      	b.n	8003cfe <_printf_float+0x33a>
 8003d24:	4642      	mov	r2, r8
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	47b8      	blx	r7
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d1c2      	bne.n	8003cb6 <_printf_float+0x2f2>
 8003d30:	e6a3      	b.n	8003a7a <_printf_float+0xb6>
 8003d32:	2301      	movs	r3, #1
 8003d34:	4631      	mov	r1, r6
 8003d36:	4628      	mov	r0, r5
 8003d38:	9206      	str	r2, [sp, #24]
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f43f ae9c 	beq.w	8003a7a <_printf_float+0xb6>
 8003d42:	9a06      	ldr	r2, [sp, #24]
 8003d44:	f10b 0b01 	add.w	fp, fp, #1
 8003d48:	e7bb      	b.n	8003cc2 <_printf_float+0x2fe>
 8003d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d4e:	4631      	mov	r1, r6
 8003d50:	4628      	mov	r0, r5
 8003d52:	47b8      	blx	r7
 8003d54:	3001      	adds	r0, #1
 8003d56:	d1c0      	bne.n	8003cda <_printf_float+0x316>
 8003d58:	e68f      	b.n	8003a7a <_printf_float+0xb6>
 8003d5a:	9a06      	ldr	r2, [sp, #24]
 8003d5c:	464b      	mov	r3, r9
 8003d5e:	4442      	add	r2, r8
 8003d60:	4631      	mov	r1, r6
 8003d62:	4628      	mov	r0, r5
 8003d64:	47b8      	blx	r7
 8003d66:	3001      	adds	r0, #1
 8003d68:	d1c3      	bne.n	8003cf2 <_printf_float+0x32e>
 8003d6a:	e686      	b.n	8003a7a <_printf_float+0xb6>
 8003d6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d70:	f1ba 0f01 	cmp.w	sl, #1
 8003d74:	dc01      	bgt.n	8003d7a <_printf_float+0x3b6>
 8003d76:	07db      	lsls	r3, r3, #31
 8003d78:	d536      	bpl.n	8003de8 <_printf_float+0x424>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4642      	mov	r2, r8
 8003d7e:	4631      	mov	r1, r6
 8003d80:	4628      	mov	r0, r5
 8003d82:	47b8      	blx	r7
 8003d84:	3001      	adds	r0, #1
 8003d86:	f43f ae78 	beq.w	8003a7a <_printf_float+0xb6>
 8003d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4628      	mov	r0, r5
 8003d92:	47b8      	blx	r7
 8003d94:	3001      	adds	r0, #1
 8003d96:	f43f ae70 	beq.w	8003a7a <_printf_float+0xb6>
 8003d9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2300      	movs	r3, #0
 8003da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003da6:	f7fc fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8003daa:	b9c0      	cbnz	r0, 8003dde <_printf_float+0x41a>
 8003dac:	4653      	mov	r3, sl
 8003dae:	f108 0201 	add.w	r2, r8, #1
 8003db2:	4631      	mov	r1, r6
 8003db4:	4628      	mov	r0, r5
 8003db6:	47b8      	blx	r7
 8003db8:	3001      	adds	r0, #1
 8003dba:	d10c      	bne.n	8003dd6 <_printf_float+0x412>
 8003dbc:	e65d      	b.n	8003a7a <_printf_float+0xb6>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	465a      	mov	r2, fp
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b8      	blx	r7
 8003dc8:	3001      	adds	r0, #1
 8003dca:	f43f ae56 	beq.w	8003a7a <_printf_float+0xb6>
 8003dce:	f108 0801 	add.w	r8, r8, #1
 8003dd2:	45d0      	cmp	r8, sl
 8003dd4:	dbf3      	blt.n	8003dbe <_printf_float+0x3fa>
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ddc:	e6df      	b.n	8003b9e <_printf_float+0x1da>
 8003dde:	f04f 0800 	mov.w	r8, #0
 8003de2:	f104 0b1a 	add.w	fp, r4, #26
 8003de6:	e7f4      	b.n	8003dd2 <_printf_float+0x40e>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4642      	mov	r2, r8
 8003dec:	e7e1      	b.n	8003db2 <_printf_float+0x3ee>
 8003dee:	2301      	movs	r3, #1
 8003df0:	464a      	mov	r2, r9
 8003df2:	4631      	mov	r1, r6
 8003df4:	4628      	mov	r0, r5
 8003df6:	47b8      	blx	r7
 8003df8:	3001      	adds	r0, #1
 8003dfa:	f43f ae3e 	beq.w	8003a7a <_printf_float+0xb6>
 8003dfe:	f108 0801 	add.w	r8, r8, #1
 8003e02:	68e3      	ldr	r3, [r4, #12]
 8003e04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003e06:	1a5b      	subs	r3, r3, r1
 8003e08:	4543      	cmp	r3, r8
 8003e0a:	dcf0      	bgt.n	8003dee <_printf_float+0x42a>
 8003e0c:	e6fc      	b.n	8003c08 <_printf_float+0x244>
 8003e0e:	f04f 0800 	mov.w	r8, #0
 8003e12:	f104 0919 	add.w	r9, r4, #25
 8003e16:	e7f4      	b.n	8003e02 <_printf_float+0x43e>

08003e18 <_printf_common>:
 8003e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e1c:	4616      	mov	r6, r2
 8003e1e:	4698      	mov	r8, r3
 8003e20:	688a      	ldr	r2, [r1, #8]
 8003e22:	690b      	ldr	r3, [r1, #16]
 8003e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bfb8      	it	lt
 8003e2c:	4613      	movlt	r3, r2
 8003e2e:	6033      	str	r3, [r6, #0]
 8003e30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e34:	4607      	mov	r7, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	b10a      	cbz	r2, 8003e3e <_printf_common+0x26>
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	6033      	str	r3, [r6, #0]
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	0699      	lsls	r1, r3, #26
 8003e42:	bf42      	ittt	mi
 8003e44:	6833      	ldrmi	r3, [r6, #0]
 8003e46:	3302      	addmi	r3, #2
 8003e48:	6033      	strmi	r3, [r6, #0]
 8003e4a:	6825      	ldr	r5, [r4, #0]
 8003e4c:	f015 0506 	ands.w	r5, r5, #6
 8003e50:	d106      	bne.n	8003e60 <_printf_common+0x48>
 8003e52:	f104 0a19 	add.w	sl, r4, #25
 8003e56:	68e3      	ldr	r3, [r4, #12]
 8003e58:	6832      	ldr	r2, [r6, #0]
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	42ab      	cmp	r3, r5
 8003e5e:	dc26      	bgt.n	8003eae <_printf_common+0x96>
 8003e60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e64:	6822      	ldr	r2, [r4, #0]
 8003e66:	3b00      	subs	r3, #0
 8003e68:	bf18      	it	ne
 8003e6a:	2301      	movne	r3, #1
 8003e6c:	0692      	lsls	r2, r2, #26
 8003e6e:	d42b      	bmi.n	8003ec8 <_printf_common+0xb0>
 8003e70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e74:	4641      	mov	r1, r8
 8003e76:	4638      	mov	r0, r7
 8003e78:	47c8      	blx	r9
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d01e      	beq.n	8003ebc <_printf_common+0xa4>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	6922      	ldr	r2, [r4, #16]
 8003e82:	f003 0306 	and.w	r3, r3, #6
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	bf02      	ittt	eq
 8003e8a:	68e5      	ldreq	r5, [r4, #12]
 8003e8c:	6833      	ldreq	r3, [r6, #0]
 8003e8e:	1aed      	subeq	r5, r5, r3
 8003e90:	68a3      	ldr	r3, [r4, #8]
 8003e92:	bf0c      	ite	eq
 8003e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e98:	2500      	movne	r5, #0
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	bfc4      	itt	gt
 8003e9e:	1a9b      	subgt	r3, r3, r2
 8003ea0:	18ed      	addgt	r5, r5, r3
 8003ea2:	2600      	movs	r6, #0
 8003ea4:	341a      	adds	r4, #26
 8003ea6:	42b5      	cmp	r5, r6
 8003ea8:	d11a      	bne.n	8003ee0 <_printf_common+0xc8>
 8003eaa:	2000      	movs	r0, #0
 8003eac:	e008      	b.n	8003ec0 <_printf_common+0xa8>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	4652      	mov	r2, sl
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	47c8      	blx	r9
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d103      	bne.n	8003ec4 <_printf_common+0xac>
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec4:	3501      	adds	r5, #1
 8003ec6:	e7c6      	b.n	8003e56 <_printf_common+0x3e>
 8003ec8:	18e1      	adds	r1, r4, r3
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	2030      	movs	r0, #48	@ 0x30
 8003ece:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ed2:	4422      	add	r2, r4
 8003ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003edc:	3302      	adds	r3, #2
 8003ede:	e7c7      	b.n	8003e70 <_printf_common+0x58>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	4622      	mov	r2, r4
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	4638      	mov	r0, r7
 8003ee8:	47c8      	blx	r9
 8003eea:	3001      	adds	r0, #1
 8003eec:	d0e6      	beq.n	8003ebc <_printf_common+0xa4>
 8003eee:	3601      	adds	r6, #1
 8003ef0:	e7d9      	b.n	8003ea6 <_printf_common+0x8e>
	...

08003ef4 <_printf_i>:
 8003ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	7e0f      	ldrb	r7, [r1, #24]
 8003efa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003efc:	2f78      	cmp	r7, #120	@ 0x78
 8003efe:	4691      	mov	r9, r2
 8003f00:	4680      	mov	r8, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	469a      	mov	sl, r3
 8003f06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f0a:	d807      	bhi.n	8003f1c <_printf_i+0x28>
 8003f0c:	2f62      	cmp	r7, #98	@ 0x62
 8003f0e:	d80a      	bhi.n	8003f26 <_printf_i+0x32>
 8003f10:	2f00      	cmp	r7, #0
 8003f12:	f000 80d2 	beq.w	80040ba <_printf_i+0x1c6>
 8003f16:	2f58      	cmp	r7, #88	@ 0x58
 8003f18:	f000 80b9 	beq.w	800408e <_printf_i+0x19a>
 8003f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f24:	e03a      	b.n	8003f9c <_printf_i+0xa8>
 8003f26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f2a:	2b15      	cmp	r3, #21
 8003f2c:	d8f6      	bhi.n	8003f1c <_printf_i+0x28>
 8003f2e:	a101      	add	r1, pc, #4	@ (adr r1, 8003f34 <_printf_i+0x40>)
 8003f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f34:	08003f8d 	.word	0x08003f8d
 8003f38:	08003fa1 	.word	0x08003fa1
 8003f3c:	08003f1d 	.word	0x08003f1d
 8003f40:	08003f1d 	.word	0x08003f1d
 8003f44:	08003f1d 	.word	0x08003f1d
 8003f48:	08003f1d 	.word	0x08003f1d
 8003f4c:	08003fa1 	.word	0x08003fa1
 8003f50:	08003f1d 	.word	0x08003f1d
 8003f54:	08003f1d 	.word	0x08003f1d
 8003f58:	08003f1d 	.word	0x08003f1d
 8003f5c:	08003f1d 	.word	0x08003f1d
 8003f60:	080040a1 	.word	0x080040a1
 8003f64:	08003fcb 	.word	0x08003fcb
 8003f68:	0800405b 	.word	0x0800405b
 8003f6c:	08003f1d 	.word	0x08003f1d
 8003f70:	08003f1d 	.word	0x08003f1d
 8003f74:	080040c3 	.word	0x080040c3
 8003f78:	08003f1d 	.word	0x08003f1d
 8003f7c:	08003fcb 	.word	0x08003fcb
 8003f80:	08003f1d 	.word	0x08003f1d
 8003f84:	08003f1d 	.word	0x08003f1d
 8003f88:	08004063 	.word	0x08004063
 8003f8c:	6833      	ldr	r3, [r6, #0]
 8003f8e:	1d1a      	adds	r2, r3, #4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6032      	str	r2, [r6, #0]
 8003f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e09d      	b.n	80040dc <_printf_i+0x1e8>
 8003fa0:	6833      	ldr	r3, [r6, #0]
 8003fa2:	6820      	ldr	r0, [r4, #0]
 8003fa4:	1d19      	adds	r1, r3, #4
 8003fa6:	6031      	str	r1, [r6, #0]
 8003fa8:	0606      	lsls	r6, r0, #24
 8003faa:	d501      	bpl.n	8003fb0 <_printf_i+0xbc>
 8003fac:	681d      	ldr	r5, [r3, #0]
 8003fae:	e003      	b.n	8003fb8 <_printf_i+0xc4>
 8003fb0:	0645      	lsls	r5, r0, #25
 8003fb2:	d5fb      	bpl.n	8003fac <_printf_i+0xb8>
 8003fb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fb8:	2d00      	cmp	r5, #0
 8003fba:	da03      	bge.n	8003fc4 <_printf_i+0xd0>
 8003fbc:	232d      	movs	r3, #45	@ 0x2d
 8003fbe:	426d      	negs	r5, r5
 8003fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fc4:	4859      	ldr	r0, [pc, #356]	@ (800412c <_printf_i+0x238>)
 8003fc6:	230a      	movs	r3, #10
 8003fc8:	e011      	b.n	8003fee <_printf_i+0xfa>
 8003fca:	6821      	ldr	r1, [r4, #0]
 8003fcc:	6833      	ldr	r3, [r6, #0]
 8003fce:	0608      	lsls	r0, r1, #24
 8003fd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fd4:	d402      	bmi.n	8003fdc <_printf_i+0xe8>
 8003fd6:	0649      	lsls	r1, r1, #25
 8003fd8:	bf48      	it	mi
 8003fda:	b2ad      	uxthmi	r5, r5
 8003fdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fde:	4853      	ldr	r0, [pc, #332]	@ (800412c <_printf_i+0x238>)
 8003fe0:	6033      	str	r3, [r6, #0]
 8003fe2:	bf14      	ite	ne
 8003fe4:	230a      	movne	r3, #10
 8003fe6:	2308      	moveq	r3, #8
 8003fe8:	2100      	movs	r1, #0
 8003fea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fee:	6866      	ldr	r6, [r4, #4]
 8003ff0:	60a6      	str	r6, [r4, #8]
 8003ff2:	2e00      	cmp	r6, #0
 8003ff4:	bfa2      	ittt	ge
 8003ff6:	6821      	ldrge	r1, [r4, #0]
 8003ff8:	f021 0104 	bicge.w	r1, r1, #4
 8003ffc:	6021      	strge	r1, [r4, #0]
 8003ffe:	b90d      	cbnz	r5, 8004004 <_printf_i+0x110>
 8004000:	2e00      	cmp	r6, #0
 8004002:	d04b      	beq.n	800409c <_printf_i+0x1a8>
 8004004:	4616      	mov	r6, r2
 8004006:	fbb5 f1f3 	udiv	r1, r5, r3
 800400a:	fb03 5711 	mls	r7, r3, r1, r5
 800400e:	5dc7      	ldrb	r7, [r0, r7]
 8004010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004014:	462f      	mov	r7, r5
 8004016:	42bb      	cmp	r3, r7
 8004018:	460d      	mov	r5, r1
 800401a:	d9f4      	bls.n	8004006 <_printf_i+0x112>
 800401c:	2b08      	cmp	r3, #8
 800401e:	d10b      	bne.n	8004038 <_printf_i+0x144>
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	07df      	lsls	r7, r3, #31
 8004024:	d508      	bpl.n	8004038 <_printf_i+0x144>
 8004026:	6923      	ldr	r3, [r4, #16]
 8004028:	6861      	ldr	r1, [r4, #4]
 800402a:	4299      	cmp	r1, r3
 800402c:	bfde      	ittt	le
 800402e:	2330      	movle	r3, #48	@ 0x30
 8004030:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004034:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004038:	1b92      	subs	r2, r2, r6
 800403a:	6122      	str	r2, [r4, #16]
 800403c:	f8cd a000 	str.w	sl, [sp]
 8004040:	464b      	mov	r3, r9
 8004042:	aa03      	add	r2, sp, #12
 8004044:	4621      	mov	r1, r4
 8004046:	4640      	mov	r0, r8
 8004048:	f7ff fee6 	bl	8003e18 <_printf_common>
 800404c:	3001      	adds	r0, #1
 800404e:	d14a      	bne.n	80040e6 <_printf_i+0x1f2>
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	b004      	add	sp, #16
 8004056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	f043 0320 	orr.w	r3, r3, #32
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	4833      	ldr	r0, [pc, #204]	@ (8004130 <_printf_i+0x23c>)
 8004064:	2778      	movs	r7, #120	@ 0x78
 8004066:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	6831      	ldr	r1, [r6, #0]
 800406e:	061f      	lsls	r7, r3, #24
 8004070:	f851 5b04 	ldr.w	r5, [r1], #4
 8004074:	d402      	bmi.n	800407c <_printf_i+0x188>
 8004076:	065f      	lsls	r7, r3, #25
 8004078:	bf48      	it	mi
 800407a:	b2ad      	uxthmi	r5, r5
 800407c:	6031      	str	r1, [r6, #0]
 800407e:	07d9      	lsls	r1, r3, #31
 8004080:	bf44      	itt	mi
 8004082:	f043 0320 	orrmi.w	r3, r3, #32
 8004086:	6023      	strmi	r3, [r4, #0]
 8004088:	b11d      	cbz	r5, 8004092 <_printf_i+0x19e>
 800408a:	2310      	movs	r3, #16
 800408c:	e7ac      	b.n	8003fe8 <_printf_i+0xf4>
 800408e:	4827      	ldr	r0, [pc, #156]	@ (800412c <_printf_i+0x238>)
 8004090:	e7e9      	b.n	8004066 <_printf_i+0x172>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	f023 0320 	bic.w	r3, r3, #32
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	e7f6      	b.n	800408a <_printf_i+0x196>
 800409c:	4616      	mov	r6, r2
 800409e:	e7bd      	b.n	800401c <_printf_i+0x128>
 80040a0:	6833      	ldr	r3, [r6, #0]
 80040a2:	6825      	ldr	r5, [r4, #0]
 80040a4:	6961      	ldr	r1, [r4, #20]
 80040a6:	1d18      	adds	r0, r3, #4
 80040a8:	6030      	str	r0, [r6, #0]
 80040aa:	062e      	lsls	r6, r5, #24
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	d501      	bpl.n	80040b4 <_printf_i+0x1c0>
 80040b0:	6019      	str	r1, [r3, #0]
 80040b2:	e002      	b.n	80040ba <_printf_i+0x1c6>
 80040b4:	0668      	lsls	r0, r5, #25
 80040b6:	d5fb      	bpl.n	80040b0 <_printf_i+0x1bc>
 80040b8:	8019      	strh	r1, [r3, #0]
 80040ba:	2300      	movs	r3, #0
 80040bc:	6123      	str	r3, [r4, #16]
 80040be:	4616      	mov	r6, r2
 80040c0:	e7bc      	b.n	800403c <_printf_i+0x148>
 80040c2:	6833      	ldr	r3, [r6, #0]
 80040c4:	1d1a      	adds	r2, r3, #4
 80040c6:	6032      	str	r2, [r6, #0]
 80040c8:	681e      	ldr	r6, [r3, #0]
 80040ca:	6862      	ldr	r2, [r4, #4]
 80040cc:	2100      	movs	r1, #0
 80040ce:	4630      	mov	r0, r6
 80040d0:	f7fc f87e 	bl	80001d0 <memchr>
 80040d4:	b108      	cbz	r0, 80040da <_printf_i+0x1e6>
 80040d6:	1b80      	subs	r0, r0, r6
 80040d8:	6060      	str	r0, [r4, #4]
 80040da:	6863      	ldr	r3, [r4, #4]
 80040dc:	6123      	str	r3, [r4, #16]
 80040de:	2300      	movs	r3, #0
 80040e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040e4:	e7aa      	b.n	800403c <_printf_i+0x148>
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	4632      	mov	r2, r6
 80040ea:	4649      	mov	r1, r9
 80040ec:	4640      	mov	r0, r8
 80040ee:	47d0      	blx	sl
 80040f0:	3001      	adds	r0, #1
 80040f2:	d0ad      	beq.n	8004050 <_printf_i+0x15c>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	079b      	lsls	r3, r3, #30
 80040f8:	d413      	bmi.n	8004122 <_printf_i+0x22e>
 80040fa:	68e0      	ldr	r0, [r4, #12]
 80040fc:	9b03      	ldr	r3, [sp, #12]
 80040fe:	4298      	cmp	r0, r3
 8004100:	bfb8      	it	lt
 8004102:	4618      	movlt	r0, r3
 8004104:	e7a6      	b.n	8004054 <_printf_i+0x160>
 8004106:	2301      	movs	r3, #1
 8004108:	4632      	mov	r2, r6
 800410a:	4649      	mov	r1, r9
 800410c:	4640      	mov	r0, r8
 800410e:	47d0      	blx	sl
 8004110:	3001      	adds	r0, #1
 8004112:	d09d      	beq.n	8004050 <_printf_i+0x15c>
 8004114:	3501      	adds	r5, #1
 8004116:	68e3      	ldr	r3, [r4, #12]
 8004118:	9903      	ldr	r1, [sp, #12]
 800411a:	1a5b      	subs	r3, r3, r1
 800411c:	42ab      	cmp	r3, r5
 800411e:	dcf2      	bgt.n	8004106 <_printf_i+0x212>
 8004120:	e7eb      	b.n	80040fa <_printf_i+0x206>
 8004122:	2500      	movs	r5, #0
 8004124:	f104 0619 	add.w	r6, r4, #25
 8004128:	e7f5      	b.n	8004116 <_printf_i+0x222>
 800412a:	bf00      	nop
 800412c:	080061ea 	.word	0x080061ea
 8004130:	080061fb 	.word	0x080061fb

08004134 <std>:
 8004134:	2300      	movs	r3, #0
 8004136:	b510      	push	{r4, lr}
 8004138:	4604      	mov	r4, r0
 800413a:	e9c0 3300 	strd	r3, r3, [r0]
 800413e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004142:	6083      	str	r3, [r0, #8]
 8004144:	8181      	strh	r1, [r0, #12]
 8004146:	6643      	str	r3, [r0, #100]	@ 0x64
 8004148:	81c2      	strh	r2, [r0, #14]
 800414a:	6183      	str	r3, [r0, #24]
 800414c:	4619      	mov	r1, r3
 800414e:	2208      	movs	r2, #8
 8004150:	305c      	adds	r0, #92	@ 0x5c
 8004152:	f000 f8f4 	bl	800433e <memset>
 8004156:	4b0d      	ldr	r3, [pc, #52]	@ (800418c <std+0x58>)
 8004158:	6263      	str	r3, [r4, #36]	@ 0x24
 800415a:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <std+0x5c>)
 800415c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <std+0x60>)
 8004160:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004162:	4b0d      	ldr	r3, [pc, #52]	@ (8004198 <std+0x64>)
 8004164:	6323      	str	r3, [r4, #48]	@ 0x30
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <std+0x68>)
 8004168:	6224      	str	r4, [r4, #32]
 800416a:	429c      	cmp	r4, r3
 800416c:	d006      	beq.n	800417c <std+0x48>
 800416e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004172:	4294      	cmp	r4, r2
 8004174:	d002      	beq.n	800417c <std+0x48>
 8004176:	33d0      	adds	r3, #208	@ 0xd0
 8004178:	429c      	cmp	r4, r3
 800417a:	d105      	bne.n	8004188 <std+0x54>
 800417c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004184:	f000 b958 	b.w	8004438 <__retarget_lock_init_recursive>
 8004188:	bd10      	pop	{r4, pc}
 800418a:	bf00      	nop
 800418c:	080042b9 	.word	0x080042b9
 8004190:	080042db 	.word	0x080042db
 8004194:	08004313 	.word	0x08004313
 8004198:	08004337 	.word	0x08004337
 800419c:	2000024c 	.word	0x2000024c

080041a0 <stdio_exit_handler>:
 80041a0:	4a02      	ldr	r2, [pc, #8]	@ (80041ac <stdio_exit_handler+0xc>)
 80041a2:	4903      	ldr	r1, [pc, #12]	@ (80041b0 <stdio_exit_handler+0x10>)
 80041a4:	4803      	ldr	r0, [pc, #12]	@ (80041b4 <stdio_exit_handler+0x14>)
 80041a6:	f000 b869 	b.w	800427c <_fwalk_sglue>
 80041aa:	bf00      	nop
 80041ac:	20000010 	.word	0x20000010
 80041b0:	08005ae5 	.word	0x08005ae5
 80041b4:	20000020 	.word	0x20000020

080041b8 <cleanup_stdio>:
 80041b8:	6841      	ldr	r1, [r0, #4]
 80041ba:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <cleanup_stdio+0x34>)
 80041bc:	4299      	cmp	r1, r3
 80041be:	b510      	push	{r4, lr}
 80041c0:	4604      	mov	r4, r0
 80041c2:	d001      	beq.n	80041c8 <cleanup_stdio+0x10>
 80041c4:	f001 fc8e 	bl	8005ae4 <_fflush_r>
 80041c8:	68a1      	ldr	r1, [r4, #8]
 80041ca:	4b09      	ldr	r3, [pc, #36]	@ (80041f0 <cleanup_stdio+0x38>)
 80041cc:	4299      	cmp	r1, r3
 80041ce:	d002      	beq.n	80041d6 <cleanup_stdio+0x1e>
 80041d0:	4620      	mov	r0, r4
 80041d2:	f001 fc87 	bl	8005ae4 <_fflush_r>
 80041d6:	68e1      	ldr	r1, [r4, #12]
 80041d8:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <cleanup_stdio+0x3c>)
 80041da:	4299      	cmp	r1, r3
 80041dc:	d004      	beq.n	80041e8 <cleanup_stdio+0x30>
 80041de:	4620      	mov	r0, r4
 80041e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e4:	f001 bc7e 	b.w	8005ae4 <_fflush_r>
 80041e8:	bd10      	pop	{r4, pc}
 80041ea:	bf00      	nop
 80041ec:	2000024c 	.word	0x2000024c
 80041f0:	200002b4 	.word	0x200002b4
 80041f4:	2000031c 	.word	0x2000031c

080041f8 <global_stdio_init.part.0>:
 80041f8:	b510      	push	{r4, lr}
 80041fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004228 <global_stdio_init.part.0+0x30>)
 80041fc:	4c0b      	ldr	r4, [pc, #44]	@ (800422c <global_stdio_init.part.0+0x34>)
 80041fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004230 <global_stdio_init.part.0+0x38>)
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	4620      	mov	r0, r4
 8004204:	2200      	movs	r2, #0
 8004206:	2104      	movs	r1, #4
 8004208:	f7ff ff94 	bl	8004134 <std>
 800420c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004210:	2201      	movs	r2, #1
 8004212:	2109      	movs	r1, #9
 8004214:	f7ff ff8e 	bl	8004134 <std>
 8004218:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800421c:	2202      	movs	r2, #2
 800421e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004222:	2112      	movs	r1, #18
 8004224:	f7ff bf86 	b.w	8004134 <std>
 8004228:	20000384 	.word	0x20000384
 800422c:	2000024c 	.word	0x2000024c
 8004230:	080041a1 	.word	0x080041a1

08004234 <__sfp_lock_acquire>:
 8004234:	4801      	ldr	r0, [pc, #4]	@ (800423c <__sfp_lock_acquire+0x8>)
 8004236:	f000 b900 	b.w	800443a <__retarget_lock_acquire_recursive>
 800423a:	bf00      	nop
 800423c:	2000038d 	.word	0x2000038d

08004240 <__sfp_lock_release>:
 8004240:	4801      	ldr	r0, [pc, #4]	@ (8004248 <__sfp_lock_release+0x8>)
 8004242:	f000 b8fb 	b.w	800443c <__retarget_lock_release_recursive>
 8004246:	bf00      	nop
 8004248:	2000038d 	.word	0x2000038d

0800424c <__sinit>:
 800424c:	b510      	push	{r4, lr}
 800424e:	4604      	mov	r4, r0
 8004250:	f7ff fff0 	bl	8004234 <__sfp_lock_acquire>
 8004254:	6a23      	ldr	r3, [r4, #32]
 8004256:	b11b      	cbz	r3, 8004260 <__sinit+0x14>
 8004258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800425c:	f7ff bff0 	b.w	8004240 <__sfp_lock_release>
 8004260:	4b04      	ldr	r3, [pc, #16]	@ (8004274 <__sinit+0x28>)
 8004262:	6223      	str	r3, [r4, #32]
 8004264:	4b04      	ldr	r3, [pc, #16]	@ (8004278 <__sinit+0x2c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f5      	bne.n	8004258 <__sinit+0xc>
 800426c:	f7ff ffc4 	bl	80041f8 <global_stdio_init.part.0>
 8004270:	e7f2      	b.n	8004258 <__sinit+0xc>
 8004272:	bf00      	nop
 8004274:	080041b9 	.word	0x080041b9
 8004278:	20000384 	.word	0x20000384

0800427c <_fwalk_sglue>:
 800427c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004280:	4607      	mov	r7, r0
 8004282:	4688      	mov	r8, r1
 8004284:	4614      	mov	r4, r2
 8004286:	2600      	movs	r6, #0
 8004288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800428c:	f1b9 0901 	subs.w	r9, r9, #1
 8004290:	d505      	bpl.n	800429e <_fwalk_sglue+0x22>
 8004292:	6824      	ldr	r4, [r4, #0]
 8004294:	2c00      	cmp	r4, #0
 8004296:	d1f7      	bne.n	8004288 <_fwalk_sglue+0xc>
 8004298:	4630      	mov	r0, r6
 800429a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800429e:	89ab      	ldrh	r3, [r5, #12]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d907      	bls.n	80042b4 <_fwalk_sglue+0x38>
 80042a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042a8:	3301      	adds	r3, #1
 80042aa:	d003      	beq.n	80042b4 <_fwalk_sglue+0x38>
 80042ac:	4629      	mov	r1, r5
 80042ae:	4638      	mov	r0, r7
 80042b0:	47c0      	blx	r8
 80042b2:	4306      	orrs	r6, r0
 80042b4:	3568      	adds	r5, #104	@ 0x68
 80042b6:	e7e9      	b.n	800428c <_fwalk_sglue+0x10>

080042b8 <__sread>:
 80042b8:	b510      	push	{r4, lr}
 80042ba:	460c      	mov	r4, r1
 80042bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c0:	f000 f86c 	bl	800439c <_read_r>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	bfab      	itete	ge
 80042c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042ca:	89a3      	ldrhlt	r3, [r4, #12]
 80042cc:	181b      	addge	r3, r3, r0
 80042ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042d2:	bfac      	ite	ge
 80042d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042d6:	81a3      	strhlt	r3, [r4, #12]
 80042d8:	bd10      	pop	{r4, pc}

080042da <__swrite>:
 80042da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042de:	461f      	mov	r7, r3
 80042e0:	898b      	ldrh	r3, [r1, #12]
 80042e2:	05db      	lsls	r3, r3, #23
 80042e4:	4605      	mov	r5, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	4616      	mov	r6, r2
 80042ea:	d505      	bpl.n	80042f8 <__swrite+0x1e>
 80042ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f0:	2302      	movs	r3, #2
 80042f2:	2200      	movs	r2, #0
 80042f4:	f000 f840 	bl	8004378 <_lseek_r>
 80042f8:	89a3      	ldrh	r3, [r4, #12]
 80042fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	4632      	mov	r2, r6
 8004306:	463b      	mov	r3, r7
 8004308:	4628      	mov	r0, r5
 800430a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800430e:	f000 b857 	b.w	80043c0 <_write_r>

08004312 <__sseek>:
 8004312:	b510      	push	{r4, lr}
 8004314:	460c      	mov	r4, r1
 8004316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431a:	f000 f82d 	bl	8004378 <_lseek_r>
 800431e:	1c43      	adds	r3, r0, #1
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	bf15      	itete	ne
 8004324:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004326:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800432a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800432e:	81a3      	strheq	r3, [r4, #12]
 8004330:	bf18      	it	ne
 8004332:	81a3      	strhne	r3, [r4, #12]
 8004334:	bd10      	pop	{r4, pc}

08004336 <__sclose>:
 8004336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433a:	f000 b80d 	b.w	8004358 <_close_r>

0800433e <memset>:
 800433e:	4402      	add	r2, r0
 8004340:	4603      	mov	r3, r0
 8004342:	4293      	cmp	r3, r2
 8004344:	d100      	bne.n	8004348 <memset+0xa>
 8004346:	4770      	bx	lr
 8004348:	f803 1b01 	strb.w	r1, [r3], #1
 800434c:	e7f9      	b.n	8004342 <memset+0x4>
	...

08004350 <_localeconv_r>:
 8004350:	4800      	ldr	r0, [pc, #0]	@ (8004354 <_localeconv_r+0x4>)
 8004352:	4770      	bx	lr
 8004354:	2000015c 	.word	0x2000015c

08004358 <_close_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4d06      	ldr	r5, [pc, #24]	@ (8004374 <_close_r+0x1c>)
 800435c:	2300      	movs	r3, #0
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	f7fc fe6c 	bl	8001040 <_close>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_close_r+0x1a>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	b103      	cbz	r3, 8004372 <_close_r+0x1a>
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	20000388 	.word	0x20000388

08004378 <_lseek_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4d07      	ldr	r5, [pc, #28]	@ (8004398 <_lseek_r+0x20>)
 800437c:	4604      	mov	r4, r0
 800437e:	4608      	mov	r0, r1
 8004380:	4611      	mov	r1, r2
 8004382:	2200      	movs	r2, #0
 8004384:	602a      	str	r2, [r5, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	f7fc fe81 	bl	800108e <_lseek>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_lseek_r+0x1e>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b103      	cbz	r3, 8004396 <_lseek_r+0x1e>
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	20000388 	.word	0x20000388

0800439c <_read_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	4d07      	ldr	r5, [pc, #28]	@ (80043bc <_read_r+0x20>)
 80043a0:	4604      	mov	r4, r0
 80043a2:	4608      	mov	r0, r1
 80043a4:	4611      	mov	r1, r2
 80043a6:	2200      	movs	r2, #0
 80043a8:	602a      	str	r2, [r5, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	f7fc fe0f 	bl	8000fce <_read>
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d102      	bne.n	80043ba <_read_r+0x1e>
 80043b4:	682b      	ldr	r3, [r5, #0]
 80043b6:	b103      	cbz	r3, 80043ba <_read_r+0x1e>
 80043b8:	6023      	str	r3, [r4, #0]
 80043ba:	bd38      	pop	{r3, r4, r5, pc}
 80043bc:	20000388 	.word	0x20000388

080043c0 <_write_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4d07      	ldr	r5, [pc, #28]	@ (80043e0 <_write_r+0x20>)
 80043c4:	4604      	mov	r4, r0
 80043c6:	4608      	mov	r0, r1
 80043c8:	4611      	mov	r1, r2
 80043ca:	2200      	movs	r2, #0
 80043cc:	602a      	str	r2, [r5, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	f7fc fe1a 	bl	8001008 <_write>
 80043d4:	1c43      	adds	r3, r0, #1
 80043d6:	d102      	bne.n	80043de <_write_r+0x1e>
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	b103      	cbz	r3, 80043de <_write_r+0x1e>
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	20000388 	.word	0x20000388

080043e4 <__errno>:
 80043e4:	4b01      	ldr	r3, [pc, #4]	@ (80043ec <__errno+0x8>)
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	2000001c 	.word	0x2000001c

080043f0 <__libc_init_array>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4d0d      	ldr	r5, [pc, #52]	@ (8004428 <__libc_init_array+0x38>)
 80043f4:	4c0d      	ldr	r4, [pc, #52]	@ (800442c <__libc_init_array+0x3c>)
 80043f6:	1b64      	subs	r4, r4, r5
 80043f8:	10a4      	asrs	r4, r4, #2
 80043fa:	2600      	movs	r6, #0
 80043fc:	42a6      	cmp	r6, r4
 80043fe:	d109      	bne.n	8004414 <__libc_init_array+0x24>
 8004400:	4d0b      	ldr	r5, [pc, #44]	@ (8004430 <__libc_init_array+0x40>)
 8004402:	4c0c      	ldr	r4, [pc, #48]	@ (8004434 <__libc_init_array+0x44>)
 8004404:	f001 febc 	bl	8006180 <_init>
 8004408:	1b64      	subs	r4, r4, r5
 800440a:	10a4      	asrs	r4, r4, #2
 800440c:	2600      	movs	r6, #0
 800440e:	42a6      	cmp	r6, r4
 8004410:	d105      	bne.n	800441e <__libc_init_array+0x2e>
 8004412:	bd70      	pop	{r4, r5, r6, pc}
 8004414:	f855 3b04 	ldr.w	r3, [r5], #4
 8004418:	4798      	blx	r3
 800441a:	3601      	adds	r6, #1
 800441c:	e7ee      	b.n	80043fc <__libc_init_array+0xc>
 800441e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004422:	4798      	blx	r3
 8004424:	3601      	adds	r6, #1
 8004426:	e7f2      	b.n	800440e <__libc_init_array+0x1e>
 8004428:	08006550 	.word	0x08006550
 800442c:	08006550 	.word	0x08006550
 8004430:	08006550 	.word	0x08006550
 8004434:	08006554 	.word	0x08006554

08004438 <__retarget_lock_init_recursive>:
 8004438:	4770      	bx	lr

0800443a <__retarget_lock_acquire_recursive>:
 800443a:	4770      	bx	lr

0800443c <__retarget_lock_release_recursive>:
 800443c:	4770      	bx	lr

0800443e <quorem>:
 800443e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004442:	6903      	ldr	r3, [r0, #16]
 8004444:	690c      	ldr	r4, [r1, #16]
 8004446:	42a3      	cmp	r3, r4
 8004448:	4607      	mov	r7, r0
 800444a:	db7e      	blt.n	800454a <quorem+0x10c>
 800444c:	3c01      	subs	r4, #1
 800444e:	f101 0814 	add.w	r8, r1, #20
 8004452:	00a3      	lsls	r3, r4, #2
 8004454:	f100 0514 	add.w	r5, r0, #20
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004468:	3301      	adds	r3, #1
 800446a:	429a      	cmp	r2, r3
 800446c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004470:	fbb2 f6f3 	udiv	r6, r2, r3
 8004474:	d32e      	bcc.n	80044d4 <quorem+0x96>
 8004476:	f04f 0a00 	mov.w	sl, #0
 800447a:	46c4      	mov	ip, r8
 800447c:	46ae      	mov	lr, r5
 800447e:	46d3      	mov	fp, sl
 8004480:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004484:	b298      	uxth	r0, r3
 8004486:	fb06 a000 	mla	r0, r6, r0, sl
 800448a:	0c02      	lsrs	r2, r0, #16
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	fb06 2303 	mla	r3, r6, r3, r2
 8004492:	f8de 2000 	ldr.w	r2, [lr]
 8004496:	b280      	uxth	r0, r0
 8004498:	b292      	uxth	r2, r2
 800449a:	1a12      	subs	r2, r2, r0
 800449c:	445a      	add	r2, fp
 800449e:	f8de 0000 	ldr.w	r0, [lr]
 80044a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80044ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80044b0:	b292      	uxth	r2, r2
 80044b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80044b6:	45e1      	cmp	r9, ip
 80044b8:	f84e 2b04 	str.w	r2, [lr], #4
 80044bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80044c0:	d2de      	bcs.n	8004480 <quorem+0x42>
 80044c2:	9b00      	ldr	r3, [sp, #0]
 80044c4:	58eb      	ldr	r3, [r5, r3]
 80044c6:	b92b      	cbnz	r3, 80044d4 <quorem+0x96>
 80044c8:	9b01      	ldr	r3, [sp, #4]
 80044ca:	3b04      	subs	r3, #4
 80044cc:	429d      	cmp	r5, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	d32f      	bcc.n	8004532 <quorem+0xf4>
 80044d2:	613c      	str	r4, [r7, #16]
 80044d4:	4638      	mov	r0, r7
 80044d6:	f001 f979 	bl	80057cc <__mcmp>
 80044da:	2800      	cmp	r0, #0
 80044dc:	db25      	blt.n	800452a <quorem+0xec>
 80044de:	4629      	mov	r1, r5
 80044e0:	2000      	movs	r0, #0
 80044e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80044e6:	f8d1 c000 	ldr.w	ip, [r1]
 80044ea:	fa1f fe82 	uxth.w	lr, r2
 80044ee:	fa1f f38c 	uxth.w	r3, ip
 80044f2:	eba3 030e 	sub.w	r3, r3, lr
 80044f6:	4403      	add	r3, r0
 80044f8:	0c12      	lsrs	r2, r2, #16
 80044fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80044fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004502:	b29b      	uxth	r3, r3
 8004504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004508:	45c1      	cmp	r9, r8
 800450a:	f841 3b04 	str.w	r3, [r1], #4
 800450e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004512:	d2e6      	bcs.n	80044e2 <quorem+0xa4>
 8004514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004518:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800451c:	b922      	cbnz	r2, 8004528 <quorem+0xea>
 800451e:	3b04      	subs	r3, #4
 8004520:	429d      	cmp	r5, r3
 8004522:	461a      	mov	r2, r3
 8004524:	d30b      	bcc.n	800453e <quorem+0x100>
 8004526:	613c      	str	r4, [r7, #16]
 8004528:	3601      	adds	r6, #1
 800452a:	4630      	mov	r0, r6
 800452c:	b003      	add	sp, #12
 800452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	3b04      	subs	r3, #4
 8004536:	2a00      	cmp	r2, #0
 8004538:	d1cb      	bne.n	80044d2 <quorem+0x94>
 800453a:	3c01      	subs	r4, #1
 800453c:	e7c6      	b.n	80044cc <quorem+0x8e>
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	3b04      	subs	r3, #4
 8004542:	2a00      	cmp	r2, #0
 8004544:	d1ef      	bne.n	8004526 <quorem+0xe8>
 8004546:	3c01      	subs	r4, #1
 8004548:	e7ea      	b.n	8004520 <quorem+0xe2>
 800454a:	2000      	movs	r0, #0
 800454c:	e7ee      	b.n	800452c <quorem+0xee>
	...

08004550 <_dtoa_r>:
 8004550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	69c7      	ldr	r7, [r0, #28]
 8004556:	b099      	sub	sp, #100	@ 0x64
 8004558:	ed8d 0b02 	vstr	d0, [sp, #8]
 800455c:	ec55 4b10 	vmov	r4, r5, d0
 8004560:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004562:	9109      	str	r1, [sp, #36]	@ 0x24
 8004564:	4683      	mov	fp, r0
 8004566:	920e      	str	r2, [sp, #56]	@ 0x38
 8004568:	9313      	str	r3, [sp, #76]	@ 0x4c
 800456a:	b97f      	cbnz	r7, 800458c <_dtoa_r+0x3c>
 800456c:	2010      	movs	r0, #16
 800456e:	f000 fdfd 	bl	800516c <malloc>
 8004572:	4602      	mov	r2, r0
 8004574:	f8cb 001c 	str.w	r0, [fp, #28]
 8004578:	b920      	cbnz	r0, 8004584 <_dtoa_r+0x34>
 800457a:	4ba7      	ldr	r3, [pc, #668]	@ (8004818 <_dtoa_r+0x2c8>)
 800457c:	21ef      	movs	r1, #239	@ 0xef
 800457e:	48a7      	ldr	r0, [pc, #668]	@ (800481c <_dtoa_r+0x2cc>)
 8004580:	f001 faf6 	bl	8005b70 <__assert_func>
 8004584:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004588:	6007      	str	r7, [r0, #0]
 800458a:	60c7      	str	r7, [r0, #12]
 800458c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004590:	6819      	ldr	r1, [r3, #0]
 8004592:	b159      	cbz	r1, 80045ac <_dtoa_r+0x5c>
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	604a      	str	r2, [r1, #4]
 8004598:	2301      	movs	r3, #1
 800459a:	4093      	lsls	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
 800459e:	4658      	mov	r0, fp
 80045a0:	f000 feda 	bl	8005358 <_Bfree>
 80045a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	1e2b      	subs	r3, r5, #0
 80045ae:	bfb9      	ittee	lt
 80045b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80045b4:	9303      	strlt	r3, [sp, #12]
 80045b6:	2300      	movge	r3, #0
 80045b8:	6033      	strge	r3, [r6, #0]
 80045ba:	9f03      	ldr	r7, [sp, #12]
 80045bc:	4b98      	ldr	r3, [pc, #608]	@ (8004820 <_dtoa_r+0x2d0>)
 80045be:	bfbc      	itt	lt
 80045c0:	2201      	movlt	r2, #1
 80045c2:	6032      	strlt	r2, [r6, #0]
 80045c4:	43bb      	bics	r3, r7
 80045c6:	d112      	bne.n	80045ee <_dtoa_r+0x9e>
 80045c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80045ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80045d4:	4323      	orrs	r3, r4
 80045d6:	f000 854d 	beq.w	8005074 <_dtoa_r+0xb24>
 80045da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80045dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004834 <_dtoa_r+0x2e4>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 854f 	beq.w	8005084 <_dtoa_r+0xb34>
 80045e6:	f10a 0303 	add.w	r3, sl, #3
 80045ea:	f000 bd49 	b.w	8005080 <_dtoa_r+0xb30>
 80045ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	ec51 0b17 	vmov	r0, r1, d7
 80045f8:	2300      	movs	r3, #0
 80045fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80045fe:	f7fc fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8004602:	4680      	mov	r8, r0
 8004604:	b158      	cbz	r0, 800461e <_dtoa_r+0xce>
 8004606:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004608:	2301      	movs	r3, #1
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800460e:	b113      	cbz	r3, 8004616 <_dtoa_r+0xc6>
 8004610:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004612:	4b84      	ldr	r3, [pc, #528]	@ (8004824 <_dtoa_r+0x2d4>)
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004838 <_dtoa_r+0x2e8>
 800461a:	f000 bd33 	b.w	8005084 <_dtoa_r+0xb34>
 800461e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004622:	aa16      	add	r2, sp, #88	@ 0x58
 8004624:	a917      	add	r1, sp, #92	@ 0x5c
 8004626:	4658      	mov	r0, fp
 8004628:	f001 f980 	bl	800592c <__d2b>
 800462c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004630:	4681      	mov	r9, r0
 8004632:	2e00      	cmp	r6, #0
 8004634:	d077      	beq.n	8004726 <_dtoa_r+0x1d6>
 8004636:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004638:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800463c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004644:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004648:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800464c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004650:	4619      	mov	r1, r3
 8004652:	2200      	movs	r2, #0
 8004654:	4b74      	ldr	r3, [pc, #464]	@ (8004828 <_dtoa_r+0x2d8>)
 8004656:	f7fb fe17 	bl	8000288 <__aeabi_dsub>
 800465a:	a369      	add	r3, pc, #420	@ (adr r3, 8004800 <_dtoa_r+0x2b0>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb ffca 	bl	80005f8 <__aeabi_dmul>
 8004664:	a368      	add	r3, pc, #416	@ (adr r3, 8004808 <_dtoa_r+0x2b8>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f7fb fe0f 	bl	800028c <__adddf3>
 800466e:	4604      	mov	r4, r0
 8004670:	4630      	mov	r0, r6
 8004672:	460d      	mov	r5, r1
 8004674:	f7fb ff56 	bl	8000524 <__aeabi_i2d>
 8004678:	a365      	add	r3, pc, #404	@ (adr r3, 8004810 <_dtoa_r+0x2c0>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	f7fb ffbb 	bl	80005f8 <__aeabi_dmul>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4620      	mov	r0, r4
 8004688:	4629      	mov	r1, r5
 800468a:	f7fb fdff 	bl	800028c <__adddf3>
 800468e:	4604      	mov	r4, r0
 8004690:	460d      	mov	r5, r1
 8004692:	f7fc fa61 	bl	8000b58 <__aeabi_d2iz>
 8004696:	2200      	movs	r2, #0
 8004698:	4607      	mov	r7, r0
 800469a:	2300      	movs	r3, #0
 800469c:	4620      	mov	r0, r4
 800469e:	4629      	mov	r1, r5
 80046a0:	f7fc fa1c 	bl	8000adc <__aeabi_dcmplt>
 80046a4:	b140      	cbz	r0, 80046b8 <_dtoa_r+0x168>
 80046a6:	4638      	mov	r0, r7
 80046a8:	f7fb ff3c 	bl	8000524 <__aeabi_i2d>
 80046ac:	4622      	mov	r2, r4
 80046ae:	462b      	mov	r3, r5
 80046b0:	f7fc fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80046b4:	b900      	cbnz	r0, 80046b8 <_dtoa_r+0x168>
 80046b6:	3f01      	subs	r7, #1
 80046b8:	2f16      	cmp	r7, #22
 80046ba:	d851      	bhi.n	8004760 <_dtoa_r+0x210>
 80046bc:	4b5b      	ldr	r3, [pc, #364]	@ (800482c <_dtoa_r+0x2dc>)
 80046be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80046ca:	f7fc fa07 	bl	8000adc <__aeabi_dcmplt>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	d048      	beq.n	8004764 <_dtoa_r+0x214>
 80046d2:	3f01      	subs	r7, #1
 80046d4:	2300      	movs	r3, #0
 80046d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80046d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80046da:	1b9b      	subs	r3, r3, r6
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	bf44      	itt	mi
 80046e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80046e4:	2300      	movmi	r3, #0
 80046e6:	9208      	str	r2, [sp, #32]
 80046e8:	bf54      	ite	pl
 80046ea:	f04f 0800 	movpl.w	r8, #0
 80046ee:	9308      	strmi	r3, [sp, #32]
 80046f0:	2f00      	cmp	r7, #0
 80046f2:	db39      	blt.n	8004768 <_dtoa_r+0x218>
 80046f4:	9b08      	ldr	r3, [sp, #32]
 80046f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80046f8:	443b      	add	r3, r7
 80046fa:	9308      	str	r3, [sp, #32]
 80046fc:	2300      	movs	r3, #0
 80046fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8004700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004702:	2b09      	cmp	r3, #9
 8004704:	d864      	bhi.n	80047d0 <_dtoa_r+0x280>
 8004706:	2b05      	cmp	r3, #5
 8004708:	bfc4      	itt	gt
 800470a:	3b04      	subgt	r3, #4
 800470c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800470e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004710:	f1a3 0302 	sub.w	r3, r3, #2
 8004714:	bfcc      	ite	gt
 8004716:	2400      	movgt	r4, #0
 8004718:	2401      	movle	r4, #1
 800471a:	2b03      	cmp	r3, #3
 800471c:	d863      	bhi.n	80047e6 <_dtoa_r+0x296>
 800471e:	e8df f003 	tbb	[pc, r3]
 8004722:	372a      	.short	0x372a
 8004724:	5535      	.short	0x5535
 8004726:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800472a:	441e      	add	r6, r3
 800472c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004730:	2b20      	cmp	r3, #32
 8004732:	bfc1      	itttt	gt
 8004734:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004738:	409f      	lslgt	r7, r3
 800473a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800473e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004742:	bfd6      	itet	le
 8004744:	f1c3 0320 	rsble	r3, r3, #32
 8004748:	ea47 0003 	orrgt.w	r0, r7, r3
 800474c:	fa04 f003 	lslle.w	r0, r4, r3
 8004750:	f7fb fed8 	bl	8000504 <__aeabi_ui2d>
 8004754:	2201      	movs	r2, #1
 8004756:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800475a:	3e01      	subs	r6, #1
 800475c:	9214      	str	r2, [sp, #80]	@ 0x50
 800475e:	e777      	b.n	8004650 <_dtoa_r+0x100>
 8004760:	2301      	movs	r3, #1
 8004762:	e7b8      	b.n	80046d6 <_dtoa_r+0x186>
 8004764:	9012      	str	r0, [sp, #72]	@ 0x48
 8004766:	e7b7      	b.n	80046d8 <_dtoa_r+0x188>
 8004768:	427b      	negs	r3, r7
 800476a:	930a      	str	r3, [sp, #40]	@ 0x28
 800476c:	2300      	movs	r3, #0
 800476e:	eba8 0807 	sub.w	r8, r8, r7
 8004772:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004774:	e7c4      	b.n	8004700 <_dtoa_r+0x1b0>
 8004776:	2300      	movs	r3, #0
 8004778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800477a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800477c:	2b00      	cmp	r3, #0
 800477e:	dc35      	bgt.n	80047ec <_dtoa_r+0x29c>
 8004780:	2301      	movs	r3, #1
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	9307      	str	r3, [sp, #28]
 8004786:	461a      	mov	r2, r3
 8004788:	920e      	str	r2, [sp, #56]	@ 0x38
 800478a:	e00b      	b.n	80047a4 <_dtoa_r+0x254>
 800478c:	2301      	movs	r3, #1
 800478e:	e7f3      	b.n	8004778 <_dtoa_r+0x228>
 8004790:	2300      	movs	r3, #0
 8004792:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	3301      	adds	r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	9307      	str	r3, [sp, #28]
 80047a0:	bfb8      	it	lt
 80047a2:	2301      	movlt	r3, #1
 80047a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80047a8:	2100      	movs	r1, #0
 80047aa:	2204      	movs	r2, #4
 80047ac:	f102 0514 	add.w	r5, r2, #20
 80047b0:	429d      	cmp	r5, r3
 80047b2:	d91f      	bls.n	80047f4 <_dtoa_r+0x2a4>
 80047b4:	6041      	str	r1, [r0, #4]
 80047b6:	4658      	mov	r0, fp
 80047b8:	f000 fd8e 	bl	80052d8 <_Balloc>
 80047bc:	4682      	mov	sl, r0
 80047be:	2800      	cmp	r0, #0
 80047c0:	d13c      	bne.n	800483c <_dtoa_r+0x2ec>
 80047c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <_dtoa_r+0x2e0>)
 80047c4:	4602      	mov	r2, r0
 80047c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80047ca:	e6d8      	b.n	800457e <_dtoa_r+0x2e>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e7e0      	b.n	8004792 <_dtoa_r+0x242>
 80047d0:	2401      	movs	r4, #1
 80047d2:	2300      	movs	r3, #0
 80047d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80047d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	9307      	str	r3, [sp, #28]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2312      	movs	r3, #18
 80047e4:	e7d0      	b.n	8004788 <_dtoa_r+0x238>
 80047e6:	2301      	movs	r3, #1
 80047e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047ea:	e7f5      	b.n	80047d8 <_dtoa_r+0x288>
 80047ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	9307      	str	r3, [sp, #28]
 80047f2:	e7d7      	b.n	80047a4 <_dtoa_r+0x254>
 80047f4:	3101      	adds	r1, #1
 80047f6:	0052      	lsls	r2, r2, #1
 80047f8:	e7d8      	b.n	80047ac <_dtoa_r+0x25c>
 80047fa:	bf00      	nop
 80047fc:	f3af 8000 	nop.w
 8004800:	636f4361 	.word	0x636f4361
 8004804:	3fd287a7 	.word	0x3fd287a7
 8004808:	8b60c8b3 	.word	0x8b60c8b3
 800480c:	3fc68a28 	.word	0x3fc68a28
 8004810:	509f79fb 	.word	0x509f79fb
 8004814:	3fd34413 	.word	0x3fd34413
 8004818:	08006219 	.word	0x08006219
 800481c:	08006230 	.word	0x08006230
 8004820:	7ff00000 	.word	0x7ff00000
 8004824:	080061e9 	.word	0x080061e9
 8004828:	3ff80000 	.word	0x3ff80000
 800482c:	08006328 	.word	0x08006328
 8004830:	08006288 	.word	0x08006288
 8004834:	08006215 	.word	0x08006215
 8004838:	080061e8 	.word	0x080061e8
 800483c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004840:	6018      	str	r0, [r3, #0]
 8004842:	9b07      	ldr	r3, [sp, #28]
 8004844:	2b0e      	cmp	r3, #14
 8004846:	f200 80a4 	bhi.w	8004992 <_dtoa_r+0x442>
 800484a:	2c00      	cmp	r4, #0
 800484c:	f000 80a1 	beq.w	8004992 <_dtoa_r+0x442>
 8004850:	2f00      	cmp	r7, #0
 8004852:	dd33      	ble.n	80048bc <_dtoa_r+0x36c>
 8004854:	4bad      	ldr	r3, [pc, #692]	@ (8004b0c <_dtoa_r+0x5bc>)
 8004856:	f007 020f 	and.w	r2, r7, #15
 800485a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800485e:	ed93 7b00 	vldr	d7, [r3]
 8004862:	05f8      	lsls	r0, r7, #23
 8004864:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004868:	ea4f 1427 	mov.w	r4, r7, asr #4
 800486c:	d516      	bpl.n	800489c <_dtoa_r+0x34c>
 800486e:	4ba8      	ldr	r3, [pc, #672]	@ (8004b10 <_dtoa_r+0x5c0>)
 8004870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004878:	f7fb ffe8 	bl	800084c <__aeabi_ddiv>
 800487c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004880:	f004 040f 	and.w	r4, r4, #15
 8004884:	2603      	movs	r6, #3
 8004886:	4da2      	ldr	r5, [pc, #648]	@ (8004b10 <_dtoa_r+0x5c0>)
 8004888:	b954      	cbnz	r4, 80048a0 <_dtoa_r+0x350>
 800488a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800488e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004892:	f7fb ffdb 	bl	800084c <__aeabi_ddiv>
 8004896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800489a:	e028      	b.n	80048ee <_dtoa_r+0x39e>
 800489c:	2602      	movs	r6, #2
 800489e:	e7f2      	b.n	8004886 <_dtoa_r+0x336>
 80048a0:	07e1      	lsls	r1, r4, #31
 80048a2:	d508      	bpl.n	80048b6 <_dtoa_r+0x366>
 80048a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048ac:	f7fb fea4 	bl	80005f8 <__aeabi_dmul>
 80048b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048b4:	3601      	adds	r6, #1
 80048b6:	1064      	asrs	r4, r4, #1
 80048b8:	3508      	adds	r5, #8
 80048ba:	e7e5      	b.n	8004888 <_dtoa_r+0x338>
 80048bc:	f000 80d2 	beq.w	8004a64 <_dtoa_r+0x514>
 80048c0:	427c      	negs	r4, r7
 80048c2:	4b92      	ldr	r3, [pc, #584]	@ (8004b0c <_dtoa_r+0x5bc>)
 80048c4:	4d92      	ldr	r5, [pc, #584]	@ (8004b10 <_dtoa_r+0x5c0>)
 80048c6:	f004 020f 	and.w	r2, r4, #15
 80048ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048d6:	f7fb fe8f 	bl	80005f8 <__aeabi_dmul>
 80048da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048de:	1124      	asrs	r4, r4, #4
 80048e0:	2300      	movs	r3, #0
 80048e2:	2602      	movs	r6, #2
 80048e4:	2c00      	cmp	r4, #0
 80048e6:	f040 80b2 	bne.w	8004a4e <_dtoa_r+0x4fe>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1d3      	bne.n	8004896 <_dtoa_r+0x346>
 80048ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80048f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80b7 	beq.w	8004a68 <_dtoa_r+0x518>
 80048fa:	4b86      	ldr	r3, [pc, #536]	@ (8004b14 <_dtoa_r+0x5c4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	4620      	mov	r0, r4
 8004900:	4629      	mov	r1, r5
 8004902:	f7fc f8eb 	bl	8000adc <__aeabi_dcmplt>
 8004906:	2800      	cmp	r0, #0
 8004908:	f000 80ae 	beq.w	8004a68 <_dtoa_r+0x518>
 800490c:	9b07      	ldr	r3, [sp, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80aa 	beq.w	8004a68 <_dtoa_r+0x518>
 8004914:	9b00      	ldr	r3, [sp, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dd37      	ble.n	800498a <_dtoa_r+0x43a>
 800491a:	1e7b      	subs	r3, r7, #1
 800491c:	9304      	str	r3, [sp, #16]
 800491e:	4620      	mov	r0, r4
 8004920:	4b7d      	ldr	r3, [pc, #500]	@ (8004b18 <_dtoa_r+0x5c8>)
 8004922:	2200      	movs	r2, #0
 8004924:	4629      	mov	r1, r5
 8004926:	f7fb fe67 	bl	80005f8 <__aeabi_dmul>
 800492a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800492e:	9c00      	ldr	r4, [sp, #0]
 8004930:	3601      	adds	r6, #1
 8004932:	4630      	mov	r0, r6
 8004934:	f7fb fdf6 	bl	8000524 <__aeabi_i2d>
 8004938:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800493c:	f7fb fe5c 	bl	80005f8 <__aeabi_dmul>
 8004940:	4b76      	ldr	r3, [pc, #472]	@ (8004b1c <_dtoa_r+0x5cc>)
 8004942:	2200      	movs	r2, #0
 8004944:	f7fb fca2 	bl	800028c <__adddf3>
 8004948:	4605      	mov	r5, r0
 800494a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800494e:	2c00      	cmp	r4, #0
 8004950:	f040 808d 	bne.w	8004a6e <_dtoa_r+0x51e>
 8004954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004958:	4b71      	ldr	r3, [pc, #452]	@ (8004b20 <_dtoa_r+0x5d0>)
 800495a:	2200      	movs	r2, #0
 800495c:	f7fb fc94 	bl	8000288 <__aeabi_dsub>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004968:	462a      	mov	r2, r5
 800496a:	4633      	mov	r3, r6
 800496c:	f7fc f8d4 	bl	8000b18 <__aeabi_dcmpgt>
 8004970:	2800      	cmp	r0, #0
 8004972:	f040 828b 	bne.w	8004e8c <_dtoa_r+0x93c>
 8004976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800497a:	462a      	mov	r2, r5
 800497c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004980:	f7fc f8ac 	bl	8000adc <__aeabi_dcmplt>
 8004984:	2800      	cmp	r0, #0
 8004986:	f040 8128 	bne.w	8004bda <_dtoa_r+0x68a>
 800498a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800498e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004992:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004994:	2b00      	cmp	r3, #0
 8004996:	f2c0 815a 	blt.w	8004c4e <_dtoa_r+0x6fe>
 800499a:	2f0e      	cmp	r7, #14
 800499c:	f300 8157 	bgt.w	8004c4e <_dtoa_r+0x6fe>
 80049a0:	4b5a      	ldr	r3, [pc, #360]	@ (8004b0c <_dtoa_r+0x5bc>)
 80049a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80049a6:	ed93 7b00 	vldr	d7, [r3]
 80049aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	ed8d 7b00 	vstr	d7, [sp]
 80049b2:	da03      	bge.n	80049bc <_dtoa_r+0x46c>
 80049b4:	9b07      	ldr	r3, [sp, #28]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f340 8101 	ble.w	8004bbe <_dtoa_r+0x66e>
 80049bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049c0:	4656      	mov	r6, sl
 80049c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f7fb ff3f 	bl	800084c <__aeabi_ddiv>
 80049ce:	f7fc f8c3 	bl	8000b58 <__aeabi_d2iz>
 80049d2:	4680      	mov	r8, r0
 80049d4:	f7fb fda6 	bl	8000524 <__aeabi_i2d>
 80049d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049dc:	f7fb fe0c 	bl	80005f8 <__aeabi_dmul>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4620      	mov	r0, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80049ec:	f7fb fc4c 	bl	8000288 <__aeabi_dsub>
 80049f0:	f806 4b01 	strb.w	r4, [r6], #1
 80049f4:	9d07      	ldr	r5, [sp, #28]
 80049f6:	eba6 040a 	sub.w	r4, r6, sl
 80049fa:	42a5      	cmp	r5, r4
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	f040 8117 	bne.w	8004c32 <_dtoa_r+0x6e2>
 8004a04:	f7fb fc42 	bl	800028c <__adddf3>
 8004a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	460d      	mov	r5, r1
 8004a10:	f7fc f882 	bl	8000b18 <__aeabi_dcmpgt>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f040 80f9 	bne.w	8004c0c <_dtoa_r+0x6bc>
 8004a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a1e:	4620      	mov	r0, r4
 8004a20:	4629      	mov	r1, r5
 8004a22:	f7fc f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a26:	b118      	cbz	r0, 8004a30 <_dtoa_r+0x4e0>
 8004a28:	f018 0f01 	tst.w	r8, #1
 8004a2c:	f040 80ee 	bne.w	8004c0c <_dtoa_r+0x6bc>
 8004a30:	4649      	mov	r1, r9
 8004a32:	4658      	mov	r0, fp
 8004a34:	f000 fc90 	bl	8005358 <_Bfree>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	7033      	strb	r3, [r6, #0]
 8004a3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004a3e:	3701      	adds	r7, #1
 8004a40:	601f      	str	r7, [r3, #0]
 8004a42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 831d 	beq.w	8005084 <_dtoa_r+0xb34>
 8004a4a:	601e      	str	r6, [r3, #0]
 8004a4c:	e31a      	b.n	8005084 <_dtoa_r+0xb34>
 8004a4e:	07e2      	lsls	r2, r4, #31
 8004a50:	d505      	bpl.n	8004a5e <_dtoa_r+0x50e>
 8004a52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a56:	f7fb fdcf 	bl	80005f8 <__aeabi_dmul>
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	1064      	asrs	r4, r4, #1
 8004a60:	3508      	adds	r5, #8
 8004a62:	e73f      	b.n	80048e4 <_dtoa_r+0x394>
 8004a64:	2602      	movs	r6, #2
 8004a66:	e742      	b.n	80048ee <_dtoa_r+0x39e>
 8004a68:	9c07      	ldr	r4, [sp, #28]
 8004a6a:	9704      	str	r7, [sp, #16]
 8004a6c:	e761      	b.n	8004932 <_dtoa_r+0x3e2>
 8004a6e:	4b27      	ldr	r3, [pc, #156]	@ (8004b0c <_dtoa_r+0x5bc>)
 8004a70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004a7a:	4454      	add	r4, sl
 8004a7c:	2900      	cmp	r1, #0
 8004a7e:	d053      	beq.n	8004b28 <_dtoa_r+0x5d8>
 8004a80:	4928      	ldr	r1, [pc, #160]	@ (8004b24 <_dtoa_r+0x5d4>)
 8004a82:	2000      	movs	r0, #0
 8004a84:	f7fb fee2 	bl	800084c <__aeabi_ddiv>
 8004a88:	4633      	mov	r3, r6
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	f7fb fbfc 	bl	8000288 <__aeabi_dsub>
 8004a90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a94:	4656      	mov	r6, sl
 8004a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a9a:	f7fc f85d 	bl	8000b58 <__aeabi_d2iz>
 8004a9e:	4605      	mov	r5, r0
 8004aa0:	f7fb fd40 	bl	8000524 <__aeabi_i2d>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aac:	f7fb fbec 	bl	8000288 <__aeabi_dsub>
 8004ab0:	3530      	adds	r5, #48	@ 0x30
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004aba:	f806 5b01 	strb.w	r5, [r6], #1
 8004abe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ac2:	f7fc f80b 	bl	8000adc <__aeabi_dcmplt>
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d171      	bne.n	8004bae <_dtoa_r+0x65e>
 8004aca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ace:	4911      	ldr	r1, [pc, #68]	@ (8004b14 <_dtoa_r+0x5c4>)
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	f7fb fbd9 	bl	8000288 <__aeabi_dsub>
 8004ad6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ada:	f7fb ffff 	bl	8000adc <__aeabi_dcmplt>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f040 8095 	bne.w	8004c0e <_dtoa_r+0x6be>
 8004ae4:	42a6      	cmp	r6, r4
 8004ae6:	f43f af50 	beq.w	800498a <_dtoa_r+0x43a>
 8004aea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004aee:	4b0a      	ldr	r3, [pc, #40]	@ (8004b18 <_dtoa_r+0x5c8>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	f7fb fd81 	bl	80005f8 <__aeabi_dmul>
 8004af6:	4b08      	ldr	r3, [pc, #32]	@ (8004b18 <_dtoa_r+0x5c8>)
 8004af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004afc:	2200      	movs	r2, #0
 8004afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b02:	f7fb fd79 	bl	80005f8 <__aeabi_dmul>
 8004b06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b0a:	e7c4      	b.n	8004a96 <_dtoa_r+0x546>
 8004b0c:	08006328 	.word	0x08006328
 8004b10:	08006300 	.word	0x08006300
 8004b14:	3ff00000 	.word	0x3ff00000
 8004b18:	40240000 	.word	0x40240000
 8004b1c:	401c0000 	.word	0x401c0000
 8004b20:	40140000 	.word	0x40140000
 8004b24:	3fe00000 	.word	0x3fe00000
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f7fb fd64 	bl	80005f8 <__aeabi_dmul>
 8004b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b34:	9415      	str	r4, [sp, #84]	@ 0x54
 8004b36:	4656      	mov	r6, sl
 8004b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b3c:	f7fc f80c 	bl	8000b58 <__aeabi_d2iz>
 8004b40:	4605      	mov	r5, r0
 8004b42:	f7fb fcef 	bl	8000524 <__aeabi_i2d>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b4e:	f7fb fb9b 	bl	8000288 <__aeabi_dsub>
 8004b52:	3530      	adds	r5, #48	@ 0x30
 8004b54:	f806 5b01 	strb.w	r5, [r6], #1
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	d124      	bne.n	8004bb2 <_dtoa_r+0x662>
 8004b68:	4bac      	ldr	r3, [pc, #688]	@ (8004e1c <_dtoa_r+0x8cc>)
 8004b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b6e:	f7fb fb8d 	bl	800028c <__adddf3>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b7a:	f7fb ffcd 	bl	8000b18 <__aeabi_dcmpgt>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d145      	bne.n	8004c0e <_dtoa_r+0x6be>
 8004b82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b86:	49a5      	ldr	r1, [pc, #660]	@ (8004e1c <_dtoa_r+0x8cc>)
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f7fb fb7d 	bl	8000288 <__aeabi_dsub>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b96:	f7fb ffa1 	bl	8000adc <__aeabi_dcmplt>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	f43f aef5 	beq.w	800498a <_dtoa_r+0x43a>
 8004ba0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004ba2:	1e73      	subs	r3, r6, #1
 8004ba4:	9315      	str	r3, [sp, #84]	@ 0x54
 8004ba6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004baa:	2b30      	cmp	r3, #48	@ 0x30
 8004bac:	d0f8      	beq.n	8004ba0 <_dtoa_r+0x650>
 8004bae:	9f04      	ldr	r7, [sp, #16]
 8004bb0:	e73e      	b.n	8004a30 <_dtoa_r+0x4e0>
 8004bb2:	4b9b      	ldr	r3, [pc, #620]	@ (8004e20 <_dtoa_r+0x8d0>)
 8004bb4:	f7fb fd20 	bl	80005f8 <__aeabi_dmul>
 8004bb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bbc:	e7bc      	b.n	8004b38 <_dtoa_r+0x5e8>
 8004bbe:	d10c      	bne.n	8004bda <_dtoa_r+0x68a>
 8004bc0:	4b98      	ldr	r3, [pc, #608]	@ (8004e24 <_dtoa_r+0x8d4>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bc8:	f7fb fd16 	bl	80005f8 <__aeabi_dmul>
 8004bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bd0:	f7fb ff98 	bl	8000b04 <__aeabi_dcmpge>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	f000 8157 	beq.w	8004e88 <_dtoa_r+0x938>
 8004bda:	2400      	movs	r4, #0
 8004bdc:	4625      	mov	r5, r4
 8004bde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004be0:	43db      	mvns	r3, r3
 8004be2:	9304      	str	r3, [sp, #16]
 8004be4:	4656      	mov	r6, sl
 8004be6:	2700      	movs	r7, #0
 8004be8:	4621      	mov	r1, r4
 8004bea:	4658      	mov	r0, fp
 8004bec:	f000 fbb4 	bl	8005358 <_Bfree>
 8004bf0:	2d00      	cmp	r5, #0
 8004bf2:	d0dc      	beq.n	8004bae <_dtoa_r+0x65e>
 8004bf4:	b12f      	cbz	r7, 8004c02 <_dtoa_r+0x6b2>
 8004bf6:	42af      	cmp	r7, r5
 8004bf8:	d003      	beq.n	8004c02 <_dtoa_r+0x6b2>
 8004bfa:	4639      	mov	r1, r7
 8004bfc:	4658      	mov	r0, fp
 8004bfe:	f000 fbab 	bl	8005358 <_Bfree>
 8004c02:	4629      	mov	r1, r5
 8004c04:	4658      	mov	r0, fp
 8004c06:	f000 fba7 	bl	8005358 <_Bfree>
 8004c0a:	e7d0      	b.n	8004bae <_dtoa_r+0x65e>
 8004c0c:	9704      	str	r7, [sp, #16]
 8004c0e:	4633      	mov	r3, r6
 8004c10:	461e      	mov	r6, r3
 8004c12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c16:	2a39      	cmp	r2, #57	@ 0x39
 8004c18:	d107      	bne.n	8004c2a <_dtoa_r+0x6da>
 8004c1a:	459a      	cmp	sl, r3
 8004c1c:	d1f8      	bne.n	8004c10 <_dtoa_r+0x6c0>
 8004c1e:	9a04      	ldr	r2, [sp, #16]
 8004c20:	3201      	adds	r2, #1
 8004c22:	9204      	str	r2, [sp, #16]
 8004c24:	2230      	movs	r2, #48	@ 0x30
 8004c26:	f88a 2000 	strb.w	r2, [sl]
 8004c2a:	781a      	ldrb	r2, [r3, #0]
 8004c2c:	3201      	adds	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e7bd      	b.n	8004bae <_dtoa_r+0x65e>
 8004c32:	4b7b      	ldr	r3, [pc, #492]	@ (8004e20 <_dtoa_r+0x8d0>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	f7fb fcdf 	bl	80005f8 <__aeabi_dmul>
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	460d      	mov	r5, r1
 8004c42:	f7fb ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	f43f aebb 	beq.w	80049c2 <_dtoa_r+0x472>
 8004c4c:	e6f0      	b.n	8004a30 <_dtoa_r+0x4e0>
 8004c4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	f000 80db 	beq.w	8004e0c <_dtoa_r+0x8bc>
 8004c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c58:	2a01      	cmp	r2, #1
 8004c5a:	f300 80bf 	bgt.w	8004ddc <_dtoa_r+0x88c>
 8004c5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004c60:	2a00      	cmp	r2, #0
 8004c62:	f000 80b7 	beq.w	8004dd4 <_dtoa_r+0x884>
 8004c66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004c6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004c6c:	4646      	mov	r6, r8
 8004c6e:	9a08      	ldr	r2, [sp, #32]
 8004c70:	2101      	movs	r1, #1
 8004c72:	441a      	add	r2, r3
 8004c74:	4658      	mov	r0, fp
 8004c76:	4498      	add	r8, r3
 8004c78:	9208      	str	r2, [sp, #32]
 8004c7a:	f000 fc21 	bl	80054c0 <__i2b>
 8004c7e:	4605      	mov	r5, r0
 8004c80:	b15e      	cbz	r6, 8004c9a <_dtoa_r+0x74a>
 8004c82:	9b08      	ldr	r3, [sp, #32]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	dd08      	ble.n	8004c9a <_dtoa_r+0x74a>
 8004c88:	42b3      	cmp	r3, r6
 8004c8a:	9a08      	ldr	r2, [sp, #32]
 8004c8c:	bfa8      	it	ge
 8004c8e:	4633      	movge	r3, r6
 8004c90:	eba8 0803 	sub.w	r8, r8, r3
 8004c94:	1af6      	subs	r6, r6, r3
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	9308      	str	r3, [sp, #32]
 8004c9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c9c:	b1f3      	cbz	r3, 8004cdc <_dtoa_r+0x78c>
 8004c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80b7 	beq.w	8004e14 <_dtoa_r+0x8c4>
 8004ca6:	b18c      	cbz	r4, 8004ccc <_dtoa_r+0x77c>
 8004ca8:	4629      	mov	r1, r5
 8004caa:	4622      	mov	r2, r4
 8004cac:	4658      	mov	r0, fp
 8004cae:	f000 fcc7 	bl	8005640 <__pow5mult>
 8004cb2:	464a      	mov	r2, r9
 8004cb4:	4601      	mov	r1, r0
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	4658      	mov	r0, fp
 8004cba:	f000 fc17 	bl	80054ec <__multiply>
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	9004      	str	r0, [sp, #16]
 8004cc2:	4658      	mov	r0, fp
 8004cc4:	f000 fb48 	bl	8005358 <_Bfree>
 8004cc8:	9b04      	ldr	r3, [sp, #16]
 8004cca:	4699      	mov	r9, r3
 8004ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cce:	1b1a      	subs	r2, r3, r4
 8004cd0:	d004      	beq.n	8004cdc <_dtoa_r+0x78c>
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	4658      	mov	r0, fp
 8004cd6:	f000 fcb3 	bl	8005640 <__pow5mult>
 8004cda:	4681      	mov	r9, r0
 8004cdc:	2101      	movs	r1, #1
 8004cde:	4658      	mov	r0, fp
 8004ce0:	f000 fbee 	bl	80054c0 <__i2b>
 8004ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 81cf 	beq.w	800508c <_dtoa_r+0xb3c>
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4601      	mov	r1, r0
 8004cf2:	4658      	mov	r0, fp
 8004cf4:	f000 fca4 	bl	8005640 <__pow5mult>
 8004cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	4604      	mov	r4, r0
 8004cfe:	f300 8095 	bgt.w	8004e2c <_dtoa_r+0x8dc>
 8004d02:	9b02      	ldr	r3, [sp, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f040 8087 	bne.w	8004e18 <_dtoa_r+0x8c8>
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f040 8089 	bne.w	8004e28 <_dtoa_r+0x8d8>
 8004d16:	9b03      	ldr	r3, [sp, #12]
 8004d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004d1c:	0d1b      	lsrs	r3, r3, #20
 8004d1e:	051b      	lsls	r3, r3, #20
 8004d20:	b12b      	cbz	r3, 8004d2e <_dtoa_r+0x7de>
 8004d22:	9b08      	ldr	r3, [sp, #32]
 8004d24:	3301      	adds	r3, #1
 8004d26:	9308      	str	r3, [sp, #32]
 8004d28:	f108 0801 	add.w	r8, r8, #1
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 81b0 	beq.w	8005098 <_dtoa_r+0xb48>
 8004d38:	6923      	ldr	r3, [r4, #16]
 8004d3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004d3e:	6918      	ldr	r0, [r3, #16]
 8004d40:	f000 fb72 	bl	8005428 <__hi0bits>
 8004d44:	f1c0 0020 	rsb	r0, r0, #32
 8004d48:	9b08      	ldr	r3, [sp, #32]
 8004d4a:	4418      	add	r0, r3
 8004d4c:	f010 001f 	ands.w	r0, r0, #31
 8004d50:	d077      	beq.n	8004e42 <_dtoa_r+0x8f2>
 8004d52:	f1c0 0320 	rsb	r3, r0, #32
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	dd6b      	ble.n	8004e32 <_dtoa_r+0x8e2>
 8004d5a:	9b08      	ldr	r3, [sp, #32]
 8004d5c:	f1c0 001c 	rsb	r0, r0, #28
 8004d60:	4403      	add	r3, r0
 8004d62:	4480      	add	r8, r0
 8004d64:	4406      	add	r6, r0
 8004d66:	9308      	str	r3, [sp, #32]
 8004d68:	f1b8 0f00 	cmp.w	r8, #0
 8004d6c:	dd05      	ble.n	8004d7a <_dtoa_r+0x82a>
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4642      	mov	r2, r8
 8004d72:	4658      	mov	r0, fp
 8004d74:	f000 fcbe 	bl	80056f4 <__lshift>
 8004d78:	4681      	mov	r9, r0
 8004d7a:	9b08      	ldr	r3, [sp, #32]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dd05      	ble.n	8004d8c <_dtoa_r+0x83c>
 8004d80:	4621      	mov	r1, r4
 8004d82:	461a      	mov	r2, r3
 8004d84:	4658      	mov	r0, fp
 8004d86:	f000 fcb5 	bl	80056f4 <__lshift>
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d059      	beq.n	8004e46 <_dtoa_r+0x8f6>
 8004d92:	4621      	mov	r1, r4
 8004d94:	4648      	mov	r0, r9
 8004d96:	f000 fd19 	bl	80057cc <__mcmp>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	da53      	bge.n	8004e46 <_dtoa_r+0x8f6>
 8004d9e:	1e7b      	subs	r3, r7, #1
 8004da0:	9304      	str	r3, [sp, #16]
 8004da2:	4649      	mov	r1, r9
 8004da4:	2300      	movs	r3, #0
 8004da6:	220a      	movs	r2, #10
 8004da8:	4658      	mov	r0, fp
 8004daa:	f000 faf7 	bl	800539c <__multadd>
 8004dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004db0:	4681      	mov	r9, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8172 	beq.w	800509c <_dtoa_r+0xb4c>
 8004db8:	2300      	movs	r3, #0
 8004dba:	4629      	mov	r1, r5
 8004dbc:	220a      	movs	r2, #10
 8004dbe:	4658      	mov	r0, fp
 8004dc0:	f000 faec 	bl	800539c <__multadd>
 8004dc4:	9b00      	ldr	r3, [sp, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	4605      	mov	r5, r0
 8004dca:	dc67      	bgt.n	8004e9c <_dtoa_r+0x94c>
 8004dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	dc41      	bgt.n	8004e56 <_dtoa_r+0x906>
 8004dd2:	e063      	b.n	8004e9c <_dtoa_r+0x94c>
 8004dd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004dd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004dda:	e746      	b.n	8004c6a <_dtoa_r+0x71a>
 8004ddc:	9b07      	ldr	r3, [sp, #28]
 8004dde:	1e5c      	subs	r4, r3, #1
 8004de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004de2:	42a3      	cmp	r3, r4
 8004de4:	bfbf      	itttt	lt
 8004de6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004de8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004dea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004dec:	1ae3      	sublt	r3, r4, r3
 8004dee:	bfb4      	ite	lt
 8004df0:	18d2      	addlt	r2, r2, r3
 8004df2:	1b1c      	subge	r4, r3, r4
 8004df4:	9b07      	ldr	r3, [sp, #28]
 8004df6:	bfbc      	itt	lt
 8004df8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004dfa:	2400      	movlt	r4, #0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	bfb5      	itete	lt
 8004e00:	eba8 0603 	sublt.w	r6, r8, r3
 8004e04:	9b07      	ldrge	r3, [sp, #28]
 8004e06:	2300      	movlt	r3, #0
 8004e08:	4646      	movge	r6, r8
 8004e0a:	e730      	b.n	8004c6e <_dtoa_r+0x71e>
 8004e0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004e10:	4646      	mov	r6, r8
 8004e12:	e735      	b.n	8004c80 <_dtoa_r+0x730>
 8004e14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e16:	e75c      	b.n	8004cd2 <_dtoa_r+0x782>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	e788      	b.n	8004d2e <_dtoa_r+0x7de>
 8004e1c:	3fe00000 	.word	0x3fe00000
 8004e20:	40240000 	.word	0x40240000
 8004e24:	40140000 	.word	0x40140000
 8004e28:	9b02      	ldr	r3, [sp, #8]
 8004e2a:	e780      	b.n	8004d2e <_dtoa_r+0x7de>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e30:	e782      	b.n	8004d38 <_dtoa_r+0x7e8>
 8004e32:	d099      	beq.n	8004d68 <_dtoa_r+0x818>
 8004e34:	9a08      	ldr	r2, [sp, #32]
 8004e36:	331c      	adds	r3, #28
 8004e38:	441a      	add	r2, r3
 8004e3a:	4498      	add	r8, r3
 8004e3c:	441e      	add	r6, r3
 8004e3e:	9208      	str	r2, [sp, #32]
 8004e40:	e792      	b.n	8004d68 <_dtoa_r+0x818>
 8004e42:	4603      	mov	r3, r0
 8004e44:	e7f6      	b.n	8004e34 <_dtoa_r+0x8e4>
 8004e46:	9b07      	ldr	r3, [sp, #28]
 8004e48:	9704      	str	r7, [sp, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	dc20      	bgt.n	8004e90 <_dtoa_r+0x940>
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	dd1e      	ble.n	8004e94 <_dtoa_r+0x944>
 8004e56:	9b00      	ldr	r3, [sp, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f47f aec0 	bne.w	8004bde <_dtoa_r+0x68e>
 8004e5e:	4621      	mov	r1, r4
 8004e60:	2205      	movs	r2, #5
 8004e62:	4658      	mov	r0, fp
 8004e64:	f000 fa9a 	bl	800539c <__multadd>
 8004e68:	4601      	mov	r1, r0
 8004e6a:	4604      	mov	r4, r0
 8004e6c:	4648      	mov	r0, r9
 8004e6e:	f000 fcad 	bl	80057cc <__mcmp>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	f77f aeb3 	ble.w	8004bde <_dtoa_r+0x68e>
 8004e78:	4656      	mov	r6, sl
 8004e7a:	2331      	movs	r3, #49	@ 0x31
 8004e7c:	f806 3b01 	strb.w	r3, [r6], #1
 8004e80:	9b04      	ldr	r3, [sp, #16]
 8004e82:	3301      	adds	r3, #1
 8004e84:	9304      	str	r3, [sp, #16]
 8004e86:	e6ae      	b.n	8004be6 <_dtoa_r+0x696>
 8004e88:	9c07      	ldr	r4, [sp, #28]
 8004e8a:	9704      	str	r7, [sp, #16]
 8004e8c:	4625      	mov	r5, r4
 8004e8e:	e7f3      	b.n	8004e78 <_dtoa_r+0x928>
 8004e90:	9b07      	ldr	r3, [sp, #28]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 8104 	beq.w	80050a4 <_dtoa_r+0xb54>
 8004e9c:	2e00      	cmp	r6, #0
 8004e9e:	dd05      	ble.n	8004eac <_dtoa_r+0x95c>
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	4658      	mov	r0, fp
 8004ea6:	f000 fc25 	bl	80056f4 <__lshift>
 8004eaa:	4605      	mov	r5, r0
 8004eac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d05a      	beq.n	8004f68 <_dtoa_r+0xa18>
 8004eb2:	6869      	ldr	r1, [r5, #4]
 8004eb4:	4658      	mov	r0, fp
 8004eb6:	f000 fa0f 	bl	80052d8 <_Balloc>
 8004eba:	4606      	mov	r6, r0
 8004ebc:	b928      	cbnz	r0, 8004eca <_dtoa_r+0x97a>
 8004ebe:	4b84      	ldr	r3, [pc, #528]	@ (80050d0 <_dtoa_r+0xb80>)
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004ec6:	f7ff bb5a 	b.w	800457e <_dtoa_r+0x2e>
 8004eca:	692a      	ldr	r2, [r5, #16]
 8004ecc:	3202      	adds	r2, #2
 8004ece:	0092      	lsls	r2, r2, #2
 8004ed0:	f105 010c 	add.w	r1, r5, #12
 8004ed4:	300c      	adds	r0, #12
 8004ed6:	f000 fe3d 	bl	8005b54 <memcpy>
 8004eda:	2201      	movs	r2, #1
 8004edc:	4631      	mov	r1, r6
 8004ede:	4658      	mov	r0, fp
 8004ee0:	f000 fc08 	bl	80056f4 <__lshift>
 8004ee4:	f10a 0301 	add.w	r3, sl, #1
 8004ee8:	9307      	str	r3, [sp, #28]
 8004eea:	9b00      	ldr	r3, [sp, #0]
 8004eec:	4453      	add	r3, sl
 8004eee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ef0:	9b02      	ldr	r3, [sp, #8]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	462f      	mov	r7, r5
 8004ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004efa:	4605      	mov	r5, r0
 8004efc:	9b07      	ldr	r3, [sp, #28]
 8004efe:	4621      	mov	r1, r4
 8004f00:	3b01      	subs	r3, #1
 8004f02:	4648      	mov	r0, r9
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	f7ff fa9a 	bl	800443e <quorem>
 8004f0a:	4639      	mov	r1, r7
 8004f0c:	9002      	str	r0, [sp, #8]
 8004f0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004f12:	4648      	mov	r0, r9
 8004f14:	f000 fc5a 	bl	80057cc <__mcmp>
 8004f18:	462a      	mov	r2, r5
 8004f1a:	9008      	str	r0, [sp, #32]
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4658      	mov	r0, fp
 8004f20:	f000 fc70 	bl	8005804 <__mdiff>
 8004f24:	68c2      	ldr	r2, [r0, #12]
 8004f26:	4606      	mov	r6, r0
 8004f28:	bb02      	cbnz	r2, 8004f6c <_dtoa_r+0xa1c>
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4648      	mov	r0, r9
 8004f2e:	f000 fc4d 	bl	80057cc <__mcmp>
 8004f32:	4602      	mov	r2, r0
 8004f34:	4631      	mov	r1, r6
 8004f36:	4658      	mov	r0, fp
 8004f38:	920e      	str	r2, [sp, #56]	@ 0x38
 8004f3a:	f000 fa0d 	bl	8005358 <_Bfree>
 8004f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f42:	9e07      	ldr	r6, [sp, #28]
 8004f44:	ea43 0102 	orr.w	r1, r3, r2
 8004f48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f4a:	4319      	orrs	r1, r3
 8004f4c:	d110      	bne.n	8004f70 <_dtoa_r+0xa20>
 8004f4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f52:	d029      	beq.n	8004fa8 <_dtoa_r+0xa58>
 8004f54:	9b08      	ldr	r3, [sp, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dd02      	ble.n	8004f60 <_dtoa_r+0xa10>
 8004f5a:	9b02      	ldr	r3, [sp, #8]
 8004f5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004f60:	9b00      	ldr	r3, [sp, #0]
 8004f62:	f883 8000 	strb.w	r8, [r3]
 8004f66:	e63f      	b.n	8004be8 <_dtoa_r+0x698>
 8004f68:	4628      	mov	r0, r5
 8004f6a:	e7bb      	b.n	8004ee4 <_dtoa_r+0x994>
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	e7e1      	b.n	8004f34 <_dtoa_r+0x9e4>
 8004f70:	9b08      	ldr	r3, [sp, #32]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	db04      	blt.n	8004f80 <_dtoa_r+0xa30>
 8004f76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	d120      	bne.n	8004fc2 <_dtoa_r+0xa72>
 8004f80:	2a00      	cmp	r2, #0
 8004f82:	dded      	ble.n	8004f60 <_dtoa_r+0xa10>
 8004f84:	4649      	mov	r1, r9
 8004f86:	2201      	movs	r2, #1
 8004f88:	4658      	mov	r0, fp
 8004f8a:	f000 fbb3 	bl	80056f4 <__lshift>
 8004f8e:	4621      	mov	r1, r4
 8004f90:	4681      	mov	r9, r0
 8004f92:	f000 fc1b 	bl	80057cc <__mcmp>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	dc03      	bgt.n	8004fa2 <_dtoa_r+0xa52>
 8004f9a:	d1e1      	bne.n	8004f60 <_dtoa_r+0xa10>
 8004f9c:	f018 0f01 	tst.w	r8, #1
 8004fa0:	d0de      	beq.n	8004f60 <_dtoa_r+0xa10>
 8004fa2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004fa6:	d1d8      	bne.n	8004f5a <_dtoa_r+0xa0a>
 8004fa8:	9a00      	ldr	r2, [sp, #0]
 8004faa:	2339      	movs	r3, #57	@ 0x39
 8004fac:	7013      	strb	r3, [r2, #0]
 8004fae:	4633      	mov	r3, r6
 8004fb0:	461e      	mov	r6, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004fb8:	2a39      	cmp	r2, #57	@ 0x39
 8004fba:	d052      	beq.n	8005062 <_dtoa_r+0xb12>
 8004fbc:	3201      	adds	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	e612      	b.n	8004be8 <_dtoa_r+0x698>
 8004fc2:	2a00      	cmp	r2, #0
 8004fc4:	dd07      	ble.n	8004fd6 <_dtoa_r+0xa86>
 8004fc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004fca:	d0ed      	beq.n	8004fa8 <_dtoa_r+0xa58>
 8004fcc:	9a00      	ldr	r2, [sp, #0]
 8004fce:	f108 0301 	add.w	r3, r8, #1
 8004fd2:	7013      	strb	r3, [r2, #0]
 8004fd4:	e608      	b.n	8004be8 <_dtoa_r+0x698>
 8004fd6:	9b07      	ldr	r3, [sp, #28]
 8004fd8:	9a07      	ldr	r2, [sp, #28]
 8004fda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004fde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d028      	beq.n	8005036 <_dtoa_r+0xae6>
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	220a      	movs	r2, #10
 8004fea:	4658      	mov	r0, fp
 8004fec:	f000 f9d6 	bl	800539c <__multadd>
 8004ff0:	42af      	cmp	r7, r5
 8004ff2:	4681      	mov	r9, r0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	f04f 020a 	mov.w	r2, #10
 8004ffc:	4639      	mov	r1, r7
 8004ffe:	4658      	mov	r0, fp
 8005000:	d107      	bne.n	8005012 <_dtoa_r+0xac2>
 8005002:	f000 f9cb 	bl	800539c <__multadd>
 8005006:	4607      	mov	r7, r0
 8005008:	4605      	mov	r5, r0
 800500a:	9b07      	ldr	r3, [sp, #28]
 800500c:	3301      	adds	r3, #1
 800500e:	9307      	str	r3, [sp, #28]
 8005010:	e774      	b.n	8004efc <_dtoa_r+0x9ac>
 8005012:	f000 f9c3 	bl	800539c <__multadd>
 8005016:	4629      	mov	r1, r5
 8005018:	4607      	mov	r7, r0
 800501a:	2300      	movs	r3, #0
 800501c:	220a      	movs	r2, #10
 800501e:	4658      	mov	r0, fp
 8005020:	f000 f9bc 	bl	800539c <__multadd>
 8005024:	4605      	mov	r5, r0
 8005026:	e7f0      	b.n	800500a <_dtoa_r+0xaba>
 8005028:	9b00      	ldr	r3, [sp, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	bfcc      	ite	gt
 800502e:	461e      	movgt	r6, r3
 8005030:	2601      	movle	r6, #1
 8005032:	4456      	add	r6, sl
 8005034:	2700      	movs	r7, #0
 8005036:	4649      	mov	r1, r9
 8005038:	2201      	movs	r2, #1
 800503a:	4658      	mov	r0, fp
 800503c:	f000 fb5a 	bl	80056f4 <__lshift>
 8005040:	4621      	mov	r1, r4
 8005042:	4681      	mov	r9, r0
 8005044:	f000 fbc2 	bl	80057cc <__mcmp>
 8005048:	2800      	cmp	r0, #0
 800504a:	dcb0      	bgt.n	8004fae <_dtoa_r+0xa5e>
 800504c:	d102      	bne.n	8005054 <_dtoa_r+0xb04>
 800504e:	f018 0f01 	tst.w	r8, #1
 8005052:	d1ac      	bne.n	8004fae <_dtoa_r+0xa5e>
 8005054:	4633      	mov	r3, r6
 8005056:	461e      	mov	r6, r3
 8005058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800505c:	2a30      	cmp	r2, #48	@ 0x30
 800505e:	d0fa      	beq.n	8005056 <_dtoa_r+0xb06>
 8005060:	e5c2      	b.n	8004be8 <_dtoa_r+0x698>
 8005062:	459a      	cmp	sl, r3
 8005064:	d1a4      	bne.n	8004fb0 <_dtoa_r+0xa60>
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	3301      	adds	r3, #1
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	2331      	movs	r3, #49	@ 0x31
 800506e:	f88a 3000 	strb.w	r3, [sl]
 8005072:	e5b9      	b.n	8004be8 <_dtoa_r+0x698>
 8005074:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005076:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80050d4 <_dtoa_r+0xb84>
 800507a:	b11b      	cbz	r3, 8005084 <_dtoa_r+0xb34>
 800507c:	f10a 0308 	add.w	r3, sl, #8
 8005080:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	4650      	mov	r0, sl
 8005086:	b019      	add	sp, #100	@ 0x64
 8005088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800508e:	2b01      	cmp	r3, #1
 8005090:	f77f ae37 	ble.w	8004d02 <_dtoa_r+0x7b2>
 8005094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005096:	930a      	str	r3, [sp, #40]	@ 0x28
 8005098:	2001      	movs	r0, #1
 800509a:	e655      	b.n	8004d48 <_dtoa_r+0x7f8>
 800509c:	9b00      	ldr	r3, [sp, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f77f aed6 	ble.w	8004e50 <_dtoa_r+0x900>
 80050a4:	4656      	mov	r6, sl
 80050a6:	4621      	mov	r1, r4
 80050a8:	4648      	mov	r0, r9
 80050aa:	f7ff f9c8 	bl	800443e <quorem>
 80050ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80050b2:	f806 8b01 	strb.w	r8, [r6], #1
 80050b6:	9b00      	ldr	r3, [sp, #0]
 80050b8:	eba6 020a 	sub.w	r2, r6, sl
 80050bc:	4293      	cmp	r3, r2
 80050be:	ddb3      	ble.n	8005028 <_dtoa_r+0xad8>
 80050c0:	4649      	mov	r1, r9
 80050c2:	2300      	movs	r3, #0
 80050c4:	220a      	movs	r2, #10
 80050c6:	4658      	mov	r0, fp
 80050c8:	f000 f968 	bl	800539c <__multadd>
 80050cc:	4681      	mov	r9, r0
 80050ce:	e7ea      	b.n	80050a6 <_dtoa_r+0xb56>
 80050d0:	08006288 	.word	0x08006288
 80050d4:	0800620c 	.word	0x0800620c

080050d8 <_free_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4605      	mov	r5, r0
 80050dc:	2900      	cmp	r1, #0
 80050de:	d041      	beq.n	8005164 <_free_r+0x8c>
 80050e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e4:	1f0c      	subs	r4, r1, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bfb8      	it	lt
 80050ea:	18e4      	addlt	r4, r4, r3
 80050ec:	f000 f8e8 	bl	80052c0 <__malloc_lock>
 80050f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005168 <_free_r+0x90>)
 80050f2:	6813      	ldr	r3, [r2, #0]
 80050f4:	b933      	cbnz	r3, 8005104 <_free_r+0x2c>
 80050f6:	6063      	str	r3, [r4, #4]
 80050f8:	6014      	str	r4, [r2, #0]
 80050fa:	4628      	mov	r0, r5
 80050fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005100:	f000 b8e4 	b.w	80052cc <__malloc_unlock>
 8005104:	42a3      	cmp	r3, r4
 8005106:	d908      	bls.n	800511a <_free_r+0x42>
 8005108:	6820      	ldr	r0, [r4, #0]
 800510a:	1821      	adds	r1, r4, r0
 800510c:	428b      	cmp	r3, r1
 800510e:	bf01      	itttt	eq
 8005110:	6819      	ldreq	r1, [r3, #0]
 8005112:	685b      	ldreq	r3, [r3, #4]
 8005114:	1809      	addeq	r1, r1, r0
 8005116:	6021      	streq	r1, [r4, #0]
 8005118:	e7ed      	b.n	80050f6 <_free_r+0x1e>
 800511a:	461a      	mov	r2, r3
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	b10b      	cbz	r3, 8005124 <_free_r+0x4c>
 8005120:	42a3      	cmp	r3, r4
 8005122:	d9fa      	bls.n	800511a <_free_r+0x42>
 8005124:	6811      	ldr	r1, [r2, #0]
 8005126:	1850      	adds	r0, r2, r1
 8005128:	42a0      	cmp	r0, r4
 800512a:	d10b      	bne.n	8005144 <_free_r+0x6c>
 800512c:	6820      	ldr	r0, [r4, #0]
 800512e:	4401      	add	r1, r0
 8005130:	1850      	adds	r0, r2, r1
 8005132:	4283      	cmp	r3, r0
 8005134:	6011      	str	r1, [r2, #0]
 8005136:	d1e0      	bne.n	80050fa <_free_r+0x22>
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	6053      	str	r3, [r2, #4]
 800513e:	4408      	add	r0, r1
 8005140:	6010      	str	r0, [r2, #0]
 8005142:	e7da      	b.n	80050fa <_free_r+0x22>
 8005144:	d902      	bls.n	800514c <_free_r+0x74>
 8005146:	230c      	movs	r3, #12
 8005148:	602b      	str	r3, [r5, #0]
 800514a:	e7d6      	b.n	80050fa <_free_r+0x22>
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	1821      	adds	r1, r4, r0
 8005150:	428b      	cmp	r3, r1
 8005152:	bf04      	itt	eq
 8005154:	6819      	ldreq	r1, [r3, #0]
 8005156:	685b      	ldreq	r3, [r3, #4]
 8005158:	6063      	str	r3, [r4, #4]
 800515a:	bf04      	itt	eq
 800515c:	1809      	addeq	r1, r1, r0
 800515e:	6021      	streq	r1, [r4, #0]
 8005160:	6054      	str	r4, [r2, #4]
 8005162:	e7ca      	b.n	80050fa <_free_r+0x22>
 8005164:	bd38      	pop	{r3, r4, r5, pc}
 8005166:	bf00      	nop
 8005168:	20000394 	.word	0x20000394

0800516c <malloc>:
 800516c:	4b02      	ldr	r3, [pc, #8]	@ (8005178 <malloc+0xc>)
 800516e:	4601      	mov	r1, r0
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	f000 b825 	b.w	80051c0 <_malloc_r>
 8005176:	bf00      	nop
 8005178:	2000001c 	.word	0x2000001c

0800517c <sbrk_aligned>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	4e0f      	ldr	r6, [pc, #60]	@ (80051bc <sbrk_aligned+0x40>)
 8005180:	460c      	mov	r4, r1
 8005182:	6831      	ldr	r1, [r6, #0]
 8005184:	4605      	mov	r5, r0
 8005186:	b911      	cbnz	r1, 800518e <sbrk_aligned+0x12>
 8005188:	f000 fcd4 	bl	8005b34 <_sbrk_r>
 800518c:	6030      	str	r0, [r6, #0]
 800518e:	4621      	mov	r1, r4
 8005190:	4628      	mov	r0, r5
 8005192:	f000 fccf 	bl	8005b34 <_sbrk_r>
 8005196:	1c43      	adds	r3, r0, #1
 8005198:	d103      	bne.n	80051a2 <sbrk_aligned+0x26>
 800519a:	f04f 34ff 	mov.w	r4, #4294967295
 800519e:	4620      	mov	r0, r4
 80051a0:	bd70      	pop	{r4, r5, r6, pc}
 80051a2:	1cc4      	adds	r4, r0, #3
 80051a4:	f024 0403 	bic.w	r4, r4, #3
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d0f8      	beq.n	800519e <sbrk_aligned+0x22>
 80051ac:	1a21      	subs	r1, r4, r0
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 fcc0 	bl	8005b34 <_sbrk_r>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d1f2      	bne.n	800519e <sbrk_aligned+0x22>
 80051b8:	e7ef      	b.n	800519a <sbrk_aligned+0x1e>
 80051ba:	bf00      	nop
 80051bc:	20000390 	.word	0x20000390

080051c0 <_malloc_r>:
 80051c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c4:	1ccd      	adds	r5, r1, #3
 80051c6:	f025 0503 	bic.w	r5, r5, #3
 80051ca:	3508      	adds	r5, #8
 80051cc:	2d0c      	cmp	r5, #12
 80051ce:	bf38      	it	cc
 80051d0:	250c      	movcc	r5, #12
 80051d2:	2d00      	cmp	r5, #0
 80051d4:	4606      	mov	r6, r0
 80051d6:	db01      	blt.n	80051dc <_malloc_r+0x1c>
 80051d8:	42a9      	cmp	r1, r5
 80051da:	d904      	bls.n	80051e6 <_malloc_r+0x26>
 80051dc:	230c      	movs	r3, #12
 80051de:	6033      	str	r3, [r6, #0]
 80051e0:	2000      	movs	r0, #0
 80051e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052bc <_malloc_r+0xfc>
 80051ea:	f000 f869 	bl	80052c0 <__malloc_lock>
 80051ee:	f8d8 3000 	ldr.w	r3, [r8]
 80051f2:	461c      	mov	r4, r3
 80051f4:	bb44      	cbnz	r4, 8005248 <_malloc_r+0x88>
 80051f6:	4629      	mov	r1, r5
 80051f8:	4630      	mov	r0, r6
 80051fa:	f7ff ffbf 	bl	800517c <sbrk_aligned>
 80051fe:	1c43      	adds	r3, r0, #1
 8005200:	4604      	mov	r4, r0
 8005202:	d158      	bne.n	80052b6 <_malloc_r+0xf6>
 8005204:	f8d8 4000 	ldr.w	r4, [r8]
 8005208:	4627      	mov	r7, r4
 800520a:	2f00      	cmp	r7, #0
 800520c:	d143      	bne.n	8005296 <_malloc_r+0xd6>
 800520e:	2c00      	cmp	r4, #0
 8005210:	d04b      	beq.n	80052aa <_malloc_r+0xea>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	4639      	mov	r1, r7
 8005216:	4630      	mov	r0, r6
 8005218:	eb04 0903 	add.w	r9, r4, r3
 800521c:	f000 fc8a 	bl	8005b34 <_sbrk_r>
 8005220:	4581      	cmp	r9, r0
 8005222:	d142      	bne.n	80052aa <_malloc_r+0xea>
 8005224:	6821      	ldr	r1, [r4, #0]
 8005226:	1a6d      	subs	r5, r5, r1
 8005228:	4629      	mov	r1, r5
 800522a:	4630      	mov	r0, r6
 800522c:	f7ff ffa6 	bl	800517c <sbrk_aligned>
 8005230:	3001      	adds	r0, #1
 8005232:	d03a      	beq.n	80052aa <_malloc_r+0xea>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	442b      	add	r3, r5
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	f8d8 3000 	ldr.w	r3, [r8]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	bb62      	cbnz	r2, 800529c <_malloc_r+0xdc>
 8005242:	f8c8 7000 	str.w	r7, [r8]
 8005246:	e00f      	b.n	8005268 <_malloc_r+0xa8>
 8005248:	6822      	ldr	r2, [r4, #0]
 800524a:	1b52      	subs	r2, r2, r5
 800524c:	d420      	bmi.n	8005290 <_malloc_r+0xd0>
 800524e:	2a0b      	cmp	r2, #11
 8005250:	d917      	bls.n	8005282 <_malloc_r+0xc2>
 8005252:	1961      	adds	r1, r4, r5
 8005254:	42a3      	cmp	r3, r4
 8005256:	6025      	str	r5, [r4, #0]
 8005258:	bf18      	it	ne
 800525a:	6059      	strne	r1, [r3, #4]
 800525c:	6863      	ldr	r3, [r4, #4]
 800525e:	bf08      	it	eq
 8005260:	f8c8 1000 	streq.w	r1, [r8]
 8005264:	5162      	str	r2, [r4, r5]
 8005266:	604b      	str	r3, [r1, #4]
 8005268:	4630      	mov	r0, r6
 800526a:	f000 f82f 	bl	80052cc <__malloc_unlock>
 800526e:	f104 000b 	add.w	r0, r4, #11
 8005272:	1d23      	adds	r3, r4, #4
 8005274:	f020 0007 	bic.w	r0, r0, #7
 8005278:	1ac2      	subs	r2, r0, r3
 800527a:	bf1c      	itt	ne
 800527c:	1a1b      	subne	r3, r3, r0
 800527e:	50a3      	strne	r3, [r4, r2]
 8005280:	e7af      	b.n	80051e2 <_malloc_r+0x22>
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	42a3      	cmp	r3, r4
 8005286:	bf0c      	ite	eq
 8005288:	f8c8 2000 	streq.w	r2, [r8]
 800528c:	605a      	strne	r2, [r3, #4]
 800528e:	e7eb      	b.n	8005268 <_malloc_r+0xa8>
 8005290:	4623      	mov	r3, r4
 8005292:	6864      	ldr	r4, [r4, #4]
 8005294:	e7ae      	b.n	80051f4 <_malloc_r+0x34>
 8005296:	463c      	mov	r4, r7
 8005298:	687f      	ldr	r7, [r7, #4]
 800529a:	e7b6      	b.n	800520a <_malloc_r+0x4a>
 800529c:	461a      	mov	r2, r3
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	d1fb      	bne.n	800529c <_malloc_r+0xdc>
 80052a4:	2300      	movs	r3, #0
 80052a6:	6053      	str	r3, [r2, #4]
 80052a8:	e7de      	b.n	8005268 <_malloc_r+0xa8>
 80052aa:	230c      	movs	r3, #12
 80052ac:	6033      	str	r3, [r6, #0]
 80052ae:	4630      	mov	r0, r6
 80052b0:	f000 f80c 	bl	80052cc <__malloc_unlock>
 80052b4:	e794      	b.n	80051e0 <_malloc_r+0x20>
 80052b6:	6005      	str	r5, [r0, #0]
 80052b8:	e7d6      	b.n	8005268 <_malloc_r+0xa8>
 80052ba:	bf00      	nop
 80052bc:	20000394 	.word	0x20000394

080052c0 <__malloc_lock>:
 80052c0:	4801      	ldr	r0, [pc, #4]	@ (80052c8 <__malloc_lock+0x8>)
 80052c2:	f7ff b8ba 	b.w	800443a <__retarget_lock_acquire_recursive>
 80052c6:	bf00      	nop
 80052c8:	2000038c 	.word	0x2000038c

080052cc <__malloc_unlock>:
 80052cc:	4801      	ldr	r0, [pc, #4]	@ (80052d4 <__malloc_unlock+0x8>)
 80052ce:	f7ff b8b5 	b.w	800443c <__retarget_lock_release_recursive>
 80052d2:	bf00      	nop
 80052d4:	2000038c 	.word	0x2000038c

080052d8 <_Balloc>:
 80052d8:	b570      	push	{r4, r5, r6, lr}
 80052da:	69c6      	ldr	r6, [r0, #28]
 80052dc:	4604      	mov	r4, r0
 80052de:	460d      	mov	r5, r1
 80052e0:	b976      	cbnz	r6, 8005300 <_Balloc+0x28>
 80052e2:	2010      	movs	r0, #16
 80052e4:	f7ff ff42 	bl	800516c <malloc>
 80052e8:	4602      	mov	r2, r0
 80052ea:	61e0      	str	r0, [r4, #28]
 80052ec:	b920      	cbnz	r0, 80052f8 <_Balloc+0x20>
 80052ee:	4b18      	ldr	r3, [pc, #96]	@ (8005350 <_Balloc+0x78>)
 80052f0:	4818      	ldr	r0, [pc, #96]	@ (8005354 <_Balloc+0x7c>)
 80052f2:	216b      	movs	r1, #107	@ 0x6b
 80052f4:	f000 fc3c 	bl	8005b70 <__assert_func>
 80052f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052fc:	6006      	str	r6, [r0, #0]
 80052fe:	60c6      	str	r6, [r0, #12]
 8005300:	69e6      	ldr	r6, [r4, #28]
 8005302:	68f3      	ldr	r3, [r6, #12]
 8005304:	b183      	cbz	r3, 8005328 <_Balloc+0x50>
 8005306:	69e3      	ldr	r3, [r4, #28]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800530e:	b9b8      	cbnz	r0, 8005340 <_Balloc+0x68>
 8005310:	2101      	movs	r1, #1
 8005312:	fa01 f605 	lsl.w	r6, r1, r5
 8005316:	1d72      	adds	r2, r6, #5
 8005318:	0092      	lsls	r2, r2, #2
 800531a:	4620      	mov	r0, r4
 800531c:	f000 fc46 	bl	8005bac <_calloc_r>
 8005320:	b160      	cbz	r0, 800533c <_Balloc+0x64>
 8005322:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005326:	e00e      	b.n	8005346 <_Balloc+0x6e>
 8005328:	2221      	movs	r2, #33	@ 0x21
 800532a:	2104      	movs	r1, #4
 800532c:	4620      	mov	r0, r4
 800532e:	f000 fc3d 	bl	8005bac <_calloc_r>
 8005332:	69e3      	ldr	r3, [r4, #28]
 8005334:	60f0      	str	r0, [r6, #12]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e4      	bne.n	8005306 <_Balloc+0x2e>
 800533c:	2000      	movs	r0, #0
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	6802      	ldr	r2, [r0, #0]
 8005342:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005346:	2300      	movs	r3, #0
 8005348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800534c:	e7f7      	b.n	800533e <_Balloc+0x66>
 800534e:	bf00      	nop
 8005350:	08006219 	.word	0x08006219
 8005354:	08006299 	.word	0x08006299

08005358 <_Bfree>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	69c6      	ldr	r6, [r0, #28]
 800535c:	4605      	mov	r5, r0
 800535e:	460c      	mov	r4, r1
 8005360:	b976      	cbnz	r6, 8005380 <_Bfree+0x28>
 8005362:	2010      	movs	r0, #16
 8005364:	f7ff ff02 	bl	800516c <malloc>
 8005368:	4602      	mov	r2, r0
 800536a:	61e8      	str	r0, [r5, #28]
 800536c:	b920      	cbnz	r0, 8005378 <_Bfree+0x20>
 800536e:	4b09      	ldr	r3, [pc, #36]	@ (8005394 <_Bfree+0x3c>)
 8005370:	4809      	ldr	r0, [pc, #36]	@ (8005398 <_Bfree+0x40>)
 8005372:	218f      	movs	r1, #143	@ 0x8f
 8005374:	f000 fbfc 	bl	8005b70 <__assert_func>
 8005378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800537c:	6006      	str	r6, [r0, #0]
 800537e:	60c6      	str	r6, [r0, #12]
 8005380:	b13c      	cbz	r4, 8005392 <_Bfree+0x3a>
 8005382:	69eb      	ldr	r3, [r5, #28]
 8005384:	6862      	ldr	r2, [r4, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800538c:	6021      	str	r1, [r4, #0]
 800538e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005392:	bd70      	pop	{r4, r5, r6, pc}
 8005394:	08006219 	.word	0x08006219
 8005398:	08006299 	.word	0x08006299

0800539c <__multadd>:
 800539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a0:	690d      	ldr	r5, [r1, #16]
 80053a2:	4607      	mov	r7, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	461e      	mov	r6, r3
 80053a8:	f101 0c14 	add.w	ip, r1, #20
 80053ac:	2000      	movs	r0, #0
 80053ae:	f8dc 3000 	ldr.w	r3, [ip]
 80053b2:	b299      	uxth	r1, r3
 80053b4:	fb02 6101 	mla	r1, r2, r1, r6
 80053b8:	0c1e      	lsrs	r6, r3, #16
 80053ba:	0c0b      	lsrs	r3, r1, #16
 80053bc:	fb02 3306 	mla	r3, r2, r6, r3
 80053c0:	b289      	uxth	r1, r1
 80053c2:	3001      	adds	r0, #1
 80053c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80053c8:	4285      	cmp	r5, r0
 80053ca:	f84c 1b04 	str.w	r1, [ip], #4
 80053ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80053d2:	dcec      	bgt.n	80053ae <__multadd+0x12>
 80053d4:	b30e      	cbz	r6, 800541a <__multadd+0x7e>
 80053d6:	68a3      	ldr	r3, [r4, #8]
 80053d8:	42ab      	cmp	r3, r5
 80053da:	dc19      	bgt.n	8005410 <__multadd+0x74>
 80053dc:	6861      	ldr	r1, [r4, #4]
 80053de:	4638      	mov	r0, r7
 80053e0:	3101      	adds	r1, #1
 80053e2:	f7ff ff79 	bl	80052d8 <_Balloc>
 80053e6:	4680      	mov	r8, r0
 80053e8:	b928      	cbnz	r0, 80053f6 <__multadd+0x5a>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005420 <__multadd+0x84>)
 80053ee:	480d      	ldr	r0, [pc, #52]	@ (8005424 <__multadd+0x88>)
 80053f0:	21ba      	movs	r1, #186	@ 0xba
 80053f2:	f000 fbbd 	bl	8005b70 <__assert_func>
 80053f6:	6922      	ldr	r2, [r4, #16]
 80053f8:	3202      	adds	r2, #2
 80053fa:	f104 010c 	add.w	r1, r4, #12
 80053fe:	0092      	lsls	r2, r2, #2
 8005400:	300c      	adds	r0, #12
 8005402:	f000 fba7 	bl	8005b54 <memcpy>
 8005406:	4621      	mov	r1, r4
 8005408:	4638      	mov	r0, r7
 800540a:	f7ff ffa5 	bl	8005358 <_Bfree>
 800540e:	4644      	mov	r4, r8
 8005410:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005414:	3501      	adds	r5, #1
 8005416:	615e      	str	r6, [r3, #20]
 8005418:	6125      	str	r5, [r4, #16]
 800541a:	4620      	mov	r0, r4
 800541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005420:	08006288 	.word	0x08006288
 8005424:	08006299 	.word	0x08006299

08005428 <__hi0bits>:
 8005428:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800542c:	4603      	mov	r3, r0
 800542e:	bf36      	itet	cc
 8005430:	0403      	lslcc	r3, r0, #16
 8005432:	2000      	movcs	r0, #0
 8005434:	2010      	movcc	r0, #16
 8005436:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800543a:	bf3c      	itt	cc
 800543c:	021b      	lslcc	r3, r3, #8
 800543e:	3008      	addcc	r0, #8
 8005440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005444:	bf3c      	itt	cc
 8005446:	011b      	lslcc	r3, r3, #4
 8005448:	3004      	addcc	r0, #4
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544e:	bf3c      	itt	cc
 8005450:	009b      	lslcc	r3, r3, #2
 8005452:	3002      	addcc	r0, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	db05      	blt.n	8005464 <__hi0bits+0x3c>
 8005458:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800545c:	f100 0001 	add.w	r0, r0, #1
 8005460:	bf08      	it	eq
 8005462:	2020      	moveq	r0, #32
 8005464:	4770      	bx	lr

08005466 <__lo0bits>:
 8005466:	6803      	ldr	r3, [r0, #0]
 8005468:	4602      	mov	r2, r0
 800546a:	f013 0007 	ands.w	r0, r3, #7
 800546e:	d00b      	beq.n	8005488 <__lo0bits+0x22>
 8005470:	07d9      	lsls	r1, r3, #31
 8005472:	d421      	bmi.n	80054b8 <__lo0bits+0x52>
 8005474:	0798      	lsls	r0, r3, #30
 8005476:	bf49      	itett	mi
 8005478:	085b      	lsrmi	r3, r3, #1
 800547a:	089b      	lsrpl	r3, r3, #2
 800547c:	2001      	movmi	r0, #1
 800547e:	6013      	strmi	r3, [r2, #0]
 8005480:	bf5c      	itt	pl
 8005482:	6013      	strpl	r3, [r2, #0]
 8005484:	2002      	movpl	r0, #2
 8005486:	4770      	bx	lr
 8005488:	b299      	uxth	r1, r3
 800548a:	b909      	cbnz	r1, 8005490 <__lo0bits+0x2a>
 800548c:	0c1b      	lsrs	r3, r3, #16
 800548e:	2010      	movs	r0, #16
 8005490:	b2d9      	uxtb	r1, r3
 8005492:	b909      	cbnz	r1, 8005498 <__lo0bits+0x32>
 8005494:	3008      	adds	r0, #8
 8005496:	0a1b      	lsrs	r3, r3, #8
 8005498:	0719      	lsls	r1, r3, #28
 800549a:	bf04      	itt	eq
 800549c:	091b      	lsreq	r3, r3, #4
 800549e:	3004      	addeq	r0, #4
 80054a0:	0799      	lsls	r1, r3, #30
 80054a2:	bf04      	itt	eq
 80054a4:	089b      	lsreq	r3, r3, #2
 80054a6:	3002      	addeq	r0, #2
 80054a8:	07d9      	lsls	r1, r3, #31
 80054aa:	d403      	bmi.n	80054b4 <__lo0bits+0x4e>
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	f100 0001 	add.w	r0, r0, #1
 80054b2:	d003      	beq.n	80054bc <__lo0bits+0x56>
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	4770      	bx	lr
 80054b8:	2000      	movs	r0, #0
 80054ba:	4770      	bx	lr
 80054bc:	2020      	movs	r0, #32
 80054be:	4770      	bx	lr

080054c0 <__i2b>:
 80054c0:	b510      	push	{r4, lr}
 80054c2:	460c      	mov	r4, r1
 80054c4:	2101      	movs	r1, #1
 80054c6:	f7ff ff07 	bl	80052d8 <_Balloc>
 80054ca:	4602      	mov	r2, r0
 80054cc:	b928      	cbnz	r0, 80054da <__i2b+0x1a>
 80054ce:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <__i2b+0x24>)
 80054d0:	4805      	ldr	r0, [pc, #20]	@ (80054e8 <__i2b+0x28>)
 80054d2:	f240 1145 	movw	r1, #325	@ 0x145
 80054d6:	f000 fb4b 	bl	8005b70 <__assert_func>
 80054da:	2301      	movs	r3, #1
 80054dc:	6144      	str	r4, [r0, #20]
 80054de:	6103      	str	r3, [r0, #16]
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	bf00      	nop
 80054e4:	08006288 	.word	0x08006288
 80054e8:	08006299 	.word	0x08006299

080054ec <__multiply>:
 80054ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f0:	4614      	mov	r4, r2
 80054f2:	690a      	ldr	r2, [r1, #16]
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	bfa8      	it	ge
 80054fa:	4623      	movge	r3, r4
 80054fc:	460f      	mov	r7, r1
 80054fe:	bfa4      	itt	ge
 8005500:	460c      	movge	r4, r1
 8005502:	461f      	movge	r7, r3
 8005504:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005508:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800550c:	68a3      	ldr	r3, [r4, #8]
 800550e:	6861      	ldr	r1, [r4, #4]
 8005510:	eb0a 0609 	add.w	r6, sl, r9
 8005514:	42b3      	cmp	r3, r6
 8005516:	b085      	sub	sp, #20
 8005518:	bfb8      	it	lt
 800551a:	3101      	addlt	r1, #1
 800551c:	f7ff fedc 	bl	80052d8 <_Balloc>
 8005520:	b930      	cbnz	r0, 8005530 <__multiply+0x44>
 8005522:	4602      	mov	r2, r0
 8005524:	4b44      	ldr	r3, [pc, #272]	@ (8005638 <__multiply+0x14c>)
 8005526:	4845      	ldr	r0, [pc, #276]	@ (800563c <__multiply+0x150>)
 8005528:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800552c:	f000 fb20 	bl	8005b70 <__assert_func>
 8005530:	f100 0514 	add.w	r5, r0, #20
 8005534:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005538:	462b      	mov	r3, r5
 800553a:	2200      	movs	r2, #0
 800553c:	4543      	cmp	r3, r8
 800553e:	d321      	bcc.n	8005584 <__multiply+0x98>
 8005540:	f107 0114 	add.w	r1, r7, #20
 8005544:	f104 0214 	add.w	r2, r4, #20
 8005548:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800554c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005550:	9302      	str	r3, [sp, #8]
 8005552:	1b13      	subs	r3, r2, r4
 8005554:	3b15      	subs	r3, #21
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	3304      	adds	r3, #4
 800555c:	f104 0715 	add.w	r7, r4, #21
 8005560:	42ba      	cmp	r2, r7
 8005562:	bf38      	it	cc
 8005564:	2304      	movcc	r3, #4
 8005566:	9301      	str	r3, [sp, #4]
 8005568:	9b02      	ldr	r3, [sp, #8]
 800556a:	9103      	str	r1, [sp, #12]
 800556c:	428b      	cmp	r3, r1
 800556e:	d80c      	bhi.n	800558a <__multiply+0x9e>
 8005570:	2e00      	cmp	r6, #0
 8005572:	dd03      	ble.n	800557c <__multiply+0x90>
 8005574:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005578:	2b00      	cmp	r3, #0
 800557a:	d05b      	beq.n	8005634 <__multiply+0x148>
 800557c:	6106      	str	r6, [r0, #16]
 800557e:	b005      	add	sp, #20
 8005580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005584:	f843 2b04 	str.w	r2, [r3], #4
 8005588:	e7d8      	b.n	800553c <__multiply+0x50>
 800558a:	f8b1 a000 	ldrh.w	sl, [r1]
 800558e:	f1ba 0f00 	cmp.w	sl, #0
 8005592:	d024      	beq.n	80055de <__multiply+0xf2>
 8005594:	f104 0e14 	add.w	lr, r4, #20
 8005598:	46a9      	mov	r9, r5
 800559a:	f04f 0c00 	mov.w	ip, #0
 800559e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80055a2:	f8d9 3000 	ldr.w	r3, [r9]
 80055a6:	fa1f fb87 	uxth.w	fp, r7
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80055b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80055b4:	f8d9 7000 	ldr.w	r7, [r9]
 80055b8:	4463      	add	r3, ip
 80055ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80055be:	fb0a c70b 	mla	r7, sl, fp, ip
 80055c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80055cc:	4572      	cmp	r2, lr
 80055ce:	f849 3b04 	str.w	r3, [r9], #4
 80055d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80055d6:	d8e2      	bhi.n	800559e <__multiply+0xb2>
 80055d8:	9b01      	ldr	r3, [sp, #4]
 80055da:	f845 c003 	str.w	ip, [r5, r3]
 80055de:	9b03      	ldr	r3, [sp, #12]
 80055e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80055e4:	3104      	adds	r1, #4
 80055e6:	f1b9 0f00 	cmp.w	r9, #0
 80055ea:	d021      	beq.n	8005630 <__multiply+0x144>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	f104 0c14 	add.w	ip, r4, #20
 80055f2:	46ae      	mov	lr, r5
 80055f4:	f04f 0a00 	mov.w	sl, #0
 80055f8:	f8bc b000 	ldrh.w	fp, [ip]
 80055fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005600:	fb09 770b 	mla	r7, r9, fp, r7
 8005604:	4457      	add	r7, sl
 8005606:	b29b      	uxth	r3, r3
 8005608:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800560c:	f84e 3b04 	str.w	r3, [lr], #4
 8005610:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005614:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005618:	f8be 3000 	ldrh.w	r3, [lr]
 800561c:	fb09 330a 	mla	r3, r9, sl, r3
 8005620:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005624:	4562      	cmp	r2, ip
 8005626:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800562a:	d8e5      	bhi.n	80055f8 <__multiply+0x10c>
 800562c:	9f01      	ldr	r7, [sp, #4]
 800562e:	51eb      	str	r3, [r5, r7]
 8005630:	3504      	adds	r5, #4
 8005632:	e799      	b.n	8005568 <__multiply+0x7c>
 8005634:	3e01      	subs	r6, #1
 8005636:	e79b      	b.n	8005570 <__multiply+0x84>
 8005638:	08006288 	.word	0x08006288
 800563c:	08006299 	.word	0x08006299

08005640 <__pow5mult>:
 8005640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005644:	4615      	mov	r5, r2
 8005646:	f012 0203 	ands.w	r2, r2, #3
 800564a:	4607      	mov	r7, r0
 800564c:	460e      	mov	r6, r1
 800564e:	d007      	beq.n	8005660 <__pow5mult+0x20>
 8005650:	4c25      	ldr	r4, [pc, #148]	@ (80056e8 <__pow5mult+0xa8>)
 8005652:	3a01      	subs	r2, #1
 8005654:	2300      	movs	r3, #0
 8005656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800565a:	f7ff fe9f 	bl	800539c <__multadd>
 800565e:	4606      	mov	r6, r0
 8005660:	10ad      	asrs	r5, r5, #2
 8005662:	d03d      	beq.n	80056e0 <__pow5mult+0xa0>
 8005664:	69fc      	ldr	r4, [r7, #28]
 8005666:	b97c      	cbnz	r4, 8005688 <__pow5mult+0x48>
 8005668:	2010      	movs	r0, #16
 800566a:	f7ff fd7f 	bl	800516c <malloc>
 800566e:	4602      	mov	r2, r0
 8005670:	61f8      	str	r0, [r7, #28]
 8005672:	b928      	cbnz	r0, 8005680 <__pow5mult+0x40>
 8005674:	4b1d      	ldr	r3, [pc, #116]	@ (80056ec <__pow5mult+0xac>)
 8005676:	481e      	ldr	r0, [pc, #120]	@ (80056f0 <__pow5mult+0xb0>)
 8005678:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800567c:	f000 fa78 	bl	8005b70 <__assert_func>
 8005680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005684:	6004      	str	r4, [r0, #0]
 8005686:	60c4      	str	r4, [r0, #12]
 8005688:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800568c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005690:	b94c      	cbnz	r4, 80056a6 <__pow5mult+0x66>
 8005692:	f240 2171 	movw	r1, #625	@ 0x271
 8005696:	4638      	mov	r0, r7
 8005698:	f7ff ff12 	bl	80054c0 <__i2b>
 800569c:	2300      	movs	r3, #0
 800569e:	f8c8 0008 	str.w	r0, [r8, #8]
 80056a2:	4604      	mov	r4, r0
 80056a4:	6003      	str	r3, [r0, #0]
 80056a6:	f04f 0900 	mov.w	r9, #0
 80056aa:	07eb      	lsls	r3, r5, #31
 80056ac:	d50a      	bpl.n	80056c4 <__pow5mult+0x84>
 80056ae:	4631      	mov	r1, r6
 80056b0:	4622      	mov	r2, r4
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7ff ff1a 	bl	80054ec <__multiply>
 80056b8:	4631      	mov	r1, r6
 80056ba:	4680      	mov	r8, r0
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff fe4b 	bl	8005358 <_Bfree>
 80056c2:	4646      	mov	r6, r8
 80056c4:	106d      	asrs	r5, r5, #1
 80056c6:	d00b      	beq.n	80056e0 <__pow5mult+0xa0>
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	b938      	cbnz	r0, 80056dc <__pow5mult+0x9c>
 80056cc:	4622      	mov	r2, r4
 80056ce:	4621      	mov	r1, r4
 80056d0:	4638      	mov	r0, r7
 80056d2:	f7ff ff0b 	bl	80054ec <__multiply>
 80056d6:	6020      	str	r0, [r4, #0]
 80056d8:	f8c0 9000 	str.w	r9, [r0]
 80056dc:	4604      	mov	r4, r0
 80056de:	e7e4      	b.n	80056aa <__pow5mult+0x6a>
 80056e0:	4630      	mov	r0, r6
 80056e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e6:	bf00      	nop
 80056e8:	080062f4 	.word	0x080062f4
 80056ec:	08006219 	.word	0x08006219
 80056f0:	08006299 	.word	0x08006299

080056f4 <__lshift>:
 80056f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f8:	460c      	mov	r4, r1
 80056fa:	6849      	ldr	r1, [r1, #4]
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005702:	68a3      	ldr	r3, [r4, #8]
 8005704:	4607      	mov	r7, r0
 8005706:	4691      	mov	r9, r2
 8005708:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800570c:	f108 0601 	add.w	r6, r8, #1
 8005710:	42b3      	cmp	r3, r6
 8005712:	db0b      	blt.n	800572c <__lshift+0x38>
 8005714:	4638      	mov	r0, r7
 8005716:	f7ff fddf 	bl	80052d8 <_Balloc>
 800571a:	4605      	mov	r5, r0
 800571c:	b948      	cbnz	r0, 8005732 <__lshift+0x3e>
 800571e:	4602      	mov	r2, r0
 8005720:	4b28      	ldr	r3, [pc, #160]	@ (80057c4 <__lshift+0xd0>)
 8005722:	4829      	ldr	r0, [pc, #164]	@ (80057c8 <__lshift+0xd4>)
 8005724:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005728:	f000 fa22 	bl	8005b70 <__assert_func>
 800572c:	3101      	adds	r1, #1
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	e7ee      	b.n	8005710 <__lshift+0x1c>
 8005732:	2300      	movs	r3, #0
 8005734:	f100 0114 	add.w	r1, r0, #20
 8005738:	f100 0210 	add.w	r2, r0, #16
 800573c:	4618      	mov	r0, r3
 800573e:	4553      	cmp	r3, sl
 8005740:	db33      	blt.n	80057aa <__lshift+0xb6>
 8005742:	6920      	ldr	r0, [r4, #16]
 8005744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005748:	f104 0314 	add.w	r3, r4, #20
 800574c:	f019 091f 	ands.w	r9, r9, #31
 8005750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005754:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005758:	d02b      	beq.n	80057b2 <__lshift+0xbe>
 800575a:	f1c9 0e20 	rsb	lr, r9, #32
 800575e:	468a      	mov	sl, r1
 8005760:	2200      	movs	r2, #0
 8005762:	6818      	ldr	r0, [r3, #0]
 8005764:	fa00 f009 	lsl.w	r0, r0, r9
 8005768:	4310      	orrs	r0, r2
 800576a:	f84a 0b04 	str.w	r0, [sl], #4
 800576e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005772:	459c      	cmp	ip, r3
 8005774:	fa22 f20e 	lsr.w	r2, r2, lr
 8005778:	d8f3      	bhi.n	8005762 <__lshift+0x6e>
 800577a:	ebac 0304 	sub.w	r3, ip, r4
 800577e:	3b15      	subs	r3, #21
 8005780:	f023 0303 	bic.w	r3, r3, #3
 8005784:	3304      	adds	r3, #4
 8005786:	f104 0015 	add.w	r0, r4, #21
 800578a:	4584      	cmp	ip, r0
 800578c:	bf38      	it	cc
 800578e:	2304      	movcc	r3, #4
 8005790:	50ca      	str	r2, [r1, r3]
 8005792:	b10a      	cbz	r2, 8005798 <__lshift+0xa4>
 8005794:	f108 0602 	add.w	r6, r8, #2
 8005798:	3e01      	subs	r6, #1
 800579a:	4638      	mov	r0, r7
 800579c:	612e      	str	r6, [r5, #16]
 800579e:	4621      	mov	r1, r4
 80057a0:	f7ff fdda 	bl	8005358 <_Bfree>
 80057a4:	4628      	mov	r0, r5
 80057a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80057ae:	3301      	adds	r3, #1
 80057b0:	e7c5      	b.n	800573e <__lshift+0x4a>
 80057b2:	3904      	subs	r1, #4
 80057b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80057bc:	459c      	cmp	ip, r3
 80057be:	d8f9      	bhi.n	80057b4 <__lshift+0xc0>
 80057c0:	e7ea      	b.n	8005798 <__lshift+0xa4>
 80057c2:	bf00      	nop
 80057c4:	08006288 	.word	0x08006288
 80057c8:	08006299 	.word	0x08006299

080057cc <__mcmp>:
 80057cc:	690a      	ldr	r2, [r1, #16]
 80057ce:	4603      	mov	r3, r0
 80057d0:	6900      	ldr	r0, [r0, #16]
 80057d2:	1a80      	subs	r0, r0, r2
 80057d4:	b530      	push	{r4, r5, lr}
 80057d6:	d10e      	bne.n	80057f6 <__mcmp+0x2a>
 80057d8:	3314      	adds	r3, #20
 80057da:	3114      	adds	r1, #20
 80057dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80057e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80057e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80057e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80057ec:	4295      	cmp	r5, r2
 80057ee:	d003      	beq.n	80057f8 <__mcmp+0x2c>
 80057f0:	d205      	bcs.n	80057fe <__mcmp+0x32>
 80057f2:	f04f 30ff 	mov.w	r0, #4294967295
 80057f6:	bd30      	pop	{r4, r5, pc}
 80057f8:	42a3      	cmp	r3, r4
 80057fa:	d3f3      	bcc.n	80057e4 <__mcmp+0x18>
 80057fc:	e7fb      	b.n	80057f6 <__mcmp+0x2a>
 80057fe:	2001      	movs	r0, #1
 8005800:	e7f9      	b.n	80057f6 <__mcmp+0x2a>
	...

08005804 <__mdiff>:
 8005804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	4689      	mov	r9, r1
 800580a:	4606      	mov	r6, r0
 800580c:	4611      	mov	r1, r2
 800580e:	4648      	mov	r0, r9
 8005810:	4614      	mov	r4, r2
 8005812:	f7ff ffdb 	bl	80057cc <__mcmp>
 8005816:	1e05      	subs	r5, r0, #0
 8005818:	d112      	bne.n	8005840 <__mdiff+0x3c>
 800581a:	4629      	mov	r1, r5
 800581c:	4630      	mov	r0, r6
 800581e:	f7ff fd5b 	bl	80052d8 <_Balloc>
 8005822:	4602      	mov	r2, r0
 8005824:	b928      	cbnz	r0, 8005832 <__mdiff+0x2e>
 8005826:	4b3f      	ldr	r3, [pc, #252]	@ (8005924 <__mdiff+0x120>)
 8005828:	f240 2137 	movw	r1, #567	@ 0x237
 800582c:	483e      	ldr	r0, [pc, #248]	@ (8005928 <__mdiff+0x124>)
 800582e:	f000 f99f 	bl	8005b70 <__assert_func>
 8005832:	2301      	movs	r3, #1
 8005834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005838:	4610      	mov	r0, r2
 800583a:	b003      	add	sp, #12
 800583c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005840:	bfbc      	itt	lt
 8005842:	464b      	movlt	r3, r9
 8005844:	46a1      	movlt	r9, r4
 8005846:	4630      	mov	r0, r6
 8005848:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800584c:	bfba      	itte	lt
 800584e:	461c      	movlt	r4, r3
 8005850:	2501      	movlt	r5, #1
 8005852:	2500      	movge	r5, #0
 8005854:	f7ff fd40 	bl	80052d8 <_Balloc>
 8005858:	4602      	mov	r2, r0
 800585a:	b918      	cbnz	r0, 8005864 <__mdiff+0x60>
 800585c:	4b31      	ldr	r3, [pc, #196]	@ (8005924 <__mdiff+0x120>)
 800585e:	f240 2145 	movw	r1, #581	@ 0x245
 8005862:	e7e3      	b.n	800582c <__mdiff+0x28>
 8005864:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005868:	6926      	ldr	r6, [r4, #16]
 800586a:	60c5      	str	r5, [r0, #12]
 800586c:	f109 0310 	add.w	r3, r9, #16
 8005870:	f109 0514 	add.w	r5, r9, #20
 8005874:	f104 0e14 	add.w	lr, r4, #20
 8005878:	f100 0b14 	add.w	fp, r0, #20
 800587c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005880:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	46d9      	mov	r9, fp
 8005888:	f04f 0c00 	mov.w	ip, #0
 800588c:	9b01      	ldr	r3, [sp, #4]
 800588e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005892:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005896:	9301      	str	r3, [sp, #4]
 8005898:	fa1f f38a 	uxth.w	r3, sl
 800589c:	4619      	mov	r1, r3
 800589e:	b283      	uxth	r3, r0
 80058a0:	1acb      	subs	r3, r1, r3
 80058a2:	0c00      	lsrs	r0, r0, #16
 80058a4:	4463      	add	r3, ip
 80058a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80058aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80058b4:	4576      	cmp	r6, lr
 80058b6:	f849 3b04 	str.w	r3, [r9], #4
 80058ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80058be:	d8e5      	bhi.n	800588c <__mdiff+0x88>
 80058c0:	1b33      	subs	r3, r6, r4
 80058c2:	3b15      	subs	r3, #21
 80058c4:	f023 0303 	bic.w	r3, r3, #3
 80058c8:	3415      	adds	r4, #21
 80058ca:	3304      	adds	r3, #4
 80058cc:	42a6      	cmp	r6, r4
 80058ce:	bf38      	it	cc
 80058d0:	2304      	movcc	r3, #4
 80058d2:	441d      	add	r5, r3
 80058d4:	445b      	add	r3, fp
 80058d6:	461e      	mov	r6, r3
 80058d8:	462c      	mov	r4, r5
 80058da:	4544      	cmp	r4, r8
 80058dc:	d30e      	bcc.n	80058fc <__mdiff+0xf8>
 80058de:	f108 0103 	add.w	r1, r8, #3
 80058e2:	1b49      	subs	r1, r1, r5
 80058e4:	f021 0103 	bic.w	r1, r1, #3
 80058e8:	3d03      	subs	r5, #3
 80058ea:	45a8      	cmp	r8, r5
 80058ec:	bf38      	it	cc
 80058ee:	2100      	movcc	r1, #0
 80058f0:	440b      	add	r3, r1
 80058f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80058f6:	b191      	cbz	r1, 800591e <__mdiff+0x11a>
 80058f8:	6117      	str	r7, [r2, #16]
 80058fa:	e79d      	b.n	8005838 <__mdiff+0x34>
 80058fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8005900:	46e6      	mov	lr, ip
 8005902:	0c08      	lsrs	r0, r1, #16
 8005904:	fa1c fc81 	uxtah	ip, ip, r1
 8005908:	4471      	add	r1, lr
 800590a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800590e:	b289      	uxth	r1, r1
 8005910:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005914:	f846 1b04 	str.w	r1, [r6], #4
 8005918:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800591c:	e7dd      	b.n	80058da <__mdiff+0xd6>
 800591e:	3f01      	subs	r7, #1
 8005920:	e7e7      	b.n	80058f2 <__mdiff+0xee>
 8005922:	bf00      	nop
 8005924:	08006288 	.word	0x08006288
 8005928:	08006299 	.word	0x08006299

0800592c <__d2b>:
 800592c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005930:	460f      	mov	r7, r1
 8005932:	2101      	movs	r1, #1
 8005934:	ec59 8b10 	vmov	r8, r9, d0
 8005938:	4616      	mov	r6, r2
 800593a:	f7ff fccd 	bl	80052d8 <_Balloc>
 800593e:	4604      	mov	r4, r0
 8005940:	b930      	cbnz	r0, 8005950 <__d2b+0x24>
 8005942:	4602      	mov	r2, r0
 8005944:	4b23      	ldr	r3, [pc, #140]	@ (80059d4 <__d2b+0xa8>)
 8005946:	4824      	ldr	r0, [pc, #144]	@ (80059d8 <__d2b+0xac>)
 8005948:	f240 310f 	movw	r1, #783	@ 0x30f
 800594c:	f000 f910 	bl	8005b70 <__assert_func>
 8005950:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005954:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005958:	b10d      	cbz	r5, 800595e <__d2b+0x32>
 800595a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800595e:	9301      	str	r3, [sp, #4]
 8005960:	f1b8 0300 	subs.w	r3, r8, #0
 8005964:	d023      	beq.n	80059ae <__d2b+0x82>
 8005966:	4668      	mov	r0, sp
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	f7ff fd7c 	bl	8005466 <__lo0bits>
 800596e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005972:	b1d0      	cbz	r0, 80059aa <__d2b+0x7e>
 8005974:	f1c0 0320 	rsb	r3, r0, #32
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	430b      	orrs	r3, r1
 800597e:	40c2      	lsrs	r2, r0
 8005980:	6163      	str	r3, [r4, #20]
 8005982:	9201      	str	r2, [sp, #4]
 8005984:	9b01      	ldr	r3, [sp, #4]
 8005986:	61a3      	str	r3, [r4, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf0c      	ite	eq
 800598c:	2201      	moveq	r2, #1
 800598e:	2202      	movne	r2, #2
 8005990:	6122      	str	r2, [r4, #16]
 8005992:	b1a5      	cbz	r5, 80059be <__d2b+0x92>
 8005994:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005998:	4405      	add	r5, r0
 800599a:	603d      	str	r5, [r7, #0]
 800599c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80059a0:	6030      	str	r0, [r6, #0]
 80059a2:	4620      	mov	r0, r4
 80059a4:	b003      	add	sp, #12
 80059a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059aa:	6161      	str	r1, [r4, #20]
 80059ac:	e7ea      	b.n	8005984 <__d2b+0x58>
 80059ae:	a801      	add	r0, sp, #4
 80059b0:	f7ff fd59 	bl	8005466 <__lo0bits>
 80059b4:	9b01      	ldr	r3, [sp, #4]
 80059b6:	6163      	str	r3, [r4, #20]
 80059b8:	3020      	adds	r0, #32
 80059ba:	2201      	movs	r2, #1
 80059bc:	e7e8      	b.n	8005990 <__d2b+0x64>
 80059be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80059c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80059c6:	6038      	str	r0, [r7, #0]
 80059c8:	6918      	ldr	r0, [r3, #16]
 80059ca:	f7ff fd2d 	bl	8005428 <__hi0bits>
 80059ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80059d2:	e7e5      	b.n	80059a0 <__d2b+0x74>
 80059d4:	08006288 	.word	0x08006288
 80059d8:	08006299 	.word	0x08006299

080059dc <__sflush_r>:
 80059dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	0716      	lsls	r6, r2, #28
 80059e6:	4605      	mov	r5, r0
 80059e8:	460c      	mov	r4, r1
 80059ea:	d454      	bmi.n	8005a96 <__sflush_r+0xba>
 80059ec:	684b      	ldr	r3, [r1, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	dc02      	bgt.n	80059f8 <__sflush_r+0x1c>
 80059f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dd48      	ble.n	8005a8a <__sflush_r+0xae>
 80059f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	d045      	beq.n	8005a8a <__sflush_r+0xae>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a04:	682f      	ldr	r7, [r5, #0]
 8005a06:	6a21      	ldr	r1, [r4, #32]
 8005a08:	602b      	str	r3, [r5, #0]
 8005a0a:	d030      	beq.n	8005a6e <__sflush_r+0x92>
 8005a0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	0759      	lsls	r1, r3, #29
 8005a12:	d505      	bpl.n	8005a20 <__sflush_r+0x44>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	1ad2      	subs	r2, r2, r3
 8005a18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a1a:	b10b      	cbz	r3, 8005a20 <__sflush_r+0x44>
 8005a1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a24:	6a21      	ldr	r1, [r4, #32]
 8005a26:	4628      	mov	r0, r5
 8005a28:	47b0      	blx	r6
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	d106      	bne.n	8005a3e <__sflush_r+0x62>
 8005a30:	6829      	ldr	r1, [r5, #0]
 8005a32:	291d      	cmp	r1, #29
 8005a34:	d82b      	bhi.n	8005a8e <__sflush_r+0xb2>
 8005a36:	4a2a      	ldr	r2, [pc, #168]	@ (8005ae0 <__sflush_r+0x104>)
 8005a38:	410a      	asrs	r2, r1
 8005a3a:	07d6      	lsls	r6, r2, #31
 8005a3c:	d427      	bmi.n	8005a8e <__sflush_r+0xb2>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6062      	str	r2, [r4, #4]
 8005a42:	04d9      	lsls	r1, r3, #19
 8005a44:	6922      	ldr	r2, [r4, #16]
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	d504      	bpl.n	8005a54 <__sflush_r+0x78>
 8005a4a:	1c42      	adds	r2, r0, #1
 8005a4c:	d101      	bne.n	8005a52 <__sflush_r+0x76>
 8005a4e:	682b      	ldr	r3, [r5, #0]
 8005a50:	b903      	cbnz	r3, 8005a54 <__sflush_r+0x78>
 8005a52:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a56:	602f      	str	r7, [r5, #0]
 8005a58:	b1b9      	cbz	r1, 8005a8a <__sflush_r+0xae>
 8005a5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a5e:	4299      	cmp	r1, r3
 8005a60:	d002      	beq.n	8005a68 <__sflush_r+0x8c>
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7ff fb38 	bl	80050d8 <_free_r>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a6c:	e00d      	b.n	8005a8a <__sflush_r+0xae>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b0      	blx	r6
 8005a74:	4602      	mov	r2, r0
 8005a76:	1c50      	adds	r0, r2, #1
 8005a78:	d1c9      	bne.n	8005a0e <__sflush_r+0x32>
 8005a7a:	682b      	ldr	r3, [r5, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0c6      	beq.n	8005a0e <__sflush_r+0x32>
 8005a80:	2b1d      	cmp	r3, #29
 8005a82:	d001      	beq.n	8005a88 <__sflush_r+0xac>
 8005a84:	2b16      	cmp	r3, #22
 8005a86:	d11e      	bne.n	8005ac6 <__sflush_r+0xea>
 8005a88:	602f      	str	r7, [r5, #0]
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	e022      	b.n	8005ad4 <__sflush_r+0xf8>
 8005a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	e01b      	b.n	8005ace <__sflush_r+0xf2>
 8005a96:	690f      	ldr	r7, [r1, #16]
 8005a98:	2f00      	cmp	r7, #0
 8005a9a:	d0f6      	beq.n	8005a8a <__sflush_r+0xae>
 8005a9c:	0793      	lsls	r3, r2, #30
 8005a9e:	680e      	ldr	r6, [r1, #0]
 8005aa0:	bf08      	it	eq
 8005aa2:	694b      	ldreq	r3, [r1, #20]
 8005aa4:	600f      	str	r7, [r1, #0]
 8005aa6:	bf18      	it	ne
 8005aa8:	2300      	movne	r3, #0
 8005aaa:	eba6 0807 	sub.w	r8, r6, r7
 8005aae:	608b      	str	r3, [r1, #8]
 8005ab0:	f1b8 0f00 	cmp.w	r8, #0
 8005ab4:	dde9      	ble.n	8005a8a <__sflush_r+0xae>
 8005ab6:	6a21      	ldr	r1, [r4, #32]
 8005ab8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005aba:	4643      	mov	r3, r8
 8005abc:	463a      	mov	r2, r7
 8005abe:	4628      	mov	r0, r5
 8005ac0:	47b0      	blx	r6
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	dc08      	bgt.n	8005ad8 <__sflush_r+0xfc>
 8005ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ace:	81a3      	strh	r3, [r4, #12]
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad8:	4407      	add	r7, r0
 8005ada:	eba8 0800 	sub.w	r8, r8, r0
 8005ade:	e7e7      	b.n	8005ab0 <__sflush_r+0xd4>
 8005ae0:	dfbffffe 	.word	0xdfbffffe

08005ae4 <_fflush_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	690b      	ldr	r3, [r1, #16]
 8005ae8:	4605      	mov	r5, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	b913      	cbnz	r3, 8005af4 <_fflush_r+0x10>
 8005aee:	2500      	movs	r5, #0
 8005af0:	4628      	mov	r0, r5
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	b118      	cbz	r0, 8005afe <_fflush_r+0x1a>
 8005af6:	6a03      	ldr	r3, [r0, #32]
 8005af8:	b90b      	cbnz	r3, 8005afe <_fflush_r+0x1a>
 8005afa:	f7fe fba7 	bl	800424c <__sinit>
 8005afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f3      	beq.n	8005aee <_fflush_r+0xa>
 8005b06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b08:	07d0      	lsls	r0, r2, #31
 8005b0a:	d404      	bmi.n	8005b16 <_fflush_r+0x32>
 8005b0c:	0599      	lsls	r1, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_fflush_r+0x32>
 8005b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b12:	f7fe fc92 	bl	800443a <__retarget_lock_acquire_recursive>
 8005b16:	4628      	mov	r0, r5
 8005b18:	4621      	mov	r1, r4
 8005b1a:	f7ff ff5f 	bl	80059dc <__sflush_r>
 8005b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b20:	07da      	lsls	r2, r3, #31
 8005b22:	4605      	mov	r5, r0
 8005b24:	d4e4      	bmi.n	8005af0 <_fflush_r+0xc>
 8005b26:	89a3      	ldrh	r3, [r4, #12]
 8005b28:	059b      	lsls	r3, r3, #22
 8005b2a:	d4e1      	bmi.n	8005af0 <_fflush_r+0xc>
 8005b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b2e:	f7fe fc85 	bl	800443c <__retarget_lock_release_recursive>
 8005b32:	e7dd      	b.n	8005af0 <_fflush_r+0xc>

08005b34 <_sbrk_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d06      	ldr	r5, [pc, #24]	@ (8005b50 <_sbrk_r+0x1c>)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	602b      	str	r3, [r5, #0]
 8005b40:	f7fb fab2 	bl	80010a8 <_sbrk>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d102      	bne.n	8005b4e <_sbrk_r+0x1a>
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	b103      	cbz	r3, 8005b4e <_sbrk_r+0x1a>
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}
 8005b50:	20000388 	.word	0x20000388

08005b54 <memcpy>:
 8005b54:	440a      	add	r2, r1
 8005b56:	4291      	cmp	r1, r2
 8005b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b5c:	d100      	bne.n	8005b60 <memcpy+0xc>
 8005b5e:	4770      	bx	lr
 8005b60:	b510      	push	{r4, lr}
 8005b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b6a:	4291      	cmp	r1, r2
 8005b6c:	d1f9      	bne.n	8005b62 <memcpy+0xe>
 8005b6e:	bd10      	pop	{r4, pc}

08005b70 <__assert_func>:
 8005b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b72:	4614      	mov	r4, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <__assert_func+0x2c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	68d8      	ldr	r0, [r3, #12]
 8005b7e:	b954      	cbnz	r4, 8005b96 <__assert_func+0x26>
 8005b80:	4b07      	ldr	r3, [pc, #28]	@ (8005ba0 <__assert_func+0x30>)
 8005b82:	461c      	mov	r4, r3
 8005b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b88:	9100      	str	r1, [sp, #0]
 8005b8a:	462b      	mov	r3, r5
 8005b8c:	4905      	ldr	r1, [pc, #20]	@ (8005ba4 <__assert_func+0x34>)
 8005b8e:	f000 f841 	bl	8005c14 <fiprintf>
 8005b92:	f000 f851 	bl	8005c38 <abort>
 8005b96:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <__assert_func+0x38>)
 8005b98:	e7f4      	b.n	8005b84 <__assert_func+0x14>
 8005b9a:	bf00      	nop
 8005b9c:	2000001c 	.word	0x2000001c
 8005ba0:	08006435 	.word	0x08006435
 8005ba4:	08006407 	.word	0x08006407
 8005ba8:	080063fa 	.word	0x080063fa

08005bac <_calloc_r>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	fba1 5402 	umull	r5, r4, r1, r2
 8005bb2:	b93c      	cbnz	r4, 8005bc4 <_calloc_r+0x18>
 8005bb4:	4629      	mov	r1, r5
 8005bb6:	f7ff fb03 	bl	80051c0 <_malloc_r>
 8005bba:	4606      	mov	r6, r0
 8005bbc:	b928      	cbnz	r0, 8005bca <_calloc_r+0x1e>
 8005bbe:	2600      	movs	r6, #0
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	220c      	movs	r2, #12
 8005bc6:	6002      	str	r2, [r0, #0]
 8005bc8:	e7f9      	b.n	8005bbe <_calloc_r+0x12>
 8005bca:	462a      	mov	r2, r5
 8005bcc:	4621      	mov	r1, r4
 8005bce:	f7fe fbb6 	bl	800433e <memset>
 8005bd2:	e7f5      	b.n	8005bc0 <_calloc_r+0x14>

08005bd4 <__ascii_mbtowc>:
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	b901      	cbnz	r1, 8005bda <__ascii_mbtowc+0x6>
 8005bd8:	a901      	add	r1, sp, #4
 8005bda:	b142      	cbz	r2, 8005bee <__ascii_mbtowc+0x1a>
 8005bdc:	b14b      	cbz	r3, 8005bf2 <__ascii_mbtowc+0x1e>
 8005bde:	7813      	ldrb	r3, [r2, #0]
 8005be0:	600b      	str	r3, [r1, #0]
 8005be2:	7812      	ldrb	r2, [r2, #0]
 8005be4:	1e10      	subs	r0, r2, #0
 8005be6:	bf18      	it	ne
 8005be8:	2001      	movne	r0, #1
 8005bea:	b002      	add	sp, #8
 8005bec:	4770      	bx	lr
 8005bee:	4610      	mov	r0, r2
 8005bf0:	e7fb      	b.n	8005bea <__ascii_mbtowc+0x16>
 8005bf2:	f06f 0001 	mvn.w	r0, #1
 8005bf6:	e7f8      	b.n	8005bea <__ascii_mbtowc+0x16>

08005bf8 <__ascii_wctomb>:
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	4608      	mov	r0, r1
 8005bfc:	b141      	cbz	r1, 8005c10 <__ascii_wctomb+0x18>
 8005bfe:	2aff      	cmp	r2, #255	@ 0xff
 8005c00:	d904      	bls.n	8005c0c <__ascii_wctomb+0x14>
 8005c02:	228a      	movs	r2, #138	@ 0x8a
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	f04f 30ff 	mov.w	r0, #4294967295
 8005c0a:	4770      	bx	lr
 8005c0c:	700a      	strb	r2, [r1, #0]
 8005c0e:	2001      	movs	r0, #1
 8005c10:	4770      	bx	lr
	...

08005c14 <fiprintf>:
 8005c14:	b40e      	push	{r1, r2, r3}
 8005c16:	b503      	push	{r0, r1, lr}
 8005c18:	4601      	mov	r1, r0
 8005c1a:	ab03      	add	r3, sp, #12
 8005c1c:	4805      	ldr	r0, [pc, #20]	@ (8005c34 <fiprintf+0x20>)
 8005c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c22:	6800      	ldr	r0, [r0, #0]
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	f000 f837 	bl	8005c98 <_vfiprintf_r>
 8005c2a:	b002      	add	sp, #8
 8005c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c30:	b003      	add	sp, #12
 8005c32:	4770      	bx	lr
 8005c34:	2000001c 	.word	0x2000001c

08005c38 <abort>:
 8005c38:	b508      	push	{r3, lr}
 8005c3a:	2006      	movs	r0, #6
 8005c3c:	f000 fa00 	bl	8006040 <raise>
 8005c40:	2001      	movs	r0, #1
 8005c42:	f7fb f9b9 	bl	8000fb8 <_exit>

08005c46 <__sfputc_r>:
 8005c46:	6893      	ldr	r3, [r2, #8]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	b410      	push	{r4}
 8005c4e:	6093      	str	r3, [r2, #8]
 8005c50:	da08      	bge.n	8005c64 <__sfputc_r+0x1e>
 8005c52:	6994      	ldr	r4, [r2, #24]
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	db01      	blt.n	8005c5c <__sfputc_r+0x16>
 8005c58:	290a      	cmp	r1, #10
 8005c5a:	d103      	bne.n	8005c64 <__sfputc_r+0x1e>
 8005c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c60:	f000 b932 	b.w	8005ec8 <__swbuf_r>
 8005c64:	6813      	ldr	r3, [r2, #0]
 8005c66:	1c58      	adds	r0, r3, #1
 8005c68:	6010      	str	r0, [r2, #0]
 8005c6a:	7019      	strb	r1, [r3, #0]
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <__sfputs_r>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	4614      	mov	r4, r2
 8005c7c:	18d5      	adds	r5, r2, r3
 8005c7e:	42ac      	cmp	r4, r5
 8005c80:	d101      	bne.n	8005c86 <__sfputs_r+0x12>
 8005c82:	2000      	movs	r0, #0
 8005c84:	e007      	b.n	8005c96 <__sfputs_r+0x22>
 8005c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c8a:	463a      	mov	r2, r7
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7ff ffda 	bl	8005c46 <__sfputc_r>
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	d1f3      	bne.n	8005c7e <__sfputs_r+0xa>
 8005c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c98 <_vfiprintf_r>:
 8005c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9c:	460d      	mov	r5, r1
 8005c9e:	b09d      	sub	sp, #116	@ 0x74
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	4698      	mov	r8, r3
 8005ca4:	4606      	mov	r6, r0
 8005ca6:	b118      	cbz	r0, 8005cb0 <_vfiprintf_r+0x18>
 8005ca8:	6a03      	ldr	r3, [r0, #32]
 8005caa:	b90b      	cbnz	r3, 8005cb0 <_vfiprintf_r+0x18>
 8005cac:	f7fe face 	bl	800424c <__sinit>
 8005cb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cb2:	07d9      	lsls	r1, r3, #31
 8005cb4:	d405      	bmi.n	8005cc2 <_vfiprintf_r+0x2a>
 8005cb6:	89ab      	ldrh	r3, [r5, #12]
 8005cb8:	059a      	lsls	r2, r3, #22
 8005cba:	d402      	bmi.n	8005cc2 <_vfiprintf_r+0x2a>
 8005cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cbe:	f7fe fbbc 	bl	800443a <__retarget_lock_acquire_recursive>
 8005cc2:	89ab      	ldrh	r3, [r5, #12]
 8005cc4:	071b      	lsls	r3, r3, #28
 8005cc6:	d501      	bpl.n	8005ccc <_vfiprintf_r+0x34>
 8005cc8:	692b      	ldr	r3, [r5, #16]
 8005cca:	b99b      	cbnz	r3, 8005cf4 <_vfiprintf_r+0x5c>
 8005ccc:	4629      	mov	r1, r5
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f000 f938 	bl	8005f44 <__swsetup_r>
 8005cd4:	b170      	cbz	r0, 8005cf4 <_vfiprintf_r+0x5c>
 8005cd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cd8:	07dc      	lsls	r4, r3, #31
 8005cda:	d504      	bpl.n	8005ce6 <_vfiprintf_r+0x4e>
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	b01d      	add	sp, #116	@ 0x74
 8005ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce6:	89ab      	ldrh	r3, [r5, #12]
 8005ce8:	0598      	lsls	r0, r3, #22
 8005cea:	d4f7      	bmi.n	8005cdc <_vfiprintf_r+0x44>
 8005cec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cee:	f7fe fba5 	bl	800443c <__retarget_lock_release_recursive>
 8005cf2:	e7f3      	b.n	8005cdc <_vfiprintf_r+0x44>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cf8:	2320      	movs	r3, #32
 8005cfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d02:	2330      	movs	r3, #48	@ 0x30
 8005d04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005eb4 <_vfiprintf_r+0x21c>
 8005d08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d0c:	f04f 0901 	mov.w	r9, #1
 8005d10:	4623      	mov	r3, r4
 8005d12:	469a      	mov	sl, r3
 8005d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d18:	b10a      	cbz	r2, 8005d1e <_vfiprintf_r+0x86>
 8005d1a:	2a25      	cmp	r2, #37	@ 0x25
 8005d1c:	d1f9      	bne.n	8005d12 <_vfiprintf_r+0x7a>
 8005d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d22:	d00b      	beq.n	8005d3c <_vfiprintf_r+0xa4>
 8005d24:	465b      	mov	r3, fp
 8005d26:	4622      	mov	r2, r4
 8005d28:	4629      	mov	r1, r5
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7ff ffa2 	bl	8005c74 <__sfputs_r>
 8005d30:	3001      	adds	r0, #1
 8005d32:	f000 80a7 	beq.w	8005e84 <_vfiprintf_r+0x1ec>
 8005d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d38:	445a      	add	r2, fp
 8005d3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 809f 	beq.w	8005e84 <_vfiprintf_r+0x1ec>
 8005d46:	2300      	movs	r3, #0
 8005d48:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d50:	f10a 0a01 	add.w	sl, sl, #1
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	9307      	str	r3, [sp, #28]
 8005d58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d5e:	4654      	mov	r4, sl
 8005d60:	2205      	movs	r2, #5
 8005d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d66:	4853      	ldr	r0, [pc, #332]	@ (8005eb4 <_vfiprintf_r+0x21c>)
 8005d68:	f7fa fa32 	bl	80001d0 <memchr>
 8005d6c:	9a04      	ldr	r2, [sp, #16]
 8005d6e:	b9d8      	cbnz	r0, 8005da8 <_vfiprintf_r+0x110>
 8005d70:	06d1      	lsls	r1, r2, #27
 8005d72:	bf44      	itt	mi
 8005d74:	2320      	movmi	r3, #32
 8005d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d7a:	0713      	lsls	r3, r2, #28
 8005d7c:	bf44      	itt	mi
 8005d7e:	232b      	movmi	r3, #43	@ 0x2b
 8005d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d84:	f89a 3000 	ldrb.w	r3, [sl]
 8005d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d8a:	d015      	beq.n	8005db8 <_vfiprintf_r+0x120>
 8005d8c:	9a07      	ldr	r2, [sp, #28]
 8005d8e:	4654      	mov	r4, sl
 8005d90:	2000      	movs	r0, #0
 8005d92:	f04f 0c0a 	mov.w	ip, #10
 8005d96:	4621      	mov	r1, r4
 8005d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d9c:	3b30      	subs	r3, #48	@ 0x30
 8005d9e:	2b09      	cmp	r3, #9
 8005da0:	d94b      	bls.n	8005e3a <_vfiprintf_r+0x1a2>
 8005da2:	b1b0      	cbz	r0, 8005dd2 <_vfiprintf_r+0x13a>
 8005da4:	9207      	str	r2, [sp, #28]
 8005da6:	e014      	b.n	8005dd2 <_vfiprintf_r+0x13a>
 8005da8:	eba0 0308 	sub.w	r3, r0, r8
 8005dac:	fa09 f303 	lsl.w	r3, r9, r3
 8005db0:	4313      	orrs	r3, r2
 8005db2:	9304      	str	r3, [sp, #16]
 8005db4:	46a2      	mov	sl, r4
 8005db6:	e7d2      	b.n	8005d5e <_vfiprintf_r+0xc6>
 8005db8:	9b03      	ldr	r3, [sp, #12]
 8005dba:	1d19      	adds	r1, r3, #4
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	9103      	str	r1, [sp, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	bfbb      	ittet	lt
 8005dc4:	425b      	neglt	r3, r3
 8005dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8005dca:	9307      	strge	r3, [sp, #28]
 8005dcc:	9307      	strlt	r3, [sp, #28]
 8005dce:	bfb8      	it	lt
 8005dd0:	9204      	strlt	r2, [sp, #16]
 8005dd2:	7823      	ldrb	r3, [r4, #0]
 8005dd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dd6:	d10a      	bne.n	8005dee <_vfiprintf_r+0x156>
 8005dd8:	7863      	ldrb	r3, [r4, #1]
 8005dda:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ddc:	d132      	bne.n	8005e44 <_vfiprintf_r+0x1ac>
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	1d1a      	adds	r2, r3, #4
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	9203      	str	r2, [sp, #12]
 8005de6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dea:	3402      	adds	r4, #2
 8005dec:	9305      	str	r3, [sp, #20]
 8005dee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ec4 <_vfiprintf_r+0x22c>
 8005df2:	7821      	ldrb	r1, [r4, #0]
 8005df4:	2203      	movs	r2, #3
 8005df6:	4650      	mov	r0, sl
 8005df8:	f7fa f9ea 	bl	80001d0 <memchr>
 8005dfc:	b138      	cbz	r0, 8005e0e <_vfiprintf_r+0x176>
 8005dfe:	9b04      	ldr	r3, [sp, #16]
 8005e00:	eba0 000a 	sub.w	r0, r0, sl
 8005e04:	2240      	movs	r2, #64	@ 0x40
 8005e06:	4082      	lsls	r2, r0
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	3401      	adds	r4, #1
 8005e0c:	9304      	str	r3, [sp, #16]
 8005e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e12:	4829      	ldr	r0, [pc, #164]	@ (8005eb8 <_vfiprintf_r+0x220>)
 8005e14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e18:	2206      	movs	r2, #6
 8005e1a:	f7fa f9d9 	bl	80001d0 <memchr>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d03f      	beq.n	8005ea2 <_vfiprintf_r+0x20a>
 8005e22:	4b26      	ldr	r3, [pc, #152]	@ (8005ebc <_vfiprintf_r+0x224>)
 8005e24:	bb1b      	cbnz	r3, 8005e6e <_vfiprintf_r+0x1d6>
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	3307      	adds	r3, #7
 8005e2a:	f023 0307 	bic.w	r3, r3, #7
 8005e2e:	3308      	adds	r3, #8
 8005e30:	9303      	str	r3, [sp, #12]
 8005e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e34:	443b      	add	r3, r7
 8005e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e38:	e76a      	b.n	8005d10 <_vfiprintf_r+0x78>
 8005e3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e3e:	460c      	mov	r4, r1
 8005e40:	2001      	movs	r0, #1
 8005e42:	e7a8      	b.n	8005d96 <_vfiprintf_r+0xfe>
 8005e44:	2300      	movs	r3, #0
 8005e46:	3401      	adds	r4, #1
 8005e48:	9305      	str	r3, [sp, #20]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	f04f 0c0a 	mov.w	ip, #10
 8005e50:	4620      	mov	r0, r4
 8005e52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e56:	3a30      	subs	r2, #48	@ 0x30
 8005e58:	2a09      	cmp	r2, #9
 8005e5a:	d903      	bls.n	8005e64 <_vfiprintf_r+0x1cc>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0c6      	beq.n	8005dee <_vfiprintf_r+0x156>
 8005e60:	9105      	str	r1, [sp, #20]
 8005e62:	e7c4      	b.n	8005dee <_vfiprintf_r+0x156>
 8005e64:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e68:	4604      	mov	r4, r0
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e7f0      	b.n	8005e50 <_vfiprintf_r+0x1b8>
 8005e6e:	ab03      	add	r3, sp, #12
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	462a      	mov	r2, r5
 8005e74:	4b12      	ldr	r3, [pc, #72]	@ (8005ec0 <_vfiprintf_r+0x228>)
 8005e76:	a904      	add	r1, sp, #16
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7fd fda3 	bl	80039c4 <_printf_float>
 8005e7e:	4607      	mov	r7, r0
 8005e80:	1c78      	adds	r0, r7, #1
 8005e82:	d1d6      	bne.n	8005e32 <_vfiprintf_r+0x19a>
 8005e84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e86:	07d9      	lsls	r1, r3, #31
 8005e88:	d405      	bmi.n	8005e96 <_vfiprintf_r+0x1fe>
 8005e8a:	89ab      	ldrh	r3, [r5, #12]
 8005e8c:	059a      	lsls	r2, r3, #22
 8005e8e:	d402      	bmi.n	8005e96 <_vfiprintf_r+0x1fe>
 8005e90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e92:	f7fe fad3 	bl	800443c <__retarget_lock_release_recursive>
 8005e96:	89ab      	ldrh	r3, [r5, #12]
 8005e98:	065b      	lsls	r3, r3, #25
 8005e9a:	f53f af1f 	bmi.w	8005cdc <_vfiprintf_r+0x44>
 8005e9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ea0:	e71e      	b.n	8005ce0 <_vfiprintf_r+0x48>
 8005ea2:	ab03      	add	r3, sp, #12
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	4b05      	ldr	r3, [pc, #20]	@ (8005ec0 <_vfiprintf_r+0x228>)
 8005eaa:	a904      	add	r1, sp, #16
 8005eac:	4630      	mov	r0, r6
 8005eae:	f7fe f821 	bl	8003ef4 <_printf_i>
 8005eb2:	e7e4      	b.n	8005e7e <_vfiprintf_r+0x1e6>
 8005eb4:	08006537 	.word	0x08006537
 8005eb8:	08006541 	.word	0x08006541
 8005ebc:	080039c5 	.word	0x080039c5
 8005ec0:	08005c75 	.word	0x08005c75
 8005ec4:	0800653d 	.word	0x0800653d

08005ec8 <__swbuf_r>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	460e      	mov	r6, r1
 8005ecc:	4614      	mov	r4, r2
 8005ece:	4605      	mov	r5, r0
 8005ed0:	b118      	cbz	r0, 8005eda <__swbuf_r+0x12>
 8005ed2:	6a03      	ldr	r3, [r0, #32]
 8005ed4:	b90b      	cbnz	r3, 8005eda <__swbuf_r+0x12>
 8005ed6:	f7fe f9b9 	bl	800424c <__sinit>
 8005eda:	69a3      	ldr	r3, [r4, #24]
 8005edc:	60a3      	str	r3, [r4, #8]
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	071a      	lsls	r2, r3, #28
 8005ee2:	d501      	bpl.n	8005ee8 <__swbuf_r+0x20>
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	b943      	cbnz	r3, 8005efa <__swbuf_r+0x32>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	4628      	mov	r0, r5
 8005eec:	f000 f82a 	bl	8005f44 <__swsetup_r>
 8005ef0:	b118      	cbz	r0, 8005efa <__swbuf_r+0x32>
 8005ef2:	f04f 37ff 	mov.w	r7, #4294967295
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	6922      	ldr	r2, [r4, #16]
 8005efe:	1a98      	subs	r0, r3, r2
 8005f00:	6963      	ldr	r3, [r4, #20]
 8005f02:	b2f6      	uxtb	r6, r6
 8005f04:	4283      	cmp	r3, r0
 8005f06:	4637      	mov	r7, r6
 8005f08:	dc05      	bgt.n	8005f16 <__swbuf_r+0x4e>
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f7ff fde9 	bl	8005ae4 <_fflush_r>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1ed      	bne.n	8005ef2 <__swbuf_r+0x2a>
 8005f16:	68a3      	ldr	r3, [r4, #8]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	60a3      	str	r3, [r4, #8]
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	6022      	str	r2, [r4, #0]
 8005f22:	701e      	strb	r6, [r3, #0]
 8005f24:	6962      	ldr	r2, [r4, #20]
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d004      	beq.n	8005f36 <__swbuf_r+0x6e>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	07db      	lsls	r3, r3, #31
 8005f30:	d5e1      	bpl.n	8005ef6 <__swbuf_r+0x2e>
 8005f32:	2e0a      	cmp	r6, #10
 8005f34:	d1df      	bne.n	8005ef6 <__swbuf_r+0x2e>
 8005f36:	4621      	mov	r1, r4
 8005f38:	4628      	mov	r0, r5
 8005f3a:	f7ff fdd3 	bl	8005ae4 <_fflush_r>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	d0d9      	beq.n	8005ef6 <__swbuf_r+0x2e>
 8005f42:	e7d6      	b.n	8005ef2 <__swbuf_r+0x2a>

08005f44 <__swsetup_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4b29      	ldr	r3, [pc, #164]	@ (8005fec <__swsetup_r+0xa8>)
 8005f48:	4605      	mov	r5, r0
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	b118      	cbz	r0, 8005f58 <__swsetup_r+0x14>
 8005f50:	6a03      	ldr	r3, [r0, #32]
 8005f52:	b90b      	cbnz	r3, 8005f58 <__swsetup_r+0x14>
 8005f54:	f7fe f97a 	bl	800424c <__sinit>
 8005f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5c:	0719      	lsls	r1, r3, #28
 8005f5e:	d422      	bmi.n	8005fa6 <__swsetup_r+0x62>
 8005f60:	06da      	lsls	r2, r3, #27
 8005f62:	d407      	bmi.n	8005f74 <__swsetup_r+0x30>
 8005f64:	2209      	movs	r2, #9
 8005f66:	602a      	str	r2, [r5, #0]
 8005f68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f72:	e033      	b.n	8005fdc <__swsetup_r+0x98>
 8005f74:	0758      	lsls	r0, r3, #29
 8005f76:	d512      	bpl.n	8005f9e <__swsetup_r+0x5a>
 8005f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f7a:	b141      	cbz	r1, 8005f8e <__swsetup_r+0x4a>
 8005f7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f80:	4299      	cmp	r1, r3
 8005f82:	d002      	beq.n	8005f8a <__swsetup_r+0x46>
 8005f84:	4628      	mov	r0, r5
 8005f86:	f7ff f8a7 	bl	80050d8 <_free_r>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f94:	81a3      	strh	r3, [r4, #12]
 8005f96:	2300      	movs	r3, #0
 8005f98:	6063      	str	r3, [r4, #4]
 8005f9a:	6923      	ldr	r3, [r4, #16]
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	f043 0308 	orr.w	r3, r3, #8
 8005fa4:	81a3      	strh	r3, [r4, #12]
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	b94b      	cbnz	r3, 8005fbe <__swsetup_r+0x7a>
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fb4:	d003      	beq.n	8005fbe <__swsetup_r+0x7a>
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 f883 	bl	80060c4 <__smakebuf_r>
 8005fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc2:	f013 0201 	ands.w	r2, r3, #1
 8005fc6:	d00a      	beq.n	8005fde <__swsetup_r+0x9a>
 8005fc8:	2200      	movs	r2, #0
 8005fca:	60a2      	str	r2, [r4, #8]
 8005fcc:	6962      	ldr	r2, [r4, #20]
 8005fce:	4252      	negs	r2, r2
 8005fd0:	61a2      	str	r2, [r4, #24]
 8005fd2:	6922      	ldr	r2, [r4, #16]
 8005fd4:	b942      	cbnz	r2, 8005fe8 <__swsetup_r+0xa4>
 8005fd6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fda:	d1c5      	bne.n	8005f68 <__swsetup_r+0x24>
 8005fdc:	bd38      	pop	{r3, r4, r5, pc}
 8005fde:	0799      	lsls	r1, r3, #30
 8005fe0:	bf58      	it	pl
 8005fe2:	6962      	ldrpl	r2, [r4, #20]
 8005fe4:	60a2      	str	r2, [r4, #8]
 8005fe6:	e7f4      	b.n	8005fd2 <__swsetup_r+0x8e>
 8005fe8:	2000      	movs	r0, #0
 8005fea:	e7f7      	b.n	8005fdc <__swsetup_r+0x98>
 8005fec:	2000001c 	.word	0x2000001c

08005ff0 <_raise_r>:
 8005ff0:	291f      	cmp	r1, #31
 8005ff2:	b538      	push	{r3, r4, r5, lr}
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	d904      	bls.n	8006004 <_raise_r+0x14>
 8005ffa:	2316      	movs	r3, #22
 8005ffc:	6003      	str	r3, [r0, #0]
 8005ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006006:	b112      	cbz	r2, 800600e <_raise_r+0x1e>
 8006008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800600c:	b94b      	cbnz	r3, 8006022 <_raise_r+0x32>
 800600e:	4628      	mov	r0, r5
 8006010:	f000 f830 	bl	8006074 <_getpid_r>
 8006014:	4622      	mov	r2, r4
 8006016:	4601      	mov	r1, r0
 8006018:	4628      	mov	r0, r5
 800601a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800601e:	f000 b817 	b.w	8006050 <_kill_r>
 8006022:	2b01      	cmp	r3, #1
 8006024:	d00a      	beq.n	800603c <_raise_r+0x4c>
 8006026:	1c59      	adds	r1, r3, #1
 8006028:	d103      	bne.n	8006032 <_raise_r+0x42>
 800602a:	2316      	movs	r3, #22
 800602c:	6003      	str	r3, [r0, #0]
 800602e:	2001      	movs	r0, #1
 8006030:	e7e7      	b.n	8006002 <_raise_r+0x12>
 8006032:	2100      	movs	r1, #0
 8006034:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006038:	4620      	mov	r0, r4
 800603a:	4798      	blx	r3
 800603c:	2000      	movs	r0, #0
 800603e:	e7e0      	b.n	8006002 <_raise_r+0x12>

08006040 <raise>:
 8006040:	4b02      	ldr	r3, [pc, #8]	@ (800604c <raise+0xc>)
 8006042:	4601      	mov	r1, r0
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	f7ff bfd3 	b.w	8005ff0 <_raise_r>
 800604a:	bf00      	nop
 800604c:	2000001c 	.word	0x2000001c

08006050 <_kill_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4d07      	ldr	r5, [pc, #28]	@ (8006070 <_kill_r+0x20>)
 8006054:	2300      	movs	r3, #0
 8006056:	4604      	mov	r4, r0
 8006058:	4608      	mov	r0, r1
 800605a:	4611      	mov	r1, r2
 800605c:	602b      	str	r3, [r5, #0]
 800605e:	f7fa ff9b 	bl	8000f98 <_kill>
 8006062:	1c43      	adds	r3, r0, #1
 8006064:	d102      	bne.n	800606c <_kill_r+0x1c>
 8006066:	682b      	ldr	r3, [r5, #0]
 8006068:	b103      	cbz	r3, 800606c <_kill_r+0x1c>
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	bd38      	pop	{r3, r4, r5, pc}
 800606e:	bf00      	nop
 8006070:	20000388 	.word	0x20000388

08006074 <_getpid_r>:
 8006074:	f7fa bf88 	b.w	8000f88 <_getpid>

08006078 <__swhatbuf_r>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	460c      	mov	r4, r1
 800607c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006080:	2900      	cmp	r1, #0
 8006082:	b096      	sub	sp, #88	@ 0x58
 8006084:	4615      	mov	r5, r2
 8006086:	461e      	mov	r6, r3
 8006088:	da0d      	bge.n	80060a6 <__swhatbuf_r+0x2e>
 800608a:	89a3      	ldrh	r3, [r4, #12]
 800608c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006090:	f04f 0100 	mov.w	r1, #0
 8006094:	bf14      	ite	ne
 8006096:	2340      	movne	r3, #64	@ 0x40
 8006098:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800609c:	2000      	movs	r0, #0
 800609e:	6031      	str	r1, [r6, #0]
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	b016      	add	sp, #88	@ 0x58
 80060a4:	bd70      	pop	{r4, r5, r6, pc}
 80060a6:	466a      	mov	r2, sp
 80060a8:	f000 f848 	bl	800613c <_fstat_r>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	dbec      	blt.n	800608a <__swhatbuf_r+0x12>
 80060b0:	9901      	ldr	r1, [sp, #4]
 80060b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80060b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80060ba:	4259      	negs	r1, r3
 80060bc:	4159      	adcs	r1, r3
 80060be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80060c2:	e7eb      	b.n	800609c <__swhatbuf_r+0x24>

080060c4 <__smakebuf_r>:
 80060c4:	898b      	ldrh	r3, [r1, #12]
 80060c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060c8:	079d      	lsls	r5, r3, #30
 80060ca:	4606      	mov	r6, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	d507      	bpl.n	80060e0 <__smakebuf_r+0x1c>
 80060d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	2301      	movs	r3, #1
 80060da:	6163      	str	r3, [r4, #20]
 80060dc:	b003      	add	sp, #12
 80060de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060e0:	ab01      	add	r3, sp, #4
 80060e2:	466a      	mov	r2, sp
 80060e4:	f7ff ffc8 	bl	8006078 <__swhatbuf_r>
 80060e8:	9f00      	ldr	r7, [sp, #0]
 80060ea:	4605      	mov	r5, r0
 80060ec:	4639      	mov	r1, r7
 80060ee:	4630      	mov	r0, r6
 80060f0:	f7ff f866 	bl	80051c0 <_malloc_r>
 80060f4:	b948      	cbnz	r0, 800610a <__smakebuf_r+0x46>
 80060f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060fa:	059a      	lsls	r2, r3, #22
 80060fc:	d4ee      	bmi.n	80060dc <__smakebuf_r+0x18>
 80060fe:	f023 0303 	bic.w	r3, r3, #3
 8006102:	f043 0302 	orr.w	r3, r3, #2
 8006106:	81a3      	strh	r3, [r4, #12]
 8006108:	e7e2      	b.n	80060d0 <__smakebuf_r+0xc>
 800610a:	89a3      	ldrh	r3, [r4, #12]
 800610c:	6020      	str	r0, [r4, #0]
 800610e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006112:	81a3      	strh	r3, [r4, #12]
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800611a:	b15b      	cbz	r3, 8006134 <__smakebuf_r+0x70>
 800611c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006120:	4630      	mov	r0, r6
 8006122:	f000 f81d 	bl	8006160 <_isatty_r>
 8006126:	b128      	cbz	r0, 8006134 <__smakebuf_r+0x70>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	431d      	orrs	r5, r3
 8006138:	81a5      	strh	r5, [r4, #12]
 800613a:	e7cf      	b.n	80060dc <__smakebuf_r+0x18>

0800613c <_fstat_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	4d07      	ldr	r5, [pc, #28]	@ (800615c <_fstat_r+0x20>)
 8006140:	2300      	movs	r3, #0
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	4611      	mov	r1, r2
 8006148:	602b      	str	r3, [r5, #0]
 800614a:	f7fa ff85 	bl	8001058 <_fstat>
 800614e:	1c43      	adds	r3, r0, #1
 8006150:	d102      	bne.n	8006158 <_fstat_r+0x1c>
 8006152:	682b      	ldr	r3, [r5, #0]
 8006154:	b103      	cbz	r3, 8006158 <_fstat_r+0x1c>
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	bd38      	pop	{r3, r4, r5, pc}
 800615a:	bf00      	nop
 800615c:	20000388 	.word	0x20000388

08006160 <_isatty_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d06      	ldr	r5, [pc, #24]	@ (800617c <_isatty_r+0x1c>)
 8006164:	2300      	movs	r3, #0
 8006166:	4604      	mov	r4, r0
 8006168:	4608      	mov	r0, r1
 800616a:	602b      	str	r3, [r5, #0]
 800616c:	f7fa ff84 	bl	8001078 <_isatty>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_isatty_r+0x1a>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_isatty_r+0x1a>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	20000388 	.word	0x20000388

08006180 <_init>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr

0800618c <_fini>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr
