
squarewave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006538  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  080066c8  080066c8  000076c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a78  08006a78  000081d8  2**0
                  CONTENTS
  4 .ARM          00000008  08006a78  08006a78  00007a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a80  08006a80  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a80  08006a80  00007a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a84  08006a84  00007a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006a88  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  200001d8  08006c60  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006c60  0000839c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a851  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a80  00000000  00000000  00012a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  000144e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000931  00000000  00000000  000150e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026aa3  00000000  00000000  00015a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c97f  00000000  00000000  0003c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee7c9  00000000  00000000  00048e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001375fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  00137640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0013b77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066b0 	.word	0x080066b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080066b0 	.word	0x080066b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
    static uint16_t ccr2 = 0;
    static int8_t direction1 = 1;
    static int8_t direction2 = 1;
    static uint8_t cycle_complete = 0;

    const uint16_t step_size = 10;  // Step size for 10Hz frequency
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	81fb      	strh	r3, [r7, #14]
    const uint16_t max_value = 4999;
 8000bb4:	f241 3387 	movw	r3, #4999	@ 0x1387
 8000bb8:	81bb      	strh	r3, [r7, #12]

    if (htim->Instance == TIM1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a71      	ldr	r2, [pc, #452]	@ (8000d84 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	f040 80da 	bne.w	8000d7a <HAL_TIM_PeriodElapsedCallback+0x1d2>
    {
        // Handle the first run - start with Channel 1
        if (first_run)
 8000bc6:	4b70      	ldr	r3, [pc, #448]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d01a      	beq.n	8000c04 <HAL_TIM_PeriodElapsedCallback+0x5c>
        {
            // Make sure only Channel 1 is active initially
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000bce:	4b6f      	ldr	r3, [pc, #444]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	639a      	str	r2, [r3, #56]	@ 0x38

            // Ensure Channel 1 is running
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	486c      	ldr	r0, [pc, #432]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000bda:	f001 fe97 	bl	800290c <HAL_TIM_PWM_Start>
            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000bde:	2100      	movs	r1, #0
 8000be0:	486a      	ldr	r0, [pc, #424]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000be2:	f002 fee3 	bl	80039ac <HAL_TIMEx_PWMN_Start>

            channel = 1;
 8000be6:	4b6a      	ldr	r3, [pc, #424]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
            ccr1 = 0;
 8000bec:	4b69      	ldr	r3, [pc, #420]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	801a      	strh	r2, [r3, #0]
            direction1 = 1;  // Start going up
 8000bf2:	4b69      	ldr	r3, [pc, #420]	@ (8000d98 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
            cycle_complete = 0;
 8000bf8:	4b68      	ldr	r3, [pc, #416]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
            first_run = 0;
 8000bfe:	4b62      	ldr	r3, [pc, #392]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
        }

        if (channel == 1)
 8000c04:	4b62      	ldr	r3, [pc, #392]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d15b      	bne.n	8000cc4 <HAL_TIM_PeriodElapsedCallback+0x11c>
        {
            // Update Channel 1 - Square wave logic
            if (direction1 == 1)
 8000c0c:	4b62      	ldr	r3, [pc, #392]	@ (8000d98 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000c0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d112      	bne.n	8000c3c <HAL_TIM_PeriodElapsedCallback+0x94>
            {
                ccr1 += step_size;
 8000c16:	4b5f      	ldr	r3, [pc, #380]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c18:	881a      	ldrh	r2, [r3, #0]
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b5c      	ldr	r3, [pc, #368]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c22:	801a      	strh	r2, [r3, #0]
                if (ccr1 >= max_value)
 8000c24:	4b5b      	ldr	r3, [pc, #364]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	89ba      	ldrh	r2, [r7, #12]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d819      	bhi.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0xba>
                {
                    ccr1 = max_value;  // Set to HIGH (square wave)
 8000c2e:	4a59      	ldr	r2, [pc, #356]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c30:	89bb      	ldrh	r3, [r7, #12]
 8000c32:	8013      	strh	r3, [r2, #0]
                    direction1 = -1;
 8000c34:	4b58      	ldr	r3, [pc, #352]	@ (8000d98 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000c36:	22ff      	movs	r2, #255	@ 0xff
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	e012      	b.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0xba>
                }
            }
            else // Going down (direction1 == -1)
            {
                if (ccr1 >= step_size)
 8000c3c:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	89fa      	ldrh	r2, [r7, #14]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d807      	bhi.n	8000c56 <HAL_TIM_PeriodElapsedCallback+0xae>
                {
                    ccr1 -= step_size;
 8000c46:	4b53      	ldr	r3, [pc, #332]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c48:	881a      	ldrh	r2, [r3, #0]
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b50      	ldr	r3, [pc, #320]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c52:	801a      	strh	r2, [r3, #0]
 8000c54:	e005      	b.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0xba>
                }
                else
                {
                    ccr1 = 0;  // Set to LOW (square wave)
 8000c56:	4b4f      	ldr	r3, [pc, #316]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	801a      	strh	r2, [r3, #0]
                    cycle_complete = 1;  // Full cycle completed
 8000c5c:	4b4f      	ldr	r3, [pc, #316]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
                }
            }

            // For square wave: Force CCR to be either 0 or max_value only
            if (ccr1 > 0)
 8000c62:	4b4c      	ldr	r3, [pc, #304]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d004      	beq.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0xcc>
            {
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, max_value);
 8000c6a:	4b48      	ldr	r3, [pc, #288]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	89ba      	ldrh	r2, [r7, #12]
 8000c70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c72:	e003      	b.n	8000c7c <HAL_TIM_PeriodElapsedCallback+0xd4>
            }
            else
            {
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000c74:	4b45      	ldr	r3, [pc, #276]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            // Switch to Channel 2 only after complete cycle
            if (cycle_complete)
 8000c7c:	4b47      	ldr	r3, [pc, #284]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d07a      	beq.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x1d2>
            {
                // Stop Channel 1
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000c84:	4b41      	ldr	r3, [pc, #260]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	635a      	str	r2, [r3, #52]	@ 0x34

                // Initialize and start Channel 2
                ccr2 = 0;
 8000c8c:	4b44      	ldr	r3, [pc, #272]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	801a      	strh	r2, [r3, #0]
                direction2 = 1;  // Start going up
 8000c92:	4b44      	ldr	r3, [pc, #272]	@ (8000da4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000c98:	4b3c      	ldr	r3, [pc, #240]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	639a      	str	r2, [r3, #56]	@ 0x38
                HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	483a      	ldr	r0, [pc, #232]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000ca4:	f001 fe32 	bl	800290c <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ca8:	2104      	movs	r1, #4
 8000caa:	4838      	ldr	r0, [pc, #224]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000cac:	f002 fe7e 	bl	80039ac <HAL_TIMEx_PWMN_Start>

                channel = 2;
 8000cb0:	4b37      	ldr	r3, [pc, #220]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	701a      	strb	r2, [r3, #0]
                cycle_complete = 0;
 8000cb6:	4b39      	ldr	r3, [pc, #228]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
                direction1 = 1;  // Reset direction for next time
 8000cbc:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
                cycle_complete = 0;
                direction2 = 1;  // Reset direction for next time
            }
        }
    }
}
 8000cc2:	e05a      	b.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x1d2>
            if (direction2 == 1) // Going up
 8000cc4:	4b37      	ldr	r3, [pc, #220]	@ (8000da4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d112      	bne.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x14c>
                ccr2 += step_size;
 8000cce:	4b34      	ldr	r3, [pc, #208]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000cd0:	881a      	ldrh	r2, [r3, #0]
 8000cd2:	89fb      	ldrh	r3, [r7, #14]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b31      	ldr	r3, [pc, #196]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000cda:	801a      	strh	r2, [r3, #0]
                if (ccr2 >= max_value)
 8000cdc:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	89ba      	ldrh	r2, [r7, #12]
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d819      	bhi.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x172>
                    ccr2 = max_value;  // Set to HIGH (square wave)
 8000ce6:	4a2e      	ldr	r2, [pc, #184]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000ce8:	89bb      	ldrh	r3, [r7, #12]
 8000cea:	8013      	strh	r3, [r2, #0]
                    direction2 = -1;   // Start going down
 8000cec:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000cee:	22ff      	movs	r2, #255	@ 0xff
 8000cf0:	701a      	strb	r2, [r3, #0]
 8000cf2:	e012      	b.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x172>
                if (ccr2 >= step_size)
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	89fa      	ldrh	r2, [r7, #14]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d807      	bhi.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x166>
                    ccr2 -= step_size;
 8000cfe:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d00:	881a      	ldrh	r2, [r3, #0]
 8000d02:	89fb      	ldrh	r3, [r7, #14]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d0a:	801a      	strh	r2, [r3, #0]
 8000d0c:	e005      	b.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x172>
                    ccr2 = 0;           // Set to LOW (square wave)
 8000d0e:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	801a      	strh	r2, [r3, #0]
                    cycle_complete = 1;  // Full cycle completed
 8000d14:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
            if (ccr2 > 0)
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d004      	beq.n	8000d2c <HAL_TIM_PeriodElapsedCallback+0x184>
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, max_value);
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	89ba      	ldrh	r2, [r7, #12]
 8000d28:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d2a:	e003      	b.n	8000d34 <HAL_TIM_PeriodElapsedCallback+0x18c>
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	@ 0x38
            if (cycle_complete)
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01e      	beq.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x1d2>
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	639a      	str	r2, [r3, #56]	@ 0x38
                ccr1 = 0;
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	801a      	strh	r2, [r3, #0]
                direction1 = 1;  // Start going up
 8000d4a:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
                __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000d50:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	635a      	str	r2, [r3, #52]	@ 0x34
                HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d5c:	f001 fdd6 	bl	800290c <HAL_TIM_PWM_Start>
                HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000d60:	2100      	movs	r1, #0
 8000d62:	480a      	ldr	r0, [pc, #40]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d64:	f002 fe22 	bl	80039ac <HAL_TIMEx_PWMN_Start>
                channel = 1;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
                cycle_complete = 0;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
                direction2 = 1;  // Reset direction for next time
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40012c00 	.word	0x40012c00
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	200001f4 	.word	0x200001f4
 8000d90:	20000001 	.word	0x20000001
 8000d94:	20000240 	.word	0x20000240
 8000d98:	20000002 	.word	0x20000002
 8000d9c:	20000242 	.word	0x20000242
 8000da0:	20000244 	.word	0x20000244
 8000da4:	20000003 	.word	0x20000003

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dac:	f000 fb27 	bl	80013fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db0:	f000 f814 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db4:	f000 f91e 	bl	8000ff4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000db8:	f000 f862 	bl	8000e80 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);     // Start PWM output
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <main+0x30>)
 8000dc0:	f001 fda4 	bl	800290c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <main+0x30>)
 8000dc8:	f002 fdf0 	bl	80039ac <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <main+0x30>)
 8000dce:	f001 fccb 	bl	8002768 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000dd2:	bf00      	nop
 8000dd4:	e7fd      	b.n	8000dd2 <main+0x2a>
 8000dd6:	bf00      	nop
 8000dd8:	200001f4 	.word	0x200001f4

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b096      	sub	sp, #88	@ 0x58
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	2244      	movs	r2, #68	@ 0x44
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fd3d 	bl	800486a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dfe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e02:	f000 fe3b 	bl	8001a7c <HAL_PWREx_ControlVoltageScaling>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e0c:	f000 f916 	bl	800103c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e10:	2310      	movs	r3, #16
 8000e12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e1c:	2360      	movs	r3, #96	@ 0x60
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e20:	2302      	movs	r3, #2
 8000e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e24:	2301      	movs	r3, #1
 8000e26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000e2c:	2319      	movs	r3, #25
 8000e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e30:	2307      	movs	r3, #7
 8000e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fe71 	bl	8001b28 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e4c:	f000 f8f6 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e54:	2303      	movs	r3, #3
 8000e56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	2103      	movs	r1, #3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fa39 	bl	80022e0 <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e74:	f000 f8e2 	bl	800103c <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3758      	adds	r7, #88	@ 0x58
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b09a      	sub	sp, #104	@ 0x68
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	222c      	movs	r2, #44	@ 0x2c
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 fcd5 	bl	800486a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec0:	4b4a      	ldr	r3, [pc, #296]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000ec2:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff0 <MX_TIM1_Init+0x170>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ec6:	4b49      	ldr	r3, [pc, #292]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ecc:	4b47      	ldr	r3, [pc, #284]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8000ed2:	4b46      	ldr	r3, [pc, #280]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000ed4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000ed8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b44      	ldr	r3, [pc, #272]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee0:	4b42      	ldr	r3, [pc, #264]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b41      	ldr	r3, [pc, #260]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000eec:	483f      	ldr	r0, [pc, #252]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000eee:	f001 fbe3 	bl	80026b8 <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ef8:	f000 f8a0 	bl	800103c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f00:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f06:	4619      	mov	r1, r3
 8000f08:	4838      	ldr	r0, [pc, #224]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000f0a:	f002 f821 	bl	8002f50 <HAL_TIM_ConfigClockSource>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f14:	f000 f892 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f18:	4834      	ldr	r0, [pc, #208]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000f1a:	f001 fc95 	bl	8002848 <HAL_TIM_PWM_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f24:	f000 f88a 	bl	800103c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f28:	2320      	movs	r3, #32
 8000f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000f2c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f30:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f36:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	482b      	ldr	r0, [pc, #172]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000f3e:	f002 fdef 	bl	8003b20 <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000f48:	f000 f878 	bl	800103c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4c:	2360      	movs	r3, #96	@ 0x60
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481e      	ldr	r0, [pc, #120]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000f72:	f001 fed9 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000f7c:	f000 f85e 	bl	800103c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f84:	2204      	movs	r2, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4818      	ldr	r0, [pc, #96]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000f8a:	f001 fecd 	bl	8002d28 <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000f94:	f000 f852 	bl	800103c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8000fa4:	2332      	movs	r3, #50	@ 0x32
 8000fa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000fc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4807      	ldr	r0, [pc, #28]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000fd0:	f002 fe2e 	bl	8003c30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8000fda:	f000 f82f 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fde:	4803      	ldr	r0, [pc, #12]	@ (8000fec <MX_TIM1_Init+0x16c>)
 8000fe0:	f000 f87c 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000fe4:	bf00      	nop
 8000fe6:	3768      	adds	r7, #104	@ 0x68
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200001f4 	.word	0x200001f4
 8000ff0:	40012c00 	.word	0x40012c00

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_GPIO_Init+0x44>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8001038 <MX_GPIO_Init+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_GPIO_Init+0x44>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_GPIO_Init+0x44>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <MX_GPIO_Init+0x44>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_GPIO_Init+0x44>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <Error_Handler+0x8>

08001048 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_MspInit+0x44>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001052:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <HAL_MspInit+0x44>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6613      	str	r3, [r2, #96]	@ 0x60
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_MspInit+0x44>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x44>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001070:	6593      	str	r3, [r2, #88]	@ 0x58
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <HAL_TIM_Base_MspInit+0x44>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d113      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010a6:	4a0c      	ldr	r2, [pc, #48]	@ (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_TIM_Base_MspInit+0x48>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2019      	movs	r0, #25
 80010c0:	f000 faed 	bl	800169e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010c4:	2019      	movs	r0, #25
 80010c6:	f000 fb06 	bl	80016d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40012c00 	.word	0x40012c00
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a20      	ldr	r2, [pc, #128]	@ (800117c <HAL_TIM_MspPostInit+0xa0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d139      	bne.n	8001172 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <HAL_TIM_MspPostInit+0xa4>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a1f      	ldr	r2, [pc, #124]	@ (8001180 <HAL_TIM_MspPostInit+0xa4>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <HAL_TIM_MspPostInit+0xa4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <HAL_TIM_MspPostInit+0xa4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	4a19      	ldr	r2, [pc, #100]	@ (8001180 <HAL_TIM_MspPostInit+0xa4>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <HAL_TIM_MspPostInit+0xa4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800112e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001140:	2301      	movs	r3, #1
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114e:	f000 fadd 	bl	800170c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001152:	2301      	movs	r3, #1
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001162:	2301      	movs	r3, #1
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <HAL_TIM_MspPostInit+0xa8>)
 800116e:	f000 facd 	bl	800170c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	@ 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40012c00 	.word	0x40012c00
 8001180:	40021000 	.word	0x40021000
 8001184:	48000400 	.word	0x48000400

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <NMI_Handler+0x4>

08001190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <MemManage_Handler+0x4>

080011a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <UsageFault_Handler+0x4>

080011b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011de:	f000 f963 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011ec:	4802      	ldr	r0, [pc, #8]	@ (80011f8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011ee:	f001 fc93 	bl	8002b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f4 	.word	0x200001f4

080011fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_kill>:

int _kill(int pid, int sig)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001216:	f003 fb7b 	bl	8004910 <__errno>
 800121a:	4603      	mov	r3, r0
 800121c:	2216      	movs	r2, #22
 800121e:	601a      	str	r2, [r3, #0]
  return -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <_exit>:

void _exit (int status)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffe7 	bl	800120c <_kill>
  while (1) {}    /* Make sure we hang here */
 800123e:	bf00      	nop
 8001240:	e7fd      	b.n	800123e <_exit+0x12>

08001242 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e00a      	b.n	800126a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001254:	f3af 8000 	nop.w
 8001258:	4601      	mov	r1, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	60ba      	str	r2, [r7, #8]
 8001260:	b2ca      	uxtb	r2, r1
 8001262:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbf0      	blt.n	8001254 <_read+0x12>
  }

  return len;
 8001272:	687b      	ldr	r3, [r7, #4]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e009      	b.n	80012a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	60ba      	str	r2, [r7, #8]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dbf1      	blt.n	800128e <_write+0x12>
  }
  return len;
 80012aa:	687b      	ldr	r3, [r7, #4]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_close>:

int _close(int file)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012dc:	605a      	str	r2, [r3, #4]
  return 0;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_isatty>:

int _isatty(int file)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001302:	b480      	push	{r7}
 8001304:	b085      	sub	sp, #20
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f003 fae0 	bl	8004910 <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20018000 	.word	0x20018000
 800137c:	00000400 	.word	0x00000400
 8001380:	20000248 	.word	0x20000248
 8001384:	200003a0 	.word	0x200003a0

08001388 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	@ (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b0:	f7ff ffea 	bl	8001388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	@ (80013e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	@ (80013ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	@ (80013f0 <LoopForever+0xe>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	@ (80013f8 <LoopForever+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013da:	f003 fa9f 	bl	800491c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013de:	f7ff fce3 	bl	8000da8 <main>

080013e2 <LoopForever>:

LoopForever:
    b LoopForever
 80013e2:	e7fe      	b.n	80013e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80013f0:	08006a88 	.word	0x08006a88
  ldr r2, =_sbss
 80013f4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80013f8:	2000039c 	.word	0x2000039c

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>

080013fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f93d 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140e:	2000      	movs	r0, #0
 8001410:	f000 f80e 	bl	8001430 <HAL_InitTick>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	71fb      	strb	r3, [r7, #7]
 800141e:	e001      	b.n	8001424 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001420:	f7ff fe12 	bl	8001048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001424:	79fb      	ldrb	r3, [r7, #7]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_InitTick+0x6c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d023      	beq.n	800148c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_InitTick+0x70>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_InitTick+0x6c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f949 	bl	80016f2 <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d809      	bhi.n	8001480 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f913 	bl	800169e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_InitTick+0x74>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e007      	b.n	8001490 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e004      	b.n	8001490 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	73fb      	strb	r3, [r7, #15]
 800148a:	e001      	b.n	8001490 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	20000004 	.word	0x20000004
 80014a4:	20000008 	.word	0x20000008

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	2000000c 	.word	0x2000000c
 80014cc:	2000024c 	.word	0x2000024c

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	2000024c 	.word	0x2000024c

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	@ (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e17f      	b.n	8001a1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	4013      	ands	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8171 	beq.w	8001a16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b01      	cmp	r3, #1
 800173e:	d005      	beq.n	800174c <HAL_GPIO_Init+0x40>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d130      	bne.n	80017ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001782:	2201      	movs	r2, #1
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	091b      	lsrs	r3, r3, #4
 8001798:	f003 0201 	and.w	r2, r3, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d118      	bne.n	80017ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017c0:	2201      	movs	r2, #1
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	f003 0201 	and.w	r2, r3, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d017      	beq.n	8001828 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d123      	bne.n	800187c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3208      	adds	r2, #8
 8001876:	6939      	ldr	r1, [r7, #16]
 8001878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	2203      	movs	r2, #3
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0203 	and.w	r2, r3, #3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80ac 	beq.w	8001a16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b5f      	ldr	r3, [pc, #380]	@ (8001a3c <HAL_GPIO_Init+0x330>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a3c <HAL_GPIO_Init+0x330>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ca:	4b5c      	ldr	r3, [pc, #368]	@ (8001a3c <HAL_GPIO_Init+0x330>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	220f      	movs	r2, #15
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001900:	d025      	beq.n	800194e <HAL_GPIO_Init+0x242>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4f      	ldr	r2, [pc, #316]	@ (8001a44 <HAL_GPIO_Init+0x338>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01f      	beq.n	800194a <HAL_GPIO_Init+0x23e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4e      	ldr	r2, [pc, #312]	@ (8001a48 <HAL_GPIO_Init+0x33c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d019      	beq.n	8001946 <HAL_GPIO_Init+0x23a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4d      	ldr	r2, [pc, #308]	@ (8001a4c <HAL_GPIO_Init+0x340>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x236>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a50 <HAL_GPIO_Init+0x344>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x232>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4b      	ldr	r2, [pc, #300]	@ (8001a54 <HAL_GPIO_Init+0x348>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x22e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a58 <HAL_GPIO_Init+0x34c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x22a>
 8001932:	2306      	movs	r3, #6
 8001934:	e00c      	b.n	8001950 <HAL_GPIO_Init+0x244>
 8001936:	2307      	movs	r3, #7
 8001938:	e00a      	b.n	8001950 <HAL_GPIO_Init+0x244>
 800193a:	2305      	movs	r3, #5
 800193c:	e008      	b.n	8001950 <HAL_GPIO_Init+0x244>
 800193e:	2304      	movs	r3, #4
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x244>
 8001942:	2303      	movs	r3, #3
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x244>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x244>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x244>
 800194e:	2300      	movs	r3, #0
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	f002 0203 	and.w	r2, r2, #3
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001960:	4937      	ldr	r1, [pc, #220]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800196e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a5c <HAL_GPIO_Init+0x350>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001992:	4a32      	ldr	r2, [pc, #200]	@ (8001a5c <HAL_GPIO_Init+0x350>)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001998:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <HAL_GPIO_Init+0x350>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019bc:	4a27      	ldr	r2, [pc, #156]	@ (8001a5c <HAL_GPIO_Init+0x350>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019c2:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <HAL_GPIO_Init+0x350>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019e6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a5c <HAL_GPIO_Init+0x350>)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_GPIO_Init+0x350>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a10:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <HAL_GPIO_Init+0x350>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f47f ae78 	bne.w	800171c <HAL_GPIO_Init+0x10>
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	48000400 	.word	0x48000400
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	48000c00 	.word	0x48000c00
 8001a50:	48001000 	.word	0x48001000
 8001a54:	48001400 	.word	0x48001400
 8001a58:	48001800 	.word	0x48001800
 8001a5c:	40010400 	.word	0x40010400

08001a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40007000 	.word	0x40007000

08001a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a8a:	d130      	bne.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a8c:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a98:	d038      	beq.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a9a:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2232      	movs	r2, #50	@ 0x32
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9b      	lsrs	r3, r3, #18
 8001abc:	3301      	adds	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac0:	e002      	b.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad4:	d102      	bne.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f2      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001adc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ae8:	d110      	bne.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e00f      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afa:	d007      	beq.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001afc:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b04:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	20000004 	.word	0x20000004
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e3ca      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3a:	4b97      	ldr	r3, [pc, #604]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b44:	4b94      	ldr	r3, [pc, #592]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80e4 	beq.w	8001d24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_RCC_OscConfig+0x4a>
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	f040 808b 	bne.w	8001c80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	f040 8087 	bne.w	8001c80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b72:	4b89      	ldr	r3, [pc, #548]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x62>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e3a2      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1a      	ldr	r2, [r3, #32]
 8001b8e:	4b82      	ldr	r3, [pc, #520]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x7c>
 8001b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ba2:	e005      	b.n	8001bb0 <HAL_RCC_OscConfig+0x88>
 8001ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d223      	bcs.n	8001bfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fd1d 	bl	80025f8 <RCC_SetFlashLatencyFromMSIRange>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e383      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc8:	4b73      	ldr	r3, [pc, #460]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a72      	ldr	r2, [pc, #456]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b70      	ldr	r3, [pc, #448]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	496d      	ldr	r1, [pc, #436]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	4968      	ldr	r1, [pc, #416]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
 8001bfa:	e025      	b.n	8001c48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfc:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a65      	ldr	r2, [pc, #404]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c02:	f043 0308 	orr.w	r3, r3, #8
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b63      	ldr	r3, [pc, #396]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4960      	ldr	r1, [pc, #384]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	495b      	ldr	r1, [pc, #364]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d109      	bne.n	8001c48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fcdd 	bl	80025f8 <RCC_SetFlashLatencyFromMSIRange>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e343      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c48:	f000 fc4a 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b52      	ldr	r3, [pc, #328]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	091b      	lsrs	r3, r3, #4
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	4950      	ldr	r1, [pc, #320]	@ (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	4a4e      	ldr	r2, [pc, #312]	@ (8001da0 <HAL_RCC_OscConfig+0x278>)
 8001c66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c68:	4b4e      	ldr	r3, [pc, #312]	@ (8001da4 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fbdf 	bl	8001430 <HAL_InitTick>
 8001c72:	4603      	mov	r3, r0
 8001c74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d052      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	e327      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d032      	beq.n	8001cee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c88:	4b43      	ldr	r3, [pc, #268]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a42      	ldr	r2, [pc, #264]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fc1c 	bl	80014d0 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fc18 	bl	80014d0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e310      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cae:	4b3a      	ldr	r3, [pc, #232]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cba:	4b37      	ldr	r3, [pc, #220]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a36      	ldr	r2, [pc, #216]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	f043 0308 	orr.w	r3, r3, #8
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b34      	ldr	r3, [pc, #208]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4931      	ldr	r1, [pc, #196]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	492c      	ldr	r1, [pc, #176]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
 8001cec:	e01a      	b.n	8001d24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a29      	ldr	r2, [pc, #164]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fbe9 	bl	80014d0 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d02:	f7ff fbe5 	bl	80014d0 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e2dd      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x1da>
 8001d20:	e000      	b.n	8001d24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d074      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x21a>
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d10e      	bne.n	8001d5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d10b      	bne.n	8001d5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d064      	beq.n	8001e18 <HAL_RCC_OscConfig+0x2f0>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d160      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e2ba      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x24a>
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0b      	ldr	r2, [pc, #44]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	e026      	b.n	8001dc0 <HAL_RCC_OscConfig+0x298>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d7a:	d115      	bne.n	8001da8 <HAL_RCC_OscConfig+0x280>
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a02      	ldr	r2, [pc, #8]	@ (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x298>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	080066c8 	.word	0x080066c8
 8001da0:	20000004 	.word	0x20000004
 8001da4:	20000008 	.word	0x20000008
 8001da8:	4ba0      	ldr	r3, [pc, #640]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a9f      	ldr	r2, [pc, #636]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b9d      	ldr	r3, [pc, #628]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a9c      	ldr	r2, [pc, #624]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb82 	bl	80014d0 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fb7e 	bl	80014d0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	@ 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e276      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	4b92      	ldr	r3, [pc, #584]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x2a8>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fb6e 	bl	80014d0 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff fb6a 	bl	80014d0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	@ 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e262      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e0a:	4b88      	ldr	r3, [pc, #544]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2d0>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d060      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_OscConfig+0x310>
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	2b0c      	cmp	r3, #12
 8001e30:	d119      	bne.n	8001e66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d116      	bne.n	8001e66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e38:	4b7c      	ldr	r3, [pc, #496]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_OscConfig+0x328>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e23f      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b76      	ldr	r3, [pc, #472]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4973      	ldr	r1, [pc, #460]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e64:	e040      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d023      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6e:	4b6f      	ldr	r3, [pc, #444]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6e      	ldr	r2, [pc, #440]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fb29 	bl	80014d0 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7ff fb25 	bl	80014d0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e21d      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e94:	4b65      	ldr	r3, [pc, #404]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b62      	ldr	r3, [pc, #392]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	495f      	ldr	r1, [pc, #380]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
 8001eb4:	e018      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5c      	ldr	r2, [pc, #368]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fb05 	bl	80014d0 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fb01 	bl	80014d0 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1f9      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001edc:	4b53      	ldr	r3, [pc, #332]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d03c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01c      	beq.n	8001f36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efc:	4b4b      	ldr	r3, [pc, #300]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f02:	4a4a      	ldr	r2, [pc, #296]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fae0 	bl	80014d0 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff fadc 	bl	80014d0 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1d4      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f26:	4b41      	ldr	r3, [pc, #260]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ef      	beq.n	8001f14 <HAL_RCC_OscConfig+0x3ec>
 8001f34:	e01b      	b.n	8001f6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f36:	4b3d      	ldr	r3, [pc, #244]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3c:	4a3b      	ldr	r2, [pc, #236]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7ff fac3 	bl	80014d0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fabf 	bl	80014d0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e1b7      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	4b32      	ldr	r3, [pc, #200]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1ef      	bne.n	8001f4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80a6 	beq.w	80020c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f80:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10d      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	4b27      	ldr	r3, [pc, #156]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	4a26      	ldr	r2, [pc, #152]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001f92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f98:	4b24      	ldr	r3, [pc, #144]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa8:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <HAL_RCC_OscConfig+0x508>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d118      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <HAL_RCC_OscConfig+0x508>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002030 <HAL_RCC_OscConfig+0x508>)
 8001fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff fa86 	bl	80014d0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc8:	f7ff fa82 	bl	80014d0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e17a      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_RCC_OscConfig+0x508>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_RCC_OscConfig+0x4d8>
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ffe:	e029      	b.n	8002054 <HAL_RCC_OscConfig+0x52c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d115      	bne.n	8002034 <HAL_RCC_OscConfig+0x50c>
 8002008:	4b08      	ldr	r3, [pc, #32]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200e:	4a07      	ldr	r2, [pc, #28]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002018:	4b04      	ldr	r3, [pc, #16]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201e:	4a03      	ldr	r2, [pc, #12]	@ (800202c <HAL_RCC_OscConfig+0x504>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002028:	e014      	b.n	8002054 <HAL_RCC_OscConfig+0x52c>
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	4b9c      	ldr	r3, [pc, #624]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	4a9b      	ldr	r2, [pc, #620]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002044:	4b98      	ldr	r3, [pc, #608]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204a:	4a97      	ldr	r2, [pc, #604]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 800204c:	f023 0304 	bic.w	r3, r3, #4
 8002050:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d016      	beq.n	800208a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff fa38 	bl	80014d0 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002062:	e00a      	b.n	800207a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002064:	f7ff fa34 	bl	80014d0 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e12a      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207a:	4b8b      	ldr	r3, [pc, #556]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ed      	beq.n	8002064 <HAL_RCC_OscConfig+0x53c>
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff fa21 	bl	80014d0 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff fa1d 	bl	80014d0 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e113      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a8:	4b7f      	ldr	r3, [pc, #508]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1ed      	bne.n	8002092 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020bc:	4b7a      	ldr	r3, [pc, #488]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	4a79      	ldr	r2, [pc, #484]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80020c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80fe 	beq.w	80022ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	f040 80d0 	bne.w	800227c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020dc:	4b72      	ldr	r3, [pc, #456]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d130      	bne.n	8002152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	3b01      	subs	r3, #1
 80020fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d127      	bne.n	8002152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d11f      	bne.n	8002152 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800211c:	2a07      	cmp	r2, #7
 800211e:	bf14      	ite	ne
 8002120:	2201      	movne	r2, #1
 8002122:	2200      	moveq	r2, #0
 8002124:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002126:	4293      	cmp	r3, r2
 8002128:	d113      	bne.n	8002152 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002134:	085b      	lsrs	r3, r3, #1
 8002136:	3b01      	subs	r3, #1
 8002138:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d109      	bne.n	8002152 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	3b01      	subs	r3, #1
 800214c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d06e      	beq.n	8002230 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	2b0c      	cmp	r3, #12
 8002156:	d069      	beq.n	800222c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002158:	4b53      	ldr	r3, [pc, #332]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d105      	bne.n	8002170 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002164:	4b50      	ldr	r3, [pc, #320]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0ad      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002174:	4b4c      	ldr	r3, [pc, #304]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a4b      	ldr	r2, [pc, #300]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 800217a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002180:	f7ff f9a6 	bl	80014d0 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff f9a2 	bl	80014d0 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e09a      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219a:	4b43      	ldr	r3, [pc, #268]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a6:	4b40      	ldr	r3, [pc, #256]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	4b40      	ldr	r3, [pc, #256]	@ (80022ac <HAL_RCC_OscConfig+0x784>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021b6:	3a01      	subs	r2, #1
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	4311      	orrs	r1, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021c0:	0212      	lsls	r2, r2, #8
 80021c2:	4311      	orrs	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021c8:	0852      	lsrs	r2, r2, #1
 80021ca:	3a01      	subs	r2, #1
 80021cc:	0552      	lsls	r2, r2, #21
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021d4:	0852      	lsrs	r2, r2, #1
 80021d6:	3a01      	subs	r2, #1
 80021d8:	0652      	lsls	r2, r2, #25
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021e0:	0912      	lsrs	r2, r2, #4
 80021e2:	0452      	lsls	r2, r2, #17
 80021e4:	430a      	orrs	r2, r1
 80021e6:	4930      	ldr	r1, [pc, #192]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021ec:	4b2e      	ldr	r3, [pc, #184]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2d      	ldr	r2, [pc, #180]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f8:	4b2b      	ldr	r3, [pc, #172]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a2a      	ldr	r2, [pc, #168]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 80021fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002202:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002204:	f7ff f964 	bl	80014d0 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f960 	bl	80014d0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e058      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800222a:	e050      	b.n	80022ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e04f      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002230:	4b1d      	ldr	r3, [pc, #116]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d148      	bne.n	80022ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002248:	4b17      	ldr	r3, [pc, #92]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002252:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002254:	f7ff f93c 	bl	80014d0 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff f938 	bl	80014d0 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e030      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226e:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x734>
 800227a:	e028      	b.n	80022ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d023      	beq.n	80022ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a08      	ldr	r2, [pc, #32]	@ (80022a8 <HAL_RCC_OscConfig+0x780>)
 8002288:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7ff f91f 	bl	80014d0 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002294:	e00c      	b.n	80022b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff f91b 	bl	80014d0 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d905      	bls.n	80022b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e013      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
 80022a8:	40021000 	.word	0x40021000
 80022ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b0:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <HAL_RCC_OscConfig+0x7b0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1ec      	bne.n	8002296 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_RCC_OscConfig+0x7b0>)
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	4905      	ldr	r1, [pc, #20]	@ (80022d8 <HAL_RCC_OscConfig+0x7b0>)
 80022c2:	4b06      	ldr	r3, [pc, #24]	@ (80022dc <HAL_RCC_OscConfig+0x7b4>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	60cb      	str	r3, [r1, #12]
 80022c8:	e001      	b.n	80022ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3720      	adds	r7, #32
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	feeefffc 	.word	0xfeeefffc

080022e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0e7      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f4:	4b75      	ldr	r3, [pc, #468]	@ (80024cc <HAL_RCC_ClockConfig+0x1ec>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d910      	bls.n	8002324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	4b72      	ldr	r3, [pc, #456]	@ (80024cc <HAL_RCC_ClockConfig+0x1ec>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 0207 	bic.w	r2, r3, #7
 800230a:	4970      	ldr	r1, [pc, #448]	@ (80024cc <HAL_RCC_ClockConfig+0x1ec>)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002312:	4b6e      	ldr	r3, [pc, #440]	@ (80024cc <HAL_RCC_ClockConfig+0x1ec>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0cf      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d010      	beq.n	8002352 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	4b66      	ldr	r3, [pc, #408]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800233c:	429a      	cmp	r2, r3
 800233e:	d908      	bls.n	8002352 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b63      	ldr	r3, [pc, #396]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	4960      	ldr	r1, [pc, #384]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d04c      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b03      	cmp	r3, #3
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002366:	4b5a      	ldr	r3, [pc, #360]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d121      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0a6      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237e:	4b54      	ldr	r3, [pc, #336]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d115      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e09a      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002396:	4b4e      	ldr	r3, [pc, #312]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e08e      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a6:	4b4a      	ldr	r3, [pc, #296]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e086      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b6:	4b46      	ldr	r3, [pc, #280]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 0203 	bic.w	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4943      	ldr	r1, [pc, #268]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c8:	f7ff f882 	bl	80014d0 <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d0:	f7ff f87e 	bl	80014d0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e06e      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e6:	4b3a      	ldr	r3, [pc, #232]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 020c 	and.w	r2, r3, #12
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d1eb      	bne.n	80023d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d010      	beq.n	8002426 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002410:	429a      	cmp	r2, r3
 8002412:	d208      	bcs.n	8002426 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002414:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	492b      	ldr	r1, [pc, #172]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002426:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <HAL_RCC_ClockConfig+0x1ec>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d210      	bcs.n	8002456 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <HAL_RCC_ClockConfig+0x1ec>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 0207 	bic.w	r2, r3, #7
 800243c:	4923      	ldr	r1, [pc, #140]	@ (80024cc <HAL_RCC_ClockConfig+0x1ec>)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002444:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_RCC_ClockConfig+0x1ec>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e036      	b.n	80024c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002462:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4918      	ldr	r1, [pc, #96]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002480:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4910      	ldr	r1, [pc, #64]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002494:	f000 f824 	bl	80024e0 <HAL_RCC_GetSysClockFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	091b      	lsrs	r3, r3, #4
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	490b      	ldr	r1, [pc, #44]	@ (80024d4 <HAL_RCC_ClockConfig+0x1f4>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_RCC_ClockConfig+0x1f8>)
 80024b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024b4:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <HAL_RCC_ClockConfig+0x1fc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe ffb9 	bl	8001430 <HAL_InitTick>
 80024be:	4603      	mov	r3, r0
 80024c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80024c2:	7afb      	ldrb	r3, [r7, #11]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40022000 	.word	0x40022000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	080066c8 	.word	0x080066c8
 80024d8:	20000004 	.word	0x20000004
 80024dc:	20000008 	.word	0x20000008

080024e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	@ 0x24
 80024e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ee:	4b3e      	ldr	r3, [pc, #248]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f8:	4b3b      	ldr	r3, [pc, #236]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x34>
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d121      	bne.n	8002552 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d11e      	bne.n	8002552 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002514:	4b34      	ldr	r3, [pc, #208]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002520:	4b31      	ldr	r3, [pc, #196]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	e005      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002530:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800253c:	4a2b      	ldr	r2, [pc, #172]	@ (80025ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002544:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d102      	bne.n	800255e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002558:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e004      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d101      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002564:	4b23      	ldr	r3, [pc, #140]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002566:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d134      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800256e:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0xa6>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d003      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0xac>
 8002584:	e005      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002586:	4b1a      	ldr	r3, [pc, #104]	@ (80025f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002588:	617b      	str	r3, [r7, #20]
      break;
 800258a:	e005      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800258c:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800258e:	617b      	str	r3, [r7, #20]
      break;
 8002590:	e002      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	617b      	str	r3, [r7, #20]
      break;
 8002596:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002598:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	3301      	adds	r3, #1
 80025a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025a6:	4b10      	ldr	r3, [pc, #64]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	fb03 f202 	mul.w	r2, r3, r2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	0e5b      	lsrs	r3, r3, #25
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	3301      	adds	r3, #1
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025d8:	69bb      	ldr	r3, [r7, #24]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	@ 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	080066d8 	.word	0x080066d8
 80025f0:	00f42400 	.word	0x00f42400
 80025f4:	007a1200 	.word	0x007a1200

080025f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002604:	4b2a      	ldr	r3, [pc, #168]	@ (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002610:	f7ff fa26 	bl	8001a60 <HAL_PWREx_GetVoltageRange>
 8002614:	6178      	str	r0, [r7, #20]
 8002616:	e014      	b.n	8002642 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261c:	4a24      	ldr	r2, [pc, #144]	@ (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	@ 0x58
 8002624:	4b22      	ldr	r3, [pc, #136]	@ (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002630:	f7ff fa16 	bl	8001a60 <HAL_PWREx_GetVoltageRange>
 8002634:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b1e      	ldr	r3, [pc, #120]	@ (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	4a1d      	ldr	r2, [pc, #116]	@ (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002640:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002648:	d10b      	bne.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b80      	cmp	r3, #128	@ 0x80
 800264e:	d919      	bls.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2ba0      	cmp	r3, #160	@ 0xa0
 8002654:	d902      	bls.n	800265c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002656:	2302      	movs	r3, #2
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	e013      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800265c:	2301      	movs	r3, #1
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e010      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b80      	cmp	r3, #128	@ 0x80
 8002666:	d902      	bls.n	800266e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002668:	2303      	movs	r3, #3
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	e00a      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b80      	cmp	r3, #128	@ 0x80
 8002672:	d102      	bne.n	800267a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002674:	2302      	movs	r3, #2
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	e004      	b.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b70      	cmp	r3, #112	@ 0x70
 800267e:	d101      	bne.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002680:	2301      	movs	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 0207 	bic.w	r2, r3, #7
 800268c:	4909      	ldr	r1, [pc, #36]	@ (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002694:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40022000 	.word	0x40022000

080026b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e049      	b.n	800275e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fcd6 	bl	8001090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4610      	mov	r0, r2
 80026f8:	f000 fd1c 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e04f      	b.n	8002820 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a23      	ldr	r2, [pc, #140]	@ (800282c <HAL_TIM_Base_Start_IT+0xc4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01d      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027aa:	d018      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002830 <HAL_TIM_Base_Start_IT+0xc8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002834 <HAL_TIM_Base_Start_IT+0xcc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00e      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002838 <HAL_TIM_Base_Start_IT+0xd0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d009      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <HAL_TIM_Base_Start_IT+0xd4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d004      	beq.n	80027de <HAL_TIM_Base_Start_IT+0x76>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a19      	ldr	r2, [pc, #100]	@ (8002840 <HAL_TIM_Base_Start_IT+0xd8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d115      	bne.n	800280a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b17      	ldr	r3, [pc, #92]	@ (8002844 <HAL_TIM_Base_Start_IT+0xdc>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b06      	cmp	r3, #6
 80027ee:	d015      	beq.n	800281c <HAL_TIM_Base_Start_IT+0xb4>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f6:	d011      	beq.n	800281c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002808:	e008      	b.n	800281c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e000      	b.n	800281e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800
 8002838:	40000c00 	.word	0x40000c00
 800283c:	40013400 	.word	0x40013400
 8002840:	40014000 	.word	0x40014000
 8002844:	00010007 	.word	0x00010007

08002848 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e049      	b.n	80028ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f841 	bl	80028f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 fc54 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_TIM_PWM_Start+0x24>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	bf14      	ite	ne
 8002928:	2301      	movne	r3, #1
 800292a:	2300      	moveq	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e03c      	b.n	80029aa <HAL_TIM_PWM_Start+0x9e>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b04      	cmp	r3, #4
 8002934:	d109      	bne.n	800294a <HAL_TIM_PWM_Start+0x3e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b01      	cmp	r3, #1
 8002940:	bf14      	ite	ne
 8002942:	2301      	movne	r3, #1
 8002944:	2300      	moveq	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	e02f      	b.n	80029aa <HAL_TIM_PWM_Start+0x9e>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d109      	bne.n	8002964 <HAL_TIM_PWM_Start+0x58>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e022      	b.n	80029aa <HAL_TIM_PWM_Start+0x9e>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b0c      	cmp	r3, #12
 8002968:	d109      	bne.n	800297e <HAL_TIM_PWM_Start+0x72>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	bf14      	ite	ne
 8002976:	2301      	movne	r3, #1
 8002978:	2300      	moveq	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	e015      	b.n	80029aa <HAL_TIM_PWM_Start+0x9e>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b10      	cmp	r3, #16
 8002982:	d109      	bne.n	8002998 <HAL_TIM_PWM_Start+0x8c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e008      	b.n	80029aa <HAL_TIM_PWM_Start+0x9e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e09c      	b.n	8002aec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d104      	bne.n	80029c2 <HAL_TIM_PWM_Start+0xb6>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c0:	e023      	b.n	8002a0a <HAL_TIM_PWM_Start+0xfe>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d104      	bne.n	80029d2 <HAL_TIM_PWM_Start+0xc6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d0:	e01b      	b.n	8002a0a <HAL_TIM_PWM_Start+0xfe>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d104      	bne.n	80029e2 <HAL_TIM_PWM_Start+0xd6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029e0:	e013      	b.n	8002a0a <HAL_TIM_PWM_Start+0xfe>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b0c      	cmp	r3, #12
 80029e6:	d104      	bne.n	80029f2 <HAL_TIM_PWM_Start+0xe6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029f0:	e00b      	b.n	8002a0a <HAL_TIM_PWM_Start+0xfe>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d104      	bne.n	8002a02 <HAL_TIM_PWM_Start+0xf6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a00:	e003      	b.n	8002a0a <HAL_TIM_PWM_Start+0xfe>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2202      	movs	r2, #2
 8002a06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	6839      	ldr	r1, [r7, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 ffa4 	bl	8003960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a35      	ldr	r2, [pc, #212]	@ (8002af4 <HAL_TIM_PWM_Start+0x1e8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x13e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a34      	ldr	r2, [pc, #208]	@ (8002af8 <HAL_TIM_PWM_Start+0x1ec>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x13e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a32      	ldr	r2, [pc, #200]	@ (8002afc <HAL_TIM_PWM_Start+0x1f0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x13e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a31      	ldr	r2, [pc, #196]	@ (8002b00 <HAL_TIM_PWM_Start+0x1f4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x13e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2f      	ldr	r2, [pc, #188]	@ (8002b04 <HAL_TIM_PWM_Start+0x1f8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_PWM_Start+0x142>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_TIM_PWM_Start+0x144>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a22      	ldr	r2, [pc, #136]	@ (8002af4 <HAL_TIM_PWM_Start+0x1e8>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01d      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x19e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a76:	d018      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x19e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	@ (8002b08 <HAL_TIM_PWM_Start+0x1fc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x19e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a21      	ldr	r2, [pc, #132]	@ (8002b0c <HAL_TIM_PWM_Start+0x200>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00e      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x19e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1f      	ldr	r2, [pc, #124]	@ (8002b10 <HAL_TIM_PWM_Start+0x204>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x19e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a17      	ldr	r2, [pc, #92]	@ (8002af8 <HAL_TIM_PWM_Start+0x1ec>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x19e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a15      	ldr	r2, [pc, #84]	@ (8002afc <HAL_TIM_PWM_Start+0x1f0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d115      	bne.n	8002ad6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <HAL_TIM_PWM_Start+0x208>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d015      	beq.n	8002ae8 <HAL_TIM_PWM_Start+0x1dc>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac2:	d011      	beq.n	8002ae8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad4:	e008      	b.n	8002ae8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0201 	orr.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e000      	b.n	8002aea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40013400 	.word	0x40013400
 8002afc:	40014000 	.word	0x40014000
 8002b00:	40014400 	.word	0x40014400
 8002b04:	40014800 	.word	0x40014800
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000800 	.word	0x40000800
 8002b10:	40000c00 	.word	0x40000c00
 8002b14:	00010007 	.word	0x00010007

08002b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d020      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01b      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0202 	mvn.w	r2, #2
 8002b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fac7 	bl	80030f6 <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fab9 	bl	80030e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 faca 	bl	800310a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d020      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d01b      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0204 	mvn.w	r2, #4
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 faa1 	bl	80030f6 <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa93 	bl	80030e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 faa4 	bl	800310a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d020      	beq.n	8002c14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0208 	mvn.w	r2, #8
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa7b 	bl	80030f6 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fa6d 	bl	80030e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fa7e 	bl	800310a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d020      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 0310 	and.w	r3, r3, #16
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f06f 0210 	mvn.w	r2, #16
 8002c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2208      	movs	r2, #8
 8002c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fa55 	bl	80030f6 <HAL_TIM_IC_CaptureCallback>
 8002c4c:	e005      	b.n	8002c5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa47 	bl	80030e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fa58 	bl	800310a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0201 	mvn.w	r2, #1
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd ff92 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d104      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00c      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f001 f847 	bl	8003d40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00c      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d007      	beq.n	8002cd6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f001 f83f 	bl	8003d54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00c      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa12 	bl	800311e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00c      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f06f 0220 	mvn.w	r2, #32
 8002d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f001 f807 	bl	8003d2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0ff      	b.n	8002f46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b14      	cmp	r3, #20
 8002d52:	f200 80f0 	bhi.w	8002f36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d56:	a201      	add	r2, pc, #4	@ (adr r2, 8002d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002db1 	.word	0x08002db1
 8002d60:	08002f37 	.word	0x08002f37
 8002d64:	08002f37 	.word	0x08002f37
 8002d68:	08002f37 	.word	0x08002f37
 8002d6c:	08002df1 	.word	0x08002df1
 8002d70:	08002f37 	.word	0x08002f37
 8002d74:	08002f37 	.word	0x08002f37
 8002d78:	08002f37 	.word	0x08002f37
 8002d7c:	08002e33 	.word	0x08002e33
 8002d80:	08002f37 	.word	0x08002f37
 8002d84:	08002f37 	.word	0x08002f37
 8002d88:	08002f37 	.word	0x08002f37
 8002d8c:	08002e73 	.word	0x08002e73
 8002d90:	08002f37 	.word	0x08002f37
 8002d94:	08002f37 	.word	0x08002f37
 8002d98:	08002f37 	.word	0x08002f37
 8002d9c:	08002eb5 	.word	0x08002eb5
 8002da0:	08002f37 	.word	0x08002f37
 8002da4:	08002f37 	.word	0x08002f37
 8002da8:	08002f37 	.word	0x08002f37
 8002dac:	08002ef5 	.word	0x08002ef5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fa62 	bl	8003280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6999      	ldr	r1, [r3, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	619a      	str	r2, [r3, #24]
      break;
 8002dee:	e0a5      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fad2 	bl	80033a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	021a      	lsls	r2, r3, #8
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]
      break;
 8002e30:	e084      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fb3b 	bl	80034b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0208 	orr.w	r2, r2, #8
 8002e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0204 	bic.w	r2, r2, #4
 8002e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69d9      	ldr	r1, [r3, #28]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
      break;
 8002e70:	e064      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fba3 	bl	80035c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	61da      	str	r2, [r3, #28]
      break;
 8002eb2:	e043      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fbec 	bl	8003698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0208 	orr.w	r2, r2, #8
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0204 	bic.w	r2, r2, #4
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002ef2:	e023      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fc30 	bl	8003760 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002f34:	e002      	b.n	8002f3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop

08002f50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_TIM_ConfigClockSource+0x1c>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e0b6      	b.n	80030da <HAL_TIM_ConfigClockSource+0x18a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fa8:	d03e      	beq.n	8003028 <HAL_TIM_ConfigClockSource+0xd8>
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fae:	f200 8087 	bhi.w	80030c0 <HAL_TIM_ConfigClockSource+0x170>
 8002fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fb6:	f000 8086 	beq.w	80030c6 <HAL_TIM_ConfigClockSource+0x176>
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fbe:	d87f      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x170>
 8002fc0:	2b70      	cmp	r3, #112	@ 0x70
 8002fc2:	d01a      	beq.n	8002ffa <HAL_TIM_ConfigClockSource+0xaa>
 8002fc4:	2b70      	cmp	r3, #112	@ 0x70
 8002fc6:	d87b      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x170>
 8002fc8:	2b60      	cmp	r3, #96	@ 0x60
 8002fca:	d050      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x11e>
 8002fcc:	2b60      	cmp	r3, #96	@ 0x60
 8002fce:	d877      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x170>
 8002fd0:	2b50      	cmp	r3, #80	@ 0x50
 8002fd2:	d03c      	beq.n	800304e <HAL_TIM_ConfigClockSource+0xfe>
 8002fd4:	2b50      	cmp	r3, #80	@ 0x50
 8002fd6:	d873      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x170>
 8002fd8:	2b40      	cmp	r3, #64	@ 0x40
 8002fda:	d058      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x13e>
 8002fdc:	2b40      	cmp	r3, #64	@ 0x40
 8002fde:	d86f      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x170>
 8002fe0:	2b30      	cmp	r3, #48	@ 0x30
 8002fe2:	d064      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x15e>
 8002fe4:	2b30      	cmp	r3, #48	@ 0x30
 8002fe6:	d86b      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x170>
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d060      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x15e>
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d867      	bhi.n	80030c0 <HAL_TIM_ConfigClockSource+0x170>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05c      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x15e>
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d05a      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x15e>
 8002ff8:	e062      	b.n	80030c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800300a:	f000 fc89 	bl	8003920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800301c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	609a      	str	r2, [r3, #8]
      break;
 8003026:	e04f      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003038:	f000 fc72 	bl	8003920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800304a:	609a      	str	r2, [r3, #8]
      break;
 800304c:	e03c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800305a:	461a      	mov	r2, r3
 800305c:	f000 fbe6 	bl	800382c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2150      	movs	r1, #80	@ 0x50
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fc3f 	bl	80038ea <TIM_ITRx_SetConfig>
      break;
 800306c:	e02c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800307a:	461a      	mov	r2, r3
 800307c:	f000 fc05 	bl	800388a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2160      	movs	r1, #96	@ 0x60
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fc2f 	bl	80038ea <TIM_ITRx_SetConfig>
      break;
 800308c:	e01c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	461a      	mov	r2, r3
 800309c:	f000 fbc6 	bl	800382c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2140      	movs	r1, #64	@ 0x40
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fc1f 	bl	80038ea <TIM_ITRx_SetConfig>
      break;
 80030ac:	e00c      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f000 fc16 	bl	80038ea <TIM_ITRx_SetConfig>
      break;
 80030be:	e003      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e000      	b.n	80030c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80030c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a46      	ldr	r2, [pc, #280]	@ (8003260 <TIM_Base_SetConfig+0x12c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003152:	d00f      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a43      	ldr	r2, [pc, #268]	@ (8003264 <TIM_Base_SetConfig+0x130>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00b      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a42      	ldr	r2, [pc, #264]	@ (8003268 <TIM_Base_SetConfig+0x134>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a41      	ldr	r2, [pc, #260]	@ (800326c <TIM_Base_SetConfig+0x138>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a40      	ldr	r2, [pc, #256]	@ (8003270 <TIM_Base_SetConfig+0x13c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d108      	bne.n	8003186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a35      	ldr	r2, [pc, #212]	@ (8003260 <TIM_Base_SetConfig+0x12c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d01f      	beq.n	80031ce <TIM_Base_SetConfig+0x9a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003194:	d01b      	beq.n	80031ce <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a32      	ldr	r2, [pc, #200]	@ (8003264 <TIM_Base_SetConfig+0x130>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d017      	beq.n	80031ce <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a31      	ldr	r2, [pc, #196]	@ (8003268 <TIM_Base_SetConfig+0x134>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d013      	beq.n	80031ce <TIM_Base_SetConfig+0x9a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a30      	ldr	r2, [pc, #192]	@ (800326c <TIM_Base_SetConfig+0x138>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d00f      	beq.n	80031ce <TIM_Base_SetConfig+0x9a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003270 <TIM_Base_SetConfig+0x13c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00b      	beq.n	80031ce <TIM_Base_SetConfig+0x9a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003274 <TIM_Base_SetConfig+0x140>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d007      	beq.n	80031ce <TIM_Base_SetConfig+0x9a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003278 <TIM_Base_SetConfig+0x144>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_Base_SetConfig+0x9a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2c      	ldr	r2, [pc, #176]	@ (800327c <TIM_Base_SetConfig+0x148>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d108      	bne.n	80031e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a16      	ldr	r2, [pc, #88]	@ (8003260 <TIM_Base_SetConfig+0x12c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d00f      	beq.n	800322c <TIM_Base_SetConfig+0xf8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <TIM_Base_SetConfig+0x13c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d00b      	beq.n	800322c <TIM_Base_SetConfig+0xf8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a17      	ldr	r2, [pc, #92]	@ (8003274 <TIM_Base_SetConfig+0x140>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d007      	beq.n	800322c <TIM_Base_SetConfig+0xf8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a16      	ldr	r2, [pc, #88]	@ (8003278 <TIM_Base_SetConfig+0x144>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0xf8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a15      	ldr	r2, [pc, #84]	@ (800327c <TIM_Base_SetConfig+0x148>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d103      	bne.n	8003234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f023 0201 	bic.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	611a      	str	r2, [r3, #16]
  }
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40013400 	.word	0x40013400
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800

08003280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f023 0201 	bic.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 0302 	bic.w	r3, r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a2c      	ldr	r2, [pc, #176]	@ (800338c <TIM_OC1_SetConfig+0x10c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00f      	beq.n	8003300 <TIM_OC1_SetConfig+0x80>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003390 <TIM_OC1_SetConfig+0x110>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00b      	beq.n	8003300 <TIM_OC1_SetConfig+0x80>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003394 <TIM_OC1_SetConfig+0x114>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d007      	beq.n	8003300 <TIM_OC1_SetConfig+0x80>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a29      	ldr	r2, [pc, #164]	@ (8003398 <TIM_OC1_SetConfig+0x118>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d003      	beq.n	8003300 <TIM_OC1_SetConfig+0x80>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a28      	ldr	r2, [pc, #160]	@ (800339c <TIM_OC1_SetConfig+0x11c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d10c      	bne.n	800331a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f023 0308 	bic.w	r3, r3, #8
 8003306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a1b      	ldr	r2, [pc, #108]	@ (800338c <TIM_OC1_SetConfig+0x10c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00f      	beq.n	8003342 <TIM_OC1_SetConfig+0xc2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1a      	ldr	r2, [pc, #104]	@ (8003390 <TIM_OC1_SetConfig+0x110>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_OC1_SetConfig+0xc2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a19      	ldr	r2, [pc, #100]	@ (8003394 <TIM_OC1_SetConfig+0x114>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_OC1_SetConfig+0xc2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a18      	ldr	r2, [pc, #96]	@ (8003398 <TIM_OC1_SetConfig+0x118>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_OC1_SetConfig+0xc2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a17      	ldr	r2, [pc, #92]	@ (800339c <TIM_OC1_SetConfig+0x11c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d111      	bne.n	8003366 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	621a      	str	r2, [r3, #32]
}
 8003380:	bf00      	nop
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40013400 	.word	0x40013400
 8003394:	40014000 	.word	0x40014000
 8003398:	40014400 	.word	0x40014400
 800339c:	40014800 	.word	0x40014800

080033a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f023 0210 	bic.w	r2, r3, #16
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0320 	bic.w	r3, r3, #32
 80033ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a28      	ldr	r2, [pc, #160]	@ (80034a0 <TIM_OC2_SetConfig+0x100>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d003      	beq.n	800340c <TIM_OC2_SetConfig+0x6c>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a27      	ldr	r2, [pc, #156]	@ (80034a4 <TIM_OC2_SetConfig+0x104>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d10d      	bne.n	8003428 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4313      	orrs	r3, r2
 800341e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a1d      	ldr	r2, [pc, #116]	@ (80034a0 <TIM_OC2_SetConfig+0x100>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00f      	beq.n	8003450 <TIM_OC2_SetConfig+0xb0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a1c      	ldr	r2, [pc, #112]	@ (80034a4 <TIM_OC2_SetConfig+0x104>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_OC2_SetConfig+0xb0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <TIM_OC2_SetConfig+0x108>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_OC2_SetConfig+0xb0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <TIM_OC2_SetConfig+0x10c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_OC2_SetConfig+0xb0>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <TIM_OC2_SetConfig+0x110>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d113      	bne.n	8003478 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800345e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40013400 	.word	0x40013400
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800

080034b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a27      	ldr	r2, [pc, #156]	@ (80035b0 <TIM_OC3_SetConfig+0xfc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_OC3_SetConfig+0x6a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a26      	ldr	r2, [pc, #152]	@ (80035b4 <TIM_OC3_SetConfig+0x100>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10d      	bne.n	800353a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <TIM_OC3_SetConfig+0xfc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00f      	beq.n	8003562 <TIM_OC3_SetConfig+0xae>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <TIM_OC3_SetConfig+0x100>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00b      	beq.n	8003562 <TIM_OC3_SetConfig+0xae>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <TIM_OC3_SetConfig+0x104>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <TIM_OC3_SetConfig+0xae>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a19      	ldr	r2, [pc, #100]	@ (80035bc <TIM_OC3_SetConfig+0x108>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_OC3_SetConfig+0xae>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a18      	ldr	r2, [pc, #96]	@ (80035c0 <TIM_OC3_SetConfig+0x10c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d113      	bne.n	800358a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	621a      	str	r2, [r3, #32]
}
 80035a4:	bf00      	nop
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40013400 	.word	0x40013400
 80035b8:	40014000 	.word	0x40014000
 80035bc:	40014400 	.word	0x40014400
 80035c0:	40014800 	.word	0x40014800

080035c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	031b      	lsls	r3, r3, #12
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a18      	ldr	r2, [pc, #96]	@ (8003684 <TIM_OC4_SetConfig+0xc0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00f      	beq.n	8003648 <TIM_OC4_SetConfig+0x84>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a17      	ldr	r2, [pc, #92]	@ (8003688 <TIM_OC4_SetConfig+0xc4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00b      	beq.n	8003648 <TIM_OC4_SetConfig+0x84>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a16      	ldr	r2, [pc, #88]	@ (800368c <TIM_OC4_SetConfig+0xc8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_OC4_SetConfig+0x84>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a15      	ldr	r2, [pc, #84]	@ (8003690 <TIM_OC4_SetConfig+0xcc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_OC4_SetConfig+0x84>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a14      	ldr	r2, [pc, #80]	@ (8003694 <TIM_OC4_SetConfig+0xd0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d109      	bne.n	800365c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800364e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40013400 	.word	0x40013400
 800368c:	40014000 	.word	0x40014000
 8003690:	40014400 	.word	0x40014400
 8003694:	40014800 	.word	0x40014800

08003698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80036dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a17      	ldr	r2, [pc, #92]	@ (800374c <TIM_OC5_SetConfig+0xb4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00f      	beq.n	8003712 <TIM_OC5_SetConfig+0x7a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a16      	ldr	r2, [pc, #88]	@ (8003750 <TIM_OC5_SetConfig+0xb8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00b      	beq.n	8003712 <TIM_OC5_SetConfig+0x7a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a15      	ldr	r2, [pc, #84]	@ (8003754 <TIM_OC5_SetConfig+0xbc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <TIM_OC5_SetConfig+0x7a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a14      	ldr	r2, [pc, #80]	@ (8003758 <TIM_OC5_SetConfig+0xc0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <TIM_OC5_SetConfig+0x7a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a13      	ldr	r2, [pc, #76]	@ (800375c <TIM_OC5_SetConfig+0xc4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d109      	bne.n	8003726 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003718:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40013400 	.word	0x40013400
 8003754:	40014000 	.word	0x40014000
 8003758:	40014400 	.word	0x40014400
 800375c:	40014800 	.word	0x40014800

08003760 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	051b      	lsls	r3, r3, #20
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a18      	ldr	r2, [pc, #96]	@ (8003818 <TIM_OC6_SetConfig+0xb8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00f      	beq.n	80037dc <TIM_OC6_SetConfig+0x7c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a17      	ldr	r2, [pc, #92]	@ (800381c <TIM_OC6_SetConfig+0xbc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00b      	beq.n	80037dc <TIM_OC6_SetConfig+0x7c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a16      	ldr	r2, [pc, #88]	@ (8003820 <TIM_OC6_SetConfig+0xc0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d007      	beq.n	80037dc <TIM_OC6_SetConfig+0x7c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a15      	ldr	r2, [pc, #84]	@ (8003824 <TIM_OC6_SetConfig+0xc4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_OC6_SetConfig+0x7c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a14      	ldr	r2, [pc, #80]	@ (8003828 <TIM_OC6_SetConfig+0xc8>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d109      	bne.n	80037f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	029b      	lsls	r3, r3, #10
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800

0800382c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f023 0201 	bic.w	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 030a 	bic.w	r3, r3, #10
 8003868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800388a:	b480      	push	{r7}
 800388c:	b087      	sub	sp, #28
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f023 0210 	bic.w	r2, r3, #16
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	031b      	lsls	r3, r3, #12
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b085      	sub	sp, #20
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	f043 0307 	orr.w	r3, r3, #7
 800390c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	609a      	str	r2, [r3, #8]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800393a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	021a      	lsls	r2, r3, #8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	431a      	orrs	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2201      	movs	r2, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1a      	ldr	r2, [r3, #32]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	43db      	mvns	r3, r3
 8003982:	401a      	ands	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1a      	ldr	r2, [r3, #32]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_TIMEx_PWMN_Start+0x24>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	bf14      	ite	ne
 80039c8:	2301      	movne	r3, #1
 80039ca:	2300      	moveq	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e022      	b.n	8003a16 <HAL_TIMEx_PWMN_Start+0x6a>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d109      	bne.n	80039ea <HAL_TIMEx_PWMN_Start+0x3e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b01      	cmp	r3, #1
 80039e0:	bf14      	ite	ne
 80039e2:	2301      	movne	r3, #1
 80039e4:	2300      	moveq	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	e015      	b.n	8003a16 <HAL_TIMEx_PWMN_Start+0x6a>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d109      	bne.n	8003a04 <HAL_TIMEx_PWMN_Start+0x58>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e008      	b.n	8003a16 <HAL_TIMEx_PWMN_Start+0x6a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	bf14      	ite	ne
 8003a10:	2301      	movne	r3, #1
 8003a12:	2300      	moveq	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e06e      	b.n	8003afc <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <HAL_TIMEx_PWMN_Start+0x82>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a2c:	e013      	b.n	8003a56 <HAL_TIMEx_PWMN_Start+0xaa>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d104      	bne.n	8003a3e <HAL_TIMEx_PWMN_Start+0x92>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a3c:	e00b      	b.n	8003a56 <HAL_TIMEx_PWMN_Start+0xaa>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d104      	bne.n	8003a4e <HAL_TIMEx_PWMN_Start+0xa2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a4c:	e003      	b.n	8003a56 <HAL_TIMEx_PWMN_Start+0xaa>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	6839      	ldr	r1, [r7, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f982 	bl	8003d68 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a22      	ldr	r2, [pc, #136]	@ (8003b04 <HAL_TIMEx_PWMN_Start+0x158>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01d      	beq.n	8003aba <HAL_TIMEx_PWMN_Start+0x10e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a86:	d018      	beq.n	8003aba <HAL_TIMEx_PWMN_Start+0x10e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b08 <HAL_TIMEx_PWMN_Start+0x15c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_TIMEx_PWMN_Start+0x10e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1d      	ldr	r2, [pc, #116]	@ (8003b0c <HAL_TIMEx_PWMN_Start+0x160>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00e      	beq.n	8003aba <HAL_TIMEx_PWMN_Start+0x10e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b10 <HAL_TIMEx_PWMN_Start+0x164>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_TIMEx_PWMN_Start+0x10e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8003b14 <HAL_TIMEx_PWMN_Start+0x168>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_TIMEx_PWMN_Start+0x10e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a18      	ldr	r2, [pc, #96]	@ (8003b18 <HAL_TIMEx_PWMN_Start+0x16c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d115      	bne.n	8003ae6 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	4b16      	ldr	r3, [pc, #88]	@ (8003b1c <HAL_TIMEx_PWMN_Start+0x170>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b06      	cmp	r3, #6
 8003aca:	d015      	beq.n	8003af8 <HAL_TIMEx_PWMN_Start+0x14c>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad2:	d011      	beq.n	8003af8 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	e008      	b.n	8003af8 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0201 	orr.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e000      	b.n	8003afa <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00
 8003b14:	40013400 	.word	0x40013400
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	00010007 	.word	0x00010007

08003b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e068      	b.n	8003c0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d004      	beq.n	8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2d      	ldr	r2, [pc, #180]	@ (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d108      	bne.n	8003b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d01d      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003baa:	d018      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1a      	ldr	r2, [pc, #104]	@ (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00e      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	@ (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a13      	ldr	r2, [pc, #76]	@ (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a14      	ldr	r2, [pc, #80]	@ (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40013400 	.word	0x40013400
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	40014000 	.word	0x40014000

08003c30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e065      	b.n	8003d18 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a16      	ldr	r2, [pc, #88]	@ (8003d24 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d004      	beq.n	8003cda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a14      	ldr	r2, [pc, #80]	@ (8003d28 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d115      	bne.n	8003d06 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	051b      	lsls	r3, r3, #20
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40013400 	.word	0x40013400

08003d2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a1a      	ldr	r2, [r3, #32]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1a      	ldr	r2, [r3, #32]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003da0:	431a      	orrs	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	621a      	str	r2, [r3, #32]
}
 8003da6:	bf00      	nop
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <__cvt>:
 8003db2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db6:	ec57 6b10 	vmov	r6, r7, d0
 8003dba:	2f00      	cmp	r7, #0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	bfbb      	ittet	lt
 8003dc4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003dc8:	461f      	movlt	r7, r3
 8003dca:	2300      	movge	r3, #0
 8003dcc:	232d      	movlt	r3, #45	@ 0x2d
 8003dce:	700b      	strb	r3, [r1, #0]
 8003dd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dd2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003dd6:	4691      	mov	r9, r2
 8003dd8:	f023 0820 	bic.w	r8, r3, #32
 8003ddc:	bfbc      	itt	lt
 8003dde:	4632      	movlt	r2, r6
 8003de0:	4616      	movlt	r6, r2
 8003de2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003de6:	d005      	beq.n	8003df4 <__cvt+0x42>
 8003de8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003dec:	d100      	bne.n	8003df0 <__cvt+0x3e>
 8003dee:	3401      	adds	r4, #1
 8003df0:	2102      	movs	r1, #2
 8003df2:	e000      	b.n	8003df6 <__cvt+0x44>
 8003df4:	2103      	movs	r1, #3
 8003df6:	ab03      	add	r3, sp, #12
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	ab02      	add	r3, sp, #8
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	ec47 6b10 	vmov	d0, r6, r7
 8003e02:	4653      	mov	r3, sl
 8003e04:	4622      	mov	r2, r4
 8003e06:	f000 fe3b 	bl	8004a80 <_dtoa_r>
 8003e0a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e0e:	4605      	mov	r5, r0
 8003e10:	d119      	bne.n	8003e46 <__cvt+0x94>
 8003e12:	f019 0f01 	tst.w	r9, #1
 8003e16:	d00e      	beq.n	8003e36 <__cvt+0x84>
 8003e18:	eb00 0904 	add.w	r9, r0, r4
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2300      	movs	r3, #0
 8003e20:	4630      	mov	r0, r6
 8003e22:	4639      	mov	r1, r7
 8003e24:	f7fc fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e28:	b108      	cbz	r0, 8003e2e <__cvt+0x7c>
 8003e2a:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e2e:	2230      	movs	r2, #48	@ 0x30
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	454b      	cmp	r3, r9
 8003e34:	d31e      	bcc.n	8003e74 <__cvt+0xc2>
 8003e36:	9b03      	ldr	r3, [sp, #12]
 8003e38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e3a:	1b5b      	subs	r3, r3, r5
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	b004      	add	sp, #16
 8003e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e4a:	eb00 0904 	add.w	r9, r0, r4
 8003e4e:	d1e5      	bne.n	8003e1c <__cvt+0x6a>
 8003e50:	7803      	ldrb	r3, [r0, #0]
 8003e52:	2b30      	cmp	r3, #48	@ 0x30
 8003e54:	d10a      	bne.n	8003e6c <__cvt+0xba>
 8003e56:	2200      	movs	r2, #0
 8003e58:	2300      	movs	r3, #0
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	4639      	mov	r1, r7
 8003e5e:	f7fc fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e62:	b918      	cbnz	r0, 8003e6c <__cvt+0xba>
 8003e64:	f1c4 0401 	rsb	r4, r4, #1
 8003e68:	f8ca 4000 	str.w	r4, [sl]
 8003e6c:	f8da 3000 	ldr.w	r3, [sl]
 8003e70:	4499      	add	r9, r3
 8003e72:	e7d3      	b.n	8003e1c <__cvt+0x6a>
 8003e74:	1c59      	adds	r1, r3, #1
 8003e76:	9103      	str	r1, [sp, #12]
 8003e78:	701a      	strb	r2, [r3, #0]
 8003e7a:	e7d9      	b.n	8003e30 <__cvt+0x7e>

08003e7c <__exponent>:
 8003e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	bfba      	itte	lt
 8003e82:	4249      	neglt	r1, r1
 8003e84:	232d      	movlt	r3, #45	@ 0x2d
 8003e86:	232b      	movge	r3, #43	@ 0x2b
 8003e88:	2909      	cmp	r1, #9
 8003e8a:	7002      	strb	r2, [r0, #0]
 8003e8c:	7043      	strb	r3, [r0, #1]
 8003e8e:	dd29      	ble.n	8003ee4 <__exponent+0x68>
 8003e90:	f10d 0307 	add.w	r3, sp, #7
 8003e94:	461d      	mov	r5, r3
 8003e96:	270a      	movs	r7, #10
 8003e98:	461a      	mov	r2, r3
 8003e9a:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e9e:	fb07 1416 	mls	r4, r7, r6, r1
 8003ea2:	3430      	adds	r4, #48	@ 0x30
 8003ea4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	2c63      	cmp	r4, #99	@ 0x63
 8003eac:	f103 33ff 	add.w	r3, r3, #4294967295
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	dcf1      	bgt.n	8003e98 <__exponent+0x1c>
 8003eb4:	3130      	adds	r1, #48	@ 0x30
 8003eb6:	1e94      	subs	r4, r2, #2
 8003eb8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003ebc:	1c41      	adds	r1, r0, #1
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	42ab      	cmp	r3, r5
 8003ec2:	d30a      	bcc.n	8003eda <__exponent+0x5e>
 8003ec4:	f10d 0309 	add.w	r3, sp, #9
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	42ac      	cmp	r4, r5
 8003ecc:	bf88      	it	hi
 8003ece:	2300      	movhi	r3, #0
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	4403      	add	r3, r0
 8003ed4:	1a18      	subs	r0, r3, r0
 8003ed6:	b003      	add	sp, #12
 8003ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eda:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ede:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ee2:	e7ed      	b.n	8003ec0 <__exponent+0x44>
 8003ee4:	2330      	movs	r3, #48	@ 0x30
 8003ee6:	3130      	adds	r1, #48	@ 0x30
 8003ee8:	7083      	strb	r3, [r0, #2]
 8003eea:	70c1      	strb	r1, [r0, #3]
 8003eec:	1d03      	adds	r3, r0, #4
 8003eee:	e7f1      	b.n	8003ed4 <__exponent+0x58>

08003ef0 <_printf_float>:
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	b08d      	sub	sp, #52	@ 0x34
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003efc:	4616      	mov	r6, r2
 8003efe:	461f      	mov	r7, r3
 8003f00:	4605      	mov	r5, r0
 8003f02:	f000 fcbb 	bl	800487c <_localeconv_r>
 8003f06:	6803      	ldr	r3, [r0, #0]
 8003f08:	9304      	str	r3, [sp, #16]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc f9b0 	bl	8000270 <strlen>
 8003f10:	2300      	movs	r3, #0
 8003f12:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f14:	f8d8 3000 	ldr.w	r3, [r8]
 8003f18:	9005      	str	r0, [sp, #20]
 8003f1a:	3307      	adds	r3, #7
 8003f1c:	f023 0307 	bic.w	r3, r3, #7
 8003f20:	f103 0208 	add.w	r2, r3, #8
 8003f24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f28:	f8d4 b000 	ldr.w	fp, [r4]
 8003f2c:	f8c8 2000 	str.w	r2, [r8]
 8003f30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f38:	9307      	str	r3, [sp, #28]
 8003f3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f46:	4b9c      	ldr	r3, [pc, #624]	@ (80041b8 <_printf_float+0x2c8>)
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4c:	f7fc fdee 	bl	8000b2c <__aeabi_dcmpun>
 8003f50:	bb70      	cbnz	r0, 8003fb0 <_printf_float+0xc0>
 8003f52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f56:	4b98      	ldr	r3, [pc, #608]	@ (80041b8 <_printf_float+0x2c8>)
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295
 8003f5c:	f7fc fdc8 	bl	8000af0 <__aeabi_dcmple>
 8003f60:	bb30      	cbnz	r0, 8003fb0 <_printf_float+0xc0>
 8003f62:	2200      	movs	r2, #0
 8003f64:	2300      	movs	r3, #0
 8003f66:	4640      	mov	r0, r8
 8003f68:	4649      	mov	r1, r9
 8003f6a:	f7fc fdb7 	bl	8000adc <__aeabi_dcmplt>
 8003f6e:	b110      	cbz	r0, 8003f76 <_printf_float+0x86>
 8003f70:	232d      	movs	r3, #45	@ 0x2d
 8003f72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f76:	4a91      	ldr	r2, [pc, #580]	@ (80041bc <_printf_float+0x2cc>)
 8003f78:	4b91      	ldr	r3, [pc, #580]	@ (80041c0 <_printf_float+0x2d0>)
 8003f7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f7e:	bf94      	ite	ls
 8003f80:	4690      	movls	r8, r2
 8003f82:	4698      	movhi	r8, r3
 8003f84:	2303      	movs	r3, #3
 8003f86:	6123      	str	r3, [r4, #16]
 8003f88:	f02b 0304 	bic.w	r3, fp, #4
 8003f8c:	6023      	str	r3, [r4, #0]
 8003f8e:	f04f 0900 	mov.w	r9, #0
 8003f92:	9700      	str	r7, [sp, #0]
 8003f94:	4633      	mov	r3, r6
 8003f96:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003f98:	4621      	mov	r1, r4
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 f9d2 	bl	8004344 <_printf_common>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	f040 808d 	bne.w	80040c0 <_printf_float+0x1d0>
 8003fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8003faa:	b00d      	add	sp, #52	@ 0x34
 8003fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	f7fc fdb8 	bl	8000b2c <__aeabi_dcmpun>
 8003fbc:	b140      	cbz	r0, 8003fd0 <_printf_float+0xe0>
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bfbc      	itt	lt
 8003fc4:	232d      	movlt	r3, #45	@ 0x2d
 8003fc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fca:	4a7e      	ldr	r2, [pc, #504]	@ (80041c4 <_printf_float+0x2d4>)
 8003fcc:	4b7e      	ldr	r3, [pc, #504]	@ (80041c8 <_printf_float+0x2d8>)
 8003fce:	e7d4      	b.n	8003f7a <_printf_float+0x8a>
 8003fd0:	6863      	ldr	r3, [r4, #4]
 8003fd2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003fd6:	9206      	str	r2, [sp, #24]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	d13b      	bne.n	8004054 <_printf_float+0x164>
 8003fdc:	2306      	movs	r3, #6
 8003fde:	6063      	str	r3, [r4, #4]
 8003fe0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6022      	str	r2, [r4, #0]
 8003fe8:	9303      	str	r3, [sp, #12]
 8003fea:	ab0a      	add	r3, sp, #40	@ 0x28
 8003fec:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003ff0:	ab09      	add	r3, sp, #36	@ 0x24
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	6861      	ldr	r1, [r4, #4]
 8003ff6:	ec49 8b10 	vmov	d0, r8, r9
 8003ffa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003ffe:	4628      	mov	r0, r5
 8004000:	f7ff fed7 	bl	8003db2 <__cvt>
 8004004:	9b06      	ldr	r3, [sp, #24]
 8004006:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004008:	2b47      	cmp	r3, #71	@ 0x47
 800400a:	4680      	mov	r8, r0
 800400c:	d129      	bne.n	8004062 <_printf_float+0x172>
 800400e:	1cc8      	adds	r0, r1, #3
 8004010:	db02      	blt.n	8004018 <_printf_float+0x128>
 8004012:	6863      	ldr	r3, [r4, #4]
 8004014:	4299      	cmp	r1, r3
 8004016:	dd41      	ble.n	800409c <_printf_float+0x1ac>
 8004018:	f1aa 0a02 	sub.w	sl, sl, #2
 800401c:	fa5f fa8a 	uxtb.w	sl, sl
 8004020:	3901      	subs	r1, #1
 8004022:	4652      	mov	r2, sl
 8004024:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004028:	9109      	str	r1, [sp, #36]	@ 0x24
 800402a:	f7ff ff27 	bl	8003e7c <__exponent>
 800402e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004030:	1813      	adds	r3, r2, r0
 8004032:	2a01      	cmp	r2, #1
 8004034:	4681      	mov	r9, r0
 8004036:	6123      	str	r3, [r4, #16]
 8004038:	dc02      	bgt.n	8004040 <_printf_float+0x150>
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	07d2      	lsls	r2, r2, #31
 800403e:	d501      	bpl.n	8004044 <_printf_float+0x154>
 8004040:	3301      	adds	r3, #1
 8004042:	6123      	str	r3, [r4, #16]
 8004044:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0a2      	beq.n	8003f92 <_printf_float+0xa2>
 800404c:	232d      	movs	r3, #45	@ 0x2d
 800404e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004052:	e79e      	b.n	8003f92 <_printf_float+0xa2>
 8004054:	9a06      	ldr	r2, [sp, #24]
 8004056:	2a47      	cmp	r2, #71	@ 0x47
 8004058:	d1c2      	bne.n	8003fe0 <_printf_float+0xf0>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1c0      	bne.n	8003fe0 <_printf_float+0xf0>
 800405e:	2301      	movs	r3, #1
 8004060:	e7bd      	b.n	8003fde <_printf_float+0xee>
 8004062:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004066:	d9db      	bls.n	8004020 <_printf_float+0x130>
 8004068:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800406c:	d118      	bne.n	80040a0 <_printf_float+0x1b0>
 800406e:	2900      	cmp	r1, #0
 8004070:	6863      	ldr	r3, [r4, #4]
 8004072:	dd0b      	ble.n	800408c <_printf_float+0x19c>
 8004074:	6121      	str	r1, [r4, #16]
 8004076:	b913      	cbnz	r3, 800407e <_printf_float+0x18e>
 8004078:	6822      	ldr	r2, [r4, #0]
 800407a:	07d0      	lsls	r0, r2, #31
 800407c:	d502      	bpl.n	8004084 <_printf_float+0x194>
 800407e:	3301      	adds	r3, #1
 8004080:	440b      	add	r3, r1
 8004082:	6123      	str	r3, [r4, #16]
 8004084:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004086:	f04f 0900 	mov.w	r9, #0
 800408a:	e7db      	b.n	8004044 <_printf_float+0x154>
 800408c:	b913      	cbnz	r3, 8004094 <_printf_float+0x1a4>
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	07d2      	lsls	r2, r2, #31
 8004092:	d501      	bpl.n	8004098 <_printf_float+0x1a8>
 8004094:	3302      	adds	r3, #2
 8004096:	e7f4      	b.n	8004082 <_printf_float+0x192>
 8004098:	2301      	movs	r3, #1
 800409a:	e7f2      	b.n	8004082 <_printf_float+0x192>
 800409c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040a2:	4299      	cmp	r1, r3
 80040a4:	db05      	blt.n	80040b2 <_printf_float+0x1c2>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	6121      	str	r1, [r4, #16]
 80040aa:	07d8      	lsls	r0, r3, #31
 80040ac:	d5ea      	bpl.n	8004084 <_printf_float+0x194>
 80040ae:	1c4b      	adds	r3, r1, #1
 80040b0:	e7e7      	b.n	8004082 <_printf_float+0x192>
 80040b2:	2900      	cmp	r1, #0
 80040b4:	bfd4      	ite	le
 80040b6:	f1c1 0202 	rsble	r2, r1, #2
 80040ba:	2201      	movgt	r2, #1
 80040bc:	4413      	add	r3, r2
 80040be:	e7e0      	b.n	8004082 <_printf_float+0x192>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	055a      	lsls	r2, r3, #21
 80040c4:	d407      	bmi.n	80040d6 <_printf_float+0x1e6>
 80040c6:	6923      	ldr	r3, [r4, #16]
 80040c8:	4642      	mov	r2, r8
 80040ca:	4631      	mov	r1, r6
 80040cc:	4628      	mov	r0, r5
 80040ce:	47b8      	blx	r7
 80040d0:	3001      	adds	r0, #1
 80040d2:	d12b      	bne.n	800412c <_printf_float+0x23c>
 80040d4:	e767      	b.n	8003fa6 <_printf_float+0xb6>
 80040d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040da:	f240 80dd 	bls.w	8004298 <_printf_float+0x3a8>
 80040de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040e2:	2200      	movs	r2, #0
 80040e4:	2300      	movs	r3, #0
 80040e6:	f7fc fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d033      	beq.n	8004156 <_printf_float+0x266>
 80040ee:	4a37      	ldr	r2, [pc, #220]	@ (80041cc <_printf_float+0x2dc>)
 80040f0:	2301      	movs	r3, #1
 80040f2:	4631      	mov	r1, r6
 80040f4:	4628      	mov	r0, r5
 80040f6:	47b8      	blx	r7
 80040f8:	3001      	adds	r0, #1
 80040fa:	f43f af54 	beq.w	8003fa6 <_printf_float+0xb6>
 80040fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004102:	4543      	cmp	r3, r8
 8004104:	db02      	blt.n	800410c <_printf_float+0x21c>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	07d8      	lsls	r0, r3, #31
 800410a:	d50f      	bpl.n	800412c <_printf_float+0x23c>
 800410c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004110:	4631      	mov	r1, r6
 8004112:	4628      	mov	r0, r5
 8004114:	47b8      	blx	r7
 8004116:	3001      	adds	r0, #1
 8004118:	f43f af45 	beq.w	8003fa6 <_printf_float+0xb6>
 800411c:	f04f 0900 	mov.w	r9, #0
 8004120:	f108 38ff 	add.w	r8, r8, #4294967295
 8004124:	f104 0a1a 	add.w	sl, r4, #26
 8004128:	45c8      	cmp	r8, r9
 800412a:	dc09      	bgt.n	8004140 <_printf_float+0x250>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	079b      	lsls	r3, r3, #30
 8004130:	f100 8103 	bmi.w	800433a <_printf_float+0x44a>
 8004134:	68e0      	ldr	r0, [r4, #12]
 8004136:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004138:	4298      	cmp	r0, r3
 800413a:	bfb8      	it	lt
 800413c:	4618      	movlt	r0, r3
 800413e:	e734      	b.n	8003faa <_printf_float+0xba>
 8004140:	2301      	movs	r3, #1
 8004142:	4652      	mov	r2, sl
 8004144:	4631      	mov	r1, r6
 8004146:	4628      	mov	r0, r5
 8004148:	47b8      	blx	r7
 800414a:	3001      	adds	r0, #1
 800414c:	f43f af2b 	beq.w	8003fa6 <_printf_float+0xb6>
 8004150:	f109 0901 	add.w	r9, r9, #1
 8004154:	e7e8      	b.n	8004128 <_printf_float+0x238>
 8004156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004158:	2b00      	cmp	r3, #0
 800415a:	dc39      	bgt.n	80041d0 <_printf_float+0x2e0>
 800415c:	4a1b      	ldr	r2, [pc, #108]	@ (80041cc <_printf_float+0x2dc>)
 800415e:	2301      	movs	r3, #1
 8004160:	4631      	mov	r1, r6
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	f43f af1d 	beq.w	8003fa6 <_printf_float+0xb6>
 800416c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004170:	ea59 0303 	orrs.w	r3, r9, r3
 8004174:	d102      	bne.n	800417c <_printf_float+0x28c>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	07d9      	lsls	r1, r3, #31
 800417a:	d5d7      	bpl.n	800412c <_printf_float+0x23c>
 800417c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004180:	4631      	mov	r1, r6
 8004182:	4628      	mov	r0, r5
 8004184:	47b8      	blx	r7
 8004186:	3001      	adds	r0, #1
 8004188:	f43f af0d 	beq.w	8003fa6 <_printf_float+0xb6>
 800418c:	f04f 0a00 	mov.w	sl, #0
 8004190:	f104 0b1a 	add.w	fp, r4, #26
 8004194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004196:	425b      	negs	r3, r3
 8004198:	4553      	cmp	r3, sl
 800419a:	dc01      	bgt.n	80041a0 <_printf_float+0x2b0>
 800419c:	464b      	mov	r3, r9
 800419e:	e793      	b.n	80040c8 <_printf_float+0x1d8>
 80041a0:	2301      	movs	r3, #1
 80041a2:	465a      	mov	r2, fp
 80041a4:	4631      	mov	r1, r6
 80041a6:	4628      	mov	r0, r5
 80041a8:	47b8      	blx	r7
 80041aa:	3001      	adds	r0, #1
 80041ac:	f43f aefb 	beq.w	8003fa6 <_printf_float+0xb6>
 80041b0:	f10a 0a01 	add.w	sl, sl, #1
 80041b4:	e7ee      	b.n	8004194 <_printf_float+0x2a4>
 80041b6:	bf00      	nop
 80041b8:	7fefffff 	.word	0x7fefffff
 80041bc:	08006708 	.word	0x08006708
 80041c0:	0800670c 	.word	0x0800670c
 80041c4:	08006710 	.word	0x08006710
 80041c8:	08006714 	.word	0x08006714
 80041cc:	08006718 	.word	0x08006718
 80041d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041d6:	4553      	cmp	r3, sl
 80041d8:	bfa8      	it	ge
 80041da:	4653      	movge	r3, sl
 80041dc:	2b00      	cmp	r3, #0
 80041de:	4699      	mov	r9, r3
 80041e0:	dc36      	bgt.n	8004250 <_printf_float+0x360>
 80041e2:	f04f 0b00 	mov.w	fp, #0
 80041e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041ea:	f104 021a 	add.w	r2, r4, #26
 80041ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041f0:	9306      	str	r3, [sp, #24]
 80041f2:	eba3 0309 	sub.w	r3, r3, r9
 80041f6:	455b      	cmp	r3, fp
 80041f8:	dc31      	bgt.n	800425e <_printf_float+0x36e>
 80041fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041fc:	459a      	cmp	sl, r3
 80041fe:	dc3a      	bgt.n	8004276 <_printf_float+0x386>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	07da      	lsls	r2, r3, #31
 8004204:	d437      	bmi.n	8004276 <_printf_float+0x386>
 8004206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004208:	ebaa 0903 	sub.w	r9, sl, r3
 800420c:	9b06      	ldr	r3, [sp, #24]
 800420e:	ebaa 0303 	sub.w	r3, sl, r3
 8004212:	4599      	cmp	r9, r3
 8004214:	bfa8      	it	ge
 8004216:	4699      	movge	r9, r3
 8004218:	f1b9 0f00 	cmp.w	r9, #0
 800421c:	dc33      	bgt.n	8004286 <_printf_float+0x396>
 800421e:	f04f 0800 	mov.w	r8, #0
 8004222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004226:	f104 0b1a 	add.w	fp, r4, #26
 800422a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800422c:	ebaa 0303 	sub.w	r3, sl, r3
 8004230:	eba3 0309 	sub.w	r3, r3, r9
 8004234:	4543      	cmp	r3, r8
 8004236:	f77f af79 	ble.w	800412c <_printf_float+0x23c>
 800423a:	2301      	movs	r3, #1
 800423c:	465a      	mov	r2, fp
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	47b8      	blx	r7
 8004244:	3001      	adds	r0, #1
 8004246:	f43f aeae 	beq.w	8003fa6 <_printf_float+0xb6>
 800424a:	f108 0801 	add.w	r8, r8, #1
 800424e:	e7ec      	b.n	800422a <_printf_float+0x33a>
 8004250:	4642      	mov	r2, r8
 8004252:	4631      	mov	r1, r6
 8004254:	4628      	mov	r0, r5
 8004256:	47b8      	blx	r7
 8004258:	3001      	adds	r0, #1
 800425a:	d1c2      	bne.n	80041e2 <_printf_float+0x2f2>
 800425c:	e6a3      	b.n	8003fa6 <_printf_float+0xb6>
 800425e:	2301      	movs	r3, #1
 8004260:	4631      	mov	r1, r6
 8004262:	4628      	mov	r0, r5
 8004264:	9206      	str	r2, [sp, #24]
 8004266:	47b8      	blx	r7
 8004268:	3001      	adds	r0, #1
 800426a:	f43f ae9c 	beq.w	8003fa6 <_printf_float+0xb6>
 800426e:	9a06      	ldr	r2, [sp, #24]
 8004270:	f10b 0b01 	add.w	fp, fp, #1
 8004274:	e7bb      	b.n	80041ee <_printf_float+0x2fe>
 8004276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800427a:	4631      	mov	r1, r6
 800427c:	4628      	mov	r0, r5
 800427e:	47b8      	blx	r7
 8004280:	3001      	adds	r0, #1
 8004282:	d1c0      	bne.n	8004206 <_printf_float+0x316>
 8004284:	e68f      	b.n	8003fa6 <_printf_float+0xb6>
 8004286:	9a06      	ldr	r2, [sp, #24]
 8004288:	464b      	mov	r3, r9
 800428a:	4442      	add	r2, r8
 800428c:	4631      	mov	r1, r6
 800428e:	4628      	mov	r0, r5
 8004290:	47b8      	blx	r7
 8004292:	3001      	adds	r0, #1
 8004294:	d1c3      	bne.n	800421e <_printf_float+0x32e>
 8004296:	e686      	b.n	8003fa6 <_printf_float+0xb6>
 8004298:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800429c:	f1ba 0f01 	cmp.w	sl, #1
 80042a0:	dc01      	bgt.n	80042a6 <_printf_float+0x3b6>
 80042a2:	07db      	lsls	r3, r3, #31
 80042a4:	d536      	bpl.n	8004314 <_printf_float+0x424>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4642      	mov	r2, r8
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	f43f ae78 	beq.w	8003fa6 <_printf_float+0xb6>
 80042b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042ba:	4631      	mov	r1, r6
 80042bc:	4628      	mov	r0, r5
 80042be:	47b8      	blx	r7
 80042c0:	3001      	adds	r0, #1
 80042c2:	f43f ae70 	beq.w	8003fa6 <_printf_float+0xb6>
 80042c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042ca:	2200      	movs	r2, #0
 80042cc:	2300      	movs	r3, #0
 80042ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042d2:	f7fc fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80042d6:	b9c0      	cbnz	r0, 800430a <_printf_float+0x41a>
 80042d8:	4653      	mov	r3, sl
 80042da:	f108 0201 	add.w	r2, r8, #1
 80042de:	4631      	mov	r1, r6
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b8      	blx	r7
 80042e4:	3001      	adds	r0, #1
 80042e6:	d10c      	bne.n	8004302 <_printf_float+0x412>
 80042e8:	e65d      	b.n	8003fa6 <_printf_float+0xb6>
 80042ea:	2301      	movs	r3, #1
 80042ec:	465a      	mov	r2, fp
 80042ee:	4631      	mov	r1, r6
 80042f0:	4628      	mov	r0, r5
 80042f2:	47b8      	blx	r7
 80042f4:	3001      	adds	r0, #1
 80042f6:	f43f ae56 	beq.w	8003fa6 <_printf_float+0xb6>
 80042fa:	f108 0801 	add.w	r8, r8, #1
 80042fe:	45d0      	cmp	r8, sl
 8004300:	dbf3      	blt.n	80042ea <_printf_float+0x3fa>
 8004302:	464b      	mov	r3, r9
 8004304:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004308:	e6df      	b.n	80040ca <_printf_float+0x1da>
 800430a:	f04f 0800 	mov.w	r8, #0
 800430e:	f104 0b1a 	add.w	fp, r4, #26
 8004312:	e7f4      	b.n	80042fe <_printf_float+0x40e>
 8004314:	2301      	movs	r3, #1
 8004316:	4642      	mov	r2, r8
 8004318:	e7e1      	b.n	80042de <_printf_float+0x3ee>
 800431a:	2301      	movs	r3, #1
 800431c:	464a      	mov	r2, r9
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	f43f ae3e 	beq.w	8003fa6 <_printf_float+0xb6>
 800432a:	f108 0801 	add.w	r8, r8, #1
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004332:	1a5b      	subs	r3, r3, r1
 8004334:	4543      	cmp	r3, r8
 8004336:	dcf0      	bgt.n	800431a <_printf_float+0x42a>
 8004338:	e6fc      	b.n	8004134 <_printf_float+0x244>
 800433a:	f04f 0800 	mov.w	r8, #0
 800433e:	f104 0919 	add.w	r9, r4, #25
 8004342:	e7f4      	b.n	800432e <_printf_float+0x43e>

08004344 <_printf_common>:
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	4616      	mov	r6, r2
 800434a:	4698      	mov	r8, r3
 800434c:	688a      	ldr	r2, [r1, #8]
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004354:	4293      	cmp	r3, r2
 8004356:	bfb8      	it	lt
 8004358:	4613      	movlt	r3, r2
 800435a:	6033      	str	r3, [r6, #0]
 800435c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004360:	4607      	mov	r7, r0
 8004362:	460c      	mov	r4, r1
 8004364:	b10a      	cbz	r2, 800436a <_printf_common+0x26>
 8004366:	3301      	adds	r3, #1
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	0699      	lsls	r1, r3, #26
 800436e:	bf42      	ittt	mi
 8004370:	6833      	ldrmi	r3, [r6, #0]
 8004372:	3302      	addmi	r3, #2
 8004374:	6033      	strmi	r3, [r6, #0]
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	f015 0506 	ands.w	r5, r5, #6
 800437c:	d106      	bne.n	800438c <_printf_common+0x48>
 800437e:	f104 0a19 	add.w	sl, r4, #25
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	6832      	ldr	r2, [r6, #0]
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	42ab      	cmp	r3, r5
 800438a:	dc26      	bgt.n	80043da <_printf_common+0x96>
 800438c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	3b00      	subs	r3, #0
 8004394:	bf18      	it	ne
 8004396:	2301      	movne	r3, #1
 8004398:	0692      	lsls	r2, r2, #26
 800439a:	d42b      	bmi.n	80043f4 <_printf_common+0xb0>
 800439c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043a0:	4641      	mov	r1, r8
 80043a2:	4638      	mov	r0, r7
 80043a4:	47c8      	blx	r9
 80043a6:	3001      	adds	r0, #1
 80043a8:	d01e      	beq.n	80043e8 <_printf_common+0xa4>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	6922      	ldr	r2, [r4, #16]
 80043ae:	f003 0306 	and.w	r3, r3, #6
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf02      	ittt	eq
 80043b6:	68e5      	ldreq	r5, [r4, #12]
 80043b8:	6833      	ldreq	r3, [r6, #0]
 80043ba:	1aed      	subeq	r5, r5, r3
 80043bc:	68a3      	ldr	r3, [r4, #8]
 80043be:	bf0c      	ite	eq
 80043c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043c4:	2500      	movne	r5, #0
 80043c6:	4293      	cmp	r3, r2
 80043c8:	bfc4      	itt	gt
 80043ca:	1a9b      	subgt	r3, r3, r2
 80043cc:	18ed      	addgt	r5, r5, r3
 80043ce:	2600      	movs	r6, #0
 80043d0:	341a      	adds	r4, #26
 80043d2:	42b5      	cmp	r5, r6
 80043d4:	d11a      	bne.n	800440c <_printf_common+0xc8>
 80043d6:	2000      	movs	r0, #0
 80043d8:	e008      	b.n	80043ec <_printf_common+0xa8>
 80043da:	2301      	movs	r3, #1
 80043dc:	4652      	mov	r2, sl
 80043de:	4641      	mov	r1, r8
 80043e0:	4638      	mov	r0, r7
 80043e2:	47c8      	blx	r9
 80043e4:	3001      	adds	r0, #1
 80043e6:	d103      	bne.n	80043f0 <_printf_common+0xac>
 80043e8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f0:	3501      	adds	r5, #1
 80043f2:	e7c6      	b.n	8004382 <_printf_common+0x3e>
 80043f4:	18e1      	adds	r1, r4, r3
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	2030      	movs	r0, #48	@ 0x30
 80043fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043fe:	4422      	add	r2, r4
 8004400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004408:	3302      	adds	r3, #2
 800440a:	e7c7      	b.n	800439c <_printf_common+0x58>
 800440c:	2301      	movs	r3, #1
 800440e:	4622      	mov	r2, r4
 8004410:	4641      	mov	r1, r8
 8004412:	4638      	mov	r0, r7
 8004414:	47c8      	blx	r9
 8004416:	3001      	adds	r0, #1
 8004418:	d0e6      	beq.n	80043e8 <_printf_common+0xa4>
 800441a:	3601      	adds	r6, #1
 800441c:	e7d9      	b.n	80043d2 <_printf_common+0x8e>
	...

08004420 <_printf_i>:
 8004420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004424:	7e0f      	ldrb	r7, [r1, #24]
 8004426:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004428:	2f78      	cmp	r7, #120	@ 0x78
 800442a:	4691      	mov	r9, r2
 800442c:	4680      	mov	r8, r0
 800442e:	460c      	mov	r4, r1
 8004430:	469a      	mov	sl, r3
 8004432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004436:	d807      	bhi.n	8004448 <_printf_i+0x28>
 8004438:	2f62      	cmp	r7, #98	@ 0x62
 800443a:	d80a      	bhi.n	8004452 <_printf_i+0x32>
 800443c:	2f00      	cmp	r7, #0
 800443e:	f000 80d2 	beq.w	80045e6 <_printf_i+0x1c6>
 8004442:	2f58      	cmp	r7, #88	@ 0x58
 8004444:	f000 80b9 	beq.w	80045ba <_printf_i+0x19a>
 8004448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800444c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004450:	e03a      	b.n	80044c8 <_printf_i+0xa8>
 8004452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004456:	2b15      	cmp	r3, #21
 8004458:	d8f6      	bhi.n	8004448 <_printf_i+0x28>
 800445a:	a101      	add	r1, pc, #4	@ (adr r1, 8004460 <_printf_i+0x40>)
 800445c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004460:	080044b9 	.word	0x080044b9
 8004464:	080044cd 	.word	0x080044cd
 8004468:	08004449 	.word	0x08004449
 800446c:	08004449 	.word	0x08004449
 8004470:	08004449 	.word	0x08004449
 8004474:	08004449 	.word	0x08004449
 8004478:	080044cd 	.word	0x080044cd
 800447c:	08004449 	.word	0x08004449
 8004480:	08004449 	.word	0x08004449
 8004484:	08004449 	.word	0x08004449
 8004488:	08004449 	.word	0x08004449
 800448c:	080045cd 	.word	0x080045cd
 8004490:	080044f7 	.word	0x080044f7
 8004494:	08004587 	.word	0x08004587
 8004498:	08004449 	.word	0x08004449
 800449c:	08004449 	.word	0x08004449
 80044a0:	080045ef 	.word	0x080045ef
 80044a4:	08004449 	.word	0x08004449
 80044a8:	080044f7 	.word	0x080044f7
 80044ac:	08004449 	.word	0x08004449
 80044b0:	08004449 	.word	0x08004449
 80044b4:	0800458f 	.word	0x0800458f
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	1d1a      	adds	r2, r3, #4
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6032      	str	r2, [r6, #0]
 80044c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044c8:	2301      	movs	r3, #1
 80044ca:	e09d      	b.n	8004608 <_printf_i+0x1e8>
 80044cc:	6833      	ldr	r3, [r6, #0]
 80044ce:	6820      	ldr	r0, [r4, #0]
 80044d0:	1d19      	adds	r1, r3, #4
 80044d2:	6031      	str	r1, [r6, #0]
 80044d4:	0606      	lsls	r6, r0, #24
 80044d6:	d501      	bpl.n	80044dc <_printf_i+0xbc>
 80044d8:	681d      	ldr	r5, [r3, #0]
 80044da:	e003      	b.n	80044e4 <_printf_i+0xc4>
 80044dc:	0645      	lsls	r5, r0, #25
 80044de:	d5fb      	bpl.n	80044d8 <_printf_i+0xb8>
 80044e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044e4:	2d00      	cmp	r5, #0
 80044e6:	da03      	bge.n	80044f0 <_printf_i+0xd0>
 80044e8:	232d      	movs	r3, #45	@ 0x2d
 80044ea:	426d      	negs	r5, r5
 80044ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044f0:	4859      	ldr	r0, [pc, #356]	@ (8004658 <_printf_i+0x238>)
 80044f2:	230a      	movs	r3, #10
 80044f4:	e011      	b.n	800451a <_printf_i+0xfa>
 80044f6:	6821      	ldr	r1, [r4, #0]
 80044f8:	6833      	ldr	r3, [r6, #0]
 80044fa:	0608      	lsls	r0, r1, #24
 80044fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004500:	d402      	bmi.n	8004508 <_printf_i+0xe8>
 8004502:	0649      	lsls	r1, r1, #25
 8004504:	bf48      	it	mi
 8004506:	b2ad      	uxthmi	r5, r5
 8004508:	2f6f      	cmp	r7, #111	@ 0x6f
 800450a:	4853      	ldr	r0, [pc, #332]	@ (8004658 <_printf_i+0x238>)
 800450c:	6033      	str	r3, [r6, #0]
 800450e:	bf14      	ite	ne
 8004510:	230a      	movne	r3, #10
 8004512:	2308      	moveq	r3, #8
 8004514:	2100      	movs	r1, #0
 8004516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800451a:	6866      	ldr	r6, [r4, #4]
 800451c:	60a6      	str	r6, [r4, #8]
 800451e:	2e00      	cmp	r6, #0
 8004520:	bfa2      	ittt	ge
 8004522:	6821      	ldrge	r1, [r4, #0]
 8004524:	f021 0104 	bicge.w	r1, r1, #4
 8004528:	6021      	strge	r1, [r4, #0]
 800452a:	b90d      	cbnz	r5, 8004530 <_printf_i+0x110>
 800452c:	2e00      	cmp	r6, #0
 800452e:	d04b      	beq.n	80045c8 <_printf_i+0x1a8>
 8004530:	4616      	mov	r6, r2
 8004532:	fbb5 f1f3 	udiv	r1, r5, r3
 8004536:	fb03 5711 	mls	r7, r3, r1, r5
 800453a:	5dc7      	ldrb	r7, [r0, r7]
 800453c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004540:	462f      	mov	r7, r5
 8004542:	42bb      	cmp	r3, r7
 8004544:	460d      	mov	r5, r1
 8004546:	d9f4      	bls.n	8004532 <_printf_i+0x112>
 8004548:	2b08      	cmp	r3, #8
 800454a:	d10b      	bne.n	8004564 <_printf_i+0x144>
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	07df      	lsls	r7, r3, #31
 8004550:	d508      	bpl.n	8004564 <_printf_i+0x144>
 8004552:	6923      	ldr	r3, [r4, #16]
 8004554:	6861      	ldr	r1, [r4, #4]
 8004556:	4299      	cmp	r1, r3
 8004558:	bfde      	ittt	le
 800455a:	2330      	movle	r3, #48	@ 0x30
 800455c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004560:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004564:	1b92      	subs	r2, r2, r6
 8004566:	6122      	str	r2, [r4, #16]
 8004568:	f8cd a000 	str.w	sl, [sp]
 800456c:	464b      	mov	r3, r9
 800456e:	aa03      	add	r2, sp, #12
 8004570:	4621      	mov	r1, r4
 8004572:	4640      	mov	r0, r8
 8004574:	f7ff fee6 	bl	8004344 <_printf_common>
 8004578:	3001      	adds	r0, #1
 800457a:	d14a      	bne.n	8004612 <_printf_i+0x1f2>
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	b004      	add	sp, #16
 8004582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	f043 0320 	orr.w	r3, r3, #32
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	4833      	ldr	r0, [pc, #204]	@ (800465c <_printf_i+0x23c>)
 8004590:	2778      	movs	r7, #120	@ 0x78
 8004592:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	6831      	ldr	r1, [r6, #0]
 800459a:	061f      	lsls	r7, r3, #24
 800459c:	f851 5b04 	ldr.w	r5, [r1], #4
 80045a0:	d402      	bmi.n	80045a8 <_printf_i+0x188>
 80045a2:	065f      	lsls	r7, r3, #25
 80045a4:	bf48      	it	mi
 80045a6:	b2ad      	uxthmi	r5, r5
 80045a8:	6031      	str	r1, [r6, #0]
 80045aa:	07d9      	lsls	r1, r3, #31
 80045ac:	bf44      	itt	mi
 80045ae:	f043 0320 	orrmi.w	r3, r3, #32
 80045b2:	6023      	strmi	r3, [r4, #0]
 80045b4:	b11d      	cbz	r5, 80045be <_printf_i+0x19e>
 80045b6:	2310      	movs	r3, #16
 80045b8:	e7ac      	b.n	8004514 <_printf_i+0xf4>
 80045ba:	4827      	ldr	r0, [pc, #156]	@ (8004658 <_printf_i+0x238>)
 80045bc:	e7e9      	b.n	8004592 <_printf_i+0x172>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	f023 0320 	bic.w	r3, r3, #32
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	e7f6      	b.n	80045b6 <_printf_i+0x196>
 80045c8:	4616      	mov	r6, r2
 80045ca:	e7bd      	b.n	8004548 <_printf_i+0x128>
 80045cc:	6833      	ldr	r3, [r6, #0]
 80045ce:	6825      	ldr	r5, [r4, #0]
 80045d0:	6961      	ldr	r1, [r4, #20]
 80045d2:	1d18      	adds	r0, r3, #4
 80045d4:	6030      	str	r0, [r6, #0]
 80045d6:	062e      	lsls	r6, r5, #24
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	d501      	bpl.n	80045e0 <_printf_i+0x1c0>
 80045dc:	6019      	str	r1, [r3, #0]
 80045de:	e002      	b.n	80045e6 <_printf_i+0x1c6>
 80045e0:	0668      	lsls	r0, r5, #25
 80045e2:	d5fb      	bpl.n	80045dc <_printf_i+0x1bc>
 80045e4:	8019      	strh	r1, [r3, #0]
 80045e6:	2300      	movs	r3, #0
 80045e8:	6123      	str	r3, [r4, #16]
 80045ea:	4616      	mov	r6, r2
 80045ec:	e7bc      	b.n	8004568 <_printf_i+0x148>
 80045ee:	6833      	ldr	r3, [r6, #0]
 80045f0:	1d1a      	adds	r2, r3, #4
 80045f2:	6032      	str	r2, [r6, #0]
 80045f4:	681e      	ldr	r6, [r3, #0]
 80045f6:	6862      	ldr	r2, [r4, #4]
 80045f8:	2100      	movs	r1, #0
 80045fa:	4630      	mov	r0, r6
 80045fc:	f7fb fde8 	bl	80001d0 <memchr>
 8004600:	b108      	cbz	r0, 8004606 <_printf_i+0x1e6>
 8004602:	1b80      	subs	r0, r0, r6
 8004604:	6060      	str	r0, [r4, #4]
 8004606:	6863      	ldr	r3, [r4, #4]
 8004608:	6123      	str	r3, [r4, #16]
 800460a:	2300      	movs	r3, #0
 800460c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004610:	e7aa      	b.n	8004568 <_printf_i+0x148>
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	4632      	mov	r2, r6
 8004616:	4649      	mov	r1, r9
 8004618:	4640      	mov	r0, r8
 800461a:	47d0      	blx	sl
 800461c:	3001      	adds	r0, #1
 800461e:	d0ad      	beq.n	800457c <_printf_i+0x15c>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	079b      	lsls	r3, r3, #30
 8004624:	d413      	bmi.n	800464e <_printf_i+0x22e>
 8004626:	68e0      	ldr	r0, [r4, #12]
 8004628:	9b03      	ldr	r3, [sp, #12]
 800462a:	4298      	cmp	r0, r3
 800462c:	bfb8      	it	lt
 800462e:	4618      	movlt	r0, r3
 8004630:	e7a6      	b.n	8004580 <_printf_i+0x160>
 8004632:	2301      	movs	r3, #1
 8004634:	4632      	mov	r2, r6
 8004636:	4649      	mov	r1, r9
 8004638:	4640      	mov	r0, r8
 800463a:	47d0      	blx	sl
 800463c:	3001      	adds	r0, #1
 800463e:	d09d      	beq.n	800457c <_printf_i+0x15c>
 8004640:	3501      	adds	r5, #1
 8004642:	68e3      	ldr	r3, [r4, #12]
 8004644:	9903      	ldr	r1, [sp, #12]
 8004646:	1a5b      	subs	r3, r3, r1
 8004648:	42ab      	cmp	r3, r5
 800464a:	dcf2      	bgt.n	8004632 <_printf_i+0x212>
 800464c:	e7eb      	b.n	8004626 <_printf_i+0x206>
 800464e:	2500      	movs	r5, #0
 8004650:	f104 0619 	add.w	r6, r4, #25
 8004654:	e7f5      	b.n	8004642 <_printf_i+0x222>
 8004656:	bf00      	nop
 8004658:	0800671a 	.word	0x0800671a
 800465c:	0800672b 	.word	0x0800672b

08004660 <std>:
 8004660:	2300      	movs	r3, #0
 8004662:	b510      	push	{r4, lr}
 8004664:	4604      	mov	r4, r0
 8004666:	e9c0 3300 	strd	r3, r3, [r0]
 800466a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800466e:	6083      	str	r3, [r0, #8]
 8004670:	8181      	strh	r1, [r0, #12]
 8004672:	6643      	str	r3, [r0, #100]	@ 0x64
 8004674:	81c2      	strh	r2, [r0, #14]
 8004676:	6183      	str	r3, [r0, #24]
 8004678:	4619      	mov	r1, r3
 800467a:	2208      	movs	r2, #8
 800467c:	305c      	adds	r0, #92	@ 0x5c
 800467e:	f000 f8f4 	bl	800486a <memset>
 8004682:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <std+0x58>)
 8004684:	6263      	str	r3, [r4, #36]	@ 0x24
 8004686:	4b0d      	ldr	r3, [pc, #52]	@ (80046bc <std+0x5c>)
 8004688:	62a3      	str	r3, [r4, #40]	@ 0x28
 800468a:	4b0d      	ldr	r3, [pc, #52]	@ (80046c0 <std+0x60>)
 800468c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <std+0x64>)
 8004690:	6323      	str	r3, [r4, #48]	@ 0x30
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <std+0x68>)
 8004694:	6224      	str	r4, [r4, #32]
 8004696:	429c      	cmp	r4, r3
 8004698:	d006      	beq.n	80046a8 <std+0x48>
 800469a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800469e:	4294      	cmp	r4, r2
 80046a0:	d002      	beq.n	80046a8 <std+0x48>
 80046a2:	33d0      	adds	r3, #208	@ 0xd0
 80046a4:	429c      	cmp	r4, r3
 80046a6:	d105      	bne.n	80046b4 <std+0x54>
 80046a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b0:	f000 b958 	b.w	8004964 <__retarget_lock_init_recursive>
 80046b4:	bd10      	pop	{r4, pc}
 80046b6:	bf00      	nop
 80046b8:	080047e5 	.word	0x080047e5
 80046bc:	08004807 	.word	0x08004807
 80046c0:	0800483f 	.word	0x0800483f
 80046c4:	08004863 	.word	0x08004863
 80046c8:	20000250 	.word	0x20000250

080046cc <stdio_exit_handler>:
 80046cc:	4a02      	ldr	r2, [pc, #8]	@ (80046d8 <stdio_exit_handler+0xc>)
 80046ce:	4903      	ldr	r1, [pc, #12]	@ (80046dc <stdio_exit_handler+0x10>)
 80046d0:	4803      	ldr	r0, [pc, #12]	@ (80046e0 <stdio_exit_handler+0x14>)
 80046d2:	f000 b869 	b.w	80047a8 <_fwalk_sglue>
 80046d6:	bf00      	nop
 80046d8:	20000010 	.word	0x20000010
 80046dc:	08006015 	.word	0x08006015
 80046e0:	20000020 	.word	0x20000020

080046e4 <cleanup_stdio>:
 80046e4:	6841      	ldr	r1, [r0, #4]
 80046e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <cleanup_stdio+0x34>)
 80046e8:	4299      	cmp	r1, r3
 80046ea:	b510      	push	{r4, lr}
 80046ec:	4604      	mov	r4, r0
 80046ee:	d001      	beq.n	80046f4 <cleanup_stdio+0x10>
 80046f0:	f001 fc90 	bl	8006014 <_fflush_r>
 80046f4:	68a1      	ldr	r1, [r4, #8]
 80046f6:	4b09      	ldr	r3, [pc, #36]	@ (800471c <cleanup_stdio+0x38>)
 80046f8:	4299      	cmp	r1, r3
 80046fa:	d002      	beq.n	8004702 <cleanup_stdio+0x1e>
 80046fc:	4620      	mov	r0, r4
 80046fe:	f001 fc89 	bl	8006014 <_fflush_r>
 8004702:	68e1      	ldr	r1, [r4, #12]
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <cleanup_stdio+0x3c>)
 8004706:	4299      	cmp	r1, r3
 8004708:	d004      	beq.n	8004714 <cleanup_stdio+0x30>
 800470a:	4620      	mov	r0, r4
 800470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004710:	f001 bc80 	b.w	8006014 <_fflush_r>
 8004714:	bd10      	pop	{r4, pc}
 8004716:	bf00      	nop
 8004718:	20000250 	.word	0x20000250
 800471c:	200002b8 	.word	0x200002b8
 8004720:	20000320 	.word	0x20000320

08004724 <global_stdio_init.part.0>:
 8004724:	b510      	push	{r4, lr}
 8004726:	4b0b      	ldr	r3, [pc, #44]	@ (8004754 <global_stdio_init.part.0+0x30>)
 8004728:	4c0b      	ldr	r4, [pc, #44]	@ (8004758 <global_stdio_init.part.0+0x34>)
 800472a:	4a0c      	ldr	r2, [pc, #48]	@ (800475c <global_stdio_init.part.0+0x38>)
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	4620      	mov	r0, r4
 8004730:	2200      	movs	r2, #0
 8004732:	2104      	movs	r1, #4
 8004734:	f7ff ff94 	bl	8004660 <std>
 8004738:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800473c:	2201      	movs	r2, #1
 800473e:	2109      	movs	r1, #9
 8004740:	f7ff ff8e 	bl	8004660 <std>
 8004744:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004748:	2202      	movs	r2, #2
 800474a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800474e:	2112      	movs	r1, #18
 8004750:	f7ff bf86 	b.w	8004660 <std>
 8004754:	20000388 	.word	0x20000388
 8004758:	20000250 	.word	0x20000250
 800475c:	080046cd 	.word	0x080046cd

08004760 <__sfp_lock_acquire>:
 8004760:	4801      	ldr	r0, [pc, #4]	@ (8004768 <__sfp_lock_acquire+0x8>)
 8004762:	f000 b900 	b.w	8004966 <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	20000391 	.word	0x20000391

0800476c <__sfp_lock_release>:
 800476c:	4801      	ldr	r0, [pc, #4]	@ (8004774 <__sfp_lock_release+0x8>)
 800476e:	f000 b8fb 	b.w	8004968 <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	20000391 	.word	0x20000391

08004778 <__sinit>:
 8004778:	b510      	push	{r4, lr}
 800477a:	4604      	mov	r4, r0
 800477c:	f7ff fff0 	bl	8004760 <__sfp_lock_acquire>
 8004780:	6a23      	ldr	r3, [r4, #32]
 8004782:	b11b      	cbz	r3, 800478c <__sinit+0x14>
 8004784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004788:	f7ff bff0 	b.w	800476c <__sfp_lock_release>
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <__sinit+0x28>)
 800478e:	6223      	str	r3, [r4, #32]
 8004790:	4b04      	ldr	r3, [pc, #16]	@ (80047a4 <__sinit+0x2c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f5      	bne.n	8004784 <__sinit+0xc>
 8004798:	f7ff ffc4 	bl	8004724 <global_stdio_init.part.0>
 800479c:	e7f2      	b.n	8004784 <__sinit+0xc>
 800479e:	bf00      	nop
 80047a0:	080046e5 	.word	0x080046e5
 80047a4:	20000388 	.word	0x20000388

080047a8 <_fwalk_sglue>:
 80047a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ac:	4607      	mov	r7, r0
 80047ae:	4688      	mov	r8, r1
 80047b0:	4614      	mov	r4, r2
 80047b2:	2600      	movs	r6, #0
 80047b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047b8:	f1b9 0901 	subs.w	r9, r9, #1
 80047bc:	d505      	bpl.n	80047ca <_fwalk_sglue+0x22>
 80047be:	6824      	ldr	r4, [r4, #0]
 80047c0:	2c00      	cmp	r4, #0
 80047c2:	d1f7      	bne.n	80047b4 <_fwalk_sglue+0xc>
 80047c4:	4630      	mov	r0, r6
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	89ab      	ldrh	r3, [r5, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d907      	bls.n	80047e0 <_fwalk_sglue+0x38>
 80047d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047d4:	3301      	adds	r3, #1
 80047d6:	d003      	beq.n	80047e0 <_fwalk_sglue+0x38>
 80047d8:	4629      	mov	r1, r5
 80047da:	4638      	mov	r0, r7
 80047dc:	47c0      	blx	r8
 80047de:	4306      	orrs	r6, r0
 80047e0:	3568      	adds	r5, #104	@ 0x68
 80047e2:	e7e9      	b.n	80047b8 <_fwalk_sglue+0x10>

080047e4 <__sread>:
 80047e4:	b510      	push	{r4, lr}
 80047e6:	460c      	mov	r4, r1
 80047e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ec:	f000 f86c 	bl	80048c8 <_read_r>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	bfab      	itete	ge
 80047f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047f6:	89a3      	ldrhlt	r3, [r4, #12]
 80047f8:	181b      	addge	r3, r3, r0
 80047fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047fe:	bfac      	ite	ge
 8004800:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004802:	81a3      	strhlt	r3, [r4, #12]
 8004804:	bd10      	pop	{r4, pc}

08004806 <__swrite>:
 8004806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800480a:	461f      	mov	r7, r3
 800480c:	898b      	ldrh	r3, [r1, #12]
 800480e:	05db      	lsls	r3, r3, #23
 8004810:	4605      	mov	r5, r0
 8004812:	460c      	mov	r4, r1
 8004814:	4616      	mov	r6, r2
 8004816:	d505      	bpl.n	8004824 <__swrite+0x1e>
 8004818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481c:	2302      	movs	r3, #2
 800481e:	2200      	movs	r2, #0
 8004820:	f000 f840 	bl	80048a4 <_lseek_r>
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800482a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800482e:	81a3      	strh	r3, [r4, #12]
 8004830:	4632      	mov	r2, r6
 8004832:	463b      	mov	r3, r7
 8004834:	4628      	mov	r0, r5
 8004836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800483a:	f000 b857 	b.w	80048ec <_write_r>

0800483e <__sseek>:
 800483e:	b510      	push	{r4, lr}
 8004840:	460c      	mov	r4, r1
 8004842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004846:	f000 f82d 	bl	80048a4 <_lseek_r>
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	bf15      	itete	ne
 8004850:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004852:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004856:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800485a:	81a3      	strheq	r3, [r4, #12]
 800485c:	bf18      	it	ne
 800485e:	81a3      	strhne	r3, [r4, #12]
 8004860:	bd10      	pop	{r4, pc}

08004862 <__sclose>:
 8004862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004866:	f000 b80d 	b.w	8004884 <_close_r>

0800486a <memset>:
 800486a:	4402      	add	r2, r0
 800486c:	4603      	mov	r3, r0
 800486e:	4293      	cmp	r3, r2
 8004870:	d100      	bne.n	8004874 <memset+0xa>
 8004872:	4770      	bx	lr
 8004874:	f803 1b01 	strb.w	r1, [r3], #1
 8004878:	e7f9      	b.n	800486e <memset+0x4>
	...

0800487c <_localeconv_r>:
 800487c:	4800      	ldr	r0, [pc, #0]	@ (8004880 <_localeconv_r+0x4>)
 800487e:	4770      	bx	lr
 8004880:	2000015c 	.word	0x2000015c

08004884 <_close_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4d06      	ldr	r5, [pc, #24]	@ (80048a0 <_close_r+0x1c>)
 8004888:	2300      	movs	r3, #0
 800488a:	4604      	mov	r4, r0
 800488c:	4608      	mov	r0, r1
 800488e:	602b      	str	r3, [r5, #0]
 8004890:	f7fc fd10 	bl	80012b4 <_close>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d102      	bne.n	800489e <_close_r+0x1a>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	b103      	cbz	r3, 800489e <_close_r+0x1a>
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	2000038c 	.word	0x2000038c

080048a4 <_lseek_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d07      	ldr	r5, [pc, #28]	@ (80048c4 <_lseek_r+0x20>)
 80048a8:	4604      	mov	r4, r0
 80048aa:	4608      	mov	r0, r1
 80048ac:	4611      	mov	r1, r2
 80048ae:	2200      	movs	r2, #0
 80048b0:	602a      	str	r2, [r5, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f7fc fd25 	bl	8001302 <_lseek>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_lseek_r+0x1e>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_lseek_r+0x1e>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	2000038c 	.word	0x2000038c

080048c8 <_read_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d07      	ldr	r5, [pc, #28]	@ (80048e8 <_read_r+0x20>)
 80048cc:	4604      	mov	r4, r0
 80048ce:	4608      	mov	r0, r1
 80048d0:	4611      	mov	r1, r2
 80048d2:	2200      	movs	r2, #0
 80048d4:	602a      	str	r2, [r5, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f7fc fcb3 	bl	8001242 <_read>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_read_r+0x1e>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_read_r+0x1e>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	2000038c 	.word	0x2000038c

080048ec <_write_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d07      	ldr	r5, [pc, #28]	@ (800490c <_write_r+0x20>)
 80048f0:	4604      	mov	r4, r0
 80048f2:	4608      	mov	r0, r1
 80048f4:	4611      	mov	r1, r2
 80048f6:	2200      	movs	r2, #0
 80048f8:	602a      	str	r2, [r5, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7fc fcbe 	bl	800127c <_write>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_write_r+0x1e>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_write_r+0x1e>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	2000038c 	.word	0x2000038c

08004910 <__errno>:
 8004910:	4b01      	ldr	r3, [pc, #4]	@ (8004918 <__errno+0x8>)
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	2000001c 	.word	0x2000001c

0800491c <__libc_init_array>:
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	4d0d      	ldr	r5, [pc, #52]	@ (8004954 <__libc_init_array+0x38>)
 8004920:	4c0d      	ldr	r4, [pc, #52]	@ (8004958 <__libc_init_array+0x3c>)
 8004922:	1b64      	subs	r4, r4, r5
 8004924:	10a4      	asrs	r4, r4, #2
 8004926:	2600      	movs	r6, #0
 8004928:	42a6      	cmp	r6, r4
 800492a:	d109      	bne.n	8004940 <__libc_init_array+0x24>
 800492c:	4d0b      	ldr	r5, [pc, #44]	@ (800495c <__libc_init_array+0x40>)
 800492e:	4c0c      	ldr	r4, [pc, #48]	@ (8004960 <__libc_init_array+0x44>)
 8004930:	f001 febe 	bl	80066b0 <_init>
 8004934:	1b64      	subs	r4, r4, r5
 8004936:	10a4      	asrs	r4, r4, #2
 8004938:	2600      	movs	r6, #0
 800493a:	42a6      	cmp	r6, r4
 800493c:	d105      	bne.n	800494a <__libc_init_array+0x2e>
 800493e:	bd70      	pop	{r4, r5, r6, pc}
 8004940:	f855 3b04 	ldr.w	r3, [r5], #4
 8004944:	4798      	blx	r3
 8004946:	3601      	adds	r6, #1
 8004948:	e7ee      	b.n	8004928 <__libc_init_array+0xc>
 800494a:	f855 3b04 	ldr.w	r3, [r5], #4
 800494e:	4798      	blx	r3
 8004950:	3601      	adds	r6, #1
 8004952:	e7f2      	b.n	800493a <__libc_init_array+0x1e>
 8004954:	08006a80 	.word	0x08006a80
 8004958:	08006a80 	.word	0x08006a80
 800495c:	08006a80 	.word	0x08006a80
 8004960:	08006a84 	.word	0x08006a84

08004964 <__retarget_lock_init_recursive>:
 8004964:	4770      	bx	lr

08004966 <__retarget_lock_acquire_recursive>:
 8004966:	4770      	bx	lr

08004968 <__retarget_lock_release_recursive>:
 8004968:	4770      	bx	lr

0800496a <quorem>:
 800496a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496e:	6903      	ldr	r3, [r0, #16]
 8004970:	690c      	ldr	r4, [r1, #16]
 8004972:	42a3      	cmp	r3, r4
 8004974:	4607      	mov	r7, r0
 8004976:	db7e      	blt.n	8004a76 <quorem+0x10c>
 8004978:	3c01      	subs	r4, #1
 800497a:	f101 0814 	add.w	r8, r1, #20
 800497e:	00a3      	lsls	r3, r4, #2
 8004980:	f100 0514 	add.w	r5, r0, #20
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004994:	3301      	adds	r3, #1
 8004996:	429a      	cmp	r2, r3
 8004998:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800499c:	fbb2 f6f3 	udiv	r6, r2, r3
 80049a0:	d32e      	bcc.n	8004a00 <quorem+0x96>
 80049a2:	f04f 0a00 	mov.w	sl, #0
 80049a6:	46c4      	mov	ip, r8
 80049a8:	46ae      	mov	lr, r5
 80049aa:	46d3      	mov	fp, sl
 80049ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80049b0:	b298      	uxth	r0, r3
 80049b2:	fb06 a000 	mla	r0, r6, r0, sl
 80049b6:	0c02      	lsrs	r2, r0, #16
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	fb06 2303 	mla	r3, r6, r3, r2
 80049be:	f8de 2000 	ldr.w	r2, [lr]
 80049c2:	b280      	uxth	r0, r0
 80049c4:	b292      	uxth	r2, r2
 80049c6:	1a12      	subs	r2, r2, r0
 80049c8:	445a      	add	r2, fp
 80049ca:	f8de 0000 	ldr.w	r0, [lr]
 80049ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80049d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80049dc:	b292      	uxth	r2, r2
 80049de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80049e2:	45e1      	cmp	r9, ip
 80049e4:	f84e 2b04 	str.w	r2, [lr], #4
 80049e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80049ec:	d2de      	bcs.n	80049ac <quorem+0x42>
 80049ee:	9b00      	ldr	r3, [sp, #0]
 80049f0:	58eb      	ldr	r3, [r5, r3]
 80049f2:	b92b      	cbnz	r3, 8004a00 <quorem+0x96>
 80049f4:	9b01      	ldr	r3, [sp, #4]
 80049f6:	3b04      	subs	r3, #4
 80049f8:	429d      	cmp	r5, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	d32f      	bcc.n	8004a5e <quorem+0xf4>
 80049fe:	613c      	str	r4, [r7, #16]
 8004a00:	4638      	mov	r0, r7
 8004a02:	f001 f97b 	bl	8005cfc <__mcmp>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	db25      	blt.n	8004a56 <quorem+0xec>
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a12:	f8d1 c000 	ldr.w	ip, [r1]
 8004a16:	fa1f fe82 	uxth.w	lr, r2
 8004a1a:	fa1f f38c 	uxth.w	r3, ip
 8004a1e:	eba3 030e 	sub.w	r3, r3, lr
 8004a22:	4403      	add	r3, r0
 8004a24:	0c12      	lsrs	r2, r2, #16
 8004a26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a34:	45c1      	cmp	r9, r8
 8004a36:	f841 3b04 	str.w	r3, [r1], #4
 8004a3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a3e:	d2e6      	bcs.n	8004a0e <quorem+0xa4>
 8004a40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a48:	b922      	cbnz	r2, 8004a54 <quorem+0xea>
 8004a4a:	3b04      	subs	r3, #4
 8004a4c:	429d      	cmp	r5, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	d30b      	bcc.n	8004a6a <quorem+0x100>
 8004a52:	613c      	str	r4, [r7, #16]
 8004a54:	3601      	adds	r6, #1
 8004a56:	4630      	mov	r0, r6
 8004a58:	b003      	add	sp, #12
 8004a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	3b04      	subs	r3, #4
 8004a62:	2a00      	cmp	r2, #0
 8004a64:	d1cb      	bne.n	80049fe <quorem+0x94>
 8004a66:	3c01      	subs	r4, #1
 8004a68:	e7c6      	b.n	80049f8 <quorem+0x8e>
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	3b04      	subs	r3, #4
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	d1ef      	bne.n	8004a52 <quorem+0xe8>
 8004a72:	3c01      	subs	r4, #1
 8004a74:	e7ea      	b.n	8004a4c <quorem+0xe2>
 8004a76:	2000      	movs	r0, #0
 8004a78:	e7ee      	b.n	8004a58 <quorem+0xee>
 8004a7a:	0000      	movs	r0, r0
 8004a7c:	0000      	movs	r0, r0
	...

08004a80 <_dtoa_r>:
 8004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	69c7      	ldr	r7, [r0, #28]
 8004a86:	b099      	sub	sp, #100	@ 0x64
 8004a88:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004a8c:	ec55 4b10 	vmov	r4, r5, d0
 8004a90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004a92:	9109      	str	r1, [sp, #36]	@ 0x24
 8004a94:	4683      	mov	fp, r0
 8004a96:	920e      	str	r2, [sp, #56]	@ 0x38
 8004a98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004a9a:	b97f      	cbnz	r7, 8004abc <_dtoa_r+0x3c>
 8004a9c:	2010      	movs	r0, #16
 8004a9e:	f000 fdfd 	bl	800569c <malloc>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	f8cb 001c 	str.w	r0, [fp, #28]
 8004aa8:	b920      	cbnz	r0, 8004ab4 <_dtoa_r+0x34>
 8004aaa:	4ba7      	ldr	r3, [pc, #668]	@ (8004d48 <_dtoa_r+0x2c8>)
 8004aac:	21ef      	movs	r1, #239	@ 0xef
 8004aae:	48a7      	ldr	r0, [pc, #668]	@ (8004d4c <_dtoa_r+0x2cc>)
 8004ab0:	f001 faf6 	bl	80060a0 <__assert_func>
 8004ab4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004ab8:	6007      	str	r7, [r0, #0]
 8004aba:	60c7      	str	r7, [r0, #12]
 8004abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	b159      	cbz	r1, 8004adc <_dtoa_r+0x5c>
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	604a      	str	r2, [r1, #4]
 8004ac8:	2301      	movs	r3, #1
 8004aca:	4093      	lsls	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
 8004ace:	4658      	mov	r0, fp
 8004ad0:	f000 feda 	bl	8005888 <_Bfree>
 8004ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	1e2b      	subs	r3, r5, #0
 8004ade:	bfb9      	ittee	lt
 8004ae0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004ae4:	9303      	strlt	r3, [sp, #12]
 8004ae6:	2300      	movge	r3, #0
 8004ae8:	6033      	strge	r3, [r6, #0]
 8004aea:	9f03      	ldr	r7, [sp, #12]
 8004aec:	4b98      	ldr	r3, [pc, #608]	@ (8004d50 <_dtoa_r+0x2d0>)
 8004aee:	bfbc      	itt	lt
 8004af0:	2201      	movlt	r2, #1
 8004af2:	6032      	strlt	r2, [r6, #0]
 8004af4:	43bb      	bics	r3, r7
 8004af6:	d112      	bne.n	8004b1e <_dtoa_r+0x9e>
 8004af8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004afa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b04:	4323      	orrs	r3, r4
 8004b06:	f000 854d 	beq.w	80055a4 <_dtoa_r+0xb24>
 8004b0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004d64 <_dtoa_r+0x2e4>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 854f 	beq.w	80055b4 <_dtoa_r+0xb34>
 8004b16:	f10a 0303 	add.w	r3, sl, #3
 8004b1a:	f000 bd49 	b.w	80055b0 <_dtoa_r+0xb30>
 8004b1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b22:	2200      	movs	r2, #0
 8004b24:	ec51 0b17 	vmov	r0, r1, d7
 8004b28:	2300      	movs	r3, #0
 8004b2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004b2e:	f7fb ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b32:	4680      	mov	r8, r0
 8004b34:	b158      	cbz	r0, 8004b4e <_dtoa_r+0xce>
 8004b36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004b38:	2301      	movs	r3, #1
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b3e:	b113      	cbz	r3, 8004b46 <_dtoa_r+0xc6>
 8004b40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004b42:	4b84      	ldr	r3, [pc, #528]	@ (8004d54 <_dtoa_r+0x2d4>)
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004d68 <_dtoa_r+0x2e8>
 8004b4a:	f000 bd33 	b.w	80055b4 <_dtoa_r+0xb34>
 8004b4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004b52:	aa16      	add	r2, sp, #88	@ 0x58
 8004b54:	a917      	add	r1, sp, #92	@ 0x5c
 8004b56:	4658      	mov	r0, fp
 8004b58:	f001 f980 	bl	8005e5c <__d2b>
 8004b5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004b60:	4681      	mov	r9, r0
 8004b62:	2e00      	cmp	r6, #0
 8004b64:	d077      	beq.n	8004c56 <_dtoa_r+0x1d6>
 8004b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004b78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004b7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004b80:	4619      	mov	r1, r3
 8004b82:	2200      	movs	r2, #0
 8004b84:	4b74      	ldr	r3, [pc, #464]	@ (8004d58 <_dtoa_r+0x2d8>)
 8004b86:	f7fb fb7f 	bl	8000288 <__aeabi_dsub>
 8004b8a:	a369      	add	r3, pc, #420	@ (adr r3, 8004d30 <_dtoa_r+0x2b0>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fd32 	bl	80005f8 <__aeabi_dmul>
 8004b94:	a368      	add	r3, pc, #416	@ (adr r3, 8004d38 <_dtoa_r+0x2b8>)
 8004b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9a:	f7fb fb77 	bl	800028c <__adddf3>
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	460d      	mov	r5, r1
 8004ba4:	f7fb fcbe 	bl	8000524 <__aeabi_i2d>
 8004ba8:	a365      	add	r3, pc, #404	@ (adr r3, 8004d40 <_dtoa_r+0x2c0>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	f7fb fd23 	bl	80005f8 <__aeabi_dmul>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	4629      	mov	r1, r5
 8004bba:	f7fb fb67 	bl	800028c <__adddf3>
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	460d      	mov	r5, r1
 8004bc2:	f7fb ffc9 	bl	8000b58 <__aeabi_d2iz>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	4607      	mov	r7, r0
 8004bca:	2300      	movs	r3, #0
 8004bcc:	4620      	mov	r0, r4
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f7fb ff84 	bl	8000adc <__aeabi_dcmplt>
 8004bd4:	b140      	cbz	r0, 8004be8 <_dtoa_r+0x168>
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f7fb fca4 	bl	8000524 <__aeabi_i2d>
 8004bdc:	4622      	mov	r2, r4
 8004bde:	462b      	mov	r3, r5
 8004be0:	f7fb ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8004be4:	b900      	cbnz	r0, 8004be8 <_dtoa_r+0x168>
 8004be6:	3f01      	subs	r7, #1
 8004be8:	2f16      	cmp	r7, #22
 8004bea:	d851      	bhi.n	8004c90 <_dtoa_r+0x210>
 8004bec:	4b5b      	ldr	r3, [pc, #364]	@ (8004d5c <_dtoa_r+0x2dc>)
 8004bee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004bfa:	f7fb ff6f 	bl	8000adc <__aeabi_dcmplt>
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d048      	beq.n	8004c94 <_dtoa_r+0x214>
 8004c02:	3f01      	subs	r7, #1
 8004c04:	2300      	movs	r3, #0
 8004c06:	9312      	str	r3, [sp, #72]	@ 0x48
 8004c08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004c0a:	1b9b      	subs	r3, r3, r6
 8004c0c:	1e5a      	subs	r2, r3, #1
 8004c0e:	bf44      	itt	mi
 8004c10:	f1c3 0801 	rsbmi	r8, r3, #1
 8004c14:	2300      	movmi	r3, #0
 8004c16:	9208      	str	r2, [sp, #32]
 8004c18:	bf54      	ite	pl
 8004c1a:	f04f 0800 	movpl.w	r8, #0
 8004c1e:	9308      	strmi	r3, [sp, #32]
 8004c20:	2f00      	cmp	r7, #0
 8004c22:	db39      	blt.n	8004c98 <_dtoa_r+0x218>
 8004c24:	9b08      	ldr	r3, [sp, #32]
 8004c26:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004c28:	443b      	add	r3, r7
 8004c2a:	9308      	str	r3, [sp, #32]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	d864      	bhi.n	8004d00 <_dtoa_r+0x280>
 8004c36:	2b05      	cmp	r3, #5
 8004c38:	bfc4      	itt	gt
 8004c3a:	3b04      	subgt	r3, #4
 8004c3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c40:	f1a3 0302 	sub.w	r3, r3, #2
 8004c44:	bfcc      	ite	gt
 8004c46:	2400      	movgt	r4, #0
 8004c48:	2401      	movle	r4, #1
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d863      	bhi.n	8004d16 <_dtoa_r+0x296>
 8004c4e:	e8df f003 	tbb	[pc, r3]
 8004c52:	372a      	.short	0x372a
 8004c54:	5535      	.short	0x5535
 8004c56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004c5a:	441e      	add	r6, r3
 8004c5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	bfc1      	itttt	gt
 8004c64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004c68:	409f      	lslgt	r7, r3
 8004c6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004c6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004c72:	bfd6      	itet	le
 8004c74:	f1c3 0320 	rsble	r3, r3, #32
 8004c78:	ea47 0003 	orrgt.w	r0, r7, r3
 8004c7c:	fa04 f003 	lslle.w	r0, r4, r3
 8004c80:	f7fb fc40 	bl	8000504 <__aeabi_ui2d>
 8004c84:	2201      	movs	r2, #1
 8004c86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004c8a:	3e01      	subs	r6, #1
 8004c8c:	9214      	str	r2, [sp, #80]	@ 0x50
 8004c8e:	e777      	b.n	8004b80 <_dtoa_r+0x100>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e7b8      	b.n	8004c06 <_dtoa_r+0x186>
 8004c94:	9012      	str	r0, [sp, #72]	@ 0x48
 8004c96:	e7b7      	b.n	8004c08 <_dtoa_r+0x188>
 8004c98:	427b      	negs	r3, r7
 8004c9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	eba8 0807 	sub.w	r8, r8, r7
 8004ca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004ca4:	e7c4      	b.n	8004c30 <_dtoa_r+0x1b0>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dc35      	bgt.n	8004d1c <_dtoa_r+0x29c>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	9307      	str	r3, [sp, #28]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004cba:	e00b      	b.n	8004cd4 <_dtoa_r+0x254>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e7f3      	b.n	8004ca8 <_dtoa_r+0x228>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	9307      	str	r3, [sp, #28]
 8004cd0:	bfb8      	it	lt
 8004cd2:	2301      	movlt	r3, #1
 8004cd4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004cd8:	2100      	movs	r1, #0
 8004cda:	2204      	movs	r2, #4
 8004cdc:	f102 0514 	add.w	r5, r2, #20
 8004ce0:	429d      	cmp	r5, r3
 8004ce2:	d91f      	bls.n	8004d24 <_dtoa_r+0x2a4>
 8004ce4:	6041      	str	r1, [r0, #4]
 8004ce6:	4658      	mov	r0, fp
 8004ce8:	f000 fd8e 	bl	8005808 <_Balloc>
 8004cec:	4682      	mov	sl, r0
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d13c      	bne.n	8004d6c <_dtoa_r+0x2ec>
 8004cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d60 <_dtoa_r+0x2e0>)
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	f240 11af 	movw	r1, #431	@ 0x1af
 8004cfa:	e6d8      	b.n	8004aae <_dtoa_r+0x2e>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e7e0      	b.n	8004cc2 <_dtoa_r+0x242>
 8004d00:	2401      	movs	r4, #1
 8004d02:	2300      	movs	r3, #0
 8004d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d06:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004d08:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	9307      	str	r3, [sp, #28]
 8004d10:	2200      	movs	r2, #0
 8004d12:	2312      	movs	r3, #18
 8004d14:	e7d0      	b.n	8004cb8 <_dtoa_r+0x238>
 8004d16:	2301      	movs	r3, #1
 8004d18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d1a:	e7f5      	b.n	8004d08 <_dtoa_r+0x288>
 8004d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	9307      	str	r3, [sp, #28]
 8004d22:	e7d7      	b.n	8004cd4 <_dtoa_r+0x254>
 8004d24:	3101      	adds	r1, #1
 8004d26:	0052      	lsls	r2, r2, #1
 8004d28:	e7d8      	b.n	8004cdc <_dtoa_r+0x25c>
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w
 8004d30:	636f4361 	.word	0x636f4361
 8004d34:	3fd287a7 	.word	0x3fd287a7
 8004d38:	8b60c8b3 	.word	0x8b60c8b3
 8004d3c:	3fc68a28 	.word	0x3fc68a28
 8004d40:	509f79fb 	.word	0x509f79fb
 8004d44:	3fd34413 	.word	0x3fd34413
 8004d48:	08006749 	.word	0x08006749
 8004d4c:	08006760 	.word	0x08006760
 8004d50:	7ff00000 	.word	0x7ff00000
 8004d54:	08006719 	.word	0x08006719
 8004d58:	3ff80000 	.word	0x3ff80000
 8004d5c:	08006858 	.word	0x08006858
 8004d60:	080067b8 	.word	0x080067b8
 8004d64:	08006745 	.word	0x08006745
 8004d68:	08006718 	.word	0x08006718
 8004d6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004d70:	6018      	str	r0, [r3, #0]
 8004d72:	9b07      	ldr	r3, [sp, #28]
 8004d74:	2b0e      	cmp	r3, #14
 8004d76:	f200 80a4 	bhi.w	8004ec2 <_dtoa_r+0x442>
 8004d7a:	2c00      	cmp	r4, #0
 8004d7c:	f000 80a1 	beq.w	8004ec2 <_dtoa_r+0x442>
 8004d80:	2f00      	cmp	r7, #0
 8004d82:	dd33      	ble.n	8004dec <_dtoa_r+0x36c>
 8004d84:	4bad      	ldr	r3, [pc, #692]	@ (800503c <_dtoa_r+0x5bc>)
 8004d86:	f007 020f 	and.w	r2, r7, #15
 8004d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d8e:	ed93 7b00 	vldr	d7, [r3]
 8004d92:	05f8      	lsls	r0, r7, #23
 8004d94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004d98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004d9c:	d516      	bpl.n	8004dcc <_dtoa_r+0x34c>
 8004d9e:	4ba8      	ldr	r3, [pc, #672]	@ (8005040 <_dtoa_r+0x5c0>)
 8004da0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004da4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004da8:	f7fb fd50 	bl	800084c <__aeabi_ddiv>
 8004dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004db0:	f004 040f 	and.w	r4, r4, #15
 8004db4:	2603      	movs	r6, #3
 8004db6:	4da2      	ldr	r5, [pc, #648]	@ (8005040 <_dtoa_r+0x5c0>)
 8004db8:	b954      	cbnz	r4, 8004dd0 <_dtoa_r+0x350>
 8004dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dc2:	f7fb fd43 	bl	800084c <__aeabi_ddiv>
 8004dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dca:	e028      	b.n	8004e1e <_dtoa_r+0x39e>
 8004dcc:	2602      	movs	r6, #2
 8004dce:	e7f2      	b.n	8004db6 <_dtoa_r+0x336>
 8004dd0:	07e1      	lsls	r1, r4, #31
 8004dd2:	d508      	bpl.n	8004de6 <_dtoa_r+0x366>
 8004dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ddc:	f7fb fc0c 	bl	80005f8 <__aeabi_dmul>
 8004de0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004de4:	3601      	adds	r6, #1
 8004de6:	1064      	asrs	r4, r4, #1
 8004de8:	3508      	adds	r5, #8
 8004dea:	e7e5      	b.n	8004db8 <_dtoa_r+0x338>
 8004dec:	f000 80d2 	beq.w	8004f94 <_dtoa_r+0x514>
 8004df0:	427c      	negs	r4, r7
 8004df2:	4b92      	ldr	r3, [pc, #584]	@ (800503c <_dtoa_r+0x5bc>)
 8004df4:	4d92      	ldr	r5, [pc, #584]	@ (8005040 <_dtoa_r+0x5c0>)
 8004df6:	f004 020f 	and.w	r2, r4, #15
 8004dfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e06:	f7fb fbf7 	bl	80005f8 <__aeabi_dmul>
 8004e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e0e:	1124      	asrs	r4, r4, #4
 8004e10:	2300      	movs	r3, #0
 8004e12:	2602      	movs	r6, #2
 8004e14:	2c00      	cmp	r4, #0
 8004e16:	f040 80b2 	bne.w	8004f7e <_dtoa_r+0x4fe>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1d3      	bne.n	8004dc6 <_dtoa_r+0x346>
 8004e1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 80b7 	beq.w	8004f98 <_dtoa_r+0x518>
 8004e2a:	4b86      	ldr	r3, [pc, #536]	@ (8005044 <_dtoa_r+0x5c4>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4620      	mov	r0, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7fb fe53 	bl	8000adc <__aeabi_dcmplt>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f000 80ae 	beq.w	8004f98 <_dtoa_r+0x518>
 8004e3c:	9b07      	ldr	r3, [sp, #28]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80aa 	beq.w	8004f98 <_dtoa_r+0x518>
 8004e44:	9b00      	ldr	r3, [sp, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	dd37      	ble.n	8004eba <_dtoa_r+0x43a>
 8004e4a:	1e7b      	subs	r3, r7, #1
 8004e4c:	9304      	str	r3, [sp, #16]
 8004e4e:	4620      	mov	r0, r4
 8004e50:	4b7d      	ldr	r3, [pc, #500]	@ (8005048 <_dtoa_r+0x5c8>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	4629      	mov	r1, r5
 8004e56:	f7fb fbcf 	bl	80005f8 <__aeabi_dmul>
 8004e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e5e:	9c00      	ldr	r4, [sp, #0]
 8004e60:	3601      	adds	r6, #1
 8004e62:	4630      	mov	r0, r6
 8004e64:	f7fb fb5e 	bl	8000524 <__aeabi_i2d>
 8004e68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e6c:	f7fb fbc4 	bl	80005f8 <__aeabi_dmul>
 8004e70:	4b76      	ldr	r3, [pc, #472]	@ (800504c <_dtoa_r+0x5cc>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	f7fb fa0a 	bl	800028c <__adddf3>
 8004e78:	4605      	mov	r5, r0
 8004e7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	f040 808d 	bne.w	8004f9e <_dtoa_r+0x51e>
 8004e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e88:	4b71      	ldr	r3, [pc, #452]	@ (8005050 <_dtoa_r+0x5d0>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f7fb f9fc 	bl	8000288 <__aeabi_dsub>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e98:	462a      	mov	r2, r5
 8004e9a:	4633      	mov	r3, r6
 8004e9c:	f7fb fe3c 	bl	8000b18 <__aeabi_dcmpgt>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f040 828b 	bne.w	80053bc <_dtoa_r+0x93c>
 8004ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eaa:	462a      	mov	r2, r5
 8004eac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004eb0:	f7fb fe14 	bl	8000adc <__aeabi_dcmplt>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	f040 8128 	bne.w	800510a <_dtoa_r+0x68a>
 8004eba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004ebe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004ec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f2c0 815a 	blt.w	800517e <_dtoa_r+0x6fe>
 8004eca:	2f0e      	cmp	r7, #14
 8004ecc:	f300 8157 	bgt.w	800517e <_dtoa_r+0x6fe>
 8004ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800503c <_dtoa_r+0x5bc>)
 8004ed2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ed6:	ed93 7b00 	vldr	d7, [r3]
 8004eda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	ed8d 7b00 	vstr	d7, [sp]
 8004ee2:	da03      	bge.n	8004eec <_dtoa_r+0x46c>
 8004ee4:	9b07      	ldr	r3, [sp, #28]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f340 8101 	ble.w	80050ee <_dtoa_r+0x66e>
 8004eec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ef0:	4656      	mov	r6, sl
 8004ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	f7fb fca7 	bl	800084c <__aeabi_ddiv>
 8004efe:	f7fb fe2b 	bl	8000b58 <__aeabi_d2iz>
 8004f02:	4680      	mov	r8, r0
 8004f04:	f7fb fb0e 	bl	8000524 <__aeabi_i2d>
 8004f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f0c:	f7fb fb74 	bl	80005f8 <__aeabi_dmul>
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4620      	mov	r0, r4
 8004f16:	4629      	mov	r1, r5
 8004f18:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004f1c:	f7fb f9b4 	bl	8000288 <__aeabi_dsub>
 8004f20:	f806 4b01 	strb.w	r4, [r6], #1
 8004f24:	9d07      	ldr	r5, [sp, #28]
 8004f26:	eba6 040a 	sub.w	r4, r6, sl
 8004f2a:	42a5      	cmp	r5, r4
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	f040 8117 	bne.w	8005162 <_dtoa_r+0x6e2>
 8004f34:	f7fb f9aa 	bl	800028c <__adddf3>
 8004f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	460d      	mov	r5, r1
 8004f40:	f7fb fdea 	bl	8000b18 <__aeabi_dcmpgt>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	f040 80f9 	bne.w	800513c <_dtoa_r+0x6bc>
 8004f4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f4e:	4620      	mov	r0, r4
 8004f50:	4629      	mov	r1, r5
 8004f52:	f7fb fdb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f56:	b118      	cbz	r0, 8004f60 <_dtoa_r+0x4e0>
 8004f58:	f018 0f01 	tst.w	r8, #1
 8004f5c:	f040 80ee 	bne.w	800513c <_dtoa_r+0x6bc>
 8004f60:	4649      	mov	r1, r9
 8004f62:	4658      	mov	r0, fp
 8004f64:	f000 fc90 	bl	8005888 <_Bfree>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	7033      	strb	r3, [r6, #0]
 8004f6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004f6e:	3701      	adds	r7, #1
 8004f70:	601f      	str	r7, [r3, #0]
 8004f72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 831d 	beq.w	80055b4 <_dtoa_r+0xb34>
 8004f7a:	601e      	str	r6, [r3, #0]
 8004f7c:	e31a      	b.n	80055b4 <_dtoa_r+0xb34>
 8004f7e:	07e2      	lsls	r2, r4, #31
 8004f80:	d505      	bpl.n	8004f8e <_dtoa_r+0x50e>
 8004f82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f86:	f7fb fb37 	bl	80005f8 <__aeabi_dmul>
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	1064      	asrs	r4, r4, #1
 8004f90:	3508      	adds	r5, #8
 8004f92:	e73f      	b.n	8004e14 <_dtoa_r+0x394>
 8004f94:	2602      	movs	r6, #2
 8004f96:	e742      	b.n	8004e1e <_dtoa_r+0x39e>
 8004f98:	9c07      	ldr	r4, [sp, #28]
 8004f9a:	9704      	str	r7, [sp, #16]
 8004f9c:	e761      	b.n	8004e62 <_dtoa_r+0x3e2>
 8004f9e:	4b27      	ldr	r3, [pc, #156]	@ (800503c <_dtoa_r+0x5bc>)
 8004fa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004fa2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fa6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004faa:	4454      	add	r4, sl
 8004fac:	2900      	cmp	r1, #0
 8004fae:	d053      	beq.n	8005058 <_dtoa_r+0x5d8>
 8004fb0:	4928      	ldr	r1, [pc, #160]	@ (8005054 <_dtoa_r+0x5d4>)
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f7fb fc4a 	bl	800084c <__aeabi_ddiv>
 8004fb8:	4633      	mov	r3, r6
 8004fba:	462a      	mov	r2, r5
 8004fbc:	f7fb f964 	bl	8000288 <__aeabi_dsub>
 8004fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004fc4:	4656      	mov	r6, sl
 8004fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fca:	f7fb fdc5 	bl	8000b58 <__aeabi_d2iz>
 8004fce:	4605      	mov	r5, r0
 8004fd0:	f7fb faa8 	bl	8000524 <__aeabi_i2d>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fdc:	f7fb f954 	bl	8000288 <__aeabi_dsub>
 8004fe0:	3530      	adds	r5, #48	@ 0x30
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fea:	f806 5b01 	strb.w	r5, [r6], #1
 8004fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ff2:	f7fb fd73 	bl	8000adc <__aeabi_dcmplt>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d171      	bne.n	80050de <_dtoa_r+0x65e>
 8004ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ffe:	4911      	ldr	r1, [pc, #68]	@ (8005044 <_dtoa_r+0x5c4>)
 8005000:	2000      	movs	r0, #0
 8005002:	f7fb f941 	bl	8000288 <__aeabi_dsub>
 8005006:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800500a:	f7fb fd67 	bl	8000adc <__aeabi_dcmplt>
 800500e:	2800      	cmp	r0, #0
 8005010:	f040 8095 	bne.w	800513e <_dtoa_r+0x6be>
 8005014:	42a6      	cmp	r6, r4
 8005016:	f43f af50 	beq.w	8004eba <_dtoa_r+0x43a>
 800501a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800501e:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <_dtoa_r+0x5c8>)
 8005020:	2200      	movs	r2, #0
 8005022:	f7fb fae9 	bl	80005f8 <__aeabi_dmul>
 8005026:	4b08      	ldr	r3, [pc, #32]	@ (8005048 <_dtoa_r+0x5c8>)
 8005028:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800502c:	2200      	movs	r2, #0
 800502e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005032:	f7fb fae1 	bl	80005f8 <__aeabi_dmul>
 8005036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800503a:	e7c4      	b.n	8004fc6 <_dtoa_r+0x546>
 800503c:	08006858 	.word	0x08006858
 8005040:	08006830 	.word	0x08006830
 8005044:	3ff00000 	.word	0x3ff00000
 8005048:	40240000 	.word	0x40240000
 800504c:	401c0000 	.word	0x401c0000
 8005050:	40140000 	.word	0x40140000
 8005054:	3fe00000 	.word	0x3fe00000
 8005058:	4631      	mov	r1, r6
 800505a:	4628      	mov	r0, r5
 800505c:	f7fb facc 	bl	80005f8 <__aeabi_dmul>
 8005060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005064:	9415      	str	r4, [sp, #84]	@ 0x54
 8005066:	4656      	mov	r6, sl
 8005068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800506c:	f7fb fd74 	bl	8000b58 <__aeabi_d2iz>
 8005070:	4605      	mov	r5, r0
 8005072:	f7fb fa57 	bl	8000524 <__aeabi_i2d>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800507e:	f7fb f903 	bl	8000288 <__aeabi_dsub>
 8005082:	3530      	adds	r5, #48	@ 0x30
 8005084:	f806 5b01 	strb.w	r5, [r6], #1
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	42a6      	cmp	r6, r4
 800508e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	d124      	bne.n	80050e2 <_dtoa_r+0x662>
 8005098:	4bac      	ldr	r3, [pc, #688]	@ (800534c <_dtoa_r+0x8cc>)
 800509a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800509e:	f7fb f8f5 	bl	800028c <__adddf3>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050aa:	f7fb fd35 	bl	8000b18 <__aeabi_dcmpgt>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d145      	bne.n	800513e <_dtoa_r+0x6be>
 80050b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80050b6:	49a5      	ldr	r1, [pc, #660]	@ (800534c <_dtoa_r+0x8cc>)
 80050b8:	2000      	movs	r0, #0
 80050ba:	f7fb f8e5 	bl	8000288 <__aeabi_dsub>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c6:	f7fb fd09 	bl	8000adc <__aeabi_dcmplt>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	f43f aef5 	beq.w	8004eba <_dtoa_r+0x43a>
 80050d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80050d2:	1e73      	subs	r3, r6, #1
 80050d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80050d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80050da:	2b30      	cmp	r3, #48	@ 0x30
 80050dc:	d0f8      	beq.n	80050d0 <_dtoa_r+0x650>
 80050de:	9f04      	ldr	r7, [sp, #16]
 80050e0:	e73e      	b.n	8004f60 <_dtoa_r+0x4e0>
 80050e2:	4b9b      	ldr	r3, [pc, #620]	@ (8005350 <_dtoa_r+0x8d0>)
 80050e4:	f7fb fa88 	bl	80005f8 <__aeabi_dmul>
 80050e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ec:	e7bc      	b.n	8005068 <_dtoa_r+0x5e8>
 80050ee:	d10c      	bne.n	800510a <_dtoa_r+0x68a>
 80050f0:	4b98      	ldr	r3, [pc, #608]	@ (8005354 <_dtoa_r+0x8d4>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050f8:	f7fb fa7e 	bl	80005f8 <__aeabi_dmul>
 80050fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005100:	f7fb fd00 	bl	8000b04 <__aeabi_dcmpge>
 8005104:	2800      	cmp	r0, #0
 8005106:	f000 8157 	beq.w	80053b8 <_dtoa_r+0x938>
 800510a:	2400      	movs	r4, #0
 800510c:	4625      	mov	r5, r4
 800510e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005110:	43db      	mvns	r3, r3
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	4656      	mov	r6, sl
 8005116:	2700      	movs	r7, #0
 8005118:	4621      	mov	r1, r4
 800511a:	4658      	mov	r0, fp
 800511c:	f000 fbb4 	bl	8005888 <_Bfree>
 8005120:	2d00      	cmp	r5, #0
 8005122:	d0dc      	beq.n	80050de <_dtoa_r+0x65e>
 8005124:	b12f      	cbz	r7, 8005132 <_dtoa_r+0x6b2>
 8005126:	42af      	cmp	r7, r5
 8005128:	d003      	beq.n	8005132 <_dtoa_r+0x6b2>
 800512a:	4639      	mov	r1, r7
 800512c:	4658      	mov	r0, fp
 800512e:	f000 fbab 	bl	8005888 <_Bfree>
 8005132:	4629      	mov	r1, r5
 8005134:	4658      	mov	r0, fp
 8005136:	f000 fba7 	bl	8005888 <_Bfree>
 800513a:	e7d0      	b.n	80050de <_dtoa_r+0x65e>
 800513c:	9704      	str	r7, [sp, #16]
 800513e:	4633      	mov	r3, r6
 8005140:	461e      	mov	r6, r3
 8005142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005146:	2a39      	cmp	r2, #57	@ 0x39
 8005148:	d107      	bne.n	800515a <_dtoa_r+0x6da>
 800514a:	459a      	cmp	sl, r3
 800514c:	d1f8      	bne.n	8005140 <_dtoa_r+0x6c0>
 800514e:	9a04      	ldr	r2, [sp, #16]
 8005150:	3201      	adds	r2, #1
 8005152:	9204      	str	r2, [sp, #16]
 8005154:	2230      	movs	r2, #48	@ 0x30
 8005156:	f88a 2000 	strb.w	r2, [sl]
 800515a:	781a      	ldrb	r2, [r3, #0]
 800515c:	3201      	adds	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e7bd      	b.n	80050de <_dtoa_r+0x65e>
 8005162:	4b7b      	ldr	r3, [pc, #492]	@ (8005350 <_dtoa_r+0x8d0>)
 8005164:	2200      	movs	r2, #0
 8005166:	f7fb fa47 	bl	80005f8 <__aeabi_dmul>
 800516a:	2200      	movs	r2, #0
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	460d      	mov	r5, r1
 8005172:	f7fb fca9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005176:	2800      	cmp	r0, #0
 8005178:	f43f aebb 	beq.w	8004ef2 <_dtoa_r+0x472>
 800517c:	e6f0      	b.n	8004f60 <_dtoa_r+0x4e0>
 800517e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005180:	2a00      	cmp	r2, #0
 8005182:	f000 80db 	beq.w	800533c <_dtoa_r+0x8bc>
 8005186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005188:	2a01      	cmp	r2, #1
 800518a:	f300 80bf 	bgt.w	800530c <_dtoa_r+0x88c>
 800518e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005190:	2a00      	cmp	r2, #0
 8005192:	f000 80b7 	beq.w	8005304 <_dtoa_r+0x884>
 8005196:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800519a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800519c:	4646      	mov	r6, r8
 800519e:	9a08      	ldr	r2, [sp, #32]
 80051a0:	2101      	movs	r1, #1
 80051a2:	441a      	add	r2, r3
 80051a4:	4658      	mov	r0, fp
 80051a6:	4498      	add	r8, r3
 80051a8:	9208      	str	r2, [sp, #32]
 80051aa:	f000 fc21 	bl	80059f0 <__i2b>
 80051ae:	4605      	mov	r5, r0
 80051b0:	b15e      	cbz	r6, 80051ca <_dtoa_r+0x74a>
 80051b2:	9b08      	ldr	r3, [sp, #32]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	dd08      	ble.n	80051ca <_dtoa_r+0x74a>
 80051b8:	42b3      	cmp	r3, r6
 80051ba:	9a08      	ldr	r2, [sp, #32]
 80051bc:	bfa8      	it	ge
 80051be:	4633      	movge	r3, r6
 80051c0:	eba8 0803 	sub.w	r8, r8, r3
 80051c4:	1af6      	subs	r6, r6, r3
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	9308      	str	r3, [sp, #32]
 80051ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051cc:	b1f3      	cbz	r3, 800520c <_dtoa_r+0x78c>
 80051ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80b7 	beq.w	8005344 <_dtoa_r+0x8c4>
 80051d6:	b18c      	cbz	r4, 80051fc <_dtoa_r+0x77c>
 80051d8:	4629      	mov	r1, r5
 80051da:	4622      	mov	r2, r4
 80051dc:	4658      	mov	r0, fp
 80051de:	f000 fcc7 	bl	8005b70 <__pow5mult>
 80051e2:	464a      	mov	r2, r9
 80051e4:	4601      	mov	r1, r0
 80051e6:	4605      	mov	r5, r0
 80051e8:	4658      	mov	r0, fp
 80051ea:	f000 fc17 	bl	8005a1c <__multiply>
 80051ee:	4649      	mov	r1, r9
 80051f0:	9004      	str	r0, [sp, #16]
 80051f2:	4658      	mov	r0, fp
 80051f4:	f000 fb48 	bl	8005888 <_Bfree>
 80051f8:	9b04      	ldr	r3, [sp, #16]
 80051fa:	4699      	mov	r9, r3
 80051fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051fe:	1b1a      	subs	r2, r3, r4
 8005200:	d004      	beq.n	800520c <_dtoa_r+0x78c>
 8005202:	4649      	mov	r1, r9
 8005204:	4658      	mov	r0, fp
 8005206:	f000 fcb3 	bl	8005b70 <__pow5mult>
 800520a:	4681      	mov	r9, r0
 800520c:	2101      	movs	r1, #1
 800520e:	4658      	mov	r0, fp
 8005210:	f000 fbee 	bl	80059f0 <__i2b>
 8005214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005216:	4604      	mov	r4, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 81cf 	beq.w	80055bc <_dtoa_r+0xb3c>
 800521e:	461a      	mov	r2, r3
 8005220:	4601      	mov	r1, r0
 8005222:	4658      	mov	r0, fp
 8005224:	f000 fca4 	bl	8005b70 <__pow5mult>
 8005228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800522a:	2b01      	cmp	r3, #1
 800522c:	4604      	mov	r4, r0
 800522e:	f300 8095 	bgt.w	800535c <_dtoa_r+0x8dc>
 8005232:	9b02      	ldr	r3, [sp, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 8087 	bne.w	8005348 <_dtoa_r+0x8c8>
 800523a:	9b03      	ldr	r3, [sp, #12]
 800523c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 8089 	bne.w	8005358 <_dtoa_r+0x8d8>
 8005246:	9b03      	ldr	r3, [sp, #12]
 8005248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800524c:	0d1b      	lsrs	r3, r3, #20
 800524e:	051b      	lsls	r3, r3, #20
 8005250:	b12b      	cbz	r3, 800525e <_dtoa_r+0x7de>
 8005252:	9b08      	ldr	r3, [sp, #32]
 8005254:	3301      	adds	r3, #1
 8005256:	9308      	str	r3, [sp, #32]
 8005258:	f108 0801 	add.w	r8, r8, #1
 800525c:	2301      	movs	r3, #1
 800525e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 81b0 	beq.w	80055c8 <_dtoa_r+0xb48>
 8005268:	6923      	ldr	r3, [r4, #16]
 800526a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800526e:	6918      	ldr	r0, [r3, #16]
 8005270:	f000 fb72 	bl	8005958 <__hi0bits>
 8005274:	f1c0 0020 	rsb	r0, r0, #32
 8005278:	9b08      	ldr	r3, [sp, #32]
 800527a:	4418      	add	r0, r3
 800527c:	f010 001f 	ands.w	r0, r0, #31
 8005280:	d077      	beq.n	8005372 <_dtoa_r+0x8f2>
 8005282:	f1c0 0320 	rsb	r3, r0, #32
 8005286:	2b04      	cmp	r3, #4
 8005288:	dd6b      	ble.n	8005362 <_dtoa_r+0x8e2>
 800528a:	9b08      	ldr	r3, [sp, #32]
 800528c:	f1c0 001c 	rsb	r0, r0, #28
 8005290:	4403      	add	r3, r0
 8005292:	4480      	add	r8, r0
 8005294:	4406      	add	r6, r0
 8005296:	9308      	str	r3, [sp, #32]
 8005298:	f1b8 0f00 	cmp.w	r8, #0
 800529c:	dd05      	ble.n	80052aa <_dtoa_r+0x82a>
 800529e:	4649      	mov	r1, r9
 80052a0:	4642      	mov	r2, r8
 80052a2:	4658      	mov	r0, fp
 80052a4:	f000 fcbe 	bl	8005c24 <__lshift>
 80052a8:	4681      	mov	r9, r0
 80052aa:	9b08      	ldr	r3, [sp, #32]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	dd05      	ble.n	80052bc <_dtoa_r+0x83c>
 80052b0:	4621      	mov	r1, r4
 80052b2:	461a      	mov	r2, r3
 80052b4:	4658      	mov	r0, fp
 80052b6:	f000 fcb5 	bl	8005c24 <__lshift>
 80052ba:	4604      	mov	r4, r0
 80052bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d059      	beq.n	8005376 <_dtoa_r+0x8f6>
 80052c2:	4621      	mov	r1, r4
 80052c4:	4648      	mov	r0, r9
 80052c6:	f000 fd19 	bl	8005cfc <__mcmp>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	da53      	bge.n	8005376 <_dtoa_r+0x8f6>
 80052ce:	1e7b      	subs	r3, r7, #1
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	4649      	mov	r1, r9
 80052d4:	2300      	movs	r3, #0
 80052d6:	220a      	movs	r2, #10
 80052d8:	4658      	mov	r0, fp
 80052da:	f000 faf7 	bl	80058cc <__multadd>
 80052de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052e0:	4681      	mov	r9, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8172 	beq.w	80055cc <_dtoa_r+0xb4c>
 80052e8:	2300      	movs	r3, #0
 80052ea:	4629      	mov	r1, r5
 80052ec:	220a      	movs	r2, #10
 80052ee:	4658      	mov	r0, fp
 80052f0:	f000 faec 	bl	80058cc <__multadd>
 80052f4:	9b00      	ldr	r3, [sp, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	4605      	mov	r5, r0
 80052fa:	dc67      	bgt.n	80053cc <_dtoa_r+0x94c>
 80052fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052fe:	2b02      	cmp	r3, #2
 8005300:	dc41      	bgt.n	8005386 <_dtoa_r+0x906>
 8005302:	e063      	b.n	80053cc <_dtoa_r+0x94c>
 8005304:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005306:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800530a:	e746      	b.n	800519a <_dtoa_r+0x71a>
 800530c:	9b07      	ldr	r3, [sp, #28]
 800530e:	1e5c      	subs	r4, r3, #1
 8005310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005312:	42a3      	cmp	r3, r4
 8005314:	bfbf      	itttt	lt
 8005316:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005318:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800531a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800531c:	1ae3      	sublt	r3, r4, r3
 800531e:	bfb4      	ite	lt
 8005320:	18d2      	addlt	r2, r2, r3
 8005322:	1b1c      	subge	r4, r3, r4
 8005324:	9b07      	ldr	r3, [sp, #28]
 8005326:	bfbc      	itt	lt
 8005328:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800532a:	2400      	movlt	r4, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	bfb5      	itete	lt
 8005330:	eba8 0603 	sublt.w	r6, r8, r3
 8005334:	9b07      	ldrge	r3, [sp, #28]
 8005336:	2300      	movlt	r3, #0
 8005338:	4646      	movge	r6, r8
 800533a:	e730      	b.n	800519e <_dtoa_r+0x71e>
 800533c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800533e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005340:	4646      	mov	r6, r8
 8005342:	e735      	b.n	80051b0 <_dtoa_r+0x730>
 8005344:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005346:	e75c      	b.n	8005202 <_dtoa_r+0x782>
 8005348:	2300      	movs	r3, #0
 800534a:	e788      	b.n	800525e <_dtoa_r+0x7de>
 800534c:	3fe00000 	.word	0x3fe00000
 8005350:	40240000 	.word	0x40240000
 8005354:	40140000 	.word	0x40140000
 8005358:	9b02      	ldr	r3, [sp, #8]
 800535a:	e780      	b.n	800525e <_dtoa_r+0x7de>
 800535c:	2300      	movs	r3, #0
 800535e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005360:	e782      	b.n	8005268 <_dtoa_r+0x7e8>
 8005362:	d099      	beq.n	8005298 <_dtoa_r+0x818>
 8005364:	9a08      	ldr	r2, [sp, #32]
 8005366:	331c      	adds	r3, #28
 8005368:	441a      	add	r2, r3
 800536a:	4498      	add	r8, r3
 800536c:	441e      	add	r6, r3
 800536e:	9208      	str	r2, [sp, #32]
 8005370:	e792      	b.n	8005298 <_dtoa_r+0x818>
 8005372:	4603      	mov	r3, r0
 8005374:	e7f6      	b.n	8005364 <_dtoa_r+0x8e4>
 8005376:	9b07      	ldr	r3, [sp, #28]
 8005378:	9704      	str	r7, [sp, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	dc20      	bgt.n	80053c0 <_dtoa_r+0x940>
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005382:	2b02      	cmp	r3, #2
 8005384:	dd1e      	ble.n	80053c4 <_dtoa_r+0x944>
 8005386:	9b00      	ldr	r3, [sp, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f47f aec0 	bne.w	800510e <_dtoa_r+0x68e>
 800538e:	4621      	mov	r1, r4
 8005390:	2205      	movs	r2, #5
 8005392:	4658      	mov	r0, fp
 8005394:	f000 fa9a 	bl	80058cc <__multadd>
 8005398:	4601      	mov	r1, r0
 800539a:	4604      	mov	r4, r0
 800539c:	4648      	mov	r0, r9
 800539e:	f000 fcad 	bl	8005cfc <__mcmp>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	f77f aeb3 	ble.w	800510e <_dtoa_r+0x68e>
 80053a8:	4656      	mov	r6, sl
 80053aa:	2331      	movs	r3, #49	@ 0x31
 80053ac:	f806 3b01 	strb.w	r3, [r6], #1
 80053b0:	9b04      	ldr	r3, [sp, #16]
 80053b2:	3301      	adds	r3, #1
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	e6ae      	b.n	8005116 <_dtoa_r+0x696>
 80053b8:	9c07      	ldr	r4, [sp, #28]
 80053ba:	9704      	str	r7, [sp, #16]
 80053bc:	4625      	mov	r5, r4
 80053be:	e7f3      	b.n	80053a8 <_dtoa_r+0x928>
 80053c0:	9b07      	ldr	r3, [sp, #28]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8104 	beq.w	80055d4 <_dtoa_r+0xb54>
 80053cc:	2e00      	cmp	r6, #0
 80053ce:	dd05      	ble.n	80053dc <_dtoa_r+0x95c>
 80053d0:	4629      	mov	r1, r5
 80053d2:	4632      	mov	r2, r6
 80053d4:	4658      	mov	r0, fp
 80053d6:	f000 fc25 	bl	8005c24 <__lshift>
 80053da:	4605      	mov	r5, r0
 80053dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d05a      	beq.n	8005498 <_dtoa_r+0xa18>
 80053e2:	6869      	ldr	r1, [r5, #4]
 80053e4:	4658      	mov	r0, fp
 80053e6:	f000 fa0f 	bl	8005808 <_Balloc>
 80053ea:	4606      	mov	r6, r0
 80053ec:	b928      	cbnz	r0, 80053fa <_dtoa_r+0x97a>
 80053ee:	4b84      	ldr	r3, [pc, #528]	@ (8005600 <_dtoa_r+0xb80>)
 80053f0:	4602      	mov	r2, r0
 80053f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80053f6:	f7ff bb5a 	b.w	8004aae <_dtoa_r+0x2e>
 80053fa:	692a      	ldr	r2, [r5, #16]
 80053fc:	3202      	adds	r2, #2
 80053fe:	0092      	lsls	r2, r2, #2
 8005400:	f105 010c 	add.w	r1, r5, #12
 8005404:	300c      	adds	r0, #12
 8005406:	f000 fe3d 	bl	8006084 <memcpy>
 800540a:	2201      	movs	r2, #1
 800540c:	4631      	mov	r1, r6
 800540e:	4658      	mov	r0, fp
 8005410:	f000 fc08 	bl	8005c24 <__lshift>
 8005414:	f10a 0301 	add.w	r3, sl, #1
 8005418:	9307      	str	r3, [sp, #28]
 800541a:	9b00      	ldr	r3, [sp, #0]
 800541c:	4453      	add	r3, sl
 800541e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005420:	9b02      	ldr	r3, [sp, #8]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	462f      	mov	r7, r5
 8005428:	930a      	str	r3, [sp, #40]	@ 0x28
 800542a:	4605      	mov	r5, r0
 800542c:	9b07      	ldr	r3, [sp, #28]
 800542e:	4621      	mov	r1, r4
 8005430:	3b01      	subs	r3, #1
 8005432:	4648      	mov	r0, r9
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	f7ff fa98 	bl	800496a <quorem>
 800543a:	4639      	mov	r1, r7
 800543c:	9002      	str	r0, [sp, #8]
 800543e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005442:	4648      	mov	r0, r9
 8005444:	f000 fc5a 	bl	8005cfc <__mcmp>
 8005448:	462a      	mov	r2, r5
 800544a:	9008      	str	r0, [sp, #32]
 800544c:	4621      	mov	r1, r4
 800544e:	4658      	mov	r0, fp
 8005450:	f000 fc70 	bl	8005d34 <__mdiff>
 8005454:	68c2      	ldr	r2, [r0, #12]
 8005456:	4606      	mov	r6, r0
 8005458:	bb02      	cbnz	r2, 800549c <_dtoa_r+0xa1c>
 800545a:	4601      	mov	r1, r0
 800545c:	4648      	mov	r0, r9
 800545e:	f000 fc4d 	bl	8005cfc <__mcmp>
 8005462:	4602      	mov	r2, r0
 8005464:	4631      	mov	r1, r6
 8005466:	4658      	mov	r0, fp
 8005468:	920e      	str	r2, [sp, #56]	@ 0x38
 800546a:	f000 fa0d 	bl	8005888 <_Bfree>
 800546e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005472:	9e07      	ldr	r6, [sp, #28]
 8005474:	ea43 0102 	orr.w	r1, r3, r2
 8005478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800547a:	4319      	orrs	r1, r3
 800547c:	d110      	bne.n	80054a0 <_dtoa_r+0xa20>
 800547e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005482:	d029      	beq.n	80054d8 <_dtoa_r+0xa58>
 8005484:	9b08      	ldr	r3, [sp, #32]
 8005486:	2b00      	cmp	r3, #0
 8005488:	dd02      	ble.n	8005490 <_dtoa_r+0xa10>
 800548a:	9b02      	ldr	r3, [sp, #8]
 800548c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005490:	9b00      	ldr	r3, [sp, #0]
 8005492:	f883 8000 	strb.w	r8, [r3]
 8005496:	e63f      	b.n	8005118 <_dtoa_r+0x698>
 8005498:	4628      	mov	r0, r5
 800549a:	e7bb      	b.n	8005414 <_dtoa_r+0x994>
 800549c:	2201      	movs	r2, #1
 800549e:	e7e1      	b.n	8005464 <_dtoa_r+0x9e4>
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	db04      	blt.n	80054b0 <_dtoa_r+0xa30>
 80054a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054a8:	430b      	orrs	r3, r1
 80054aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80054ac:	430b      	orrs	r3, r1
 80054ae:	d120      	bne.n	80054f2 <_dtoa_r+0xa72>
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	dded      	ble.n	8005490 <_dtoa_r+0xa10>
 80054b4:	4649      	mov	r1, r9
 80054b6:	2201      	movs	r2, #1
 80054b8:	4658      	mov	r0, fp
 80054ba:	f000 fbb3 	bl	8005c24 <__lshift>
 80054be:	4621      	mov	r1, r4
 80054c0:	4681      	mov	r9, r0
 80054c2:	f000 fc1b 	bl	8005cfc <__mcmp>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	dc03      	bgt.n	80054d2 <_dtoa_r+0xa52>
 80054ca:	d1e1      	bne.n	8005490 <_dtoa_r+0xa10>
 80054cc:	f018 0f01 	tst.w	r8, #1
 80054d0:	d0de      	beq.n	8005490 <_dtoa_r+0xa10>
 80054d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80054d6:	d1d8      	bne.n	800548a <_dtoa_r+0xa0a>
 80054d8:	9a00      	ldr	r2, [sp, #0]
 80054da:	2339      	movs	r3, #57	@ 0x39
 80054dc:	7013      	strb	r3, [r2, #0]
 80054de:	4633      	mov	r3, r6
 80054e0:	461e      	mov	r6, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80054e8:	2a39      	cmp	r2, #57	@ 0x39
 80054ea:	d052      	beq.n	8005592 <_dtoa_r+0xb12>
 80054ec:	3201      	adds	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	e612      	b.n	8005118 <_dtoa_r+0x698>
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	dd07      	ble.n	8005506 <_dtoa_r+0xa86>
 80054f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80054fa:	d0ed      	beq.n	80054d8 <_dtoa_r+0xa58>
 80054fc:	9a00      	ldr	r2, [sp, #0]
 80054fe:	f108 0301 	add.w	r3, r8, #1
 8005502:	7013      	strb	r3, [r2, #0]
 8005504:	e608      	b.n	8005118 <_dtoa_r+0x698>
 8005506:	9b07      	ldr	r3, [sp, #28]
 8005508:	9a07      	ldr	r2, [sp, #28]
 800550a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800550e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005510:	4293      	cmp	r3, r2
 8005512:	d028      	beq.n	8005566 <_dtoa_r+0xae6>
 8005514:	4649      	mov	r1, r9
 8005516:	2300      	movs	r3, #0
 8005518:	220a      	movs	r2, #10
 800551a:	4658      	mov	r0, fp
 800551c:	f000 f9d6 	bl	80058cc <__multadd>
 8005520:	42af      	cmp	r7, r5
 8005522:	4681      	mov	r9, r0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	f04f 020a 	mov.w	r2, #10
 800552c:	4639      	mov	r1, r7
 800552e:	4658      	mov	r0, fp
 8005530:	d107      	bne.n	8005542 <_dtoa_r+0xac2>
 8005532:	f000 f9cb 	bl	80058cc <__multadd>
 8005536:	4607      	mov	r7, r0
 8005538:	4605      	mov	r5, r0
 800553a:	9b07      	ldr	r3, [sp, #28]
 800553c:	3301      	adds	r3, #1
 800553e:	9307      	str	r3, [sp, #28]
 8005540:	e774      	b.n	800542c <_dtoa_r+0x9ac>
 8005542:	f000 f9c3 	bl	80058cc <__multadd>
 8005546:	4629      	mov	r1, r5
 8005548:	4607      	mov	r7, r0
 800554a:	2300      	movs	r3, #0
 800554c:	220a      	movs	r2, #10
 800554e:	4658      	mov	r0, fp
 8005550:	f000 f9bc 	bl	80058cc <__multadd>
 8005554:	4605      	mov	r5, r0
 8005556:	e7f0      	b.n	800553a <_dtoa_r+0xaba>
 8005558:	9b00      	ldr	r3, [sp, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfcc      	ite	gt
 800555e:	461e      	movgt	r6, r3
 8005560:	2601      	movle	r6, #1
 8005562:	4456      	add	r6, sl
 8005564:	2700      	movs	r7, #0
 8005566:	4649      	mov	r1, r9
 8005568:	2201      	movs	r2, #1
 800556a:	4658      	mov	r0, fp
 800556c:	f000 fb5a 	bl	8005c24 <__lshift>
 8005570:	4621      	mov	r1, r4
 8005572:	4681      	mov	r9, r0
 8005574:	f000 fbc2 	bl	8005cfc <__mcmp>
 8005578:	2800      	cmp	r0, #0
 800557a:	dcb0      	bgt.n	80054de <_dtoa_r+0xa5e>
 800557c:	d102      	bne.n	8005584 <_dtoa_r+0xb04>
 800557e:	f018 0f01 	tst.w	r8, #1
 8005582:	d1ac      	bne.n	80054de <_dtoa_r+0xa5e>
 8005584:	4633      	mov	r3, r6
 8005586:	461e      	mov	r6, r3
 8005588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800558c:	2a30      	cmp	r2, #48	@ 0x30
 800558e:	d0fa      	beq.n	8005586 <_dtoa_r+0xb06>
 8005590:	e5c2      	b.n	8005118 <_dtoa_r+0x698>
 8005592:	459a      	cmp	sl, r3
 8005594:	d1a4      	bne.n	80054e0 <_dtoa_r+0xa60>
 8005596:	9b04      	ldr	r3, [sp, #16]
 8005598:	3301      	adds	r3, #1
 800559a:	9304      	str	r3, [sp, #16]
 800559c:	2331      	movs	r3, #49	@ 0x31
 800559e:	f88a 3000 	strb.w	r3, [sl]
 80055a2:	e5b9      	b.n	8005118 <_dtoa_r+0x698>
 80055a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80055a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005604 <_dtoa_r+0xb84>
 80055aa:	b11b      	cbz	r3, 80055b4 <_dtoa_r+0xb34>
 80055ac:	f10a 0308 	add.w	r3, sl, #8
 80055b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	4650      	mov	r0, sl
 80055b6:	b019      	add	sp, #100	@ 0x64
 80055b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055be:	2b01      	cmp	r3, #1
 80055c0:	f77f ae37 	ble.w	8005232 <_dtoa_r+0x7b2>
 80055c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80055c8:	2001      	movs	r0, #1
 80055ca:	e655      	b.n	8005278 <_dtoa_r+0x7f8>
 80055cc:	9b00      	ldr	r3, [sp, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f77f aed6 	ble.w	8005380 <_dtoa_r+0x900>
 80055d4:	4656      	mov	r6, sl
 80055d6:	4621      	mov	r1, r4
 80055d8:	4648      	mov	r0, r9
 80055da:	f7ff f9c6 	bl	800496a <quorem>
 80055de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80055e2:	f806 8b01 	strb.w	r8, [r6], #1
 80055e6:	9b00      	ldr	r3, [sp, #0]
 80055e8:	eba6 020a 	sub.w	r2, r6, sl
 80055ec:	4293      	cmp	r3, r2
 80055ee:	ddb3      	ble.n	8005558 <_dtoa_r+0xad8>
 80055f0:	4649      	mov	r1, r9
 80055f2:	2300      	movs	r3, #0
 80055f4:	220a      	movs	r2, #10
 80055f6:	4658      	mov	r0, fp
 80055f8:	f000 f968 	bl	80058cc <__multadd>
 80055fc:	4681      	mov	r9, r0
 80055fe:	e7ea      	b.n	80055d6 <_dtoa_r+0xb56>
 8005600:	080067b8 	.word	0x080067b8
 8005604:	0800673c 	.word	0x0800673c

08005608 <_free_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4605      	mov	r5, r0
 800560c:	2900      	cmp	r1, #0
 800560e:	d041      	beq.n	8005694 <_free_r+0x8c>
 8005610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005614:	1f0c      	subs	r4, r1, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	bfb8      	it	lt
 800561a:	18e4      	addlt	r4, r4, r3
 800561c:	f000 f8e8 	bl	80057f0 <__malloc_lock>
 8005620:	4a1d      	ldr	r2, [pc, #116]	@ (8005698 <_free_r+0x90>)
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	b933      	cbnz	r3, 8005634 <_free_r+0x2c>
 8005626:	6063      	str	r3, [r4, #4]
 8005628:	6014      	str	r4, [r2, #0]
 800562a:	4628      	mov	r0, r5
 800562c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005630:	f000 b8e4 	b.w	80057fc <__malloc_unlock>
 8005634:	42a3      	cmp	r3, r4
 8005636:	d908      	bls.n	800564a <_free_r+0x42>
 8005638:	6820      	ldr	r0, [r4, #0]
 800563a:	1821      	adds	r1, r4, r0
 800563c:	428b      	cmp	r3, r1
 800563e:	bf01      	itttt	eq
 8005640:	6819      	ldreq	r1, [r3, #0]
 8005642:	685b      	ldreq	r3, [r3, #4]
 8005644:	1809      	addeq	r1, r1, r0
 8005646:	6021      	streq	r1, [r4, #0]
 8005648:	e7ed      	b.n	8005626 <_free_r+0x1e>
 800564a:	461a      	mov	r2, r3
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	b10b      	cbz	r3, 8005654 <_free_r+0x4c>
 8005650:	42a3      	cmp	r3, r4
 8005652:	d9fa      	bls.n	800564a <_free_r+0x42>
 8005654:	6811      	ldr	r1, [r2, #0]
 8005656:	1850      	adds	r0, r2, r1
 8005658:	42a0      	cmp	r0, r4
 800565a:	d10b      	bne.n	8005674 <_free_r+0x6c>
 800565c:	6820      	ldr	r0, [r4, #0]
 800565e:	4401      	add	r1, r0
 8005660:	1850      	adds	r0, r2, r1
 8005662:	4283      	cmp	r3, r0
 8005664:	6011      	str	r1, [r2, #0]
 8005666:	d1e0      	bne.n	800562a <_free_r+0x22>
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	6053      	str	r3, [r2, #4]
 800566e:	4408      	add	r0, r1
 8005670:	6010      	str	r0, [r2, #0]
 8005672:	e7da      	b.n	800562a <_free_r+0x22>
 8005674:	d902      	bls.n	800567c <_free_r+0x74>
 8005676:	230c      	movs	r3, #12
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	e7d6      	b.n	800562a <_free_r+0x22>
 800567c:	6820      	ldr	r0, [r4, #0]
 800567e:	1821      	adds	r1, r4, r0
 8005680:	428b      	cmp	r3, r1
 8005682:	bf04      	itt	eq
 8005684:	6819      	ldreq	r1, [r3, #0]
 8005686:	685b      	ldreq	r3, [r3, #4]
 8005688:	6063      	str	r3, [r4, #4]
 800568a:	bf04      	itt	eq
 800568c:	1809      	addeq	r1, r1, r0
 800568e:	6021      	streq	r1, [r4, #0]
 8005690:	6054      	str	r4, [r2, #4]
 8005692:	e7ca      	b.n	800562a <_free_r+0x22>
 8005694:	bd38      	pop	{r3, r4, r5, pc}
 8005696:	bf00      	nop
 8005698:	20000398 	.word	0x20000398

0800569c <malloc>:
 800569c:	4b02      	ldr	r3, [pc, #8]	@ (80056a8 <malloc+0xc>)
 800569e:	4601      	mov	r1, r0
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	f000 b825 	b.w	80056f0 <_malloc_r>
 80056a6:	bf00      	nop
 80056a8:	2000001c 	.word	0x2000001c

080056ac <sbrk_aligned>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	4e0f      	ldr	r6, [pc, #60]	@ (80056ec <sbrk_aligned+0x40>)
 80056b0:	460c      	mov	r4, r1
 80056b2:	6831      	ldr	r1, [r6, #0]
 80056b4:	4605      	mov	r5, r0
 80056b6:	b911      	cbnz	r1, 80056be <sbrk_aligned+0x12>
 80056b8:	f000 fcd4 	bl	8006064 <_sbrk_r>
 80056bc:	6030      	str	r0, [r6, #0]
 80056be:	4621      	mov	r1, r4
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 fccf 	bl	8006064 <_sbrk_r>
 80056c6:	1c43      	adds	r3, r0, #1
 80056c8:	d103      	bne.n	80056d2 <sbrk_aligned+0x26>
 80056ca:	f04f 34ff 	mov.w	r4, #4294967295
 80056ce:	4620      	mov	r0, r4
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	1cc4      	adds	r4, r0, #3
 80056d4:	f024 0403 	bic.w	r4, r4, #3
 80056d8:	42a0      	cmp	r0, r4
 80056da:	d0f8      	beq.n	80056ce <sbrk_aligned+0x22>
 80056dc:	1a21      	subs	r1, r4, r0
 80056de:	4628      	mov	r0, r5
 80056e0:	f000 fcc0 	bl	8006064 <_sbrk_r>
 80056e4:	3001      	adds	r0, #1
 80056e6:	d1f2      	bne.n	80056ce <sbrk_aligned+0x22>
 80056e8:	e7ef      	b.n	80056ca <sbrk_aligned+0x1e>
 80056ea:	bf00      	nop
 80056ec:	20000394 	.word	0x20000394

080056f0 <_malloc_r>:
 80056f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056f4:	1ccd      	adds	r5, r1, #3
 80056f6:	f025 0503 	bic.w	r5, r5, #3
 80056fa:	3508      	adds	r5, #8
 80056fc:	2d0c      	cmp	r5, #12
 80056fe:	bf38      	it	cc
 8005700:	250c      	movcc	r5, #12
 8005702:	2d00      	cmp	r5, #0
 8005704:	4606      	mov	r6, r0
 8005706:	db01      	blt.n	800570c <_malloc_r+0x1c>
 8005708:	42a9      	cmp	r1, r5
 800570a:	d904      	bls.n	8005716 <_malloc_r+0x26>
 800570c:	230c      	movs	r3, #12
 800570e:	6033      	str	r3, [r6, #0]
 8005710:	2000      	movs	r0, #0
 8005712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057ec <_malloc_r+0xfc>
 800571a:	f000 f869 	bl	80057f0 <__malloc_lock>
 800571e:	f8d8 3000 	ldr.w	r3, [r8]
 8005722:	461c      	mov	r4, r3
 8005724:	bb44      	cbnz	r4, 8005778 <_malloc_r+0x88>
 8005726:	4629      	mov	r1, r5
 8005728:	4630      	mov	r0, r6
 800572a:	f7ff ffbf 	bl	80056ac <sbrk_aligned>
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	4604      	mov	r4, r0
 8005732:	d158      	bne.n	80057e6 <_malloc_r+0xf6>
 8005734:	f8d8 4000 	ldr.w	r4, [r8]
 8005738:	4627      	mov	r7, r4
 800573a:	2f00      	cmp	r7, #0
 800573c:	d143      	bne.n	80057c6 <_malloc_r+0xd6>
 800573e:	2c00      	cmp	r4, #0
 8005740:	d04b      	beq.n	80057da <_malloc_r+0xea>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	4639      	mov	r1, r7
 8005746:	4630      	mov	r0, r6
 8005748:	eb04 0903 	add.w	r9, r4, r3
 800574c:	f000 fc8a 	bl	8006064 <_sbrk_r>
 8005750:	4581      	cmp	r9, r0
 8005752:	d142      	bne.n	80057da <_malloc_r+0xea>
 8005754:	6821      	ldr	r1, [r4, #0]
 8005756:	1a6d      	subs	r5, r5, r1
 8005758:	4629      	mov	r1, r5
 800575a:	4630      	mov	r0, r6
 800575c:	f7ff ffa6 	bl	80056ac <sbrk_aligned>
 8005760:	3001      	adds	r0, #1
 8005762:	d03a      	beq.n	80057da <_malloc_r+0xea>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	442b      	add	r3, r5
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	f8d8 3000 	ldr.w	r3, [r8]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	bb62      	cbnz	r2, 80057cc <_malloc_r+0xdc>
 8005772:	f8c8 7000 	str.w	r7, [r8]
 8005776:	e00f      	b.n	8005798 <_malloc_r+0xa8>
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	1b52      	subs	r2, r2, r5
 800577c:	d420      	bmi.n	80057c0 <_malloc_r+0xd0>
 800577e:	2a0b      	cmp	r2, #11
 8005780:	d917      	bls.n	80057b2 <_malloc_r+0xc2>
 8005782:	1961      	adds	r1, r4, r5
 8005784:	42a3      	cmp	r3, r4
 8005786:	6025      	str	r5, [r4, #0]
 8005788:	bf18      	it	ne
 800578a:	6059      	strne	r1, [r3, #4]
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	bf08      	it	eq
 8005790:	f8c8 1000 	streq.w	r1, [r8]
 8005794:	5162      	str	r2, [r4, r5]
 8005796:	604b      	str	r3, [r1, #4]
 8005798:	4630      	mov	r0, r6
 800579a:	f000 f82f 	bl	80057fc <__malloc_unlock>
 800579e:	f104 000b 	add.w	r0, r4, #11
 80057a2:	1d23      	adds	r3, r4, #4
 80057a4:	f020 0007 	bic.w	r0, r0, #7
 80057a8:	1ac2      	subs	r2, r0, r3
 80057aa:	bf1c      	itt	ne
 80057ac:	1a1b      	subne	r3, r3, r0
 80057ae:	50a3      	strne	r3, [r4, r2]
 80057b0:	e7af      	b.n	8005712 <_malloc_r+0x22>
 80057b2:	6862      	ldr	r2, [r4, #4]
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	bf0c      	ite	eq
 80057b8:	f8c8 2000 	streq.w	r2, [r8]
 80057bc:	605a      	strne	r2, [r3, #4]
 80057be:	e7eb      	b.n	8005798 <_malloc_r+0xa8>
 80057c0:	4623      	mov	r3, r4
 80057c2:	6864      	ldr	r4, [r4, #4]
 80057c4:	e7ae      	b.n	8005724 <_malloc_r+0x34>
 80057c6:	463c      	mov	r4, r7
 80057c8:	687f      	ldr	r7, [r7, #4]
 80057ca:	e7b6      	b.n	800573a <_malloc_r+0x4a>
 80057cc:	461a      	mov	r2, r3
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	d1fb      	bne.n	80057cc <_malloc_r+0xdc>
 80057d4:	2300      	movs	r3, #0
 80057d6:	6053      	str	r3, [r2, #4]
 80057d8:	e7de      	b.n	8005798 <_malloc_r+0xa8>
 80057da:	230c      	movs	r3, #12
 80057dc:	6033      	str	r3, [r6, #0]
 80057de:	4630      	mov	r0, r6
 80057e0:	f000 f80c 	bl	80057fc <__malloc_unlock>
 80057e4:	e794      	b.n	8005710 <_malloc_r+0x20>
 80057e6:	6005      	str	r5, [r0, #0]
 80057e8:	e7d6      	b.n	8005798 <_malloc_r+0xa8>
 80057ea:	bf00      	nop
 80057ec:	20000398 	.word	0x20000398

080057f0 <__malloc_lock>:
 80057f0:	4801      	ldr	r0, [pc, #4]	@ (80057f8 <__malloc_lock+0x8>)
 80057f2:	f7ff b8b8 	b.w	8004966 <__retarget_lock_acquire_recursive>
 80057f6:	bf00      	nop
 80057f8:	20000390 	.word	0x20000390

080057fc <__malloc_unlock>:
 80057fc:	4801      	ldr	r0, [pc, #4]	@ (8005804 <__malloc_unlock+0x8>)
 80057fe:	f7ff b8b3 	b.w	8004968 <__retarget_lock_release_recursive>
 8005802:	bf00      	nop
 8005804:	20000390 	.word	0x20000390

08005808 <_Balloc>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	69c6      	ldr	r6, [r0, #28]
 800580c:	4604      	mov	r4, r0
 800580e:	460d      	mov	r5, r1
 8005810:	b976      	cbnz	r6, 8005830 <_Balloc+0x28>
 8005812:	2010      	movs	r0, #16
 8005814:	f7ff ff42 	bl	800569c <malloc>
 8005818:	4602      	mov	r2, r0
 800581a:	61e0      	str	r0, [r4, #28]
 800581c:	b920      	cbnz	r0, 8005828 <_Balloc+0x20>
 800581e:	4b18      	ldr	r3, [pc, #96]	@ (8005880 <_Balloc+0x78>)
 8005820:	4818      	ldr	r0, [pc, #96]	@ (8005884 <_Balloc+0x7c>)
 8005822:	216b      	movs	r1, #107	@ 0x6b
 8005824:	f000 fc3c 	bl	80060a0 <__assert_func>
 8005828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800582c:	6006      	str	r6, [r0, #0]
 800582e:	60c6      	str	r6, [r0, #12]
 8005830:	69e6      	ldr	r6, [r4, #28]
 8005832:	68f3      	ldr	r3, [r6, #12]
 8005834:	b183      	cbz	r3, 8005858 <_Balloc+0x50>
 8005836:	69e3      	ldr	r3, [r4, #28]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800583e:	b9b8      	cbnz	r0, 8005870 <_Balloc+0x68>
 8005840:	2101      	movs	r1, #1
 8005842:	fa01 f605 	lsl.w	r6, r1, r5
 8005846:	1d72      	adds	r2, r6, #5
 8005848:	0092      	lsls	r2, r2, #2
 800584a:	4620      	mov	r0, r4
 800584c:	f000 fc46 	bl	80060dc <_calloc_r>
 8005850:	b160      	cbz	r0, 800586c <_Balloc+0x64>
 8005852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005856:	e00e      	b.n	8005876 <_Balloc+0x6e>
 8005858:	2221      	movs	r2, #33	@ 0x21
 800585a:	2104      	movs	r1, #4
 800585c:	4620      	mov	r0, r4
 800585e:	f000 fc3d 	bl	80060dc <_calloc_r>
 8005862:	69e3      	ldr	r3, [r4, #28]
 8005864:	60f0      	str	r0, [r6, #12]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e4      	bne.n	8005836 <_Balloc+0x2e>
 800586c:	2000      	movs	r0, #0
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	6802      	ldr	r2, [r0, #0]
 8005872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005876:	2300      	movs	r3, #0
 8005878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800587c:	e7f7      	b.n	800586e <_Balloc+0x66>
 800587e:	bf00      	nop
 8005880:	08006749 	.word	0x08006749
 8005884:	080067c9 	.word	0x080067c9

08005888 <_Bfree>:
 8005888:	b570      	push	{r4, r5, r6, lr}
 800588a:	69c6      	ldr	r6, [r0, #28]
 800588c:	4605      	mov	r5, r0
 800588e:	460c      	mov	r4, r1
 8005890:	b976      	cbnz	r6, 80058b0 <_Bfree+0x28>
 8005892:	2010      	movs	r0, #16
 8005894:	f7ff ff02 	bl	800569c <malloc>
 8005898:	4602      	mov	r2, r0
 800589a:	61e8      	str	r0, [r5, #28]
 800589c:	b920      	cbnz	r0, 80058a8 <_Bfree+0x20>
 800589e:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <_Bfree+0x3c>)
 80058a0:	4809      	ldr	r0, [pc, #36]	@ (80058c8 <_Bfree+0x40>)
 80058a2:	218f      	movs	r1, #143	@ 0x8f
 80058a4:	f000 fbfc 	bl	80060a0 <__assert_func>
 80058a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058ac:	6006      	str	r6, [r0, #0]
 80058ae:	60c6      	str	r6, [r0, #12]
 80058b0:	b13c      	cbz	r4, 80058c2 <_Bfree+0x3a>
 80058b2:	69eb      	ldr	r3, [r5, #28]
 80058b4:	6862      	ldr	r2, [r4, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058bc:	6021      	str	r1, [r4, #0]
 80058be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058c2:	bd70      	pop	{r4, r5, r6, pc}
 80058c4:	08006749 	.word	0x08006749
 80058c8:	080067c9 	.word	0x080067c9

080058cc <__multadd>:
 80058cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d0:	690d      	ldr	r5, [r1, #16]
 80058d2:	4607      	mov	r7, r0
 80058d4:	460c      	mov	r4, r1
 80058d6:	461e      	mov	r6, r3
 80058d8:	f101 0c14 	add.w	ip, r1, #20
 80058dc:	2000      	movs	r0, #0
 80058de:	f8dc 3000 	ldr.w	r3, [ip]
 80058e2:	b299      	uxth	r1, r3
 80058e4:	fb02 6101 	mla	r1, r2, r1, r6
 80058e8:	0c1e      	lsrs	r6, r3, #16
 80058ea:	0c0b      	lsrs	r3, r1, #16
 80058ec:	fb02 3306 	mla	r3, r2, r6, r3
 80058f0:	b289      	uxth	r1, r1
 80058f2:	3001      	adds	r0, #1
 80058f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80058f8:	4285      	cmp	r5, r0
 80058fa:	f84c 1b04 	str.w	r1, [ip], #4
 80058fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005902:	dcec      	bgt.n	80058de <__multadd+0x12>
 8005904:	b30e      	cbz	r6, 800594a <__multadd+0x7e>
 8005906:	68a3      	ldr	r3, [r4, #8]
 8005908:	42ab      	cmp	r3, r5
 800590a:	dc19      	bgt.n	8005940 <__multadd+0x74>
 800590c:	6861      	ldr	r1, [r4, #4]
 800590e:	4638      	mov	r0, r7
 8005910:	3101      	adds	r1, #1
 8005912:	f7ff ff79 	bl	8005808 <_Balloc>
 8005916:	4680      	mov	r8, r0
 8005918:	b928      	cbnz	r0, 8005926 <__multadd+0x5a>
 800591a:	4602      	mov	r2, r0
 800591c:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <__multadd+0x84>)
 800591e:	480d      	ldr	r0, [pc, #52]	@ (8005954 <__multadd+0x88>)
 8005920:	21ba      	movs	r1, #186	@ 0xba
 8005922:	f000 fbbd 	bl	80060a0 <__assert_func>
 8005926:	6922      	ldr	r2, [r4, #16]
 8005928:	3202      	adds	r2, #2
 800592a:	f104 010c 	add.w	r1, r4, #12
 800592e:	0092      	lsls	r2, r2, #2
 8005930:	300c      	adds	r0, #12
 8005932:	f000 fba7 	bl	8006084 <memcpy>
 8005936:	4621      	mov	r1, r4
 8005938:	4638      	mov	r0, r7
 800593a:	f7ff ffa5 	bl	8005888 <_Bfree>
 800593e:	4644      	mov	r4, r8
 8005940:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005944:	3501      	adds	r5, #1
 8005946:	615e      	str	r6, [r3, #20]
 8005948:	6125      	str	r5, [r4, #16]
 800594a:	4620      	mov	r0, r4
 800594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005950:	080067b8 	.word	0x080067b8
 8005954:	080067c9 	.word	0x080067c9

08005958 <__hi0bits>:
 8005958:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800595c:	4603      	mov	r3, r0
 800595e:	bf36      	itet	cc
 8005960:	0403      	lslcc	r3, r0, #16
 8005962:	2000      	movcs	r0, #0
 8005964:	2010      	movcc	r0, #16
 8005966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800596a:	bf3c      	itt	cc
 800596c:	021b      	lslcc	r3, r3, #8
 800596e:	3008      	addcc	r0, #8
 8005970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005974:	bf3c      	itt	cc
 8005976:	011b      	lslcc	r3, r3, #4
 8005978:	3004      	addcc	r0, #4
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597e:	bf3c      	itt	cc
 8005980:	009b      	lslcc	r3, r3, #2
 8005982:	3002      	addcc	r0, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	db05      	blt.n	8005994 <__hi0bits+0x3c>
 8005988:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800598c:	f100 0001 	add.w	r0, r0, #1
 8005990:	bf08      	it	eq
 8005992:	2020      	moveq	r0, #32
 8005994:	4770      	bx	lr

08005996 <__lo0bits>:
 8005996:	6803      	ldr	r3, [r0, #0]
 8005998:	4602      	mov	r2, r0
 800599a:	f013 0007 	ands.w	r0, r3, #7
 800599e:	d00b      	beq.n	80059b8 <__lo0bits+0x22>
 80059a0:	07d9      	lsls	r1, r3, #31
 80059a2:	d421      	bmi.n	80059e8 <__lo0bits+0x52>
 80059a4:	0798      	lsls	r0, r3, #30
 80059a6:	bf49      	itett	mi
 80059a8:	085b      	lsrmi	r3, r3, #1
 80059aa:	089b      	lsrpl	r3, r3, #2
 80059ac:	2001      	movmi	r0, #1
 80059ae:	6013      	strmi	r3, [r2, #0]
 80059b0:	bf5c      	itt	pl
 80059b2:	6013      	strpl	r3, [r2, #0]
 80059b4:	2002      	movpl	r0, #2
 80059b6:	4770      	bx	lr
 80059b8:	b299      	uxth	r1, r3
 80059ba:	b909      	cbnz	r1, 80059c0 <__lo0bits+0x2a>
 80059bc:	0c1b      	lsrs	r3, r3, #16
 80059be:	2010      	movs	r0, #16
 80059c0:	b2d9      	uxtb	r1, r3
 80059c2:	b909      	cbnz	r1, 80059c8 <__lo0bits+0x32>
 80059c4:	3008      	adds	r0, #8
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	0719      	lsls	r1, r3, #28
 80059ca:	bf04      	itt	eq
 80059cc:	091b      	lsreq	r3, r3, #4
 80059ce:	3004      	addeq	r0, #4
 80059d0:	0799      	lsls	r1, r3, #30
 80059d2:	bf04      	itt	eq
 80059d4:	089b      	lsreq	r3, r3, #2
 80059d6:	3002      	addeq	r0, #2
 80059d8:	07d9      	lsls	r1, r3, #31
 80059da:	d403      	bmi.n	80059e4 <__lo0bits+0x4e>
 80059dc:	085b      	lsrs	r3, r3, #1
 80059de:	f100 0001 	add.w	r0, r0, #1
 80059e2:	d003      	beq.n	80059ec <__lo0bits+0x56>
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	4770      	bx	lr
 80059e8:	2000      	movs	r0, #0
 80059ea:	4770      	bx	lr
 80059ec:	2020      	movs	r0, #32
 80059ee:	4770      	bx	lr

080059f0 <__i2b>:
 80059f0:	b510      	push	{r4, lr}
 80059f2:	460c      	mov	r4, r1
 80059f4:	2101      	movs	r1, #1
 80059f6:	f7ff ff07 	bl	8005808 <_Balloc>
 80059fa:	4602      	mov	r2, r0
 80059fc:	b928      	cbnz	r0, 8005a0a <__i2b+0x1a>
 80059fe:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <__i2b+0x24>)
 8005a00:	4805      	ldr	r0, [pc, #20]	@ (8005a18 <__i2b+0x28>)
 8005a02:	f240 1145 	movw	r1, #325	@ 0x145
 8005a06:	f000 fb4b 	bl	80060a0 <__assert_func>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	6144      	str	r4, [r0, #20]
 8005a0e:	6103      	str	r3, [r0, #16]
 8005a10:	bd10      	pop	{r4, pc}
 8005a12:	bf00      	nop
 8005a14:	080067b8 	.word	0x080067b8
 8005a18:	080067c9 	.word	0x080067c9

08005a1c <__multiply>:
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	4614      	mov	r4, r2
 8005a22:	690a      	ldr	r2, [r1, #16]
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	bfa8      	it	ge
 8005a2a:	4623      	movge	r3, r4
 8005a2c:	460f      	mov	r7, r1
 8005a2e:	bfa4      	itt	ge
 8005a30:	460c      	movge	r4, r1
 8005a32:	461f      	movge	r7, r3
 8005a34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005a38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005a3c:	68a3      	ldr	r3, [r4, #8]
 8005a3e:	6861      	ldr	r1, [r4, #4]
 8005a40:	eb0a 0609 	add.w	r6, sl, r9
 8005a44:	42b3      	cmp	r3, r6
 8005a46:	b085      	sub	sp, #20
 8005a48:	bfb8      	it	lt
 8005a4a:	3101      	addlt	r1, #1
 8005a4c:	f7ff fedc 	bl	8005808 <_Balloc>
 8005a50:	b930      	cbnz	r0, 8005a60 <__multiply+0x44>
 8005a52:	4602      	mov	r2, r0
 8005a54:	4b44      	ldr	r3, [pc, #272]	@ (8005b68 <__multiply+0x14c>)
 8005a56:	4845      	ldr	r0, [pc, #276]	@ (8005b6c <__multiply+0x150>)
 8005a58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005a5c:	f000 fb20 	bl	80060a0 <__assert_func>
 8005a60:	f100 0514 	add.w	r5, r0, #20
 8005a64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005a68:	462b      	mov	r3, r5
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	4543      	cmp	r3, r8
 8005a6e:	d321      	bcc.n	8005ab4 <__multiply+0x98>
 8005a70:	f107 0114 	add.w	r1, r7, #20
 8005a74:	f104 0214 	add.w	r2, r4, #20
 8005a78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005a7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005a80:	9302      	str	r3, [sp, #8]
 8005a82:	1b13      	subs	r3, r2, r4
 8005a84:	3b15      	subs	r3, #21
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	f104 0715 	add.w	r7, r4, #21
 8005a90:	42ba      	cmp	r2, r7
 8005a92:	bf38      	it	cc
 8005a94:	2304      	movcc	r3, #4
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	9b02      	ldr	r3, [sp, #8]
 8005a9a:	9103      	str	r1, [sp, #12]
 8005a9c:	428b      	cmp	r3, r1
 8005a9e:	d80c      	bhi.n	8005aba <__multiply+0x9e>
 8005aa0:	2e00      	cmp	r6, #0
 8005aa2:	dd03      	ble.n	8005aac <__multiply+0x90>
 8005aa4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d05b      	beq.n	8005b64 <__multiply+0x148>
 8005aac:	6106      	str	r6, [r0, #16]
 8005aae:	b005      	add	sp, #20
 8005ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab4:	f843 2b04 	str.w	r2, [r3], #4
 8005ab8:	e7d8      	b.n	8005a6c <__multiply+0x50>
 8005aba:	f8b1 a000 	ldrh.w	sl, [r1]
 8005abe:	f1ba 0f00 	cmp.w	sl, #0
 8005ac2:	d024      	beq.n	8005b0e <__multiply+0xf2>
 8005ac4:	f104 0e14 	add.w	lr, r4, #20
 8005ac8:	46a9      	mov	r9, r5
 8005aca:	f04f 0c00 	mov.w	ip, #0
 8005ace:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ad2:	f8d9 3000 	ldr.w	r3, [r9]
 8005ad6:	fa1f fb87 	uxth.w	fp, r7
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	fb0a 330b 	mla	r3, sl, fp, r3
 8005ae0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005ae4:	f8d9 7000 	ldr.w	r7, [r9]
 8005ae8:	4463      	add	r3, ip
 8005aea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005aee:	fb0a c70b 	mla	r7, sl, fp, ip
 8005af2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005afc:	4572      	cmp	r2, lr
 8005afe:	f849 3b04 	str.w	r3, [r9], #4
 8005b02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005b06:	d8e2      	bhi.n	8005ace <__multiply+0xb2>
 8005b08:	9b01      	ldr	r3, [sp, #4]
 8005b0a:	f845 c003 	str.w	ip, [r5, r3]
 8005b0e:	9b03      	ldr	r3, [sp, #12]
 8005b10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005b14:	3104      	adds	r1, #4
 8005b16:	f1b9 0f00 	cmp.w	r9, #0
 8005b1a:	d021      	beq.n	8005b60 <__multiply+0x144>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	f104 0c14 	add.w	ip, r4, #20
 8005b22:	46ae      	mov	lr, r5
 8005b24:	f04f 0a00 	mov.w	sl, #0
 8005b28:	f8bc b000 	ldrh.w	fp, [ip]
 8005b2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005b30:	fb09 770b 	mla	r7, r9, fp, r7
 8005b34:	4457      	add	r7, sl
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005b3c:	f84e 3b04 	str.w	r3, [lr], #4
 8005b40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b48:	f8be 3000 	ldrh.w	r3, [lr]
 8005b4c:	fb09 330a 	mla	r3, r9, sl, r3
 8005b50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005b54:	4562      	cmp	r2, ip
 8005b56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b5a:	d8e5      	bhi.n	8005b28 <__multiply+0x10c>
 8005b5c:	9f01      	ldr	r7, [sp, #4]
 8005b5e:	51eb      	str	r3, [r5, r7]
 8005b60:	3504      	adds	r5, #4
 8005b62:	e799      	b.n	8005a98 <__multiply+0x7c>
 8005b64:	3e01      	subs	r6, #1
 8005b66:	e79b      	b.n	8005aa0 <__multiply+0x84>
 8005b68:	080067b8 	.word	0x080067b8
 8005b6c:	080067c9 	.word	0x080067c9

08005b70 <__pow5mult>:
 8005b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b74:	4615      	mov	r5, r2
 8005b76:	f012 0203 	ands.w	r2, r2, #3
 8005b7a:	4607      	mov	r7, r0
 8005b7c:	460e      	mov	r6, r1
 8005b7e:	d007      	beq.n	8005b90 <__pow5mult+0x20>
 8005b80:	4c25      	ldr	r4, [pc, #148]	@ (8005c18 <__pow5mult+0xa8>)
 8005b82:	3a01      	subs	r2, #1
 8005b84:	2300      	movs	r3, #0
 8005b86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005b8a:	f7ff fe9f 	bl	80058cc <__multadd>
 8005b8e:	4606      	mov	r6, r0
 8005b90:	10ad      	asrs	r5, r5, #2
 8005b92:	d03d      	beq.n	8005c10 <__pow5mult+0xa0>
 8005b94:	69fc      	ldr	r4, [r7, #28]
 8005b96:	b97c      	cbnz	r4, 8005bb8 <__pow5mult+0x48>
 8005b98:	2010      	movs	r0, #16
 8005b9a:	f7ff fd7f 	bl	800569c <malloc>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	61f8      	str	r0, [r7, #28]
 8005ba2:	b928      	cbnz	r0, 8005bb0 <__pow5mult+0x40>
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c1c <__pow5mult+0xac>)
 8005ba6:	481e      	ldr	r0, [pc, #120]	@ (8005c20 <__pow5mult+0xb0>)
 8005ba8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005bac:	f000 fa78 	bl	80060a0 <__assert_func>
 8005bb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bb4:	6004      	str	r4, [r0, #0]
 8005bb6:	60c4      	str	r4, [r0, #12]
 8005bb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005bbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005bc0:	b94c      	cbnz	r4, 8005bd6 <__pow5mult+0x66>
 8005bc2:	f240 2171 	movw	r1, #625	@ 0x271
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	f7ff ff12 	bl	80059f0 <__i2b>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	f04f 0900 	mov.w	r9, #0
 8005bda:	07eb      	lsls	r3, r5, #31
 8005bdc:	d50a      	bpl.n	8005bf4 <__pow5mult+0x84>
 8005bde:	4631      	mov	r1, r6
 8005be0:	4622      	mov	r2, r4
 8005be2:	4638      	mov	r0, r7
 8005be4:	f7ff ff1a 	bl	8005a1c <__multiply>
 8005be8:	4631      	mov	r1, r6
 8005bea:	4680      	mov	r8, r0
 8005bec:	4638      	mov	r0, r7
 8005bee:	f7ff fe4b 	bl	8005888 <_Bfree>
 8005bf2:	4646      	mov	r6, r8
 8005bf4:	106d      	asrs	r5, r5, #1
 8005bf6:	d00b      	beq.n	8005c10 <__pow5mult+0xa0>
 8005bf8:	6820      	ldr	r0, [r4, #0]
 8005bfa:	b938      	cbnz	r0, 8005c0c <__pow5mult+0x9c>
 8005bfc:	4622      	mov	r2, r4
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4638      	mov	r0, r7
 8005c02:	f7ff ff0b 	bl	8005a1c <__multiply>
 8005c06:	6020      	str	r0, [r4, #0]
 8005c08:	f8c0 9000 	str.w	r9, [r0]
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	e7e4      	b.n	8005bda <__pow5mult+0x6a>
 8005c10:	4630      	mov	r0, r6
 8005c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c16:	bf00      	nop
 8005c18:	08006824 	.word	0x08006824
 8005c1c:	08006749 	.word	0x08006749
 8005c20:	080067c9 	.word	0x080067c9

08005c24 <__lshift>:
 8005c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c28:	460c      	mov	r4, r1
 8005c2a:	6849      	ldr	r1, [r1, #4]
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c32:	68a3      	ldr	r3, [r4, #8]
 8005c34:	4607      	mov	r7, r0
 8005c36:	4691      	mov	r9, r2
 8005c38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c3c:	f108 0601 	add.w	r6, r8, #1
 8005c40:	42b3      	cmp	r3, r6
 8005c42:	db0b      	blt.n	8005c5c <__lshift+0x38>
 8005c44:	4638      	mov	r0, r7
 8005c46:	f7ff fddf 	bl	8005808 <_Balloc>
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	b948      	cbnz	r0, 8005c62 <__lshift+0x3e>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	4b28      	ldr	r3, [pc, #160]	@ (8005cf4 <__lshift+0xd0>)
 8005c52:	4829      	ldr	r0, [pc, #164]	@ (8005cf8 <__lshift+0xd4>)
 8005c54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005c58:	f000 fa22 	bl	80060a0 <__assert_func>
 8005c5c:	3101      	adds	r1, #1
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	e7ee      	b.n	8005c40 <__lshift+0x1c>
 8005c62:	2300      	movs	r3, #0
 8005c64:	f100 0114 	add.w	r1, r0, #20
 8005c68:	f100 0210 	add.w	r2, r0, #16
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	4553      	cmp	r3, sl
 8005c70:	db33      	blt.n	8005cda <__lshift+0xb6>
 8005c72:	6920      	ldr	r0, [r4, #16]
 8005c74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005c78:	f104 0314 	add.w	r3, r4, #20
 8005c7c:	f019 091f 	ands.w	r9, r9, #31
 8005c80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005c84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005c88:	d02b      	beq.n	8005ce2 <__lshift+0xbe>
 8005c8a:	f1c9 0e20 	rsb	lr, r9, #32
 8005c8e:	468a      	mov	sl, r1
 8005c90:	2200      	movs	r2, #0
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	fa00 f009 	lsl.w	r0, r0, r9
 8005c98:	4310      	orrs	r0, r2
 8005c9a:	f84a 0b04 	str.w	r0, [sl], #4
 8005c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ca2:	459c      	cmp	ip, r3
 8005ca4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ca8:	d8f3      	bhi.n	8005c92 <__lshift+0x6e>
 8005caa:	ebac 0304 	sub.w	r3, ip, r4
 8005cae:	3b15      	subs	r3, #21
 8005cb0:	f023 0303 	bic.w	r3, r3, #3
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	f104 0015 	add.w	r0, r4, #21
 8005cba:	4584      	cmp	ip, r0
 8005cbc:	bf38      	it	cc
 8005cbe:	2304      	movcc	r3, #4
 8005cc0:	50ca      	str	r2, [r1, r3]
 8005cc2:	b10a      	cbz	r2, 8005cc8 <__lshift+0xa4>
 8005cc4:	f108 0602 	add.w	r6, r8, #2
 8005cc8:	3e01      	subs	r6, #1
 8005cca:	4638      	mov	r0, r7
 8005ccc:	612e      	str	r6, [r5, #16]
 8005cce:	4621      	mov	r1, r4
 8005cd0:	f7ff fdda 	bl	8005888 <_Bfree>
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cda:	f842 0f04 	str.w	r0, [r2, #4]!
 8005cde:	3301      	adds	r3, #1
 8005ce0:	e7c5      	b.n	8005c6e <__lshift+0x4a>
 8005ce2:	3904      	subs	r1, #4
 8005ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ce8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005cec:	459c      	cmp	ip, r3
 8005cee:	d8f9      	bhi.n	8005ce4 <__lshift+0xc0>
 8005cf0:	e7ea      	b.n	8005cc8 <__lshift+0xa4>
 8005cf2:	bf00      	nop
 8005cf4:	080067b8 	.word	0x080067b8
 8005cf8:	080067c9 	.word	0x080067c9

08005cfc <__mcmp>:
 8005cfc:	690a      	ldr	r2, [r1, #16]
 8005cfe:	4603      	mov	r3, r0
 8005d00:	6900      	ldr	r0, [r0, #16]
 8005d02:	1a80      	subs	r0, r0, r2
 8005d04:	b530      	push	{r4, r5, lr}
 8005d06:	d10e      	bne.n	8005d26 <__mcmp+0x2a>
 8005d08:	3314      	adds	r3, #20
 8005d0a:	3114      	adds	r1, #20
 8005d0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d1c:	4295      	cmp	r5, r2
 8005d1e:	d003      	beq.n	8005d28 <__mcmp+0x2c>
 8005d20:	d205      	bcs.n	8005d2e <__mcmp+0x32>
 8005d22:	f04f 30ff 	mov.w	r0, #4294967295
 8005d26:	bd30      	pop	{r4, r5, pc}
 8005d28:	42a3      	cmp	r3, r4
 8005d2a:	d3f3      	bcc.n	8005d14 <__mcmp+0x18>
 8005d2c:	e7fb      	b.n	8005d26 <__mcmp+0x2a>
 8005d2e:	2001      	movs	r0, #1
 8005d30:	e7f9      	b.n	8005d26 <__mcmp+0x2a>
	...

08005d34 <__mdiff>:
 8005d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d38:	4689      	mov	r9, r1
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4648      	mov	r0, r9
 8005d40:	4614      	mov	r4, r2
 8005d42:	f7ff ffdb 	bl	8005cfc <__mcmp>
 8005d46:	1e05      	subs	r5, r0, #0
 8005d48:	d112      	bne.n	8005d70 <__mdiff+0x3c>
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f7ff fd5b 	bl	8005808 <_Balloc>
 8005d52:	4602      	mov	r2, r0
 8005d54:	b928      	cbnz	r0, 8005d62 <__mdiff+0x2e>
 8005d56:	4b3f      	ldr	r3, [pc, #252]	@ (8005e54 <__mdiff+0x120>)
 8005d58:	f240 2137 	movw	r1, #567	@ 0x237
 8005d5c:	483e      	ldr	r0, [pc, #248]	@ (8005e58 <__mdiff+0x124>)
 8005d5e:	f000 f99f 	bl	80060a0 <__assert_func>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d68:	4610      	mov	r0, r2
 8005d6a:	b003      	add	sp, #12
 8005d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d70:	bfbc      	itt	lt
 8005d72:	464b      	movlt	r3, r9
 8005d74:	46a1      	movlt	r9, r4
 8005d76:	4630      	mov	r0, r6
 8005d78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d7c:	bfba      	itte	lt
 8005d7e:	461c      	movlt	r4, r3
 8005d80:	2501      	movlt	r5, #1
 8005d82:	2500      	movge	r5, #0
 8005d84:	f7ff fd40 	bl	8005808 <_Balloc>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	b918      	cbnz	r0, 8005d94 <__mdiff+0x60>
 8005d8c:	4b31      	ldr	r3, [pc, #196]	@ (8005e54 <__mdiff+0x120>)
 8005d8e:	f240 2145 	movw	r1, #581	@ 0x245
 8005d92:	e7e3      	b.n	8005d5c <__mdiff+0x28>
 8005d94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005d98:	6926      	ldr	r6, [r4, #16]
 8005d9a:	60c5      	str	r5, [r0, #12]
 8005d9c:	f109 0310 	add.w	r3, r9, #16
 8005da0:	f109 0514 	add.w	r5, r9, #20
 8005da4:	f104 0e14 	add.w	lr, r4, #20
 8005da8:	f100 0b14 	add.w	fp, r0, #20
 8005dac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005db0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	46d9      	mov	r9, fp
 8005db8:	f04f 0c00 	mov.w	ip, #0
 8005dbc:	9b01      	ldr	r3, [sp, #4]
 8005dbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005dc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	fa1f f38a 	uxth.w	r3, sl
 8005dcc:	4619      	mov	r1, r3
 8005dce:	b283      	uxth	r3, r0
 8005dd0:	1acb      	subs	r3, r1, r3
 8005dd2:	0c00      	lsrs	r0, r0, #16
 8005dd4:	4463      	add	r3, ip
 8005dd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005dda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005de4:	4576      	cmp	r6, lr
 8005de6:	f849 3b04 	str.w	r3, [r9], #4
 8005dea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005dee:	d8e5      	bhi.n	8005dbc <__mdiff+0x88>
 8005df0:	1b33      	subs	r3, r6, r4
 8005df2:	3b15      	subs	r3, #21
 8005df4:	f023 0303 	bic.w	r3, r3, #3
 8005df8:	3415      	adds	r4, #21
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	42a6      	cmp	r6, r4
 8005dfe:	bf38      	it	cc
 8005e00:	2304      	movcc	r3, #4
 8005e02:	441d      	add	r5, r3
 8005e04:	445b      	add	r3, fp
 8005e06:	461e      	mov	r6, r3
 8005e08:	462c      	mov	r4, r5
 8005e0a:	4544      	cmp	r4, r8
 8005e0c:	d30e      	bcc.n	8005e2c <__mdiff+0xf8>
 8005e0e:	f108 0103 	add.w	r1, r8, #3
 8005e12:	1b49      	subs	r1, r1, r5
 8005e14:	f021 0103 	bic.w	r1, r1, #3
 8005e18:	3d03      	subs	r5, #3
 8005e1a:	45a8      	cmp	r8, r5
 8005e1c:	bf38      	it	cc
 8005e1e:	2100      	movcc	r1, #0
 8005e20:	440b      	add	r3, r1
 8005e22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e26:	b191      	cbz	r1, 8005e4e <__mdiff+0x11a>
 8005e28:	6117      	str	r7, [r2, #16]
 8005e2a:	e79d      	b.n	8005d68 <__mdiff+0x34>
 8005e2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e30:	46e6      	mov	lr, ip
 8005e32:	0c08      	lsrs	r0, r1, #16
 8005e34:	fa1c fc81 	uxtah	ip, ip, r1
 8005e38:	4471      	add	r1, lr
 8005e3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005e3e:	b289      	uxth	r1, r1
 8005e40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e44:	f846 1b04 	str.w	r1, [r6], #4
 8005e48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e4c:	e7dd      	b.n	8005e0a <__mdiff+0xd6>
 8005e4e:	3f01      	subs	r7, #1
 8005e50:	e7e7      	b.n	8005e22 <__mdiff+0xee>
 8005e52:	bf00      	nop
 8005e54:	080067b8 	.word	0x080067b8
 8005e58:	080067c9 	.word	0x080067c9

08005e5c <__d2b>:
 8005e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e60:	460f      	mov	r7, r1
 8005e62:	2101      	movs	r1, #1
 8005e64:	ec59 8b10 	vmov	r8, r9, d0
 8005e68:	4616      	mov	r6, r2
 8005e6a:	f7ff fccd 	bl	8005808 <_Balloc>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	b930      	cbnz	r0, 8005e80 <__d2b+0x24>
 8005e72:	4602      	mov	r2, r0
 8005e74:	4b23      	ldr	r3, [pc, #140]	@ (8005f04 <__d2b+0xa8>)
 8005e76:	4824      	ldr	r0, [pc, #144]	@ (8005f08 <__d2b+0xac>)
 8005e78:	f240 310f 	movw	r1, #783	@ 0x30f
 8005e7c:	f000 f910 	bl	80060a0 <__assert_func>
 8005e80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e88:	b10d      	cbz	r5, 8005e8e <__d2b+0x32>
 8005e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	f1b8 0300 	subs.w	r3, r8, #0
 8005e94:	d023      	beq.n	8005ede <__d2b+0x82>
 8005e96:	4668      	mov	r0, sp
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	f7ff fd7c 	bl	8005996 <__lo0bits>
 8005e9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005ea2:	b1d0      	cbz	r0, 8005eda <__d2b+0x7e>
 8005ea4:	f1c0 0320 	rsb	r3, r0, #32
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	430b      	orrs	r3, r1
 8005eae:	40c2      	lsrs	r2, r0
 8005eb0:	6163      	str	r3, [r4, #20]
 8005eb2:	9201      	str	r2, [sp, #4]
 8005eb4:	9b01      	ldr	r3, [sp, #4]
 8005eb6:	61a3      	str	r3, [r4, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	bf0c      	ite	eq
 8005ebc:	2201      	moveq	r2, #1
 8005ebe:	2202      	movne	r2, #2
 8005ec0:	6122      	str	r2, [r4, #16]
 8005ec2:	b1a5      	cbz	r5, 8005eee <__d2b+0x92>
 8005ec4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ec8:	4405      	add	r5, r0
 8005eca:	603d      	str	r5, [r7, #0]
 8005ecc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005ed0:	6030      	str	r0, [r6, #0]
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	b003      	add	sp, #12
 8005ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005eda:	6161      	str	r1, [r4, #20]
 8005edc:	e7ea      	b.n	8005eb4 <__d2b+0x58>
 8005ede:	a801      	add	r0, sp, #4
 8005ee0:	f7ff fd59 	bl	8005996 <__lo0bits>
 8005ee4:	9b01      	ldr	r3, [sp, #4]
 8005ee6:	6163      	str	r3, [r4, #20]
 8005ee8:	3020      	adds	r0, #32
 8005eea:	2201      	movs	r2, #1
 8005eec:	e7e8      	b.n	8005ec0 <__d2b+0x64>
 8005eee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ef2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005ef6:	6038      	str	r0, [r7, #0]
 8005ef8:	6918      	ldr	r0, [r3, #16]
 8005efa:	f7ff fd2d 	bl	8005958 <__hi0bits>
 8005efe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f02:	e7e5      	b.n	8005ed0 <__d2b+0x74>
 8005f04:	080067b8 	.word	0x080067b8
 8005f08:	080067c9 	.word	0x080067c9

08005f0c <__sflush_r>:
 8005f0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f14:	0716      	lsls	r6, r2, #28
 8005f16:	4605      	mov	r5, r0
 8005f18:	460c      	mov	r4, r1
 8005f1a:	d454      	bmi.n	8005fc6 <__sflush_r+0xba>
 8005f1c:	684b      	ldr	r3, [r1, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	dc02      	bgt.n	8005f28 <__sflush_r+0x1c>
 8005f22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dd48      	ble.n	8005fba <__sflush_r+0xae>
 8005f28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f2a:	2e00      	cmp	r6, #0
 8005f2c:	d045      	beq.n	8005fba <__sflush_r+0xae>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f34:	682f      	ldr	r7, [r5, #0]
 8005f36:	6a21      	ldr	r1, [r4, #32]
 8005f38:	602b      	str	r3, [r5, #0]
 8005f3a:	d030      	beq.n	8005f9e <__sflush_r+0x92>
 8005f3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f3e:	89a3      	ldrh	r3, [r4, #12]
 8005f40:	0759      	lsls	r1, r3, #29
 8005f42:	d505      	bpl.n	8005f50 <__sflush_r+0x44>
 8005f44:	6863      	ldr	r3, [r4, #4]
 8005f46:	1ad2      	subs	r2, r2, r3
 8005f48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f4a:	b10b      	cbz	r3, 8005f50 <__sflush_r+0x44>
 8005f4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f4e:	1ad2      	subs	r2, r2, r3
 8005f50:	2300      	movs	r3, #0
 8005f52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f54:	6a21      	ldr	r1, [r4, #32]
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b0      	blx	r6
 8005f5a:	1c43      	adds	r3, r0, #1
 8005f5c:	89a3      	ldrh	r3, [r4, #12]
 8005f5e:	d106      	bne.n	8005f6e <__sflush_r+0x62>
 8005f60:	6829      	ldr	r1, [r5, #0]
 8005f62:	291d      	cmp	r1, #29
 8005f64:	d82b      	bhi.n	8005fbe <__sflush_r+0xb2>
 8005f66:	4a2a      	ldr	r2, [pc, #168]	@ (8006010 <__sflush_r+0x104>)
 8005f68:	410a      	asrs	r2, r1
 8005f6a:	07d6      	lsls	r6, r2, #31
 8005f6c:	d427      	bmi.n	8005fbe <__sflush_r+0xb2>
 8005f6e:	2200      	movs	r2, #0
 8005f70:	6062      	str	r2, [r4, #4]
 8005f72:	04d9      	lsls	r1, r3, #19
 8005f74:	6922      	ldr	r2, [r4, #16]
 8005f76:	6022      	str	r2, [r4, #0]
 8005f78:	d504      	bpl.n	8005f84 <__sflush_r+0x78>
 8005f7a:	1c42      	adds	r2, r0, #1
 8005f7c:	d101      	bne.n	8005f82 <__sflush_r+0x76>
 8005f7e:	682b      	ldr	r3, [r5, #0]
 8005f80:	b903      	cbnz	r3, 8005f84 <__sflush_r+0x78>
 8005f82:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f86:	602f      	str	r7, [r5, #0]
 8005f88:	b1b9      	cbz	r1, 8005fba <__sflush_r+0xae>
 8005f8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f8e:	4299      	cmp	r1, r3
 8005f90:	d002      	beq.n	8005f98 <__sflush_r+0x8c>
 8005f92:	4628      	mov	r0, r5
 8005f94:	f7ff fb38 	bl	8005608 <_free_r>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f9c:	e00d      	b.n	8005fba <__sflush_r+0xae>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b0      	blx	r6
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	1c50      	adds	r0, r2, #1
 8005fa8:	d1c9      	bne.n	8005f3e <__sflush_r+0x32>
 8005faa:	682b      	ldr	r3, [r5, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0c6      	beq.n	8005f3e <__sflush_r+0x32>
 8005fb0:	2b1d      	cmp	r3, #29
 8005fb2:	d001      	beq.n	8005fb8 <__sflush_r+0xac>
 8005fb4:	2b16      	cmp	r3, #22
 8005fb6:	d11e      	bne.n	8005ff6 <__sflush_r+0xea>
 8005fb8:	602f      	str	r7, [r5, #0]
 8005fba:	2000      	movs	r0, #0
 8005fbc:	e022      	b.n	8006004 <__sflush_r+0xf8>
 8005fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fc2:	b21b      	sxth	r3, r3
 8005fc4:	e01b      	b.n	8005ffe <__sflush_r+0xf2>
 8005fc6:	690f      	ldr	r7, [r1, #16]
 8005fc8:	2f00      	cmp	r7, #0
 8005fca:	d0f6      	beq.n	8005fba <__sflush_r+0xae>
 8005fcc:	0793      	lsls	r3, r2, #30
 8005fce:	680e      	ldr	r6, [r1, #0]
 8005fd0:	bf08      	it	eq
 8005fd2:	694b      	ldreq	r3, [r1, #20]
 8005fd4:	600f      	str	r7, [r1, #0]
 8005fd6:	bf18      	it	ne
 8005fd8:	2300      	movne	r3, #0
 8005fda:	eba6 0807 	sub.w	r8, r6, r7
 8005fde:	608b      	str	r3, [r1, #8]
 8005fe0:	f1b8 0f00 	cmp.w	r8, #0
 8005fe4:	dde9      	ble.n	8005fba <__sflush_r+0xae>
 8005fe6:	6a21      	ldr	r1, [r4, #32]
 8005fe8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005fea:	4643      	mov	r3, r8
 8005fec:	463a      	mov	r2, r7
 8005fee:	4628      	mov	r0, r5
 8005ff0:	47b0      	blx	r6
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	dc08      	bgt.n	8006008 <__sflush_r+0xfc>
 8005ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ffe:	81a3      	strh	r3, [r4, #12]
 8006000:	f04f 30ff 	mov.w	r0, #4294967295
 8006004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006008:	4407      	add	r7, r0
 800600a:	eba8 0800 	sub.w	r8, r8, r0
 800600e:	e7e7      	b.n	8005fe0 <__sflush_r+0xd4>
 8006010:	dfbffffe 	.word	0xdfbffffe

08006014 <_fflush_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	690b      	ldr	r3, [r1, #16]
 8006018:	4605      	mov	r5, r0
 800601a:	460c      	mov	r4, r1
 800601c:	b913      	cbnz	r3, 8006024 <_fflush_r+0x10>
 800601e:	2500      	movs	r5, #0
 8006020:	4628      	mov	r0, r5
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	b118      	cbz	r0, 800602e <_fflush_r+0x1a>
 8006026:	6a03      	ldr	r3, [r0, #32]
 8006028:	b90b      	cbnz	r3, 800602e <_fflush_r+0x1a>
 800602a:	f7fe fba5 	bl	8004778 <__sinit>
 800602e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0f3      	beq.n	800601e <_fflush_r+0xa>
 8006036:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006038:	07d0      	lsls	r0, r2, #31
 800603a:	d404      	bmi.n	8006046 <_fflush_r+0x32>
 800603c:	0599      	lsls	r1, r3, #22
 800603e:	d402      	bmi.n	8006046 <_fflush_r+0x32>
 8006040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006042:	f7fe fc90 	bl	8004966 <__retarget_lock_acquire_recursive>
 8006046:	4628      	mov	r0, r5
 8006048:	4621      	mov	r1, r4
 800604a:	f7ff ff5f 	bl	8005f0c <__sflush_r>
 800604e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006050:	07da      	lsls	r2, r3, #31
 8006052:	4605      	mov	r5, r0
 8006054:	d4e4      	bmi.n	8006020 <_fflush_r+0xc>
 8006056:	89a3      	ldrh	r3, [r4, #12]
 8006058:	059b      	lsls	r3, r3, #22
 800605a:	d4e1      	bmi.n	8006020 <_fflush_r+0xc>
 800605c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800605e:	f7fe fc83 	bl	8004968 <__retarget_lock_release_recursive>
 8006062:	e7dd      	b.n	8006020 <_fflush_r+0xc>

08006064 <_sbrk_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d06      	ldr	r5, [pc, #24]	@ (8006080 <_sbrk_r+0x1c>)
 8006068:	2300      	movs	r3, #0
 800606a:	4604      	mov	r4, r0
 800606c:	4608      	mov	r0, r1
 800606e:	602b      	str	r3, [r5, #0]
 8006070:	f7fb f954 	bl	800131c <_sbrk>
 8006074:	1c43      	adds	r3, r0, #1
 8006076:	d102      	bne.n	800607e <_sbrk_r+0x1a>
 8006078:	682b      	ldr	r3, [r5, #0]
 800607a:	b103      	cbz	r3, 800607e <_sbrk_r+0x1a>
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	2000038c 	.word	0x2000038c

08006084 <memcpy>:
 8006084:	440a      	add	r2, r1
 8006086:	4291      	cmp	r1, r2
 8006088:	f100 33ff 	add.w	r3, r0, #4294967295
 800608c:	d100      	bne.n	8006090 <memcpy+0xc>
 800608e:	4770      	bx	lr
 8006090:	b510      	push	{r4, lr}
 8006092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800609a:	4291      	cmp	r1, r2
 800609c:	d1f9      	bne.n	8006092 <memcpy+0xe>
 800609e:	bd10      	pop	{r4, pc}

080060a0 <__assert_func>:
 80060a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060a2:	4614      	mov	r4, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4b09      	ldr	r3, [pc, #36]	@ (80060cc <__assert_func+0x2c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4605      	mov	r5, r0
 80060ac:	68d8      	ldr	r0, [r3, #12]
 80060ae:	b954      	cbnz	r4, 80060c6 <__assert_func+0x26>
 80060b0:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <__assert_func+0x30>)
 80060b2:	461c      	mov	r4, r3
 80060b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060b8:	9100      	str	r1, [sp, #0]
 80060ba:	462b      	mov	r3, r5
 80060bc:	4905      	ldr	r1, [pc, #20]	@ (80060d4 <__assert_func+0x34>)
 80060be:	f000 f841 	bl	8006144 <fiprintf>
 80060c2:	f000 f851 	bl	8006168 <abort>
 80060c6:	4b04      	ldr	r3, [pc, #16]	@ (80060d8 <__assert_func+0x38>)
 80060c8:	e7f4      	b.n	80060b4 <__assert_func+0x14>
 80060ca:	bf00      	nop
 80060cc:	2000001c 	.word	0x2000001c
 80060d0:	08006965 	.word	0x08006965
 80060d4:	08006937 	.word	0x08006937
 80060d8:	0800692a 	.word	0x0800692a

080060dc <_calloc_r>:
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	fba1 5402 	umull	r5, r4, r1, r2
 80060e2:	b93c      	cbnz	r4, 80060f4 <_calloc_r+0x18>
 80060e4:	4629      	mov	r1, r5
 80060e6:	f7ff fb03 	bl	80056f0 <_malloc_r>
 80060ea:	4606      	mov	r6, r0
 80060ec:	b928      	cbnz	r0, 80060fa <_calloc_r+0x1e>
 80060ee:	2600      	movs	r6, #0
 80060f0:	4630      	mov	r0, r6
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	220c      	movs	r2, #12
 80060f6:	6002      	str	r2, [r0, #0]
 80060f8:	e7f9      	b.n	80060ee <_calloc_r+0x12>
 80060fa:	462a      	mov	r2, r5
 80060fc:	4621      	mov	r1, r4
 80060fe:	f7fe fbb4 	bl	800486a <memset>
 8006102:	e7f5      	b.n	80060f0 <_calloc_r+0x14>

08006104 <__ascii_mbtowc>:
 8006104:	b082      	sub	sp, #8
 8006106:	b901      	cbnz	r1, 800610a <__ascii_mbtowc+0x6>
 8006108:	a901      	add	r1, sp, #4
 800610a:	b142      	cbz	r2, 800611e <__ascii_mbtowc+0x1a>
 800610c:	b14b      	cbz	r3, 8006122 <__ascii_mbtowc+0x1e>
 800610e:	7813      	ldrb	r3, [r2, #0]
 8006110:	600b      	str	r3, [r1, #0]
 8006112:	7812      	ldrb	r2, [r2, #0]
 8006114:	1e10      	subs	r0, r2, #0
 8006116:	bf18      	it	ne
 8006118:	2001      	movne	r0, #1
 800611a:	b002      	add	sp, #8
 800611c:	4770      	bx	lr
 800611e:	4610      	mov	r0, r2
 8006120:	e7fb      	b.n	800611a <__ascii_mbtowc+0x16>
 8006122:	f06f 0001 	mvn.w	r0, #1
 8006126:	e7f8      	b.n	800611a <__ascii_mbtowc+0x16>

08006128 <__ascii_wctomb>:
 8006128:	4603      	mov	r3, r0
 800612a:	4608      	mov	r0, r1
 800612c:	b141      	cbz	r1, 8006140 <__ascii_wctomb+0x18>
 800612e:	2aff      	cmp	r2, #255	@ 0xff
 8006130:	d904      	bls.n	800613c <__ascii_wctomb+0x14>
 8006132:	228a      	movs	r2, #138	@ 0x8a
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	f04f 30ff 	mov.w	r0, #4294967295
 800613a:	4770      	bx	lr
 800613c:	700a      	strb	r2, [r1, #0]
 800613e:	2001      	movs	r0, #1
 8006140:	4770      	bx	lr
	...

08006144 <fiprintf>:
 8006144:	b40e      	push	{r1, r2, r3}
 8006146:	b503      	push	{r0, r1, lr}
 8006148:	4601      	mov	r1, r0
 800614a:	ab03      	add	r3, sp, #12
 800614c:	4805      	ldr	r0, [pc, #20]	@ (8006164 <fiprintf+0x20>)
 800614e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006152:	6800      	ldr	r0, [r0, #0]
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	f000 f837 	bl	80061c8 <_vfiprintf_r>
 800615a:	b002      	add	sp, #8
 800615c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006160:	b003      	add	sp, #12
 8006162:	4770      	bx	lr
 8006164:	2000001c 	.word	0x2000001c

08006168 <abort>:
 8006168:	b508      	push	{r3, lr}
 800616a:	2006      	movs	r0, #6
 800616c:	f000 fa00 	bl	8006570 <raise>
 8006170:	2001      	movs	r0, #1
 8006172:	f7fb f85b 	bl	800122c <_exit>

08006176 <__sfputc_r>:
 8006176:	6893      	ldr	r3, [r2, #8]
 8006178:	3b01      	subs	r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	b410      	push	{r4}
 800617e:	6093      	str	r3, [r2, #8]
 8006180:	da08      	bge.n	8006194 <__sfputc_r+0x1e>
 8006182:	6994      	ldr	r4, [r2, #24]
 8006184:	42a3      	cmp	r3, r4
 8006186:	db01      	blt.n	800618c <__sfputc_r+0x16>
 8006188:	290a      	cmp	r1, #10
 800618a:	d103      	bne.n	8006194 <__sfputc_r+0x1e>
 800618c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006190:	f000 b932 	b.w	80063f8 <__swbuf_r>
 8006194:	6813      	ldr	r3, [r2, #0]
 8006196:	1c58      	adds	r0, r3, #1
 8006198:	6010      	str	r0, [r2, #0]
 800619a:	7019      	strb	r1, [r3, #0]
 800619c:	4608      	mov	r0, r1
 800619e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <__sfputs_r>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	4606      	mov	r6, r0
 80061a8:	460f      	mov	r7, r1
 80061aa:	4614      	mov	r4, r2
 80061ac:	18d5      	adds	r5, r2, r3
 80061ae:	42ac      	cmp	r4, r5
 80061b0:	d101      	bne.n	80061b6 <__sfputs_r+0x12>
 80061b2:	2000      	movs	r0, #0
 80061b4:	e007      	b.n	80061c6 <__sfputs_r+0x22>
 80061b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ba:	463a      	mov	r2, r7
 80061bc:	4630      	mov	r0, r6
 80061be:	f7ff ffda 	bl	8006176 <__sfputc_r>
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	d1f3      	bne.n	80061ae <__sfputs_r+0xa>
 80061c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061c8 <_vfiprintf_r>:
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	460d      	mov	r5, r1
 80061ce:	b09d      	sub	sp, #116	@ 0x74
 80061d0:	4614      	mov	r4, r2
 80061d2:	4698      	mov	r8, r3
 80061d4:	4606      	mov	r6, r0
 80061d6:	b118      	cbz	r0, 80061e0 <_vfiprintf_r+0x18>
 80061d8:	6a03      	ldr	r3, [r0, #32]
 80061da:	b90b      	cbnz	r3, 80061e0 <_vfiprintf_r+0x18>
 80061dc:	f7fe facc 	bl	8004778 <__sinit>
 80061e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061e2:	07d9      	lsls	r1, r3, #31
 80061e4:	d405      	bmi.n	80061f2 <_vfiprintf_r+0x2a>
 80061e6:	89ab      	ldrh	r3, [r5, #12]
 80061e8:	059a      	lsls	r2, r3, #22
 80061ea:	d402      	bmi.n	80061f2 <_vfiprintf_r+0x2a>
 80061ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061ee:	f7fe fbba 	bl	8004966 <__retarget_lock_acquire_recursive>
 80061f2:	89ab      	ldrh	r3, [r5, #12]
 80061f4:	071b      	lsls	r3, r3, #28
 80061f6:	d501      	bpl.n	80061fc <_vfiprintf_r+0x34>
 80061f8:	692b      	ldr	r3, [r5, #16]
 80061fa:	b99b      	cbnz	r3, 8006224 <_vfiprintf_r+0x5c>
 80061fc:	4629      	mov	r1, r5
 80061fe:	4630      	mov	r0, r6
 8006200:	f000 f938 	bl	8006474 <__swsetup_r>
 8006204:	b170      	cbz	r0, 8006224 <_vfiprintf_r+0x5c>
 8006206:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006208:	07dc      	lsls	r4, r3, #31
 800620a:	d504      	bpl.n	8006216 <_vfiprintf_r+0x4e>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	b01d      	add	sp, #116	@ 0x74
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	0598      	lsls	r0, r3, #22
 800621a:	d4f7      	bmi.n	800620c <_vfiprintf_r+0x44>
 800621c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800621e:	f7fe fba3 	bl	8004968 <__retarget_lock_release_recursive>
 8006222:	e7f3      	b.n	800620c <_vfiprintf_r+0x44>
 8006224:	2300      	movs	r3, #0
 8006226:	9309      	str	r3, [sp, #36]	@ 0x24
 8006228:	2320      	movs	r3, #32
 800622a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800622e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006232:	2330      	movs	r3, #48	@ 0x30
 8006234:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80063e4 <_vfiprintf_r+0x21c>
 8006238:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800623c:	f04f 0901 	mov.w	r9, #1
 8006240:	4623      	mov	r3, r4
 8006242:	469a      	mov	sl, r3
 8006244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006248:	b10a      	cbz	r2, 800624e <_vfiprintf_r+0x86>
 800624a:	2a25      	cmp	r2, #37	@ 0x25
 800624c:	d1f9      	bne.n	8006242 <_vfiprintf_r+0x7a>
 800624e:	ebba 0b04 	subs.w	fp, sl, r4
 8006252:	d00b      	beq.n	800626c <_vfiprintf_r+0xa4>
 8006254:	465b      	mov	r3, fp
 8006256:	4622      	mov	r2, r4
 8006258:	4629      	mov	r1, r5
 800625a:	4630      	mov	r0, r6
 800625c:	f7ff ffa2 	bl	80061a4 <__sfputs_r>
 8006260:	3001      	adds	r0, #1
 8006262:	f000 80a7 	beq.w	80063b4 <_vfiprintf_r+0x1ec>
 8006266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006268:	445a      	add	r2, fp
 800626a:	9209      	str	r2, [sp, #36]	@ 0x24
 800626c:	f89a 3000 	ldrb.w	r3, [sl]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 809f 	beq.w	80063b4 <_vfiprintf_r+0x1ec>
 8006276:	2300      	movs	r3, #0
 8006278:	f04f 32ff 	mov.w	r2, #4294967295
 800627c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006280:	f10a 0a01 	add.w	sl, sl, #1
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	9307      	str	r3, [sp, #28]
 8006288:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800628c:	931a      	str	r3, [sp, #104]	@ 0x68
 800628e:	4654      	mov	r4, sl
 8006290:	2205      	movs	r2, #5
 8006292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006296:	4853      	ldr	r0, [pc, #332]	@ (80063e4 <_vfiprintf_r+0x21c>)
 8006298:	f7f9 ff9a 	bl	80001d0 <memchr>
 800629c:	9a04      	ldr	r2, [sp, #16]
 800629e:	b9d8      	cbnz	r0, 80062d8 <_vfiprintf_r+0x110>
 80062a0:	06d1      	lsls	r1, r2, #27
 80062a2:	bf44      	itt	mi
 80062a4:	2320      	movmi	r3, #32
 80062a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062aa:	0713      	lsls	r3, r2, #28
 80062ac:	bf44      	itt	mi
 80062ae:	232b      	movmi	r3, #43	@ 0x2b
 80062b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062b4:	f89a 3000 	ldrb.w	r3, [sl]
 80062b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80062ba:	d015      	beq.n	80062e8 <_vfiprintf_r+0x120>
 80062bc:	9a07      	ldr	r2, [sp, #28]
 80062be:	4654      	mov	r4, sl
 80062c0:	2000      	movs	r0, #0
 80062c2:	f04f 0c0a 	mov.w	ip, #10
 80062c6:	4621      	mov	r1, r4
 80062c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062cc:	3b30      	subs	r3, #48	@ 0x30
 80062ce:	2b09      	cmp	r3, #9
 80062d0:	d94b      	bls.n	800636a <_vfiprintf_r+0x1a2>
 80062d2:	b1b0      	cbz	r0, 8006302 <_vfiprintf_r+0x13a>
 80062d4:	9207      	str	r2, [sp, #28]
 80062d6:	e014      	b.n	8006302 <_vfiprintf_r+0x13a>
 80062d8:	eba0 0308 	sub.w	r3, r0, r8
 80062dc:	fa09 f303 	lsl.w	r3, r9, r3
 80062e0:	4313      	orrs	r3, r2
 80062e2:	9304      	str	r3, [sp, #16]
 80062e4:	46a2      	mov	sl, r4
 80062e6:	e7d2      	b.n	800628e <_vfiprintf_r+0xc6>
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	1d19      	adds	r1, r3, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	9103      	str	r1, [sp, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bfbb      	ittet	lt
 80062f4:	425b      	neglt	r3, r3
 80062f6:	f042 0202 	orrlt.w	r2, r2, #2
 80062fa:	9307      	strge	r3, [sp, #28]
 80062fc:	9307      	strlt	r3, [sp, #28]
 80062fe:	bfb8      	it	lt
 8006300:	9204      	strlt	r2, [sp, #16]
 8006302:	7823      	ldrb	r3, [r4, #0]
 8006304:	2b2e      	cmp	r3, #46	@ 0x2e
 8006306:	d10a      	bne.n	800631e <_vfiprintf_r+0x156>
 8006308:	7863      	ldrb	r3, [r4, #1]
 800630a:	2b2a      	cmp	r3, #42	@ 0x2a
 800630c:	d132      	bne.n	8006374 <_vfiprintf_r+0x1ac>
 800630e:	9b03      	ldr	r3, [sp, #12]
 8006310:	1d1a      	adds	r2, r3, #4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	9203      	str	r2, [sp, #12]
 8006316:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800631a:	3402      	adds	r4, #2
 800631c:	9305      	str	r3, [sp, #20]
 800631e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063f4 <_vfiprintf_r+0x22c>
 8006322:	7821      	ldrb	r1, [r4, #0]
 8006324:	2203      	movs	r2, #3
 8006326:	4650      	mov	r0, sl
 8006328:	f7f9 ff52 	bl	80001d0 <memchr>
 800632c:	b138      	cbz	r0, 800633e <_vfiprintf_r+0x176>
 800632e:	9b04      	ldr	r3, [sp, #16]
 8006330:	eba0 000a 	sub.w	r0, r0, sl
 8006334:	2240      	movs	r2, #64	@ 0x40
 8006336:	4082      	lsls	r2, r0
 8006338:	4313      	orrs	r3, r2
 800633a:	3401      	adds	r4, #1
 800633c:	9304      	str	r3, [sp, #16]
 800633e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006342:	4829      	ldr	r0, [pc, #164]	@ (80063e8 <_vfiprintf_r+0x220>)
 8006344:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006348:	2206      	movs	r2, #6
 800634a:	f7f9 ff41 	bl	80001d0 <memchr>
 800634e:	2800      	cmp	r0, #0
 8006350:	d03f      	beq.n	80063d2 <_vfiprintf_r+0x20a>
 8006352:	4b26      	ldr	r3, [pc, #152]	@ (80063ec <_vfiprintf_r+0x224>)
 8006354:	bb1b      	cbnz	r3, 800639e <_vfiprintf_r+0x1d6>
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	3307      	adds	r3, #7
 800635a:	f023 0307 	bic.w	r3, r3, #7
 800635e:	3308      	adds	r3, #8
 8006360:	9303      	str	r3, [sp, #12]
 8006362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006364:	443b      	add	r3, r7
 8006366:	9309      	str	r3, [sp, #36]	@ 0x24
 8006368:	e76a      	b.n	8006240 <_vfiprintf_r+0x78>
 800636a:	fb0c 3202 	mla	r2, ip, r2, r3
 800636e:	460c      	mov	r4, r1
 8006370:	2001      	movs	r0, #1
 8006372:	e7a8      	b.n	80062c6 <_vfiprintf_r+0xfe>
 8006374:	2300      	movs	r3, #0
 8006376:	3401      	adds	r4, #1
 8006378:	9305      	str	r3, [sp, #20]
 800637a:	4619      	mov	r1, r3
 800637c:	f04f 0c0a 	mov.w	ip, #10
 8006380:	4620      	mov	r0, r4
 8006382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006386:	3a30      	subs	r2, #48	@ 0x30
 8006388:	2a09      	cmp	r2, #9
 800638a:	d903      	bls.n	8006394 <_vfiprintf_r+0x1cc>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0c6      	beq.n	800631e <_vfiprintf_r+0x156>
 8006390:	9105      	str	r1, [sp, #20]
 8006392:	e7c4      	b.n	800631e <_vfiprintf_r+0x156>
 8006394:	fb0c 2101 	mla	r1, ip, r1, r2
 8006398:	4604      	mov	r4, r0
 800639a:	2301      	movs	r3, #1
 800639c:	e7f0      	b.n	8006380 <_vfiprintf_r+0x1b8>
 800639e:	ab03      	add	r3, sp, #12
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	462a      	mov	r2, r5
 80063a4:	4b12      	ldr	r3, [pc, #72]	@ (80063f0 <_vfiprintf_r+0x228>)
 80063a6:	a904      	add	r1, sp, #16
 80063a8:	4630      	mov	r0, r6
 80063aa:	f7fd fda1 	bl	8003ef0 <_printf_float>
 80063ae:	4607      	mov	r7, r0
 80063b0:	1c78      	adds	r0, r7, #1
 80063b2:	d1d6      	bne.n	8006362 <_vfiprintf_r+0x19a>
 80063b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063b6:	07d9      	lsls	r1, r3, #31
 80063b8:	d405      	bmi.n	80063c6 <_vfiprintf_r+0x1fe>
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	059a      	lsls	r2, r3, #22
 80063be:	d402      	bmi.n	80063c6 <_vfiprintf_r+0x1fe>
 80063c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063c2:	f7fe fad1 	bl	8004968 <__retarget_lock_release_recursive>
 80063c6:	89ab      	ldrh	r3, [r5, #12]
 80063c8:	065b      	lsls	r3, r3, #25
 80063ca:	f53f af1f 	bmi.w	800620c <_vfiprintf_r+0x44>
 80063ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80063d0:	e71e      	b.n	8006210 <_vfiprintf_r+0x48>
 80063d2:	ab03      	add	r3, sp, #12
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	462a      	mov	r2, r5
 80063d8:	4b05      	ldr	r3, [pc, #20]	@ (80063f0 <_vfiprintf_r+0x228>)
 80063da:	a904      	add	r1, sp, #16
 80063dc:	4630      	mov	r0, r6
 80063de:	f7fe f81f 	bl	8004420 <_printf_i>
 80063e2:	e7e4      	b.n	80063ae <_vfiprintf_r+0x1e6>
 80063e4:	08006a67 	.word	0x08006a67
 80063e8:	08006a71 	.word	0x08006a71
 80063ec:	08003ef1 	.word	0x08003ef1
 80063f0:	080061a5 	.word	0x080061a5
 80063f4:	08006a6d 	.word	0x08006a6d

080063f8 <__swbuf_r>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	460e      	mov	r6, r1
 80063fc:	4614      	mov	r4, r2
 80063fe:	4605      	mov	r5, r0
 8006400:	b118      	cbz	r0, 800640a <__swbuf_r+0x12>
 8006402:	6a03      	ldr	r3, [r0, #32]
 8006404:	b90b      	cbnz	r3, 800640a <__swbuf_r+0x12>
 8006406:	f7fe f9b7 	bl	8004778 <__sinit>
 800640a:	69a3      	ldr	r3, [r4, #24]
 800640c:	60a3      	str	r3, [r4, #8]
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	071a      	lsls	r2, r3, #28
 8006412:	d501      	bpl.n	8006418 <__swbuf_r+0x20>
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	b943      	cbnz	r3, 800642a <__swbuf_r+0x32>
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	f000 f82a 	bl	8006474 <__swsetup_r>
 8006420:	b118      	cbz	r0, 800642a <__swbuf_r+0x32>
 8006422:	f04f 37ff 	mov.w	r7, #4294967295
 8006426:	4638      	mov	r0, r7
 8006428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	6922      	ldr	r2, [r4, #16]
 800642e:	1a98      	subs	r0, r3, r2
 8006430:	6963      	ldr	r3, [r4, #20]
 8006432:	b2f6      	uxtb	r6, r6
 8006434:	4283      	cmp	r3, r0
 8006436:	4637      	mov	r7, r6
 8006438:	dc05      	bgt.n	8006446 <__swbuf_r+0x4e>
 800643a:	4621      	mov	r1, r4
 800643c:	4628      	mov	r0, r5
 800643e:	f7ff fde9 	bl	8006014 <_fflush_r>
 8006442:	2800      	cmp	r0, #0
 8006444:	d1ed      	bne.n	8006422 <__swbuf_r+0x2a>
 8006446:	68a3      	ldr	r3, [r4, #8]
 8006448:	3b01      	subs	r3, #1
 800644a:	60a3      	str	r3, [r4, #8]
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	701e      	strb	r6, [r3, #0]
 8006454:	6962      	ldr	r2, [r4, #20]
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	429a      	cmp	r2, r3
 800645a:	d004      	beq.n	8006466 <__swbuf_r+0x6e>
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	07db      	lsls	r3, r3, #31
 8006460:	d5e1      	bpl.n	8006426 <__swbuf_r+0x2e>
 8006462:	2e0a      	cmp	r6, #10
 8006464:	d1df      	bne.n	8006426 <__swbuf_r+0x2e>
 8006466:	4621      	mov	r1, r4
 8006468:	4628      	mov	r0, r5
 800646a:	f7ff fdd3 	bl	8006014 <_fflush_r>
 800646e:	2800      	cmp	r0, #0
 8006470:	d0d9      	beq.n	8006426 <__swbuf_r+0x2e>
 8006472:	e7d6      	b.n	8006422 <__swbuf_r+0x2a>

08006474 <__swsetup_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4b29      	ldr	r3, [pc, #164]	@ (800651c <__swsetup_r+0xa8>)
 8006478:	4605      	mov	r5, r0
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	460c      	mov	r4, r1
 800647e:	b118      	cbz	r0, 8006488 <__swsetup_r+0x14>
 8006480:	6a03      	ldr	r3, [r0, #32]
 8006482:	b90b      	cbnz	r3, 8006488 <__swsetup_r+0x14>
 8006484:	f7fe f978 	bl	8004778 <__sinit>
 8006488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800648c:	0719      	lsls	r1, r3, #28
 800648e:	d422      	bmi.n	80064d6 <__swsetup_r+0x62>
 8006490:	06da      	lsls	r2, r3, #27
 8006492:	d407      	bmi.n	80064a4 <__swsetup_r+0x30>
 8006494:	2209      	movs	r2, #9
 8006496:	602a      	str	r2, [r5, #0]
 8006498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	f04f 30ff 	mov.w	r0, #4294967295
 80064a2:	e033      	b.n	800650c <__swsetup_r+0x98>
 80064a4:	0758      	lsls	r0, r3, #29
 80064a6:	d512      	bpl.n	80064ce <__swsetup_r+0x5a>
 80064a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064aa:	b141      	cbz	r1, 80064be <__swsetup_r+0x4a>
 80064ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064b0:	4299      	cmp	r1, r3
 80064b2:	d002      	beq.n	80064ba <__swsetup_r+0x46>
 80064b4:	4628      	mov	r0, r5
 80064b6:	f7ff f8a7 	bl	8005608 <_free_r>
 80064ba:	2300      	movs	r3, #0
 80064bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	2300      	movs	r3, #0
 80064c8:	6063      	str	r3, [r4, #4]
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	f043 0308 	orr.w	r3, r3, #8
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	b94b      	cbnz	r3, 80064ee <__swsetup_r+0x7a>
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064e4:	d003      	beq.n	80064ee <__swsetup_r+0x7a>
 80064e6:	4621      	mov	r1, r4
 80064e8:	4628      	mov	r0, r5
 80064ea:	f000 f883 	bl	80065f4 <__smakebuf_r>
 80064ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f2:	f013 0201 	ands.w	r2, r3, #1
 80064f6:	d00a      	beq.n	800650e <__swsetup_r+0x9a>
 80064f8:	2200      	movs	r2, #0
 80064fa:	60a2      	str	r2, [r4, #8]
 80064fc:	6962      	ldr	r2, [r4, #20]
 80064fe:	4252      	negs	r2, r2
 8006500:	61a2      	str	r2, [r4, #24]
 8006502:	6922      	ldr	r2, [r4, #16]
 8006504:	b942      	cbnz	r2, 8006518 <__swsetup_r+0xa4>
 8006506:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800650a:	d1c5      	bne.n	8006498 <__swsetup_r+0x24>
 800650c:	bd38      	pop	{r3, r4, r5, pc}
 800650e:	0799      	lsls	r1, r3, #30
 8006510:	bf58      	it	pl
 8006512:	6962      	ldrpl	r2, [r4, #20]
 8006514:	60a2      	str	r2, [r4, #8]
 8006516:	e7f4      	b.n	8006502 <__swsetup_r+0x8e>
 8006518:	2000      	movs	r0, #0
 800651a:	e7f7      	b.n	800650c <__swsetup_r+0x98>
 800651c:	2000001c 	.word	0x2000001c

08006520 <_raise_r>:
 8006520:	291f      	cmp	r1, #31
 8006522:	b538      	push	{r3, r4, r5, lr}
 8006524:	4605      	mov	r5, r0
 8006526:	460c      	mov	r4, r1
 8006528:	d904      	bls.n	8006534 <_raise_r+0x14>
 800652a:	2316      	movs	r3, #22
 800652c:	6003      	str	r3, [r0, #0]
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006536:	b112      	cbz	r2, 800653e <_raise_r+0x1e>
 8006538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800653c:	b94b      	cbnz	r3, 8006552 <_raise_r+0x32>
 800653e:	4628      	mov	r0, r5
 8006540:	f000 f830 	bl	80065a4 <_getpid_r>
 8006544:	4622      	mov	r2, r4
 8006546:	4601      	mov	r1, r0
 8006548:	4628      	mov	r0, r5
 800654a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800654e:	f000 b817 	b.w	8006580 <_kill_r>
 8006552:	2b01      	cmp	r3, #1
 8006554:	d00a      	beq.n	800656c <_raise_r+0x4c>
 8006556:	1c59      	adds	r1, r3, #1
 8006558:	d103      	bne.n	8006562 <_raise_r+0x42>
 800655a:	2316      	movs	r3, #22
 800655c:	6003      	str	r3, [r0, #0]
 800655e:	2001      	movs	r0, #1
 8006560:	e7e7      	b.n	8006532 <_raise_r+0x12>
 8006562:	2100      	movs	r1, #0
 8006564:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006568:	4620      	mov	r0, r4
 800656a:	4798      	blx	r3
 800656c:	2000      	movs	r0, #0
 800656e:	e7e0      	b.n	8006532 <_raise_r+0x12>

08006570 <raise>:
 8006570:	4b02      	ldr	r3, [pc, #8]	@ (800657c <raise+0xc>)
 8006572:	4601      	mov	r1, r0
 8006574:	6818      	ldr	r0, [r3, #0]
 8006576:	f7ff bfd3 	b.w	8006520 <_raise_r>
 800657a:	bf00      	nop
 800657c:	2000001c 	.word	0x2000001c

08006580 <_kill_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4d07      	ldr	r5, [pc, #28]	@ (80065a0 <_kill_r+0x20>)
 8006584:	2300      	movs	r3, #0
 8006586:	4604      	mov	r4, r0
 8006588:	4608      	mov	r0, r1
 800658a:	4611      	mov	r1, r2
 800658c:	602b      	str	r3, [r5, #0]
 800658e:	f7fa fe3d 	bl	800120c <_kill>
 8006592:	1c43      	adds	r3, r0, #1
 8006594:	d102      	bne.n	800659c <_kill_r+0x1c>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	b103      	cbz	r3, 800659c <_kill_r+0x1c>
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	bd38      	pop	{r3, r4, r5, pc}
 800659e:	bf00      	nop
 80065a0:	2000038c 	.word	0x2000038c

080065a4 <_getpid_r>:
 80065a4:	f7fa be2a 	b.w	80011fc <_getpid>

080065a8 <__swhatbuf_r>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	460c      	mov	r4, r1
 80065ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b0:	2900      	cmp	r1, #0
 80065b2:	b096      	sub	sp, #88	@ 0x58
 80065b4:	4615      	mov	r5, r2
 80065b6:	461e      	mov	r6, r3
 80065b8:	da0d      	bge.n	80065d6 <__swhatbuf_r+0x2e>
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065c0:	f04f 0100 	mov.w	r1, #0
 80065c4:	bf14      	ite	ne
 80065c6:	2340      	movne	r3, #64	@ 0x40
 80065c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065cc:	2000      	movs	r0, #0
 80065ce:	6031      	str	r1, [r6, #0]
 80065d0:	602b      	str	r3, [r5, #0]
 80065d2:	b016      	add	sp, #88	@ 0x58
 80065d4:	bd70      	pop	{r4, r5, r6, pc}
 80065d6:	466a      	mov	r2, sp
 80065d8:	f000 f848 	bl	800666c <_fstat_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	dbec      	blt.n	80065ba <__swhatbuf_r+0x12>
 80065e0:	9901      	ldr	r1, [sp, #4]
 80065e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065ea:	4259      	negs	r1, r3
 80065ec:	4159      	adcs	r1, r3
 80065ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065f2:	e7eb      	b.n	80065cc <__swhatbuf_r+0x24>

080065f4 <__smakebuf_r>:
 80065f4:	898b      	ldrh	r3, [r1, #12]
 80065f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f8:	079d      	lsls	r5, r3, #30
 80065fa:	4606      	mov	r6, r0
 80065fc:	460c      	mov	r4, r1
 80065fe:	d507      	bpl.n	8006610 <__smakebuf_r+0x1c>
 8006600:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	2301      	movs	r3, #1
 800660a:	6163      	str	r3, [r4, #20]
 800660c:	b003      	add	sp, #12
 800660e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006610:	ab01      	add	r3, sp, #4
 8006612:	466a      	mov	r2, sp
 8006614:	f7ff ffc8 	bl	80065a8 <__swhatbuf_r>
 8006618:	9f00      	ldr	r7, [sp, #0]
 800661a:	4605      	mov	r5, r0
 800661c:	4639      	mov	r1, r7
 800661e:	4630      	mov	r0, r6
 8006620:	f7ff f866 	bl	80056f0 <_malloc_r>
 8006624:	b948      	cbnz	r0, 800663a <__smakebuf_r+0x46>
 8006626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800662a:	059a      	lsls	r2, r3, #22
 800662c:	d4ee      	bmi.n	800660c <__smakebuf_r+0x18>
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	f043 0302 	orr.w	r3, r3, #2
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	e7e2      	b.n	8006600 <__smakebuf_r+0xc>
 800663a:	89a3      	ldrh	r3, [r4, #12]
 800663c:	6020      	str	r0, [r4, #0]
 800663e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	9b01      	ldr	r3, [sp, #4]
 8006646:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800664a:	b15b      	cbz	r3, 8006664 <__smakebuf_r+0x70>
 800664c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006650:	4630      	mov	r0, r6
 8006652:	f000 f81d 	bl	8006690 <_isatty_r>
 8006656:	b128      	cbz	r0, 8006664 <__smakebuf_r+0x70>
 8006658:	89a3      	ldrh	r3, [r4, #12]
 800665a:	f023 0303 	bic.w	r3, r3, #3
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	81a3      	strh	r3, [r4, #12]
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	431d      	orrs	r5, r3
 8006668:	81a5      	strh	r5, [r4, #12]
 800666a:	e7cf      	b.n	800660c <__smakebuf_r+0x18>

0800666c <_fstat_r>:
 800666c:	b538      	push	{r3, r4, r5, lr}
 800666e:	4d07      	ldr	r5, [pc, #28]	@ (800668c <_fstat_r+0x20>)
 8006670:	2300      	movs	r3, #0
 8006672:	4604      	mov	r4, r0
 8006674:	4608      	mov	r0, r1
 8006676:	4611      	mov	r1, r2
 8006678:	602b      	str	r3, [r5, #0]
 800667a:	f7fa fe27 	bl	80012cc <_fstat>
 800667e:	1c43      	adds	r3, r0, #1
 8006680:	d102      	bne.n	8006688 <_fstat_r+0x1c>
 8006682:	682b      	ldr	r3, [r5, #0]
 8006684:	b103      	cbz	r3, 8006688 <_fstat_r+0x1c>
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	bd38      	pop	{r3, r4, r5, pc}
 800668a:	bf00      	nop
 800668c:	2000038c 	.word	0x2000038c

08006690 <_isatty_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4d06      	ldr	r5, [pc, #24]	@ (80066ac <_isatty_r+0x1c>)
 8006694:	2300      	movs	r3, #0
 8006696:	4604      	mov	r4, r0
 8006698:	4608      	mov	r0, r1
 800669a:	602b      	str	r3, [r5, #0]
 800669c:	f7fa fe26 	bl	80012ec <_isatty>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d102      	bne.n	80066aa <_isatty_r+0x1a>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	b103      	cbz	r3, 80066aa <_isatty_r+0x1a>
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	bd38      	pop	{r3, r4, r5, pc}
 80066ac:	2000038c 	.word	0x2000038c

080066b0 <_init>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	bf00      	nop
 80066b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066b6:	bc08      	pop	{r3}
 80066b8:	469e      	mov	lr, r3
 80066ba:	4770      	bx	lr

080066bc <_fini>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	bf00      	nop
 80066c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066c2:	bc08      	pop	{r3}
 80066c4:	469e      	mov	lr, r3
 80066c6:	4770      	bx	lr
