
FRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08009268  08009268  0000a268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009688  08009688  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009688  08009688  0000a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009690  08009690  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009690  08009690  0000a690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009694  08009694  0000a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009698  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  200001d4  0800986c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  0800986c  0000b5c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d7e  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba7  00000000  00000000  0001ff82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00022b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f28  00000000  00000000  00023e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004109  00000000  00000000  00024db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001814d  00000000  00000000  00028eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f82d3  00000000  00000000  00041006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001392d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006274  00000000  00000000  0013931c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0013f590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800924c 	.word	0x0800924c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800924c 	.word	0x0800924c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <FM24CL16B_Read_Data>:
    FM24CL16B_Read_Data(address);
}


uint8_t FM24CL16B_Read_Data(uint16_t address)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af04      	add	r7, sp, #16
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
    uint8_t read_data;
    HAL_I2C_Mem_Read(&hi2c1, FM_24CL16_Read, address, I2C_MEMADD_SIZE_8BIT, &read_data, 1, 0xff);
 8000f82:	88fa      	ldrh	r2, [r7, #6]
 8000f84:	23ff      	movs	r3, #255	@ 0xff
 8000f86:	9302      	str	r3, [sp, #8]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	f107 030f 	add.w	r3, r7, #15
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	21a1      	movs	r1, #161	@ 0xa1
 8000f96:	4807      	ldr	r0, [pc, #28]	@ (8000fb4 <FM24CL16B_Read_Data+0x3c>)
 8000f98:	f001 fc8c 	bl	80028b4 <HAL_I2C_Mem_Read>
    printf("Address: %d    Data: 0x%02X    Decimal: %d \r\n", address, read_data, read_data);
 8000f9c:	88f9      	ldrh	r1, [r7, #6]
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4804      	ldr	r0, [pc, #16]	@ (8000fb8 <FM24CL16B_Read_Data+0x40>)
 8000fa6:	f006 f9d7 	bl	8007358 <iprintf>
    return read_data;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200001f0 	.word	0x200001f0
 8000fb8:	08009288 	.word	0x08009288

08000fbc <Parameter_Write>:


void Parameter_Write(uint16_t param_address, float param_data)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	ed87 0a00 	vstr	s0, [r7]
 8000fc8:	80fb      	strh	r3, [r7, #6]
    uint16_t decimal_part;
    uint8_t low_byte1;
    uint8_t low_byte2;

    // Extract integer part and convert to bytes
    integer_part = (uint16_t)param_data;
 8000fca:	edd7 7a00 	vldr	s15, [r7]
 8000fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd2:	ee17 3a90 	vmov	r3, s15
 8000fd6:	81fb      	strh	r3, [r7, #14]
    high_byte1 = integer_part / 256;
 8000fd8:	89fb      	ldrh	r3, [r7, #14]
 8000fda:	0a1b      	lsrs	r3, r3, #8
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	72fb      	strb	r3, [r7, #11]
    high_byte2 = integer_part % 256;
 8000fe2:	89fb      	ldrh	r3, [r7, #14]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	72bb      	strb	r3, [r7, #10]

    // Extract decimal part and convert to bytes
    decimal_part = (param_data - integer_part) * 1000.0;
 8000fe8:	89fb      	ldrh	r3, [r7, #14]
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff2:	ed97 7a00 	vldr	s14, [r7]
 8000ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffa:	ee17 0a90 	vmov	r0, s15
 8000ffe:	f7ff faa3 	bl	8000548 <__aeabi_f2d>
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	4b39      	ldr	r3, [pc, #228]	@ (80010ec <Parameter_Write+0x130>)
 8001008:	f7ff faf6 	bl	80005f8 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fdc8 	bl	8000ba8 <__aeabi_d2uiz>
 8001018:	4603      	mov	r3, r0
 800101a:	81bb      	strh	r3, [r7, #12]
    low_byte1 = decimal_part / 256;
 800101c:	89bb      	ldrh	r3, [r7, #12]
 800101e:	0a1b      	lsrs	r3, r3, #8
 8001020:	b29b      	uxth	r3, r3
 8001022:	b2db      	uxtb	r3, r3
 8001024:	727b      	strb	r3, [r7, #9]
    low_byte2 = decimal_part % 256;
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	723b      	strb	r3, [r7, #8]

    // Write bytes to consecutive EEPROM addresses
    HAL_I2C_Mem_Write(&hi2c1, FM_24CL16_Write, param_address, I2C_MEMADD_SIZE_8BIT, &high_byte1, 1, 0xff);
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	23ff      	movs	r3, #255	@ 0xff
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2301      	movs	r3, #1
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	f107 030b 	add.w	r3, r7, #11
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	21a0      	movs	r1, #160	@ 0xa0
 8001040:	482b      	ldr	r0, [pc, #172]	@ (80010f0 <Parameter_Write+0x134>)
 8001042:	f001 fb23 	bl	800268c <HAL_I2C_Mem_Write>
    HAL_Delay(5); // Write delay
 8001046:	2005      	movs	r0, #5
 8001048:	f000 ff0e 	bl	8001e68 <HAL_Delay>
    HAL_I2C_Mem_Write(&hi2c1, FM_24CL16_Write, param_address+1, I2C_MEMADD_SIZE_8BIT, &high_byte2, 1, 0xff);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	3301      	adds	r3, #1
 8001050:	b29a      	uxth	r2, r3
 8001052:	23ff      	movs	r3, #255	@ 0xff
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	f107 030a 	add.w	r3, r7, #10
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2301      	movs	r3, #1
 8001062:	21a0      	movs	r1, #160	@ 0xa0
 8001064:	4822      	ldr	r0, [pc, #136]	@ (80010f0 <Parameter_Write+0x134>)
 8001066:	f001 fb11 	bl	800268c <HAL_I2C_Mem_Write>
    HAL_Delay(5); // Write delay
 800106a:	2005      	movs	r0, #5
 800106c:	f000 fefc 	bl	8001e68 <HAL_Delay>
    HAL_I2C_Mem_Write(&hi2c1, FM_24CL16_Write, param_address+2, I2C_MEMADD_SIZE_8BIT, &low_byte1, 1, 0xff);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	3302      	adds	r3, #2
 8001074:	b29a      	uxth	r2, r3
 8001076:	23ff      	movs	r3, #255	@ 0xff
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	f107 0309 	add.w	r3, r7, #9
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	21a0      	movs	r1, #160	@ 0xa0
 8001088:	4819      	ldr	r0, [pc, #100]	@ (80010f0 <Parameter_Write+0x134>)
 800108a:	f001 faff 	bl	800268c <HAL_I2C_Mem_Write>
    HAL_Delay(5); // Write delay
 800108e:	2005      	movs	r0, #5
 8001090:	f000 feea 	bl	8001e68 <HAL_Delay>
    HAL_I2C_Mem_Write(&hi2c1, FM_24CL16_Write, param_address+3, I2C_MEMADD_SIZE_8BIT, &low_byte2, 1, 0xff);
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	3303      	adds	r3, #3
 8001098:	b29a      	uxth	r2, r3
 800109a:	23ff      	movs	r3, #255	@ 0xff
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	2301      	movs	r3, #1
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	21a0      	movs	r1, #160	@ 0xa0
 80010ac:	4810      	ldr	r0, [pc, #64]	@ (80010f0 <Parameter_Write+0x134>)
 80010ae:	f001 faed 	bl	800268c <HAL_I2C_Mem_Write>
    HAL_Delay(5); // Write delay
 80010b2:	2005      	movs	r0, #5
 80010b4:	f000 fed8 	bl	8001e68 <HAL_Delay>

    // Read back stored values for verification
    FM24CL16B_Read_Data(param_address);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff5c 	bl	8000f78 <FM24CL16B_Read_Data>
    FM24CL16B_Read_Data(param_address+1);
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	3301      	adds	r3, #1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff56 	bl	8000f78 <FM24CL16B_Read_Data>
    FM24CL16B_Read_Data(param_address+2);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	3302      	adds	r3, #2
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff50 	bl	8000f78 <FM24CL16B_Read_Data>
    FM24CL16B_Read_Data(param_address+3);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	3303      	adds	r3, #3
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff4a 	bl	8000f78 <FM24CL16B_Read_Data>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	408f4000 	.word	0x408f4000
 80010f0:	200001f0 	.word	0x200001f0
 80010f4:	00000000 	.word	0x00000000

080010f8 <Parameter_Read>:


float Parameter_Read(uint16_t param_address)
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
   // uint16_t decimal_part;
    uint8_t low_byte1;
    uint8_t low_byte2;

    // Read bytes from consecutive EEPROM addresses
    high_byte1 = FM24CL16B_Read_Data(param_address);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff37 	bl	8000f78 <FM24CL16B_Read_Data>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
    high_byte2 = FM24CL16B_Read_Data(param_address+1);
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	3301      	adds	r3, #1
 8001112:	b29b      	uxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff2f 	bl	8000f78 <FM24CL16B_Read_Data>
 800111a:	4603      	mov	r3, r0
 800111c:	73bb      	strb	r3, [r7, #14]
    low_byte1 = FM24CL16B_Read_Data(param_address+2);
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	3302      	adds	r3, #2
 8001122:	b29b      	uxth	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff27 	bl	8000f78 <FM24CL16B_Read_Data>
 800112a:	4603      	mov	r3, r0
 800112c:	737b      	strb	r3, [r7, #13]
    low_byte2 = FM24CL16B_Read_Data(param_address+3);
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	3303      	adds	r3, #3
 8001132:	b29b      	uxth	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff1f 	bl	8000f78 <FM24CL16B_Read_Data>
 800113a:	4603      	mov	r3, r0
 800113c:	733b      	strb	r3, [r7, #12]

    // Reconstruct float value
    param_data = high_byte1 * 256 + high_byte2 + (low_byte1 * 256 + low_byte2) * 0.001;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	021a      	lsls	r2, r3, #8
 8001142:	7bbb      	ldrb	r3, [r7, #14]
 8001144:	4413      	add	r3, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9ec 	bl	8000524 <__aeabi_i2d>
 800114c:	4604      	mov	r4, r0
 800114e:	460d      	mov	r5, r1
 8001150:	7b7b      	ldrb	r3, [r7, #13]
 8001152:	021a      	lsls	r2, r3, #8
 8001154:	7b3b      	ldrb	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9e3 	bl	8000524 <__aeabi_i2d>
 800115e:	a313      	add	r3, pc, #76	@ (adr r3, 80011ac <Parameter_Read+0xb4>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa48 	bl	80005f8 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff f88c 	bl	800028c <__adddf3>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fd34 	bl	8000be8 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	60bb      	str	r3, [r7, #8]
    printf("Parameter Value: %f\r\n", param_data);
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4806      	ldr	r0, [pc, #24]	@ (80011a8 <Parameter_Read+0xb0>)
 8001190:	f006 f8e2 	bl	8007358 <iprintf>

    return param_data;
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	ee07 3a90 	vmov	s15, r3
}
 800119a:	eeb0 0a67 	vmov.f32	s0, s15
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	f3af 8000 	nop.w
 80011a8:	080092b8 	.word	0x080092b8
 80011ac:	d2f1a9fc 	.word	0xd2f1a9fc
 80011b0:	3f50624d 	.word	0x3f50624d

080011b4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	4804      	ldr	r0, [pc, #16]	@ (80011dc <_write+0x28>)
 80011cc:	f004 fade 	bl	800578c <HAL_UART_Transmit>
	return len;
 80011d0:	687b      	ldr	r3, [r7, #4]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200002dc 	.word	0x200002dc

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e4:	f000 fdc4 	bl	8001d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e8:	f000 f81e 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ec:	f000 f9e4 	bl	80015b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011f0:	f000 f86c 	bl	80012cc <MX_I2C1_Init>
  MX_TIM3_Init();
 80011f4:	f000 f8aa 	bl	800134c <MX_TIM3_Init>
  MX_UART4_Init();
 80011f8:	f000 f94e 	bl	8001498 <MX_UART4_Init>
  MX_UART5_Init();
 80011fc:	f000 f97c 	bl	80014f8 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8001200:	f000 f9aa 	bl	8001558 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001204:	f000 f922 	bl	800144c <MX_TIM16_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		  Parameter_Write(Result_Success, 1458.360); //
 8001208:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001224 <main+0x44>
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fed5 	bl	8000fbc <Parameter_Write>
		        Parameter_Read(Result_Success); // Read parameter from Result_Success address
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff ff70 	bl	80010f8 <Parameter_Read>
		        HAL_Delay(10000);
 8001218:	f242 7010 	movw	r0, #10000	@ 0x2710
 800121c:	f000 fe24 	bl	8001e68 <HAL_Delay>
		  Parameter_Write(Result_Success, 1458.360); //
 8001220:	bf00      	nop
 8001222:	e7f1      	b.n	8001208 <main+0x28>
 8001224:	44b64b85 	.word	0x44b64b85

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b096      	sub	sp, #88	@ 0x58
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2244      	movs	r2, #68	@ 0x44
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f006 f978 	bl	800752c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800124a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800124e:	f001 ffb3 	bl	80031b8 <HAL_PWREx_ControlVoltageScaling>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001258:	f000 fa68 	bl	800172c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125c:	2302      	movs	r3, #2
 800125e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001260:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001264:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001266:	2310      	movs	r3, #16
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126a:	2302      	movs	r3, #2
 800126c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800126e:	2302      	movs	r3, #2
 8001270:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001272:	2301      	movs	r3, #1
 8001274:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001276:	230a      	movs	r3, #10
 8001278:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800127a:	2307      	movs	r3, #7
 800127c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800127e:	2302      	movs	r3, #2
 8001280:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001282:	2302      	movs	r3, #2
 8001284:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4618      	mov	r0, r3
 800128c:	f001 ffea 	bl	8003264 <HAL_RCC_OscConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001296:	f000 fa49 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129a:	230f      	movs	r3, #15
 800129c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129e:	2303      	movs	r3, #3
 80012a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	2104      	movs	r1, #4
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 fbb2 	bl	8003a1c <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012be:	f000 fa35 	bl	800172c <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3758      	adds	r7, #88	@ 0x58
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001340 <MX_I2C1_Init+0x74>)
 80012d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001344 <MX_I2C1_Init+0x78>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <MX_I2C1_Init+0x74>)
 80012d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001348 <MX_I2C1_Init+0x7c>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e2:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <MX_I2C1_Init+0x74>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_I2C1_Init+0x74>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001306:	480e      	ldr	r0, [pc, #56]	@ (8001340 <MX_I2C1_Init+0x74>)
 8001308:	f001 f924 	bl	8002554 <HAL_I2C_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001312:	f000 fa0b 	bl	800172c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001316:	2100      	movs	r1, #0
 8001318:	4809      	ldr	r0, [pc, #36]	@ (8001340 <MX_I2C1_Init+0x74>)
 800131a:	f001 fea7 	bl	800306c <HAL_I2CEx_ConfigAnalogFilter>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001324:	f000 fa02 	bl	800172c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001328:	2100      	movs	r1, #0
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_I2C1_Init+0x74>)
 800132c:	f001 fee9 	bl	8003102 <HAL_I2CEx_ConfigDigitalFilter>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001336:	f000 f9f9 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200001f0 	.word	0x200001f0
 8001344:	40005400 	.word	0x40005400
 8001348:	10d19ce4 	.word	0x10d19ce4

0800134c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	@ 0x38
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137e:	4b31      	ldr	r3, [pc, #196]	@ (8001444 <MX_TIM3_Init+0xf8>)
 8001380:	4a31      	ldr	r2, [pc, #196]	@ (8001448 <MX_TIM3_Init+0xfc>)
 8001382:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001384:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <MX_TIM3_Init+0xf8>)
 8001386:	224f      	movs	r2, #79	@ 0x4f
 8001388:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <MX_TIM3_Init+0xf8>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001390:	4b2c      	ldr	r3, [pc, #176]	@ (8001444 <MX_TIM3_Init+0xf8>)
 8001392:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001396:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <MX_TIM3_Init+0xf8>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <MX_TIM3_Init+0xf8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a4:	4827      	ldr	r0, [pc, #156]	@ (8001444 <MX_TIM3_Init+0xf8>)
 80013a6:	f003 fa19 	bl	80047dc <HAL_TIM_Base_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013b0:	f000 f9bc 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013be:	4619      	mov	r1, r3
 80013c0:	4820      	ldr	r0, [pc, #128]	@ (8001444 <MX_TIM3_Init+0xf8>)
 80013c2:	f003 fbd7 	bl	8004b74 <HAL_TIM_ConfigClockSource>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013cc:	f000 f9ae 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013d0:	481c      	ldr	r0, [pc, #112]	@ (8001444 <MX_TIM3_Init+0xf8>)
 80013d2:	f003 fa5a 	bl	800488a <HAL_TIM_PWM_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013dc:	f000 f9a6 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4815      	ldr	r0, [pc, #84]	@ (8001444 <MX_TIM3_Init+0xf8>)
 80013f0:	f004 f8a0 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013fa:	f000 f997 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fe:	2360      	movs	r3, #96	@ 0x60
 8001400:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8001402:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001406:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001410:	463b      	mov	r3, r7
 8001412:	2204      	movs	r2, #4
 8001414:	4619      	mov	r1, r3
 8001416:	480b      	ldr	r0, [pc, #44]	@ (8001444 <MX_TIM3_Init+0xf8>)
 8001418:	f003 fa98 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001422:	f000 f983 	bl	800172c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <MX_TIM3_Init+0xf8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	699a      	ldr	r2, [r3, #24]
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <MX_TIM3_Init+0xf8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001434:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001436:	4803      	ldr	r0, [pc, #12]	@ (8001444 <MX_TIM3_Init+0xf8>)
 8001438:	f000 fa34 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3738      	adds	r7, #56	@ 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000244 	.word	0x20000244
 8001448:	40000400 	.word	0x40000400

0800144c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_TIM16_Init+0x44>)
 8001452:	4a10      	ldr	r2, [pc, #64]	@ (8001494 <MX_TIM16_Init+0x48>)
 8001454:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_TIM16_Init+0x44>)
 8001458:	224f      	movs	r2, #79	@ 0x4f
 800145a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_TIM16_Init+0x44>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <MX_TIM16_Init+0x44>)
 8001464:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001468:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_TIM16_Init+0x44>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001470:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <MX_TIM16_Init+0x44>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_TIM16_Init+0x44>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	@ (8001490 <MX_TIM16_Init+0x44>)
 800147e:	f003 f9ad 	bl	80047dc <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001488:	f000 f950 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000290 	.word	0x20000290
 8001494:	40014400 	.word	0x40014400

08001498 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MX_UART4_Init+0x58>)
 800149e:	4a15      	ldr	r2, [pc, #84]	@ (80014f4 <MX_UART4_Init+0x5c>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_UART4_Init+0x58>)
 80014dc:	f004 f8b2 	bl	8005644 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80014e6:	f000 f921 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200002dc 	.word	0x200002dc
 80014f4:	40004c00 	.word	0x40004c00

080014f8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_UART5_Init+0x58>)
 80014fe:	4a15      	ldr	r2, [pc, #84]	@ (8001554 <MX_UART5_Init+0x5c>)
 8001500:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_UART5_Init+0x58>)
 8001504:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001508:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_UART5_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_UART5_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_UART5_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_UART5_Init+0x58>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_UART5_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_UART5_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <MX_UART5_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_UART5_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_UART5_Init+0x58>)
 800153c:	f004 f8d0 	bl	80056e0 <HAL_HalfDuplex_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001546:	f000 f8f1 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000364 	.word	0x20000364
 8001554:	40005000 	.word	0x40005000

08001558 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800155e:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <MX_USART3_UART_Init+0x5c>)
 8001560:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001564:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001568:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800159c:	f004 f852 	bl	8005644 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015a6:	f000 f8c1 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200003ec 	.word	0x200003ec
 80015b4:	40004800 	.word	0x40004800

080015b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b54      	ldr	r3, [pc, #336]	@ (8001720 <MX_GPIO_Init+0x168>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	4a53      	ldr	r2, [pc, #332]	@ (8001720 <MX_GPIO_Init+0x168>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015da:	4b51      	ldr	r3, [pc, #324]	@ (8001720 <MX_GPIO_Init+0x168>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <MX_GPIO_Init+0x168>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	4a4d      	ldr	r2, [pc, #308]	@ (8001720 <MX_GPIO_Init+0x168>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001720 <MX_GPIO_Init+0x168>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b48      	ldr	r3, [pc, #288]	@ (8001720 <MX_GPIO_Init+0x168>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	4a47      	ldr	r2, [pc, #284]	@ (8001720 <MX_GPIO_Init+0x168>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160a:	4b45      	ldr	r3, [pc, #276]	@ (8001720 <MX_GPIO_Init+0x168>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	4b42      	ldr	r3, [pc, #264]	@ (8001720 <MX_GPIO_Init+0x168>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	4a41      	ldr	r2, [pc, #260]	@ (8001720 <MX_GPIO_Init+0x168>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001622:	4b3f      	ldr	r3, [pc, #252]	@ (8001720 <MX_GPIO_Init+0x168>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800162e:	2200      	movs	r2, #0
 8001630:	f640 7182 	movw	r1, #3970	@ 0xf82
 8001634:	483b      	ldr	r0, [pc, #236]	@ (8001724 <MX_GPIO_Init+0x16c>)
 8001636:	f000 ff75 	bl	8002524 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001644:	f000 ff6e 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800164e:	4836      	ldr	r0, [pc, #216]	@ (8001728 <MX_GPIO_Init+0x170>)
 8001650:	f000 ff68 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001654:	2301      	movs	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	482f      	ldr	r0, [pc, #188]	@ (8001724 <MX_GPIO_Init+0x16c>)
 8001668:	f000 fdb2 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800166c:	f640 7382 	movw	r3, #3970	@ 0xf82
 8001670:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	4827      	ldr	r0, [pc, #156]	@ (8001724 <MX_GPIO_Init+0x16c>)
 8001686:	f000 fda3 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 800168a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a6:	f000 fd93 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016aa:	2320      	movs	r3, #32
 80016ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f000 fd86 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4812      	ldr	r0, [pc, #72]	@ (8001728 <MX_GPIO_Init+0x170>)
 80016de:	f000 fd77 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	480c      	ldr	r0, [pc, #48]	@ (8001728 <MX_GPIO_Init+0x170>)
 80016f8:	f000 fd6a 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001706:	2301      	movs	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001714:	f000 fd5c 	bl	80021d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001718:	bf00      	nop
 800171a:	3728      	adds	r7, #40	@ 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	48000800 	.word	0x48000800
 8001728:	48000400 	.word	0x48000400

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <Error_Handler+0x8>

08001738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <HAL_MspInit+0x44>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001742:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <HAL_MspInit+0x44>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	@ 0x60
 800174a:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <HAL_MspInit+0x44>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_MspInit+0x44>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6593      	str	r3, [r2, #88]	@ 0x58
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_MspInit+0x44>)
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0ac      	sub	sp, #176	@ 0xb0
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2288      	movs	r2, #136	@ 0x88
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 fec3 	bl	800752c <memset>
  if(hi2c->Instance==I2C1)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a21      	ldr	r2, [pc, #132]	@ (8001830 <HAL_I2C_MspInit+0xb0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d13a      	bne.n	8001826 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017b0:	2340      	movs	r3, #64	@ 0x40
 80017b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fb51 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017c8:	f7ff ffb0 	bl	800172c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017cc:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <HAL_I2C_MspInit+0xb4>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d0:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <HAL_I2C_MspInit+0xb4>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <HAL_I2C_MspInit+0xb4>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e4:	23c0      	movs	r3, #192	@ 0xc0
 80017e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ea:	2312      	movs	r3, #18
 80017ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fc:	2304      	movs	r3, #4
 80017fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001806:	4619      	mov	r1, r3
 8001808:	480b      	ldr	r0, [pc, #44]	@ (8001838 <HAL_I2C_MspInit+0xb8>)
 800180a:	f000 fce1 	bl	80021d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_I2C_MspInit+0xb4>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001812:	4a08      	ldr	r2, [pc, #32]	@ (8001834 <HAL_I2C_MspInit+0xb4>)
 8001814:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001818:	6593      	str	r3, [r2, #88]	@ 0x58
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_I2C_MspInit+0xb4>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001826:	bf00      	nop
 8001828:	37b0      	adds	r7, #176	@ 0xb0
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40005400 	.word	0x40005400
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400

0800183c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a13      	ldr	r2, [pc, #76]	@ (8001898 <HAL_TIM_Base_MspInit+0x5c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10c      	bne.n	8001868 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184e:	4b13      	ldr	r3, [pc, #76]	@ (800189c <HAL_TIM_Base_MspInit+0x60>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	4a12      	ldr	r2, [pc, #72]	@ (800189c <HAL_TIM_Base_MspInit+0x60>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6593      	str	r3, [r2, #88]	@ 0x58
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_TIM_Base_MspInit+0x60>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001866:	e010      	b.n	800188a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0c      	ldr	r2, [pc, #48]	@ (80018a0 <HAL_TIM_Base_MspInit+0x64>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d10b      	bne.n	800188a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_TIM_Base_MspInit+0x60>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001876:	4a09      	ldr	r2, [pc, #36]	@ (800189c <HAL_TIM_Base_MspInit+0x60>)
 8001878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187c:	6613      	str	r3, [r2, #96]	@ 0x60
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <HAL_TIM_Base_MspInit+0x60>)
 8001880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40000400 	.word	0x40000400
 800189c:	40021000 	.word	0x40021000
 80018a0:	40014400 	.word	0x40014400

080018a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <HAL_TIM_MspPostInit+0x64>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11c      	bne.n	8001900 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_TIM_MspPostInit+0x68>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <HAL_TIM_MspPostInit+0x68>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <HAL_TIM_MspPostInit+0x68>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018fc:	f000 fc68 	bl	80021d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40000400 	.word	0x40000400
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0b0      	sub	sp, #192	@ 0xc0
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192c:	2288      	movs	r2, #136	@ 0x88
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f005 fdfb 	bl	800752c <memset>
  if(huart->Instance==UART4)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a77      	ldr	r2, [pc, #476]	@ (8001b18 <HAL_UART_MspInit+0x208>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d144      	bne.n	80019ca <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001940:	2308      	movs	r3, #8
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001944:	2300      	movs	r3, #0
 8001946:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194c:	4618      	mov	r0, r3
 800194e:	f002 fa89 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001958:	f7ff fee8 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800195c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001960:	4a6e      	ldr	r2, [pc, #440]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001962:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001966:	6593      	str	r3, [r2, #88]	@ 0x58
 8001968:	4b6c      	ldr	r3, [pc, #432]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001970:	623b      	str	r3, [r7, #32]
 8001972:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b69      	ldr	r3, [pc, #420]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	4a68      	ldr	r2, [pc, #416]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001980:	4b66      	ldr	r3, [pc, #408]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800198c:	2303      	movs	r3, #3
 800198e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019a4:	2308      	movs	r3, #8
 80019a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b4:	f000 fc0c 	bl	80021d0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	2034      	movs	r0, #52	@ 0x34
 80019be:	f000 fb52 	bl	8002066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019c2:	2034      	movs	r0, #52	@ 0x34
 80019c4:	f000 fb6b 	bl	800209e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019c8:	e0a2      	b.n	8001b10 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==UART5)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a54      	ldr	r2, [pc, #336]	@ (8001b20 <HAL_UART_MspInit+0x210>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d15d      	bne.n	8001a90 <HAL_UART_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80019d4:	2310      	movs	r3, #16
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80019d8:	2300      	movs	r3, #0
 80019da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fa3f 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80019ec:	f7ff fe9e 	bl	800172c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80019f0:	4b4a      	ldr	r3, [pc, #296]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f4:	4a49      	ldr	r2, [pc, #292]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 80019f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80019fc:	4b47      	ldr	r3, [pc, #284]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a08:	4b44      	ldr	r3, [pc, #272]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0c:	4a43      	ldr	r2, [pc, #268]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a14:	4b41      	ldr	r3, [pc, #260]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a20:	4b3e      	ldr	r3, [pc, #248]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a24:	4a3d      	ldr	r2, [pc, #244]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a40:	2312      	movs	r3, #18
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a52:	2308      	movs	r3, #8
 8001a54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4831      	ldr	r0, [pc, #196]	@ (8001b24 <HAL_UART_MspInit+0x214>)
 8001a60:	f000 fbb6 	bl	80021d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a64:	2304      	movs	r3, #4
 8001a66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a82:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a86:	4619      	mov	r1, r3
 8001a88:	4827      	ldr	r0, [pc, #156]	@ (8001b28 <HAL_UART_MspInit+0x218>)
 8001a8a:	f000 fba1 	bl	80021d0 <HAL_GPIO_Init>
}
 8001a8e:	e03f      	b.n	8001b10 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART3)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a25      	ldr	r2, [pc, #148]	@ (8001b2c <HAL_UART_MspInit+0x21c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d13a      	bne.n	8001b10 <HAL_UART_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 f9dc 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8001ab2:	f7ff fe3b 	bl	800172c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ab6:	4b19      	ldr	r3, [pc, #100]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	4a18      	ldr	r2, [pc, #96]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ac2:	4b16      	ldr	r3, [pc, #88]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_UART_MspInit+0x20c>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ae6:	2330      	movs	r3, #48	@ 0x30
 8001ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001afe:	2307      	movs	r3, #7
 8001b00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4806      	ldr	r0, [pc, #24]	@ (8001b24 <HAL_UART_MspInit+0x214>)
 8001b0c:	f000 fb60 	bl	80021d0 <HAL_GPIO_Init>
}
 8001b10:	bf00      	nop
 8001b12:	37c0      	adds	r7, #192	@ 0xc0
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40004c00 	.word	0x40004c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40005000 	.word	0x40005000
 8001b24:	48000800 	.word	0x48000800
 8001b28:	48000c00 	.word	0x48000c00
 8001b2c:	40004800 	.word	0x40004800

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <NMI_Handler+0x4>

08001b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <MemManage_Handler+0x4>

08001b48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b86:	f000 f94f 	bl	8001e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <UART4_IRQHandler+0x10>)
 8001b96:	f003 fe83 	bl	80058a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200002dc 	.word	0x200002dc

08001ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_kill>:

int _kill(int pid, int sig)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bbe:	f005 fd07 	bl	80075d0 <__errno>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2216      	movs	r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_exit>:

void _exit (int status)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffe7 	bl	8001bb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be6:	bf00      	nop
 8001be8:	e7fd      	b.n	8001be6 <_exit+0x12>

08001bea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e00a      	b.n	8001c12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfc:	f3af 8000 	nop.w
 8001c00:	4601      	mov	r1, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	60ba      	str	r2, [r7, #8]
 8001c08:	b2ca      	uxtb	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dbf0      	blt.n	8001bfc <_read+0x12>
  }

  return len;
 8001c1a:	687b      	ldr	r3, [r7, #4]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c4c:	605a      	str	r2, [r3, #4]
  return 0;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_isatty>:

int _isatty(int file)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c64:	2301      	movs	r3, #1
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c94:	4a14      	ldr	r2, [pc, #80]	@ (8001ce8 <_sbrk+0x5c>)
 8001c96:	4b15      	ldr	r3, [pc, #84]	@ (8001cec <_sbrk+0x60>)
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <_sbrk+0x64>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <_sbrk+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d207      	bcs.n	8001ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cbc:	f005 fc88 	bl	80075d0 <__errno>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	e009      	b.n	8001ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <_sbrk+0x64>)
 8001cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20018000 	.word	0x20018000
 8001cec:	00000400 	.word	0x00000400
 8001cf0:	20000474 	.word	0x20000474
 8001cf4:	200005c8 	.word	0x200005c8

08001cf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <SystemInit+0x20>)
 8001cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d02:	4a05      	ldr	r2, [pc, #20]	@ (8001d18 <SystemInit+0x20>)
 8001d04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d20:	f7ff ffea 	bl	8001cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d24:	480c      	ldr	r0, [pc, #48]	@ (8001d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d26:	490d      	ldr	r1, [pc, #52]	@ (8001d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d28:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <LoopForever+0xe>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d68 <LoopForever+0x16>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f005 fc47 	bl	80075dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d4e:	f7ff fa47 	bl	80011e0 <main>

08001d52 <LoopForever>:

LoopForever:
    b LoopForever
 8001d52:	e7fe      	b.n	8001d52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d5c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d60:	08009698 	.word	0x08009698
  ldr r2, =_sbss
 8001d64:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d68:	200005c8 	.word	0x200005c8

08001d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d6c:	e7fe      	b.n	8001d6c <ADC1_2_IRQHandler>
	...

08001d70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <HAL_Init+0x3c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <HAL_Init+0x3c>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d86:	2003      	movs	r0, #3
 8001d88:	f000 f962 	bl	8002050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f000 f80f 	bl	8001db0 <HAL_InitTick>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	e001      	b.n	8001da2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d9e:	f7ff fccb 	bl	8001738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da2:	79fb      	ldrb	r3, [r7, #7]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40022000 	.word	0x40022000

08001db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dbc:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <HAL_InitTick+0x6c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d023      	beq.n	8001e0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dc4:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <HAL_InitTick+0x70>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b14      	ldr	r3, [pc, #80]	@ (8001e1c <HAL_InitTick+0x6c>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 f96d 	bl	80020ba <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d809      	bhi.n	8001e00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 f937 	bl	8002066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_InitTick+0x74>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e007      	b.n	8001e10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e004      	b.n	8001e10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e001      	b.n	8001e10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	20000000 	.word	0x20000000
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_IncTick+0x20>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_IncTick+0x24>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <HAL_IncTick+0x24>)
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000478 	.word	0x20000478

08001e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return uwTick;
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <HAL_GetTick+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000478 	.word	0x20000478

08001e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff ffee 	bl	8001e50 <HAL_GetTick>
 8001e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d005      	beq.n	8001e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_Delay+0x44>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8e:	bf00      	nop
 8001e90:	f7ff ffde 	bl	8001e50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d8f7      	bhi.n	8001e90 <HAL_Delay+0x28>
  {
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	@ (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	@ (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	@ (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	@ (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	@ 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3b01      	subs	r3, #1
 8002018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800201c:	d301      	bcc.n	8002022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800201e:	2301      	movs	r3, #1
 8002020:	e00f      	b.n	8002042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002022:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <SysTick_Config+0x40>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202a:	210f      	movs	r1, #15
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f7ff ff8e 	bl	8001f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002034:	4b05      	ldr	r3, [pc, #20]	@ (800204c <SysTick_Config+0x40>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203a:	4b04      	ldr	r3, [pc, #16]	@ (800204c <SysTick_Config+0x40>)
 800203c:	2207      	movs	r2, #7
 800203e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	e000e010 	.word	0xe000e010

08002050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff ff29 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002078:	f7ff ff3e 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 800207c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7ff ff8e 	bl	8001fa4 <NVIC_EncodePriority>
 8002088:	4602      	mov	r2, r0
 800208a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff5d 	bl	8001f50 <__NVIC_SetPriority>
}
 8002096:	bf00      	nop
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff31 	bl	8001f14 <__NVIC_EnableIRQ>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffa2 	bl	800200c <SysTick_Config>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d008      	beq.n	80020fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2204      	movs	r2, #4
 80020ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e022      	b.n	8002142 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 020e 	bic.w	r2, r2, #14
 800210a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002120:	f003 021c 	and.w	r2, r3, #28
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d005      	beq.n	8002172 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2204      	movs	r2, #4
 800216a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e029      	b.n	80021c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 020e 	bic.w	r2, r2, #14
 8002180:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f003 021c 	and.w	r2, r3, #28
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	2101      	movs	r1, #1
 80021a0:	fa01 f202 	lsl.w	r2, r1, r2
 80021a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
    }
  }
  return status;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021de:	e17f      	b.n	80024e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ec:	4013      	ands	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8171 	beq.w	80024da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d005      	beq.n	8002210 <HAL_GPIO_Init+0x40>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d130      	bne.n	8002272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002246:	2201      	movs	r2, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4013      	ands	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f003 0201 	and.w	r2, r3, #1
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b03      	cmp	r3, #3
 800227c:	d118      	bne.n	80022b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002284:	2201      	movs	r2, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	f003 0201 	and.w	r2, r3, #1
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d017      	beq.n	80022ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d123      	bne.n	8002340 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	08da      	lsrs	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3208      	adds	r2, #8
 8002300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	6939      	ldr	r1, [r7, #16]
 800233c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4013      	ands	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80ac 	beq.w	80024da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	4b5f      	ldr	r3, [pc, #380]	@ (8002500 <HAL_GPIO_Init+0x330>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002386:	4a5e      	ldr	r2, [pc, #376]	@ (8002500 <HAL_GPIO_Init+0x330>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6613      	str	r3, [r2, #96]	@ 0x60
 800238e:	4b5c      	ldr	r3, [pc, #368]	@ (8002500 <HAL_GPIO_Init+0x330>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800239a:	4a5a      	ldr	r2, [pc, #360]	@ (8002504 <HAL_GPIO_Init+0x334>)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c4:	d025      	beq.n	8002412 <HAL_GPIO_Init+0x242>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4f      	ldr	r2, [pc, #316]	@ (8002508 <HAL_GPIO_Init+0x338>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01f      	beq.n	800240e <HAL_GPIO_Init+0x23e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a4e      	ldr	r2, [pc, #312]	@ (800250c <HAL_GPIO_Init+0x33c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x23a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4d      	ldr	r2, [pc, #308]	@ (8002510 <HAL_GPIO_Init+0x340>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x236>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002514 <HAL_GPIO_Init+0x344>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x232>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002518 <HAL_GPIO_Init+0x348>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x22e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4a      	ldr	r2, [pc, #296]	@ (800251c <HAL_GPIO_Init+0x34c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x22a>
 80023f6:	2306      	movs	r3, #6
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x244>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x244>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x244>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x244>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x244>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x244>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x244>
 8002412:	2300      	movs	r3, #0
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002424:	4937      	ldr	r1, [pc, #220]	@ (8002504 <HAL_GPIO_Init+0x334>)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002432:	4b3b      	ldr	r3, [pc, #236]	@ (8002520 <HAL_GPIO_Init+0x350>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002456:	4a32      	ldr	r2, [pc, #200]	@ (8002520 <HAL_GPIO_Init+0x350>)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800245c:	4b30      	ldr	r3, [pc, #192]	@ (8002520 <HAL_GPIO_Init+0x350>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43db      	mvns	r3, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002480:	4a27      	ldr	r2, [pc, #156]	@ (8002520 <HAL_GPIO_Init+0x350>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002486:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <HAL_GPIO_Init+0x350>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <HAL_GPIO_Init+0x350>)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_GPIO_Init+0x350>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024d4:	4a12      	ldr	r2, [pc, #72]	@ (8002520 <HAL_GPIO_Init+0x350>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f ae78 	bne.w	80021e0 <HAL_GPIO_Init+0x10>
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	40010000 	.word	0x40010000
 8002508:	48000400 	.word	0x48000400
 800250c:	48000800 	.word	0x48000800
 8002510:	48000c00 	.word	0x48000c00
 8002514:	48001000 	.word	0x48001000
 8002518:	48001400 	.word	0x48001400
 800251c:	48001800 	.word	0x48001800
 8002520:	40010400 	.word	0x40010400

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002540:	e002      	b.n	8002548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002542:	887a      	ldrh	r2, [r7, #2]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e08d      	b.n	8002682 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff f900 	bl	8001780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	@ 0x24
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d107      	bne.n	80025ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	e006      	b.n	80025dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80025da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d108      	bne.n	80025f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	e007      	b.n	8002606 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002604:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69d9      	ldr	r1, [r3, #28]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1a      	ldr	r2, [r3, #32]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	4608      	mov	r0, r1
 8002696:	4611      	mov	r1, r2
 8002698:	461a      	mov	r2, r3
 800269a:	4603      	mov	r3, r0
 800269c:	817b      	strh	r3, [r7, #10]
 800269e:	460b      	mov	r3, r1
 80026a0:	813b      	strh	r3, [r7, #8]
 80026a2:	4613      	mov	r3, r2
 80026a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b20      	cmp	r3, #32
 80026b0:	f040 80f9 	bne.w	80028a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_I2C_Mem_Write+0x34>
 80026ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0ed      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_I2C_Mem_Write+0x4e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e0e6      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026e2:	f7ff fbb5 	bl	8001e50 <HAL_GetTick>
 80026e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2319      	movs	r3, #25
 80026ee:	2201      	movs	r2, #1
 80026f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fac3 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0d1      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2221      	movs	r2, #33	@ 0x21
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2240      	movs	r2, #64	@ 0x40
 8002710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a3a      	ldr	r2, [r7, #32]
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002724:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800272c:	88f8      	ldrh	r0, [r7, #6]
 800272e:	893a      	ldrh	r2, [r7, #8]
 8002730:	8979      	ldrh	r1, [r7, #10]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	4603      	mov	r3, r0
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 f9d3 	bl	8002ae8 <I2C_RequestMemoryWrite>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0a9      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2bff      	cmp	r3, #255	@ 0xff
 800275c:	d90e      	bls.n	800277c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	22ff      	movs	r2, #255	@ 0xff
 8002762:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	b2da      	uxtb	r2, r3
 800276a:	8979      	ldrh	r1, [r7, #10]
 800276c:	2300      	movs	r3, #0
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fc47 	bl	8003008 <I2C_TransferConfig>
 800277a:	e00f      	b.n	800279c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	b2da      	uxtb	r2, r3
 800278c:	8979      	ldrh	r1, [r7, #10]
 800278e:	2300      	movs	r3, #0
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fc36 	bl	8003008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fac6 	bl	8002d32 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e07b      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d034      	beq.n	8002854 <HAL_I2C_Mem_Write+0x1c8>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d130      	bne.n	8002854 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f8:	2200      	movs	r2, #0
 80027fa:	2180      	movs	r1, #128	@ 0x80
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fa3f 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e04d      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2bff      	cmp	r3, #255	@ 0xff
 8002814:	d90e      	bls.n	8002834 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	22ff      	movs	r2, #255	@ 0xff
 800281a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002820:	b2da      	uxtb	r2, r3
 8002822:	8979      	ldrh	r1, [r7, #10]
 8002824:	2300      	movs	r3, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fbeb 	bl	8003008 <I2C_TransferConfig>
 8002832:	e00f      	b.n	8002854 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002842:	b2da      	uxtb	r2, r3
 8002844:	8979      	ldrh	r1, [r7, #10]
 8002846:	2300      	movs	r3, #0
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fbda 	bl	8003008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d19e      	bne.n	800279c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 faac 	bl	8002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e01a      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2220      	movs	r2, #32
 8002878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <HAL_I2C_Mem_Write+0x224>)
 8002886:	400b      	ands	r3, r1
 8002888:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e000      	b.n	80028a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028a6:	2302      	movs	r3, #2
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	fe00e800 	.word	0xfe00e800

080028b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4603      	mov	r3, r0
 80028c4:	817b      	strh	r3, [r7, #10]
 80028c6:	460b      	mov	r3, r1
 80028c8:	813b      	strh	r3, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	f040 80fd 	bne.w	8002ad6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <HAL_I2C_Mem_Read+0x34>
 80028e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0f1      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_I2C_Mem_Read+0x4e>
 80028fe:	2302      	movs	r3, #2
 8002900:	e0ea      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800290a:	f7ff faa1 	bl	8001e50 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	2319      	movs	r3, #25
 8002916:	2201      	movs	r2, #1
 8002918:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f9af 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0d5      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2222      	movs	r2, #34	@ 0x22
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2240      	movs	r2, #64	@ 0x40
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a3a      	ldr	r2, [r7, #32]
 8002946:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800294c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002954:	88f8      	ldrh	r0, [r7, #6]
 8002956:	893a      	ldrh	r2, [r7, #8]
 8002958:	8979      	ldrh	r1, [r7, #10]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	4603      	mov	r3, r0
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f913 	bl	8002b90 <I2C_RequestMemoryRead>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0ad      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2bff      	cmp	r3, #255	@ 0xff
 8002984:	d90e      	bls.n	80029a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	8979      	ldrh	r1, [r7, #10]
 8002994:	4b52      	ldr	r3, [pc, #328]	@ (8002ae0 <HAL_I2C_Mem_Read+0x22c>)
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fb33 	bl	8003008 <I2C_TransferConfig>
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	8979      	ldrh	r1, [r7, #10]
 80029b6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae0 <HAL_I2C_Mem_Read+0x22c>)
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fb22 	bl	8003008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ca:	2200      	movs	r2, #0
 80029cc:	2104      	movs	r1, #4
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f956 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07c      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d034      	beq.n	8002a84 <HAL_I2C_Mem_Read+0x1d0>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d130      	bne.n	8002a84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2180      	movs	r1, #128	@ 0x80
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f927 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e04d      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2bff      	cmp	r3, #255	@ 0xff
 8002a44:	d90e      	bls.n	8002a64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	2300      	movs	r3, #0
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fad3 	bl	8003008 <I2C_TransferConfig>
 8002a62:	e00f      	b.n	8002a84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	2300      	movs	r3, #0
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fac2 	bl	8003008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d19a      	bne.n	80029c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f994 	bl	8002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e01a      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <HAL_I2C_Mem_Read+0x230>)
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	80002400 	.word	0x80002400
 8002ae4:	fe00e800 	.word	0xfe00e800

08002ae8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af02      	add	r7, sp, #8
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	4608      	mov	r0, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	817b      	strh	r3, [r7, #10]
 8002afa:	460b      	mov	r3, r1
 8002afc:	813b      	strh	r3, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	8979      	ldrh	r1, [r7, #10]
 8002b08:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <I2C_RequestMemoryWrite+0xa4>)
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fa79 	bl	8003008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	69b9      	ldr	r1, [r7, #24]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f909 	bl	8002d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e02c      	b.n	8002b84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b30:	893b      	ldrh	r3, [r7, #8]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b3a:	e015      	b.n	8002b68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b3c:	893b      	ldrh	r3, [r7, #8]
 8002b3e:	0a1b      	lsrs	r3, r3, #8
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	69b9      	ldr	r1, [r7, #24]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f8ef 	bl	8002d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e012      	b.n	8002b84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b5e:	893b      	ldrh	r3, [r7, #8]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2180      	movs	r1, #128	@ 0x80
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f884 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	80002000 	.word	0x80002000

08002b90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	817b      	strh	r3, [r7, #10]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	813b      	strh	r3, [r7, #8]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	8979      	ldrh	r1, [r7, #10]
 8002bb0:	4b20      	ldr	r3, [pc, #128]	@ (8002c34 <I2C_RequestMemoryRead+0xa4>)
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 fa26 	bl	8003008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f8b6 	bl	8002d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e02c      	b.n	8002c2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bd6:	893b      	ldrh	r3, [r7, #8]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28
 8002be0:	e015      	b.n	8002c0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002be2:	893b      	ldrh	r3, [r7, #8]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf0:	69fa      	ldr	r2, [r7, #28]
 8002bf2:	69b9      	ldr	r1, [r7, #24]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f89c 	bl	8002d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e012      	b.n	8002c2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c04:	893b      	ldrh	r3, [r7, #8]
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2200      	movs	r2, #0
 8002c16:	2140      	movs	r1, #64	@ 0x40
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f831 	bl	8002c80 <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	80002000 	.word	0x80002000

08002c38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d103      	bne.n	8002c56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d007      	beq.n	8002c74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0201 	orr.w	r2, r2, #1
 8002c72:	619a      	str	r2, [r3, #24]
  }
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c90:	e03b      	b.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	6839      	ldr	r1, [r7, #0]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f8d6 	bl	8002e48 <I2C_IsErrorOccurred>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cac:	d02d      	beq.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cae:	f7ff f8cf 	bl	8001e50 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d122      	bne.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d113      	bne.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e00f      	b.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4013      	ands	r3, r2
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d0b4      	beq.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d3e:	e033      	b.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f87f 	bl	8002e48 <I2C_IsErrorOccurred>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e031      	b.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d025      	beq.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5c:	f7ff f878 	bl	8001e50 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d302      	bcc.n	8002d72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11a      	bne.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d013      	beq.n	8002da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e007      	b.n	8002db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d1c4      	bne.n	8002d40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dcc:	e02f      	b.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f838 	bl	8002e48 <I2C_IsErrorOccurred>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e02d      	b.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7ff f835 	bl	8001e50 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11a      	bne.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d013      	beq.n	8002e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e007      	b.n	8002e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d1c8      	bne.n	8002dce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	@ 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d068      	beq.n	8002f46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2210      	movs	r2, #16
 8002e7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e7c:	e049      	b.n	8002f12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d045      	beq.n	8002f12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e86:	f7fe ffe3 	bl	8001e50 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d302      	bcc.n	8002e9c <I2C_IsErrorOccurred+0x54>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d13a      	bne.n	8002f12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ebe:	d121      	bne.n	8002f04 <I2C_IsErrorOccurred+0xbc>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ec6:	d01d      	beq.n	8002f04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ec8:	7cfb      	ldrb	r3, [r7, #19]
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d01a      	beq.n	8002f04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002edc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ede:	f7fe ffb7 	bl	8001e50 <HAL_GetTick>
 8002ee2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ee4:	e00e      	b.n	8002f04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ee6:	f7fe ffb3 	bl	8001e50 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b19      	cmp	r3, #25
 8002ef2:	d907      	bls.n	8002f04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	f043 0320 	orr.w	r3, r3, #32
 8002efa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f02:	e006      	b.n	8002f12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	d1e9      	bne.n	8002ee6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d003      	beq.n	8002f28 <I2C_IsErrorOccurred+0xe0>
 8002f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0aa      	beq.n	8002e7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2220      	movs	r2, #32
 8002f36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f043 0308 	orr.w	r3, r3, #8
 8002f80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00b      	beq.n	8002fb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fe3b 	bl	8002c38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <I2C_IsErrorOccurred+0x1bc>)
 8002fce:	400b      	ands	r3, r1
 8002fd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3728      	adds	r7, #40	@ 0x28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	fe00e800 	.word	0xfe00e800

08003008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	817b      	strh	r3, [r7, #10]
 8003016:	4613      	mov	r3, r2
 8003018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800301a:	897b      	ldrh	r3, [r7, #10]
 800301c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003020:	7a7b      	ldrb	r3, [r7, #9]
 8003022:	041b      	lsls	r3, r3, #16
 8003024:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003028:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	4313      	orrs	r3, r2
 8003032:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003036:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	0d5b      	lsrs	r3, r3, #21
 8003042:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003046:	4b08      	ldr	r3, [pc, #32]	@ (8003068 <I2C_TransferConfig+0x60>)
 8003048:	430b      	orrs	r3, r1
 800304a:	43db      	mvns	r3, r3
 800304c:	ea02 0103 	and.w	r1, r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800305a:	bf00      	nop
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	03ff63ff 	.word	0x03ff63ff

0800306c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	d138      	bne.n	80030f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800308c:	2302      	movs	r3, #2
 800308e:	e032      	b.n	80030f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	@ 0x24
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e000      	b.n	80030f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003102:	b480      	push	{r7}
 8003104:	b085      	sub	sp, #20
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b20      	cmp	r3, #32
 8003116:	d139      	bne.n	800318c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003122:	2302      	movs	r3, #2
 8003124:	e033      	b.n	800318e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2224      	movs	r2, #36	@ 0x24
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800318c:	2302      	movs	r3, #2
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031a0:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40007000 	.word	0x40007000

080031b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c6:	d130      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031c8:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d4:	d038      	beq.n	8003248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d6:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031de:	4a1e      	ldr	r2, [pc, #120]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031e6:	4b1d      	ldr	r3, [pc, #116]	@ (800325c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2232      	movs	r2, #50	@ 0x32
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003260 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0c9b      	lsrs	r3, r3, #18
 80031f8:	3301      	adds	r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fc:	e002      	b.n	8003204 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3b01      	subs	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003204:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800320c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003210:	d102      	bne.n	8003218 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f2      	bne.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003218:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003224:	d110      	bne.n	8003248 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e00f      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003236:	d007      	beq.n	8003248 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003238:	4b07      	ldr	r3, [pc, #28]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003240:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003242:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003246:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40007000 	.word	0x40007000
 800325c:	20000000 	.word	0x20000000
 8003260:	431bde83 	.word	0x431bde83

08003264 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e3ca      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003276:	4b97      	ldr	r3, [pc, #604]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003280:	4b94      	ldr	r3, [pc, #592]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80e4 	beq.w	8003460 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_RCC_OscConfig+0x4a>
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	f040 808b 	bne.w	80033bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 8087 	bne.w	80033bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032ae:	4b89      	ldr	r3, [pc, #548]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_RCC_OscConfig+0x62>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e3a2      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	4b82      	ldr	r3, [pc, #520]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_RCC_OscConfig+0x7c>
 80032d6:	4b7f      	ldr	r3, [pc, #508]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032de:	e005      	b.n	80032ec <HAL_RCC_OscConfig+0x88>
 80032e0:	4b7c      	ldr	r3, [pc, #496]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d223      	bcs.n	8003338 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fd55 	bl	8003da4 <RCC_SetFlashLatencyFromMSIRange>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e383      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003304:	4b73      	ldr	r3, [pc, #460]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a72      	ldr	r2, [pc, #456]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 800330a:	f043 0308 	orr.w	r3, r3, #8
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b70      	ldr	r3, [pc, #448]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	496d      	ldr	r1, [pc, #436]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003322:	4b6c      	ldr	r3, [pc, #432]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	4968      	ldr	r1, [pc, #416]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
 8003336:	e025      	b.n	8003384 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003338:	4b66      	ldr	r3, [pc, #408]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a65      	ldr	r2, [pc, #404]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 800333e:	f043 0308 	orr.w	r3, r3, #8
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b63      	ldr	r3, [pc, #396]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4960      	ldr	r1, [pc, #384]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003356:	4b5f      	ldr	r3, [pc, #380]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	495b      	ldr	r1, [pc, #364]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fd15 	bl	8003da4 <RCC_SetFlashLatencyFromMSIRange>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e343      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003384:	f000 fc4a 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b52      	ldr	r3, [pc, #328]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	4950      	ldr	r1, [pc, #320]	@ (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
 80033a0:	4a4e      	ldr	r2, [pc, #312]	@ (80034dc <HAL_RCC_OscConfig+0x278>)
 80033a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033a4:	4b4e      	ldr	r3, [pc, #312]	@ (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe fd01 	bl	8001db0 <HAL_InitTick>
 80033ae:	4603      	mov	r3, r0
 80033b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d052      	beq.n	800345e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	e327      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d032      	beq.n	800342a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033c4:	4b43      	ldr	r3, [pc, #268]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a42      	ldr	r2, [pc, #264]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033d0:	f7fe fd3e 	bl	8001e50 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d8:	f7fe fd3a 	bl	8001e50 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e310      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ea:	4b3a      	ldr	r3, [pc, #232]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f6:	4b37      	ldr	r3, [pc, #220]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a36      	ldr	r2, [pc, #216]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b34      	ldr	r3, [pc, #208]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4931      	ldr	r1, [pc, #196]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003414:	4b2f      	ldr	r3, [pc, #188]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	492c      	ldr	r1, [pc, #176]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
 8003428:	e01a      	b.n	8003460 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800342a:	4b2a      	ldr	r3, [pc, #168]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a29      	ldr	r2, [pc, #164]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003436:	f7fe fd0b 	bl	8001e50 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800343e:	f7fe fd07 	bl	8001e50 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e2dd      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003450:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x1da>
 800345c:	e000      	b.n	8003460 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800345e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d074      	beq.n	8003556 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b08      	cmp	r3, #8
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x21a>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d10e      	bne.n	8003496 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d10b      	bne.n	8003496 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347e:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d064      	beq.n	8003554 <HAL_RCC_OscConfig+0x2f0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d160      	bne.n	8003554 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e2ba      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x24a>
 80034a0:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a0b      	ldr	r2, [pc, #44]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e026      	b.n	80034fc <HAL_RCC_OscConfig+0x298>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034b6:	d115      	bne.n	80034e4 <HAL_RCC_OscConfig+0x280>
 80034b8:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a05      	ldr	r2, [pc, #20]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b03      	ldr	r3, [pc, #12]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a02      	ldr	r2, [pc, #8]	@ (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e014      	b.n	80034fc <HAL_RCC_OscConfig+0x298>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	080092d0 	.word	0x080092d0
 80034dc:	20000000 	.word	0x20000000
 80034e0:	20000004 	.word	0x20000004
 80034e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a9f      	ldr	r2, [pc, #636]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b9d      	ldr	r3, [pc, #628]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a9c      	ldr	r2, [pc, #624]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80034f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fe fca4 	bl	8001e50 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fca0 	bl	8001e50 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	@ 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e276      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351e:	4b92      	ldr	r3, [pc, #584]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x2a8>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fc90 	bl	8001e50 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe fc8c 	bl	8001e50 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	@ 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e262      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003546:	4b88      	ldr	r3, [pc, #544]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x2d0>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d060      	beq.n	8003624 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b04      	cmp	r3, #4
 8003566:	d005      	beq.n	8003574 <HAL_RCC_OscConfig+0x310>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d119      	bne.n	80035a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d116      	bne.n	80035a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	4b7c      	ldr	r3, [pc, #496]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_OscConfig+0x328>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e23f      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358c:	4b76      	ldr	r3, [pc, #472]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	4973      	ldr	r1, [pc, #460]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a0:	e040      	b.n	8003624 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d023      	beq.n	80035f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fe fc4b 	bl	8001e50 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035be:	f7fe fc47 	bl	8001e50 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e21d      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d0:	4b65      	ldr	r3, [pc, #404]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b62      	ldr	r3, [pc, #392]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	495f      	ldr	r1, [pc, #380]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
 80035f0:	e018      	b.n	8003624 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80035f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fc27 	bl	8001e50 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003606:	f7fe fc23 	bl	8001e50 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e1f9      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003618:	4b53      	ldr	r3, [pc, #332]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03c      	beq.n	80036aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01c      	beq.n	8003672 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003638:	4b4b      	ldr	r3, [pc, #300]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800363e:	4a4a      	ldr	r2, [pc, #296]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fe fc02 	bl	8001e50 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003650:	f7fe fbfe 	bl	8001e50 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1d4      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003662:	4b41      	ldr	r3, [pc, #260]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 8003664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ef      	beq.n	8003650 <HAL_RCC_OscConfig+0x3ec>
 8003670:	e01b      	b.n	80036aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003672:	4b3d      	ldr	r3, [pc, #244]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 8003674:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003678:	4a3b      	ldr	r2, [pc, #236]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fe fbe5 	bl	8001e50 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368a:	f7fe fbe1 	bl	8001e50 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1b7      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800369c:	4b32      	ldr	r3, [pc, #200]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ef      	bne.n	800368a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80a6 	beq.w	8003804 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b8:	2300      	movs	r3, #0
 80036ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c8:	4b27      	ldr	r3, [pc, #156]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036cc:	4a26      	ldr	r2, [pc, #152]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80036ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d4:	4b24      	ldr	r3, [pc, #144]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e4:	4b21      	ldr	r3, [pc, #132]	@ (800376c <HAL_RCC_OscConfig+0x508>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d118      	bne.n	8003722 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f0:	4b1e      	ldr	r3, [pc, #120]	@ (800376c <HAL_RCC_OscConfig+0x508>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1d      	ldr	r2, [pc, #116]	@ (800376c <HAL_RCC_OscConfig+0x508>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fc:	f7fe fba8 	bl	8001e50 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fe fba4 	bl	8001e50 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e17a      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <HAL_RCC_OscConfig+0x508>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d108      	bne.n	800373c <HAL_RCC_OscConfig+0x4d8>
 800372a:	4b0f      	ldr	r3, [pc, #60]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003730:	4a0d      	ldr	r2, [pc, #52]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800373a:	e029      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b05      	cmp	r3, #5
 8003742:	d115      	bne.n	8003770 <HAL_RCC_OscConfig+0x50c>
 8003744:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374a:	4a07      	ldr	r2, [pc, #28]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	4a03      	ldr	r2, [pc, #12]	@ (8003768 <HAL_RCC_OscConfig+0x504>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003764:	e014      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
 8003770:	4b9c      	ldr	r3, [pc, #624]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003776:	4a9b      	ldr	r2, [pc, #620]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003780:	4b98      	ldr	r3, [pc, #608]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003786:	4a97      	ldr	r2, [pc, #604]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d016      	beq.n	80037c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fe fb5a 	bl	8001e50 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fe fb56 	bl	8001e50 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e12a      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b6:	4b8b      	ldr	r3, [pc, #556]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ed      	beq.n	80037a0 <HAL_RCC_OscConfig+0x53c>
 80037c4:	e015      	b.n	80037f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fe fb43 	bl	8001e50 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fe fb3f 	bl	8001e50 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e113      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e4:	4b7f      	ldr	r3, [pc, #508]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ed      	bne.n	80037ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f2:	7ffb      	ldrb	r3, [r7, #31]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	4b7a      	ldr	r3, [pc, #488]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	4a79      	ldr	r2, [pc, #484]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80fe 	beq.w	8003a0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	2b02      	cmp	r3, #2
 8003814:	f040 80d0 	bne.w	80039b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003818:	4b72      	ldr	r3, [pc, #456]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0203 	and.w	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	429a      	cmp	r2, r3
 800382a:	d130      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	3b01      	subs	r3, #1
 8003838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d127      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003848:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d11f      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003858:	2a07      	cmp	r2, #7
 800385a:	bf14      	ite	ne
 800385c:	2201      	movne	r2, #1
 800385e:	2200      	moveq	r2, #0
 8003860:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	4293      	cmp	r3, r2
 8003864:	d113      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d109      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d06e      	beq.n	800396c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b0c      	cmp	r3, #12
 8003892:	d069      	beq.n	8003968 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003894:	4b53      	ldr	r3, [pc, #332]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038a0:	4b50      	ldr	r3, [pc, #320]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0ad      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038b0:	4b4c      	ldr	r3, [pc, #304]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a4b      	ldr	r2, [pc, #300]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038bc:	f7fe fac8 	bl	8001e50 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe fac4 	bl	8001e50 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e09a      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d6:	4b43      	ldr	r3, [pc, #268]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e2:	4b40      	ldr	r3, [pc, #256]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	4b40      	ldr	r3, [pc, #256]	@ (80039e8 <HAL_RCC_OscConfig+0x784>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038f2:	3a01      	subs	r2, #1
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	4311      	orrs	r1, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038fc:	0212      	lsls	r2, r2, #8
 80038fe:	4311      	orrs	r1, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003904:	0852      	lsrs	r2, r2, #1
 8003906:	3a01      	subs	r2, #1
 8003908:	0552      	lsls	r2, r2, #21
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003910:	0852      	lsrs	r2, r2, #1
 8003912:	3a01      	subs	r2, #1
 8003914:	0652      	lsls	r2, r2, #25
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800391c:	0912      	lsrs	r2, r2, #4
 800391e:	0452      	lsls	r2, r2, #17
 8003920:	430a      	orrs	r2, r1
 8003922:	4930      	ldr	r1, [pc, #192]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003924:	4313      	orrs	r3, r2
 8003926:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003928:	4b2e      	ldr	r3, [pc, #184]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2d      	ldr	r2, [pc, #180]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 800392e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003932:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003934:	4b2b      	ldr	r3, [pc, #172]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4a2a      	ldr	r2, [pc, #168]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 800393a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800393e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003940:	f7fe fa86 	bl	8001e50 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fa82 	bl	8001e50 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e058      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395a:	4b22      	ldr	r3, [pc, #136]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003966:	e050      	b.n	8003a0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e04f      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396c:	4b1d      	ldr	r3, [pc, #116]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d148      	bne.n	8003a0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003978:	4b1a      	ldr	r3, [pc, #104]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a19      	ldr	r2, [pc, #100]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 800397e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003984:	4b17      	ldr	r3, [pc, #92]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a16      	ldr	r2, [pc, #88]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 800398a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800398e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003990:	f7fe fa5e 	bl	8001e50 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fe fa5a 	bl	8001e50 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e030      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	4b0e      	ldr	r3, [pc, #56]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x734>
 80039b6:	e028      	b.n	8003a0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b0c      	cmp	r3, #12
 80039bc:	d023      	beq.n	8003a06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a08      	ldr	r2, [pc, #32]	@ (80039e4 <HAL_RCC_OscConfig+0x780>)
 80039c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fe fa41 	bl	8001e50 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d0:	e00c      	b.n	80039ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fe fa3d 	bl	8001e50 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d905      	bls.n	80039ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e013      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
 80039e4:	40021000 	.word	0x40021000
 80039e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ec:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <HAL_RCC_OscConfig+0x7b0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1ec      	bne.n	80039d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039f8:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <HAL_RCC_OscConfig+0x7b0>)
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	4905      	ldr	r1, [pc, #20]	@ (8003a14 <HAL_RCC_OscConfig+0x7b0>)
 80039fe:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <HAL_RCC_OscConfig+0x7b4>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
 8003a04:	e001      	b.n	8003a0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	feeefffc 	.word	0xfeeefffc

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0e7      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b75      	ldr	r3, [pc, #468]	@ (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d910      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b72      	ldr	r3, [pc, #456]	@ (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0207 	bic.w	r2, r3, #7
 8003a46:	4970      	ldr	r1, [pc, #448]	@ (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0cf      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	4b66      	ldr	r3, [pc, #408]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d908      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a7c:	4b63      	ldr	r3, [pc, #396]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4960      	ldr	r1, [pc, #384]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d04c      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d121      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0a6      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aba:	4b54      	ldr	r3, [pc, #336]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d115      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e09a      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e08e      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e086      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b46      	ldr	r3, [pc, #280]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4943      	ldr	r1, [pc, #268]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fe f9a4 	bl	8001e50 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fe f9a0 	bl	8001e50 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e06e      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b3a      	ldr	r3, [pc, #232]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d010      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	4b31      	ldr	r3, [pc, #196]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d208      	bcs.n	8003b62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b50:	4b2e      	ldr	r3, [pc, #184]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	492b      	ldr	r1, [pc, #172]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b62:	4b29      	ldr	r3, [pc, #164]	@ (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d210      	bcs.n	8003b92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b70:	4b25      	ldr	r3, [pc, #148]	@ (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0207 	bic.w	r2, r3, #7
 8003b78:	4923      	ldr	r1, [pc, #140]	@ (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b80:	4b21      	ldr	r3, [pc, #132]	@ (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e036      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4918      	ldr	r1, [pc, #96]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bbc:	4b13      	ldr	r3, [pc, #76]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4910      	ldr	r1, [pc, #64]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bd0:	f000 f824 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	490b      	ldr	r1, [pc, #44]	@ (8003c10 <HAL_RCC_ClockConfig+0x1f4>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bec:	4a09      	ldr	r2, [pc, #36]	@ (8003c14 <HAL_RCC_ClockConfig+0x1f8>)
 8003bee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <HAL_RCC_ClockConfig+0x1fc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe f8db 	bl	8001db0 <HAL_InitTick>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	080092d0 	.word	0x080092d0
 8003c14:	20000000 	.word	0x20000000
 8003c18:	20000004 	.word	0x20000004

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	@ 0x24
 8003c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c34:	4b3b      	ldr	r3, [pc, #236]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x34>
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d121      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d11e      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c50:	4b34      	ldr	r3, [pc, #208]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c5c:	4b31      	ldr	r3, [pc, #196]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e005      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c78:	4a2b      	ldr	r2, [pc, #172]	@ (8003d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10d      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c94:	4b25      	ldr	r3, [pc, #148]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	e004      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ca0:	4b23      	ldr	r3, [pc, #140]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d134      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003caa:	4b1e      	ldr	r3, [pc, #120]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d003      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8003cc0:	e005      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003cc4:	617b      	str	r3, [r7, #20]
      break;
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cc8:	4b19      	ldr	r3, [pc, #100]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cca:	617b      	str	r3, [r7, #20]
      break;
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	617b      	str	r3, [r7, #20]
      break;
 8003cd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd4:	4b13      	ldr	r3, [pc, #76]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	3301      	adds	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ce2:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	fb03 f202 	mul.w	r2, r3, r2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	0e5b      	lsrs	r3, r3, #25
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	3301      	adds	r3, #1
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d14:	69bb      	ldr	r3, [r7, #24]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	@ 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	080092e8 	.word	0x080092e8
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	007a1200 	.word	0x007a1200

08003d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d38:	4b03      	ldr	r3, [pc, #12]	@ (8003d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000000 	.word	0x20000000

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d50:	f7ff fff0 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4904      	ldr	r1, [pc, #16]	@ (8003d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	080092e0 	.word	0x080092e0

08003d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d7c:	f7ff ffda 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0adb      	lsrs	r3, r3, #11
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4904      	ldr	r1, [pc, #16]	@ (8003da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	080092e0 	.word	0x080092e0

08003da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003db0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dbc:	f7ff f9ee 	bl	800319c <HAL_PWREx_GetVoltageRange>
 8003dc0:	6178      	str	r0, [r7, #20]
 8003dc2:	e014      	b.n	8003dee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	4b25      	ldr	r3, [pc, #148]	@ (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc8:	4a24      	ldr	r2, [pc, #144]	@ (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd0:	4b22      	ldr	r3, [pc, #136]	@ (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ddc:	f7ff f9de 	bl	800319c <HAL_PWREx_GetVoltageRange>
 8003de0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003de2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df4:	d10b      	bne.n	8003e0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b80      	cmp	r3, #128	@ 0x80
 8003dfa:	d919      	bls.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e00:	d902      	bls.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e02:	2302      	movs	r3, #2
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	e013      	b.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e08:	2301      	movs	r3, #1
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	e010      	b.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b80      	cmp	r3, #128	@ 0x80
 8003e12:	d902      	bls.n	8003e1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e14:	2303      	movs	r3, #3
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	e00a      	b.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b80      	cmp	r3, #128	@ 0x80
 8003e1e:	d102      	bne.n	8003e26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e20:	2302      	movs	r3, #2
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	e004      	b.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b70      	cmp	r3, #112	@ 0x70
 8003e2a:	d101      	bne.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 0207 	bic.w	r2, r3, #7
 8003e38:	4909      	ldr	r1, [pc, #36]	@ (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e40:	4b07      	ldr	r3, [pc, #28]	@ (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d001      	beq.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40022000 	.word	0x40022000

08003e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e70:	2300      	movs	r3, #0
 8003e72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d041      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e84:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e88:	d02a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e8e:	d824      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e9a:	d81e      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ea0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea4:	d010      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ea6:	e018      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ea8:	4b86      	ldr	r3, [pc, #536]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a85      	ldr	r2, [pc, #532]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eb4:	e015      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fabb 	bl	8004438 <RCCEx_PLLSAI1_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ec6:	e00c      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3320      	adds	r3, #32
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fba6 	bl	8004620 <RCCEx_PLLSAI2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ed8:	e003      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	74fb      	strb	r3, [r7, #19]
      break;
 8003ede:	e000      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ee8:	4b76      	ldr	r3, [pc, #472]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ef6:	4973      	ldr	r1, [pc, #460]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003efe:	e001      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d041      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f18:	d02a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f1e:	d824      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f24:	d008      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f2a:	d81e      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f34:	d010      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f36:	e018      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f38:	4b62      	ldr	r3, [pc, #392]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a61      	ldr	r2, [pc, #388]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f44:	e015      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fa73 	bl	8004438 <RCCEx_PLLSAI1_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f56:	e00c      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3320      	adds	r3, #32
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fb5e 	bl	8004620 <RCCEx_PLLSAI2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f78:	4b52      	ldr	r3, [pc, #328]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f86:	494f      	ldr	r1, [pc, #316]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f8e:	e001      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80a0 	beq.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fa6:	4b47      	ldr	r3, [pc, #284]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b41      	ldr	r3, [pc, #260]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc0:	4a40      	ldr	r2, [pc, #256]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3a      	ldr	r2, [pc, #232]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fe4:	f7fd ff34 	bl	8001e50 <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fea:	e009      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fec:	f7fd ff30 	bl	8001e50 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	74fb      	strb	r3, [r7, #19]
        break;
 8003ffe:	e005      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004000:	4b31      	ldr	r3, [pc, #196]	@ (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ef      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d15c      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004012:	4b2c      	ldr	r3, [pc, #176]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01f      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	d019      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004030:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800403c:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004042:	4a20      	ldr	r2, [pc, #128]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800404c:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004052:	4a1c      	ldr	r2, [pc, #112]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800405c:	4a19      	ldr	r2, [pc, #100]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fd feef 	bl	8001e50 <HAL_GetTick>
 8004072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004074:	e00b      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fd feeb 	bl	8001e50 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d902      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	74fb      	strb	r3, [r7, #19]
            break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408e:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ec      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a2:	4b08      	ldr	r3, [pc, #32]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040b2:	4904      	ldr	r1, [pc, #16]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040ba:	e009      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d0:	7c7b      	ldrb	r3, [r7, #17]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d105      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040da:	4a9d      	ldr	r2, [pc, #628]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ee:	4b98      	ldr	r3, [pc, #608]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f4:	f023 0203 	bic.w	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	4994      	ldr	r1, [pc, #592]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004110:	4b8f      	ldr	r3, [pc, #572]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004116:	f023 020c 	bic.w	r2, r3, #12
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411e:	498c      	ldr	r1, [pc, #560]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004132:	4b87      	ldr	r3, [pc, #540]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004138:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004140:	4983      	ldr	r1, [pc, #524]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004154:	4b7e      	ldr	r3, [pc, #504]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004162:	497b      	ldr	r1, [pc, #492]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004176:	4b76      	ldr	r3, [pc, #472]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004184:	4972      	ldr	r1, [pc, #456]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004198:	4b6d      	ldr	r3, [pc, #436]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a6:	496a      	ldr	r1, [pc, #424]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ba:	4b65      	ldr	r3, [pc, #404]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c8:	4961      	ldr	r1, [pc, #388]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ea:	4959      	ldr	r1, [pc, #356]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041fe:	4b54      	ldr	r3, [pc, #336]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004204:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800420c:	4950      	ldr	r1, [pc, #320]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004220:	4b4b      	ldr	r3, [pc, #300]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004226:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422e:	4948      	ldr	r1, [pc, #288]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004242:	4b43      	ldr	r3, [pc, #268]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004250:	493f      	ldr	r1, [pc, #252]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d028      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004264:	4b3a      	ldr	r3, [pc, #232]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004272:	4937      	ldr	r1, [pc, #220]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800427e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004282:	d106      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004284:	4b32      	ldr	r3, [pc, #200]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a31      	ldr	r2, [pc, #196]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800428e:	60d3      	str	r3, [r2, #12]
 8004290:	e011      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004296:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800429a:	d10c      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f8c8 	bl	8004438 <RCCEx_PLLSAI1_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d028      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c2:	4b23      	ldr	r3, [pc, #140]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d0:	491f      	ldr	r1, [pc, #124]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e0:	d106      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ec:	60d3      	str	r3, [r2, #12]
 80042ee:	e011      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	2101      	movs	r1, #1
 8004300:	4618      	mov	r0, r3
 8004302:	f000 f899 	bl	8004438 <RCCEx_PLLSAI1_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d02b      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004320:	4b0b      	ldr	r3, [pc, #44]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800432e:	4908      	ldr	r1, [pc, #32]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800433a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800433e:	d109      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004340:	4b03      	ldr	r3, [pc, #12]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a02      	ldr	r2, [pc, #8]	@ (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800434a:	60d3      	str	r3, [r2, #12]
 800434c:	e014      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004358:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800435c:	d10c      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	2101      	movs	r1, #1
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f867 	bl	8004438 <RCCEx_PLLSAI1_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d02f      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004384:	4b2b      	ldr	r3, [pc, #172]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004392:	4928      	ldr	r1, [pc, #160]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800439e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043a2:	d10d      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2102      	movs	r1, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f844 	bl	8004438 <RCCEx_PLLSAI1_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d014      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	74bb      	strb	r3, [r7, #18]
 80043be:	e011      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3320      	adds	r3, #32
 80043ce:	2102      	movs	r1, #2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f925 	bl	8004620 <RCCEx_PLLSAI2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043f0:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043fe:	490d      	ldr	r1, [pc, #52]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004412:	4b08      	ldr	r3, [pc, #32]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004418:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004422:	4904      	ldr	r1, [pc, #16]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800442a:	7cbb      	ldrb	r3, [r7, #18]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000

08004438 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004446:	4b75      	ldr	r3, [pc, #468]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d018      	beq.n	8004484 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004452:	4b72      	ldr	r3, [pc, #456]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0203 	and.w	r2, r3, #3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d10d      	bne.n	800447e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
       ||
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800446a:	4b6c      	ldr	r3, [pc, #432]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
       ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d047      	beq.n	800450e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
 8004482:	e044      	b.n	800450e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d018      	beq.n	80044be <RCCEx_PLLSAI1_Config+0x86>
 800448c:	2b03      	cmp	r3, #3
 800448e:	d825      	bhi.n	80044dc <RCCEx_PLLSAI1_Config+0xa4>
 8004490:	2b01      	cmp	r3, #1
 8004492:	d002      	beq.n	800449a <RCCEx_PLLSAI1_Config+0x62>
 8004494:	2b02      	cmp	r3, #2
 8004496:	d009      	beq.n	80044ac <RCCEx_PLLSAI1_Config+0x74>
 8004498:	e020      	b.n	80044dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800449a:	4b60      	ldr	r3, [pc, #384]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11d      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044aa:	e01a      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044ac:	4b5b      	ldr	r3, [pc, #364]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d116      	bne.n	80044e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044bc:	e013      	b.n	80044e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044be:	4b57      	ldr	r3, [pc, #348]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10f      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ca:	4b54      	ldr	r3, [pc, #336]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044da:	e006      	b.n	80044ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
      break;
 80044e0:	e004      	b.n	80044ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10d      	bne.n	800450e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044f2:	4b4a      	ldr	r3, [pc, #296]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6819      	ldr	r1, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	3b01      	subs	r3, #1
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	430b      	orrs	r3, r1
 8004508:	4944      	ldr	r1, [pc, #272]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 800450a:	4313      	orrs	r3, r2
 800450c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d17d      	bne.n	8004610 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004514:	4b41      	ldr	r3, [pc, #260]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a40      	ldr	r2, [pc, #256]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 800451a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800451e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004520:	f7fd fc96 	bl	8001e50 <HAL_GetTick>
 8004524:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004526:	e009      	b.n	800453c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004528:	f7fd fc92 	bl	8001e50 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d902      	bls.n	800453c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	73fb      	strb	r3, [r7, #15]
        break;
 800453a:	e005      	b.n	8004548 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800453c:	4b37      	ldr	r3, [pc, #220]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ef      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d160      	bne.n	8004610 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d111      	bne.n	8004578 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004554:	4b31      	ldr	r3, [pc, #196]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800455c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6892      	ldr	r2, [r2, #8]
 8004564:	0211      	lsls	r1, r2, #8
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68d2      	ldr	r2, [r2, #12]
 800456a:	0912      	lsrs	r2, r2, #4
 800456c:	0452      	lsls	r2, r2, #17
 800456e:	430a      	orrs	r2, r1
 8004570:	492a      	ldr	r1, [pc, #168]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	610b      	str	r3, [r1, #16]
 8004576:	e027      	b.n	80045c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d112      	bne.n	80045a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800457e:	4b27      	ldr	r3, [pc, #156]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004586:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6892      	ldr	r2, [r2, #8]
 800458e:	0211      	lsls	r1, r2, #8
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6912      	ldr	r2, [r2, #16]
 8004594:	0852      	lsrs	r2, r2, #1
 8004596:	3a01      	subs	r2, #1
 8004598:	0552      	lsls	r2, r2, #21
 800459a:	430a      	orrs	r2, r1
 800459c:	491f      	ldr	r1, [pc, #124]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	610b      	str	r3, [r1, #16]
 80045a2:	e011      	b.n	80045c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045a4:	4b1d      	ldr	r3, [pc, #116]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80045ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6892      	ldr	r2, [r2, #8]
 80045b4:	0211      	lsls	r1, r2, #8
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6952      	ldr	r2, [r2, #20]
 80045ba:	0852      	lsrs	r2, r2, #1
 80045bc:	3a01      	subs	r2, #1
 80045be:	0652      	lsls	r2, r2, #25
 80045c0:	430a      	orrs	r2, r1
 80045c2:	4916      	ldr	r1, [pc, #88]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045c8:	4b14      	ldr	r3, [pc, #80]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a13      	ldr	r2, [pc, #76]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fd fc3c 	bl	8001e50 <HAL_GetTick>
 80045d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045da:	e009      	b.n	80045f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045dc:	f7fd fc38 	bl	8001e50 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d902      	bls.n	80045f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	73fb      	strb	r3, [r7, #15]
          break;
 80045ee:	e005      	b.n	80045fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045f0:	4b0a      	ldr	r3, [pc, #40]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ef      	beq.n	80045dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004602:	4b06      	ldr	r3, [pc, #24]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	4904      	ldr	r1, [pc, #16]	@ (800461c <RCCEx_PLLSAI1_Config+0x1e4>)
 800460c:	4313      	orrs	r3, r2
 800460e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40021000 	.word	0x40021000

08004620 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800462e:	4b6a      	ldr	r3, [pc, #424]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800463a:	4b67      	ldr	r3, [pc, #412]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0203 	and.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d10d      	bne.n	8004666 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
       ||
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004652:	4b61      	ldr	r3, [pc, #388]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	091b      	lsrs	r3, r3, #4
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
       ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d047      	beq.n	80046f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	e044      	b.n	80046f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b03      	cmp	r3, #3
 8004672:	d018      	beq.n	80046a6 <RCCEx_PLLSAI2_Config+0x86>
 8004674:	2b03      	cmp	r3, #3
 8004676:	d825      	bhi.n	80046c4 <RCCEx_PLLSAI2_Config+0xa4>
 8004678:	2b01      	cmp	r3, #1
 800467a:	d002      	beq.n	8004682 <RCCEx_PLLSAI2_Config+0x62>
 800467c:	2b02      	cmp	r3, #2
 800467e:	d009      	beq.n	8004694 <RCCEx_PLLSAI2_Config+0x74>
 8004680:	e020      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004682:	4b55      	ldr	r3, [pc, #340]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d11d      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004692:	e01a      	b.n	80046ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004694:	4b50      	ldr	r3, [pc, #320]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469c:	2b00      	cmp	r3, #0
 800469e:	d116      	bne.n	80046ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a4:	e013      	b.n	80046ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046a6:	4b4c      	ldr	r3, [pc, #304]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10f      	bne.n	80046d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046b2:	4b49      	ldr	r3, [pc, #292]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046c2:	e006      	b.n	80046d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]
      break;
 80046c8:	e004      	b.n	80046d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ca:	bf00      	nop
 80046cc:	e002      	b.n	80046d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10d      	bne.n	80046f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046da:	4b3f      	ldr	r3, [pc, #252]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	430b      	orrs	r3, r1
 80046f0:	4939      	ldr	r1, [pc, #228]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d167      	bne.n	80047cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046fc:	4b36      	ldr	r3, [pc, #216]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a35      	ldr	r2, [pc, #212]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004708:	f7fd fba2 	bl	8001e50 <HAL_GetTick>
 800470c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800470e:	e009      	b.n	8004724 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004710:	f7fd fb9e 	bl	8001e50 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d902      	bls.n	8004724 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	73fb      	strb	r3, [r7, #15]
        break;
 8004722:	e005      	b.n	8004730 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004724:	4b2c      	ldr	r3, [pc, #176]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ef      	bne.n	8004710 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d14a      	bne.n	80047cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d111      	bne.n	8004760 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800473c:	4b26      	ldr	r3, [pc, #152]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6892      	ldr	r2, [r2, #8]
 800474c:	0211      	lsls	r1, r2, #8
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68d2      	ldr	r2, [r2, #12]
 8004752:	0912      	lsrs	r2, r2, #4
 8004754:	0452      	lsls	r2, r2, #17
 8004756:	430a      	orrs	r2, r1
 8004758:	491f      	ldr	r1, [pc, #124]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	614b      	str	r3, [r1, #20]
 800475e:	e011      	b.n	8004784 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004760:	4b1d      	ldr	r3, [pc, #116]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004768:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6892      	ldr	r2, [r2, #8]
 8004770:	0211      	lsls	r1, r2, #8
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6912      	ldr	r2, [r2, #16]
 8004776:	0852      	lsrs	r2, r2, #1
 8004778:	3a01      	subs	r2, #1
 800477a:	0652      	lsls	r2, r2, #25
 800477c:	430a      	orrs	r2, r1
 800477e:	4916      	ldr	r1, [pc, #88]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	4313      	orrs	r3, r2
 8004782:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004784:	4b14      	ldr	r3, [pc, #80]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a13      	ldr	r2, [pc, #76]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800478a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800478e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fd fb5e 	bl	8001e50 <HAL_GetTick>
 8004794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004796:	e009      	b.n	80047ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004798:	f7fd fb5a 	bl	8001e50 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d902      	bls.n	80047ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	73fb      	strb	r3, [r7, #15]
          break;
 80047aa:	e005      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047ac:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ef      	beq.n	8004798 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047be:	4b06      	ldr	r3, [pc, #24]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4904      	ldr	r1, [pc, #16]	@ (80047d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000

080047dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e049      	b.n	8004882 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd f81a 	bl	800183c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3304      	adds	r3, #4
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f000 fa74 	bl	8004d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e049      	b.n	8004930 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f841 	bl	8004938 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2202      	movs	r2, #2
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f000 fa1d 	bl	8004d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e0ff      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b14      	cmp	r3, #20
 8004976:	f200 80f0 	bhi.w	8004b5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800497a:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049d5 	.word	0x080049d5
 8004984:	08004b5b 	.word	0x08004b5b
 8004988:	08004b5b 	.word	0x08004b5b
 800498c:	08004b5b 	.word	0x08004b5b
 8004990:	08004a15 	.word	0x08004a15
 8004994:	08004b5b 	.word	0x08004b5b
 8004998:	08004b5b 	.word	0x08004b5b
 800499c:	08004b5b 	.word	0x08004b5b
 80049a0:	08004a57 	.word	0x08004a57
 80049a4:	08004b5b 	.word	0x08004b5b
 80049a8:	08004b5b 	.word	0x08004b5b
 80049ac:	08004b5b 	.word	0x08004b5b
 80049b0:	08004a97 	.word	0x08004a97
 80049b4:	08004b5b 	.word	0x08004b5b
 80049b8:	08004b5b 	.word	0x08004b5b
 80049bc:	08004b5b 	.word	0x08004b5b
 80049c0:	08004ad9 	.word	0x08004ad9
 80049c4:	08004b5b 	.word	0x08004b5b
 80049c8:	08004b5b 	.word	0x08004b5b
 80049cc:	08004b5b 	.word	0x08004b5b
 80049d0:	08004b19 	.word	0x08004b19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fa3a 	bl	8004e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0204 	bic.w	r2, r2, #4
 80049fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6999      	ldr	r1, [r3, #24]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	619a      	str	r2, [r3, #24]
      break;
 8004a12:	e0a5      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 faaa 	bl	8004f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6999      	ldr	r1, [r3, #24]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	021a      	lsls	r2, r3, #8
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	619a      	str	r2, [r3, #24]
      break;
 8004a54:	e084      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fb13 	bl	8005088 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0208 	orr.w	r2, r2, #8
 8004a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0204 	bic.w	r2, r2, #4
 8004a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69d9      	ldr	r1, [r3, #28]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	61da      	str	r2, [r3, #28]
      break;
 8004a94:	e064      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fb7b 	bl	8005198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69d9      	ldr	r1, [r3, #28]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	021a      	lsls	r2, r3, #8
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	61da      	str	r2, [r3, #28]
      break;
 8004ad6:	e043      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fbc4 	bl	800526c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0208 	orr.w	r2, r2, #8
 8004af2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b16:	e023      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fc08 	bl	8005334 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b58:	e002      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop

08004b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_ConfigClockSource+0x1c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e0b6      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x18a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bcc:	d03e      	beq.n	8004c4c <HAL_TIM_ConfigClockSource+0xd8>
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd2:	f200 8087 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bda:	f000 8086 	beq.w	8004cea <HAL_TIM_ConfigClockSource+0x176>
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be2:	d87f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004be4:	2b70      	cmp	r3, #112	@ 0x70
 8004be6:	d01a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0xaa>
 8004be8:	2b70      	cmp	r3, #112	@ 0x70
 8004bea:	d87b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004bec:	2b60      	cmp	r3, #96	@ 0x60
 8004bee:	d050      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x11e>
 8004bf0:	2b60      	cmp	r3, #96	@ 0x60
 8004bf2:	d877      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004bf4:	2b50      	cmp	r3, #80	@ 0x50
 8004bf6:	d03c      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0xfe>
 8004bf8:	2b50      	cmp	r3, #80	@ 0x50
 8004bfa:	d873      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d058      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x13e>
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d86f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004c04:	2b30      	cmp	r3, #48	@ 0x30
 8004c06:	d064      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c08:	2b30      	cmp	r3, #48	@ 0x30
 8004c0a:	d86b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d060      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d867      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d05c      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d05a      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8004c1c:	e062      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c2e:	f000 fc61 	bl	80054f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	609a      	str	r2, [r3, #8]
      break;
 8004c4a:	e04f      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c5c:	f000 fc4a 	bl	80054f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c6e:	609a      	str	r2, [r3, #8]
      break;
 8004c70:	e03c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f000 fbbe 	bl	8005400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2150      	movs	r1, #80	@ 0x50
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fc17 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004c90:	e02c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f000 fbdd 	bl	800545e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2160      	movs	r1, #96	@ 0x60
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fc07 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004cb0:	e01c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 fb9e 	bl	8005400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2140      	movs	r1, #64	@ 0x40
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fbf7 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e00c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f000 fbee 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004ce2:	e003      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce8:	e000      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a46      	ldr	r2, [pc, #280]	@ (8004e34 <TIM_Base_SetConfig+0x12c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d26:	d00f      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a43      	ldr	r2, [pc, #268]	@ (8004e38 <TIM_Base_SetConfig+0x130>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a42      	ldr	r2, [pc, #264]	@ (8004e3c <TIM_Base_SetConfig+0x134>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a41      	ldr	r2, [pc, #260]	@ (8004e40 <TIM_Base_SetConfig+0x138>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a40      	ldr	r2, [pc, #256]	@ (8004e44 <TIM_Base_SetConfig+0x13c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d108      	bne.n	8004d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a35      	ldr	r2, [pc, #212]	@ (8004e34 <TIM_Base_SetConfig+0x12c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d01f      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d68:	d01b      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a32      	ldr	r2, [pc, #200]	@ (8004e38 <TIM_Base_SetConfig+0x130>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d017      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a31      	ldr	r2, [pc, #196]	@ (8004e3c <TIM_Base_SetConfig+0x134>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d013      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a30      	ldr	r2, [pc, #192]	@ (8004e40 <TIM_Base_SetConfig+0x138>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00f      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2f      	ldr	r2, [pc, #188]	@ (8004e44 <TIM_Base_SetConfig+0x13c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00b      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004e48 <TIM_Base_SetConfig+0x140>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d007      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2d      	ldr	r2, [pc, #180]	@ (8004e4c <TIM_Base_SetConfig+0x144>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e50 <TIM_Base_SetConfig+0x148>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d108      	bne.n	8004db4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a16      	ldr	r2, [pc, #88]	@ (8004e34 <TIM_Base_SetConfig+0x12c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0xf8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a18      	ldr	r2, [pc, #96]	@ (8004e44 <TIM_Base_SetConfig+0x13c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0xf8>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a17      	ldr	r2, [pc, #92]	@ (8004e48 <TIM_Base_SetConfig+0x140>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0xf8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a16      	ldr	r2, [pc, #88]	@ (8004e4c <TIM_Base_SetConfig+0x144>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0xf8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a15      	ldr	r2, [pc, #84]	@ (8004e50 <TIM_Base_SetConfig+0x148>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d103      	bne.n	8004e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f023 0201 	bic.w	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	611a      	str	r2, [r3, #16]
  }
}
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800
 8004e40:	40000c00 	.word	0x40000c00
 8004e44:	40013400 	.word	0x40013400
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800

08004e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f023 0201 	bic.w	r2, r3, #1
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 0302 	bic.w	r3, r3, #2
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <TIM_OC1_SetConfig+0x10c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00f      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a2b      	ldr	r2, [pc, #172]	@ (8004f64 <TIM_OC1_SetConfig+0x110>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00b      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <TIM_OC1_SetConfig+0x114>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d007      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a29      	ldr	r2, [pc, #164]	@ (8004f6c <TIM_OC1_SetConfig+0x118>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d003      	beq.n	8004ed4 <TIM_OC1_SetConfig+0x80>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a28      	ldr	r2, [pc, #160]	@ (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d10c      	bne.n	8004eee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0308 	bic.w	r3, r3, #8
 8004eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f023 0304 	bic.w	r3, r3, #4
 8004eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f60 <TIM_OC1_SetConfig+0x10c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00f      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f64 <TIM_OC1_SetConfig+0x110>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a19      	ldr	r2, [pc, #100]	@ (8004f68 <TIM_OC1_SetConfig+0x114>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d007      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <TIM_OC1_SetConfig+0x118>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d003      	beq.n	8004f16 <TIM_OC1_SetConfig+0xc2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <TIM_OC1_SetConfig+0x11c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d111      	bne.n	8004f3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	621a      	str	r2, [r3, #32]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40013400 	.word	0x40013400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800

08004f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f023 0210 	bic.w	r2, r3, #16
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0320 	bic.w	r3, r3, #32
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a28      	ldr	r2, [pc, #160]	@ (8005074 <TIM_OC2_SetConfig+0x100>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_OC2_SetConfig+0x6c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <TIM_OC2_SetConfig+0x104>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10d      	bne.n	8004ffc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8005074 <TIM_OC2_SetConfig+0x100>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00f      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1c      	ldr	r2, [pc, #112]	@ (8005078 <TIM_OC2_SetConfig+0x104>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00b      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a1b      	ldr	r2, [pc, #108]	@ (800507c <TIM_OC2_SetConfig+0x108>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d007      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a1a      	ldr	r2, [pc, #104]	@ (8005080 <TIM_OC2_SetConfig+0x10c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC2_SetConfig+0xb0>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a19      	ldr	r2, [pc, #100]	@ (8005084 <TIM_OC2_SetConfig+0x110>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d113      	bne.n	800504c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800502a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40013400 	.word	0x40013400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800

08005088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a27      	ldr	r2, [pc, #156]	@ (8005184 <TIM_OC3_SetConfig+0xfc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_OC3_SetConfig+0x6a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a26      	ldr	r2, [pc, #152]	@ (8005188 <TIM_OC3_SetConfig+0x100>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10d      	bne.n	800510e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800510c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <TIM_OC3_SetConfig+0xfc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1b      	ldr	r2, [pc, #108]	@ (8005188 <TIM_OC3_SetConfig+0x100>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1a      	ldr	r2, [pc, #104]	@ (800518c <TIM_OC3_SetConfig+0x104>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a19      	ldr	r2, [pc, #100]	@ (8005190 <TIM_OC3_SetConfig+0x108>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC3_SetConfig+0xae>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a18      	ldr	r2, [pc, #96]	@ (8005194 <TIM_OC3_SetConfig+0x10c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d113      	bne.n	800515e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	621a      	str	r2, [r3, #32]
}
 8005178:	bf00      	nop
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40013400 	.word	0x40013400
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	031b      	lsls	r3, r3, #12
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a18      	ldr	r2, [pc, #96]	@ (8005258 <TIM_OC4_SetConfig+0xc0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00f      	beq.n	800521c <TIM_OC4_SetConfig+0x84>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a17      	ldr	r2, [pc, #92]	@ (800525c <TIM_OC4_SetConfig+0xc4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00b      	beq.n	800521c <TIM_OC4_SetConfig+0x84>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a16      	ldr	r2, [pc, #88]	@ (8005260 <TIM_OC4_SetConfig+0xc8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d007      	beq.n	800521c <TIM_OC4_SetConfig+0x84>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a15      	ldr	r2, [pc, #84]	@ (8005264 <TIM_OC4_SetConfig+0xcc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_OC4_SetConfig+0x84>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a14      	ldr	r2, [pc, #80]	@ (8005268 <TIM_OC4_SetConfig+0xd0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d109      	bne.n	8005230 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40013400 	.word	0x40013400
 8005260:	40014000 	.word	0x40014000
 8005264:	40014400 	.word	0x40014400
 8005268:	40014800 	.word	0x40014800

0800526c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800529a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80052b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a17      	ldr	r2, [pc, #92]	@ (8005320 <TIM_OC5_SetConfig+0xb4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00f      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <TIM_OC5_SetConfig+0xb8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00b      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <TIM_OC5_SetConfig+0xbc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d007      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a14      	ldr	r2, [pc, #80]	@ (800532c <TIM_OC5_SetConfig+0xc0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d003      	beq.n	80052e6 <TIM_OC5_SetConfig+0x7a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a13      	ldr	r2, [pc, #76]	@ (8005330 <TIM_OC5_SetConfig+0xc4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d109      	bne.n	80052fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	621a      	str	r2, [r3, #32]
}
 8005314:	bf00      	nop
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40014000 	.word	0x40014000
 800532c:	40014400 	.word	0x40014400
 8005330:	40014800 	.word	0x40014800

08005334 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800537a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	051b      	lsls	r3, r3, #20
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a18      	ldr	r2, [pc, #96]	@ (80053ec <TIM_OC6_SetConfig+0xb8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00f      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <TIM_OC6_SetConfig+0xbc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00b      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a16      	ldr	r2, [pc, #88]	@ (80053f4 <TIM_OC6_SetConfig+0xc0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d007      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a15      	ldr	r2, [pc, #84]	@ (80053f8 <TIM_OC6_SetConfig+0xc4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_OC6_SetConfig+0x7c>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a14      	ldr	r2, [pc, #80]	@ (80053fc <TIM_OC6_SetConfig+0xc8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d109      	bne.n	80053c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	029b      	lsls	r3, r3, #10
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40013400 	.word	0x40013400
 80053f4:	40014000 	.word	0x40014000
 80053f8:	40014400 	.word	0x40014400
 80053fc:	40014800 	.word	0x40014800

08005400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800542a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 030a 	bic.w	r3, r3, #10
 800543c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f023 0210 	bic.w	r2, r3, #16
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800549a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	f043 0307 	orr.w	r3, r3, #7
 80054e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800550e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	021a      	lsls	r2, r3, #8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	431a      	orrs	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4313      	orrs	r3, r2
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	609a      	str	r2, [r3, #8]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005548:	2302      	movs	r3, #2
 800554a:	e068      	b.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a2e      	ldr	r2, [pc, #184]	@ (800562c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a2d      	ldr	r2, [pc, #180]	@ (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d108      	bne.n	8005592 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005586:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005598:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1e      	ldr	r2, [pc, #120]	@ (800562c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01d      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055be:	d018      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005634 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005638 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00e      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a18      	ldr	r2, [pc, #96]	@ (800563c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d009      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a13      	ldr	r2, [pc, #76]	@ (8005630 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d004      	beq.n	80055f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a14      	ldr	r2, [pc, #80]	@ (8005640 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d10c      	bne.n	800560c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	4313      	orrs	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40012c00 	.word	0x40012c00
 8005630:	40013400 	.word	0x40013400
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40014000 	.word	0x40014000

08005644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e040      	b.n	80056d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fc f952 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	@ 0x24
 8005670:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0201 	bic.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fee6 	bl	800645c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fc2b 	bl	8005eec <UART_SetConfig>
 8005696:	4603      	mov	r3, r0
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e01b      	b.n	80056d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 ff65 	bl	80065a0 <UART_CheckIdleState>
 80056d6:	4603      	mov	r3, r0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e048      	b.n	8005784 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7fc f904 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2224      	movs	r2, #36	@ 0x24
 800570c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0201 	bic.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fe98 	bl	800645c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 fbdd 	bl	8005eec <UART_SetConfig>
 8005732:	4603      	mov	r3, r0
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e023      	b.n	8005784 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800574a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800575a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0208 	orr.w	r2, r2, #8
 800576a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 ff0f 	bl	80065a0 <UART_CheckIdleState>
 8005782:	4603      	mov	r3, r0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	@ 0x28
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d177      	bne.n	8005894 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_UART_Transmit+0x24>
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e070      	b.n	8005896 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2221      	movs	r2, #33	@ 0x21
 80057c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057c2:	f7fc fb45 	bl	8001e50 <HAL_GetTick>
 80057c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	88fa      	ldrh	r2, [r7, #6]
 80057d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057e0:	d108      	bne.n	80057f4 <HAL_UART_Transmit+0x68>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	e003      	b.n	80057fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057fc:	e02f      	b.n	800585e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	2180      	movs	r1, #128	@ 0x80
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 ff71 	bl	80066f0 <UART_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d004      	beq.n	800581e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e03b      	b.n	8005896 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	881a      	ldrh	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005830:	b292      	uxth	r2, r2
 8005832:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	3302      	adds	r3, #2
 8005838:	61bb      	str	r3, [r7, #24]
 800583a:	e007      	b.n	800584c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	781a      	ldrb	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1c9      	bne.n	80057fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2200      	movs	r2, #0
 8005872:	2140      	movs	r1, #64	@ 0x40
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 ff3b 	bl	80066f0 <UART_WaitOnFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2220      	movs	r2, #32
 8005884:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e005      	b.n	8005896 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
	...

080058a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b0ba      	sub	sp, #232	@ 0xe8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80058ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 80058ce:	4013      	ands	r3, r2
 80058d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80058d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d115      	bne.n	8005908 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00f      	beq.n	8005908 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d009      	beq.n	8005908 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 82ca 	beq.w	8005e92 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
      }
      return;
 8005906:	e2c4      	b.n	8005e92 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8117 	beq.w	8005b40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800591e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005922:	4b85      	ldr	r3, [pc, #532]	@ (8005b38 <HAL_UART_IRQHandler+0x298>)
 8005924:	4013      	ands	r3, r2
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 810a 	beq.w	8005b40 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800592c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d011      	beq.n	800595c <HAL_UART_IRQHandler+0xbc>
 8005938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800593c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2201      	movs	r2, #1
 800594a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005952:	f043 0201 	orr.w	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d011      	beq.n	800598c <HAL_UART_IRQHandler+0xec>
 8005968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2202      	movs	r2, #2
 800597a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005982:	f043 0204 	orr.w	r2, r3, #4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800598c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d011      	beq.n	80059bc <HAL_UART_IRQHandler+0x11c>
 8005998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00b      	beq.n	80059bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2204      	movs	r2, #4
 80059aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059b2:	f043 0202 	orr.w	r2, r3, #2
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d017      	beq.n	80059f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2208      	movs	r2, #8
 80059e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059ee:	f043 0208 	orr.w	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d012      	beq.n	8005a2a <HAL_UART_IRQHandler+0x18a>
 8005a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00c      	beq.n	8005a2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a20:	f043 0220 	orr.w	r2, r3, #32
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8230 	beq.w	8005e96 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a72:	2b40      	cmp	r3, #64	@ 0x40
 8005a74:	d005      	beq.n	8005a82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04f      	beq.n	8005b22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fea1 	bl	80067ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a92:	2b40      	cmp	r3, #64	@ 0x40
 8005a94:	d141      	bne.n	8005b1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3308      	adds	r3, #8
 8005abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1d9      	bne.n	8005a96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d013      	beq.n	8005b12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aee:	4a13      	ldr	r2, [pc, #76]	@ (8005b3c <HAL_UART_IRQHandler+0x29c>)
 8005af0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fc fb29 	bl	800214e <HAL_DMA_Abort_IT>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d017      	beq.n	8005b32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	e00f      	b.n	8005b32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9d4 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	e00b      	b.n	8005b32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f9d0 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	e007      	b.n	8005b32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f9cc 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005b30:	e1b1      	b.n	8005e96 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b32:	bf00      	nop
    return;
 8005b34:	e1af      	b.n	8005e96 <HAL_UART_IRQHandler+0x5f6>
 8005b36:	bf00      	nop
 8005b38:	04000120 	.word	0x04000120
 8005b3c:	08006893 	.word	0x08006893

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	f040 816a 	bne.w	8005e1e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8163 	beq.w	8005e1e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 815c 	beq.w	8005e1e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b40      	cmp	r3, #64	@ 0x40
 8005b7a:	f040 80d4 	bne.w	8005d26 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80ad 	beq.w	8005cee <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	f080 80a5 	bcs.w	8005cee <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005baa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 8086 	bne.w	8005ccc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bee:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1da      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c1c:	f023 0301 	bic.w	r3, r3, #1
 8005c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c2e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c32:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e1      	bne.n	8005c0a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e3      	bne.n	8005c46 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c9c:	f023 0310 	bic.w	r3, r3, #16
 8005ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005cae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e4      	bne.n	8005c8c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fc fa03 	bl	80020d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8f4 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005cec:	e0d5      	b.n	8005e9a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005cf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	f040 80ce 	bne.w	8005e9a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	f040 80c5 	bne.w	8005e9a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8d8 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
      return;
 8005d24:	e0b9      	b.n	8005e9a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80ab 	beq.w	8005e9e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80a6 	beq.w	8005e9e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e4      	bne.n	8005d52 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	623b      	str	r3, [r7, #32]
   return(result);
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005dac:	633a      	str	r2, [r7, #48]	@ 0x30
 8005dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e3      	bne.n	8005d88 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f023 0310 	bic.w	r3, r3, #16
 8005de8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	69b9      	ldr	r1, [r7, #24]
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	617b      	str	r3, [r7, #20]
   return(result);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e4      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f85c 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e1c:	e03f      	b.n	8005e9e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00e      	beq.n	8005e48 <HAL_UART_IRQHandler+0x5a8>
 8005e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005e3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fd66 	bl	8006912 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e46:	e02d      	b.n	8005ea4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00e      	beq.n	8005e72 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01c      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
    }
    return;
 8005e70:	e017      	b.n	8005ea2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d012      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x604>
 8005e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00c      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fd17 	bl	80068be <UART_EndTransmit_IT>
    return;
 8005e90:	e008      	b.n	8005ea4 <HAL_UART_IRQHandler+0x604>
      return;
 8005e92:	bf00      	nop
 8005e94:	e006      	b.n	8005ea4 <HAL_UART_IRQHandler+0x604>
    return;
 8005e96:	bf00      	nop
 8005e98:	e004      	b.n	8005ea4 <HAL_UART_IRQHandler+0x604>
      return;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <HAL_UART_IRQHandler+0x604>
      return;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <HAL_UART_IRQHandler+0x604>
    return;
 8005ea2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ea4:	37e8      	adds	r7, #232	@ 0xe8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop

08005eac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef0:	b08a      	sub	sp, #40	@ 0x28
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4ba4      	ldr	r3, [pc, #656]	@ (80061ac <UART_SetConfig+0x2c0>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f24:	430b      	orrs	r3, r1
 8005f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a99      	ldr	r2, [pc, #612]	@ (80061b0 <UART_SetConfig+0x2c4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f54:	4313      	orrs	r3, r2
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a90      	ldr	r2, [pc, #576]	@ (80061b4 <UART_SetConfig+0x2c8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d126      	bne.n	8005fc4 <UART_SetConfig+0xd8>
 8005f76:	4b90      	ldr	r3, [pc, #576]	@ (80061b8 <UART_SetConfig+0x2cc>)
 8005f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d81b      	bhi.n	8005fbc <UART_SetConfig+0xd0>
 8005f84:	a201      	add	r2, pc, #4	@ (adr r2, 8005f8c <UART_SetConfig+0xa0>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005fad 	.word	0x08005fad
 8005f94:	08005fa5 	.word	0x08005fa5
 8005f98:	08005fb5 	.word	0x08005fb5
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fa2:	e116      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005faa:	e112      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8005fac:	2304      	movs	r3, #4
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb2:	e10e      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fba:	e10a      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fc2:	e106      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a7c      	ldr	r2, [pc, #496]	@ (80061bc <UART_SetConfig+0x2d0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d138      	bne.n	8006040 <UART_SetConfig+0x154>
 8005fce:	4b7a      	ldr	r3, [pc, #488]	@ (80061b8 <UART_SetConfig+0x2cc>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd4:	f003 030c 	and.w	r3, r3, #12
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	d82d      	bhi.n	8006038 <UART_SetConfig+0x14c>
 8005fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8005fe4 <UART_SetConfig+0xf8>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	08006019 	.word	0x08006019
 8005fe8:	08006039 	.word	0x08006039
 8005fec:	08006039 	.word	0x08006039
 8005ff0:	08006039 	.word	0x08006039
 8005ff4:	08006029 	.word	0x08006029
 8005ff8:	08006039 	.word	0x08006039
 8005ffc:	08006039 	.word	0x08006039
 8006000:	08006039 	.word	0x08006039
 8006004:	08006021 	.word	0x08006021
 8006008:	08006039 	.word	0x08006039
 800600c:	08006039 	.word	0x08006039
 8006010:	08006039 	.word	0x08006039
 8006014:	08006031 	.word	0x08006031
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800601e:	e0d8      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006020:	2302      	movs	r3, #2
 8006022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006026:	e0d4      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006028:	2304      	movs	r3, #4
 800602a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800602e:	e0d0      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006030:	2308      	movs	r3, #8
 8006032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006036:	e0cc      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006038:	2310      	movs	r3, #16
 800603a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800603e:	e0c8      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a5e      	ldr	r2, [pc, #376]	@ (80061c0 <UART_SetConfig+0x2d4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d125      	bne.n	8006096 <UART_SetConfig+0x1aa>
 800604a:	4b5b      	ldr	r3, [pc, #364]	@ (80061b8 <UART_SetConfig+0x2cc>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006050:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006054:	2b30      	cmp	r3, #48	@ 0x30
 8006056:	d016      	beq.n	8006086 <UART_SetConfig+0x19a>
 8006058:	2b30      	cmp	r3, #48	@ 0x30
 800605a:	d818      	bhi.n	800608e <UART_SetConfig+0x1a2>
 800605c:	2b20      	cmp	r3, #32
 800605e:	d00a      	beq.n	8006076 <UART_SetConfig+0x18a>
 8006060:	2b20      	cmp	r3, #32
 8006062:	d814      	bhi.n	800608e <UART_SetConfig+0x1a2>
 8006064:	2b00      	cmp	r3, #0
 8006066:	d002      	beq.n	800606e <UART_SetConfig+0x182>
 8006068:	2b10      	cmp	r3, #16
 800606a:	d008      	beq.n	800607e <UART_SetConfig+0x192>
 800606c:	e00f      	b.n	800608e <UART_SetConfig+0x1a2>
 800606e:	2300      	movs	r3, #0
 8006070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006074:	e0ad      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006076:	2302      	movs	r3, #2
 8006078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800607c:	e0a9      	b.n	80061d2 <UART_SetConfig+0x2e6>
 800607e:	2304      	movs	r3, #4
 8006080:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006084:	e0a5      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006086:	2308      	movs	r3, #8
 8006088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800608c:	e0a1      	b.n	80061d2 <UART_SetConfig+0x2e6>
 800608e:	2310      	movs	r3, #16
 8006090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006094:	e09d      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a4a      	ldr	r2, [pc, #296]	@ (80061c4 <UART_SetConfig+0x2d8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d125      	bne.n	80060ec <UART_SetConfig+0x200>
 80060a0:	4b45      	ldr	r3, [pc, #276]	@ (80061b8 <UART_SetConfig+0x2cc>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80060ac:	d016      	beq.n	80060dc <UART_SetConfig+0x1f0>
 80060ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80060b0:	d818      	bhi.n	80060e4 <UART_SetConfig+0x1f8>
 80060b2:	2b80      	cmp	r3, #128	@ 0x80
 80060b4:	d00a      	beq.n	80060cc <UART_SetConfig+0x1e0>
 80060b6:	2b80      	cmp	r3, #128	@ 0x80
 80060b8:	d814      	bhi.n	80060e4 <UART_SetConfig+0x1f8>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <UART_SetConfig+0x1d8>
 80060be:	2b40      	cmp	r3, #64	@ 0x40
 80060c0:	d008      	beq.n	80060d4 <UART_SetConfig+0x1e8>
 80060c2:	e00f      	b.n	80060e4 <UART_SetConfig+0x1f8>
 80060c4:	2300      	movs	r3, #0
 80060c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ca:	e082      	b.n	80061d2 <UART_SetConfig+0x2e6>
 80060cc:	2302      	movs	r3, #2
 80060ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060d2:	e07e      	b.n	80061d2 <UART_SetConfig+0x2e6>
 80060d4:	2304      	movs	r3, #4
 80060d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060da:	e07a      	b.n	80061d2 <UART_SetConfig+0x2e6>
 80060dc:	2308      	movs	r3, #8
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060e2:	e076      	b.n	80061d2 <UART_SetConfig+0x2e6>
 80060e4:	2310      	movs	r3, #16
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ea:	e072      	b.n	80061d2 <UART_SetConfig+0x2e6>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a35      	ldr	r2, [pc, #212]	@ (80061c8 <UART_SetConfig+0x2dc>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d12a      	bne.n	800614c <UART_SetConfig+0x260>
 80060f6:	4b30      	ldr	r3, [pc, #192]	@ (80061b8 <UART_SetConfig+0x2cc>)
 80060f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006100:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006104:	d01a      	beq.n	800613c <UART_SetConfig+0x250>
 8006106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800610a:	d81b      	bhi.n	8006144 <UART_SetConfig+0x258>
 800610c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006110:	d00c      	beq.n	800612c <UART_SetConfig+0x240>
 8006112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006116:	d815      	bhi.n	8006144 <UART_SetConfig+0x258>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <UART_SetConfig+0x238>
 800611c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006120:	d008      	beq.n	8006134 <UART_SetConfig+0x248>
 8006122:	e00f      	b.n	8006144 <UART_SetConfig+0x258>
 8006124:	2300      	movs	r3, #0
 8006126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612a:	e052      	b.n	80061d2 <UART_SetConfig+0x2e6>
 800612c:	2302      	movs	r3, #2
 800612e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006132:	e04e      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006134:	2304      	movs	r3, #4
 8006136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800613a:	e04a      	b.n	80061d2 <UART_SetConfig+0x2e6>
 800613c:	2308      	movs	r3, #8
 800613e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006142:	e046      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006144:	2310      	movs	r3, #16
 8006146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800614a:	e042      	b.n	80061d2 <UART_SetConfig+0x2e6>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a17      	ldr	r2, [pc, #92]	@ (80061b0 <UART_SetConfig+0x2c4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d13a      	bne.n	80061cc <UART_SetConfig+0x2e0>
 8006156:	4b18      	ldr	r3, [pc, #96]	@ (80061b8 <UART_SetConfig+0x2cc>)
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800615c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006160:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006164:	d01a      	beq.n	800619c <UART_SetConfig+0x2b0>
 8006166:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800616a:	d81b      	bhi.n	80061a4 <UART_SetConfig+0x2b8>
 800616c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006170:	d00c      	beq.n	800618c <UART_SetConfig+0x2a0>
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006176:	d815      	bhi.n	80061a4 <UART_SetConfig+0x2b8>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <UART_SetConfig+0x298>
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006180:	d008      	beq.n	8006194 <UART_SetConfig+0x2a8>
 8006182:	e00f      	b.n	80061a4 <UART_SetConfig+0x2b8>
 8006184:	2300      	movs	r3, #0
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800618a:	e022      	b.n	80061d2 <UART_SetConfig+0x2e6>
 800618c:	2302      	movs	r3, #2
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006192:	e01e      	b.n	80061d2 <UART_SetConfig+0x2e6>
 8006194:	2304      	movs	r3, #4
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800619a:	e01a      	b.n	80061d2 <UART_SetConfig+0x2e6>
 800619c:	2308      	movs	r3, #8
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061a2:	e016      	b.n	80061d2 <UART_SetConfig+0x2e6>
 80061a4:	2310      	movs	r3, #16
 80061a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061aa:	e012      	b.n	80061d2 <UART_SetConfig+0x2e6>
 80061ac:	efff69f3 	.word	0xefff69f3
 80061b0:	40008000 	.word	0x40008000
 80061b4:	40013800 	.word	0x40013800
 80061b8:	40021000 	.word	0x40021000
 80061bc:	40004400 	.word	0x40004400
 80061c0:	40004800 	.word	0x40004800
 80061c4:	40004c00 	.word	0x40004c00
 80061c8:	40005000 	.word	0x40005000
 80061cc:	2310      	movs	r3, #16
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a9f      	ldr	r2, [pc, #636]	@ (8006454 <UART_SetConfig+0x568>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d17a      	bne.n	80062d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d824      	bhi.n	800622e <UART_SetConfig+0x342>
 80061e4:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <UART_SetConfig+0x300>)
 80061e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ea:	bf00      	nop
 80061ec:	08006211 	.word	0x08006211
 80061f0:	0800622f 	.word	0x0800622f
 80061f4:	08006219 	.word	0x08006219
 80061f8:	0800622f 	.word	0x0800622f
 80061fc:	0800621f 	.word	0x0800621f
 8006200:	0800622f 	.word	0x0800622f
 8006204:	0800622f 	.word	0x0800622f
 8006208:	0800622f 	.word	0x0800622f
 800620c:	08006227 	.word	0x08006227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006210:	f7fd fd9c 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8006214:	61f8      	str	r0, [r7, #28]
        break;
 8006216:	e010      	b.n	800623a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006218:	4b8f      	ldr	r3, [pc, #572]	@ (8006458 <UART_SetConfig+0x56c>)
 800621a:	61fb      	str	r3, [r7, #28]
        break;
 800621c:	e00d      	b.n	800623a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800621e:	f7fd fcfd 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8006222:	61f8      	str	r0, [r7, #28]
        break;
 8006224:	e009      	b.n	800623a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006226:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800622a:	61fb      	str	r3, [r7, #28]
        break;
 800622c:	e005      	b.n	800623a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006238:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80fb 	beq.w	8006438 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	4413      	add	r3, r2
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	429a      	cmp	r2, r3
 8006250:	d305      	bcc.n	800625e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	429a      	cmp	r2, r3
 800625c:	d903      	bls.n	8006266 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006264:	e0e8      	b.n	8006438 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	2200      	movs	r2, #0
 800626a:	461c      	mov	r4, r3
 800626c:	4615      	mov	r5, r2
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	022b      	lsls	r3, r5, #8
 8006278:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800627c:	0222      	lsls	r2, r4, #8
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	6849      	ldr	r1, [r1, #4]
 8006282:	0849      	lsrs	r1, r1, #1
 8006284:	2000      	movs	r0, #0
 8006286:	4688      	mov	r8, r1
 8006288:	4681      	mov	r9, r0
 800628a:	eb12 0a08 	adds.w	sl, r2, r8
 800628e:	eb43 0b09 	adc.w	fp, r3, r9
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	603b      	str	r3, [r7, #0]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a0:	4650      	mov	r0, sl
 80062a2:	4659      	mov	r1, fp
 80062a4:	f7fa fcf0 	bl	8000c88 <__aeabi_uldivmod>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4613      	mov	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062b6:	d308      	bcc.n	80062ca <UART_SetConfig+0x3de>
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062be:	d204      	bcs.n	80062ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	e0b6      	b.n	8006438 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062d0:	e0b2      	b.n	8006438 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062da:	d15e      	bne.n	800639a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80062dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d828      	bhi.n	8006336 <UART_SetConfig+0x44a>
 80062e4:	a201      	add	r2, pc, #4	@ (adr r2, 80062ec <UART_SetConfig+0x400>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	08006311 	.word	0x08006311
 80062f0:	08006319 	.word	0x08006319
 80062f4:	08006321 	.word	0x08006321
 80062f8:	08006337 	.word	0x08006337
 80062fc:	08006327 	.word	0x08006327
 8006300:	08006337 	.word	0x08006337
 8006304:	08006337 	.word	0x08006337
 8006308:	08006337 	.word	0x08006337
 800630c:	0800632f 	.word	0x0800632f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006310:	f7fd fd1c 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8006314:	61f8      	str	r0, [r7, #28]
        break;
 8006316:	e014      	b.n	8006342 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006318:	f7fd fd2e 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 800631c:	61f8      	str	r0, [r7, #28]
        break;
 800631e:	e010      	b.n	8006342 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006320:	4b4d      	ldr	r3, [pc, #308]	@ (8006458 <UART_SetConfig+0x56c>)
 8006322:	61fb      	str	r3, [r7, #28]
        break;
 8006324:	e00d      	b.n	8006342 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006326:	f7fd fc79 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 800632a:	61f8      	str	r0, [r7, #28]
        break;
 800632c:	e009      	b.n	8006342 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800632e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006332:	61fb      	str	r3, [r7, #28]
        break;
 8006334:	e005      	b.n	8006342 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006340:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d077      	beq.n	8006438 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	005a      	lsls	r2, r3, #1
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	441a      	add	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	2b0f      	cmp	r3, #15
 8006362:	d916      	bls.n	8006392 <UART_SetConfig+0x4a6>
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800636a:	d212      	bcs.n	8006392 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	b29b      	uxth	r3, r3
 8006370:	f023 030f 	bic.w	r3, r3, #15
 8006374:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	085b      	lsrs	r3, r3, #1
 800637a:	b29b      	uxth	r3, r3
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	b29a      	uxth	r2, r3
 8006382:	8afb      	ldrh	r3, [r7, #22]
 8006384:	4313      	orrs	r3, r2
 8006386:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	8afa      	ldrh	r2, [r7, #22]
 800638e:	60da      	str	r2, [r3, #12]
 8006390:	e052      	b.n	8006438 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006398:	e04e      	b.n	8006438 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800639a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800639e:	2b08      	cmp	r3, #8
 80063a0:	d827      	bhi.n	80063f2 <UART_SetConfig+0x506>
 80063a2:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <UART_SetConfig+0x4bc>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063cd 	.word	0x080063cd
 80063ac:	080063d5 	.word	0x080063d5
 80063b0:	080063dd 	.word	0x080063dd
 80063b4:	080063f3 	.word	0x080063f3
 80063b8:	080063e3 	.word	0x080063e3
 80063bc:	080063f3 	.word	0x080063f3
 80063c0:	080063f3 	.word	0x080063f3
 80063c4:	080063f3 	.word	0x080063f3
 80063c8:	080063eb 	.word	0x080063eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063cc:	f7fd fcbe 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 80063d0:	61f8      	str	r0, [r7, #28]
        break;
 80063d2:	e014      	b.n	80063fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063d4:	f7fd fcd0 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 80063d8:	61f8      	str	r0, [r7, #28]
        break;
 80063da:	e010      	b.n	80063fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006458 <UART_SetConfig+0x56c>)
 80063de:	61fb      	str	r3, [r7, #28]
        break;
 80063e0:	e00d      	b.n	80063fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063e2:	f7fd fc1b 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 80063e6:	61f8      	str	r0, [r7, #28]
        break;
 80063e8:	e009      	b.n	80063fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ee:	61fb      	str	r3, [r7, #28]
        break;
 80063f0:	e005      	b.n	80063fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063fc:	bf00      	nop
    }

    if (pclk != 0U)
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d019      	beq.n	8006438 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	085a      	lsrs	r2, r3, #1
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	441a      	add	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	fbb2 f3f3 	udiv	r3, r2, r3
 8006416:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	2b0f      	cmp	r3, #15
 800641c:	d909      	bls.n	8006432 <UART_SetConfig+0x546>
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006424:	d205      	bcs.n	8006432 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	b29a      	uxth	r2, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60da      	str	r2, [r3, #12]
 8006430:	e002      	b.n	8006438 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006444:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006448:	4618      	mov	r0, r3
 800644a:	3728      	adds	r7, #40	@ 0x28
 800644c:	46bd      	mov	sp, r7
 800644e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006452:	bf00      	nop
 8006454:	40008000 	.word	0x40008000
 8006458:	00f42400 	.word	0x00f42400

0800645c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	430a      	orrs	r2, r1
 8006484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00a      	beq.n	80064a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00a      	beq.n	80064ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01a      	beq.n	8006572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655a:	d10a      	bne.n	8006572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  }
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b098      	sub	sp, #96	@ 0x60
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065b0:	f7fb fc4e 	bl	8001e50 <HAL_GetTick>
 80065b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d12e      	bne.n	8006622 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065cc:	2200      	movs	r2, #0
 80065ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f88c 	bl	80066f0 <UART_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d021      	beq.n	8006622 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	461a      	mov	r2, r3
 80065fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80065fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006602:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800660a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e6      	bne.n	80065de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e062      	b.n	80066e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b04      	cmp	r3, #4
 800662e:	d149      	bne.n	80066c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006638:	2200      	movs	r2, #0
 800663a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f856 	bl	80066f0 <UART_WaitOnFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d03c      	beq.n	80066c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	623b      	str	r3, [r7, #32]
   return(result);
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006668:	633b      	str	r3, [r7, #48]	@ 0x30
 800666a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800666e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e6      	bne.n	800664a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3308      	adds	r3, #8
 8006682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	60fb      	str	r3, [r7, #12]
   return(result);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3308      	adds	r3, #8
 800669a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800669c:	61fa      	str	r2, [r7, #28]
 800669e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	69b9      	ldr	r1, [r7, #24]
 80066a2:	69fa      	ldr	r2, [r7, #28]
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	617b      	str	r3, [r7, #20]
   return(result);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e5      	bne.n	800667c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e011      	b.n	80066e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3758      	adds	r7, #88	@ 0x58
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	4613      	mov	r3, r2
 80066fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006700:	e04f      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006708:	d04b      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670a:	f7fb fba1 	bl	8001e50 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	429a      	cmp	r2, r3
 8006718:	d302      	bcc.n	8006720 <UART_WaitOnFlagUntilTimeout+0x30>
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d101      	bne.n	8006724 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e04e      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b00      	cmp	r3, #0
 8006730:	d037      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b80      	cmp	r3, #128	@ 0x80
 8006736:	d034      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b40      	cmp	r3, #64	@ 0x40
 800673c:	d031      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	2b08      	cmp	r3, #8
 800674a:	d110      	bne.n	800676e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2208      	movs	r2, #8
 8006752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 f838 	bl	80067ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2208      	movs	r2, #8
 800675e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e029      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006778:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800677c:	d111      	bne.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f81e 	bl	80067ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e00f      	b.n	80067c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	bf0c      	ite	eq
 80067b2:	2301      	moveq	r3, #1
 80067b4:	2300      	movne	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d0a0      	beq.n	8006702 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b095      	sub	sp, #84	@ 0x54
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80067f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e6      	bne.n	80067d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	61fb      	str	r3, [r7, #28]
   return(result);
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006824:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006826:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800682a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e5      	bne.n	8006804 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800683c:	2b01      	cmp	r3, #1
 800683e:	d118      	bne.n	8006872 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	60bb      	str	r3, [r7, #8]
   return(result);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f023 0310 	bic.w	r3, r3, #16
 8006854:	647b      	str	r3, [r7, #68]	@ 0x44
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6979      	ldr	r1, [r7, #20]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	613b      	str	r3, [r7, #16]
   return(result);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e6      	bne.n	8006840 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006886:	bf00      	nop
 8006888:	3754      	adds	r7, #84	@ 0x54
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f7ff fb05 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b088      	sub	sp, #32
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	6979      	ldr	r1, [r7, #20]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	613b      	str	r3, [r7, #16]
   return(result);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e6      	bne.n	80068c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2220      	movs	r2, #32
 80068fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff fad1 	bl	8005eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800690a:	bf00      	nop
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <__cvt>:
 8006926:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800692a:	ec57 6b10 	vmov	r6, r7, d0
 800692e:	2f00      	cmp	r7, #0
 8006930:	460c      	mov	r4, r1
 8006932:	4619      	mov	r1, r3
 8006934:	463b      	mov	r3, r7
 8006936:	bfbb      	ittet	lt
 8006938:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800693c:	461f      	movlt	r7, r3
 800693e:	2300      	movge	r3, #0
 8006940:	232d      	movlt	r3, #45	@ 0x2d
 8006942:	700b      	strb	r3, [r1, #0]
 8006944:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006946:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800694a:	4691      	mov	r9, r2
 800694c:	f023 0820 	bic.w	r8, r3, #32
 8006950:	bfbc      	itt	lt
 8006952:	4632      	movlt	r2, r6
 8006954:	4616      	movlt	r6, r2
 8006956:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800695a:	d005      	beq.n	8006968 <__cvt+0x42>
 800695c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006960:	d100      	bne.n	8006964 <__cvt+0x3e>
 8006962:	3401      	adds	r4, #1
 8006964:	2102      	movs	r1, #2
 8006966:	e000      	b.n	800696a <__cvt+0x44>
 8006968:	2103      	movs	r1, #3
 800696a:	ab03      	add	r3, sp, #12
 800696c:	9301      	str	r3, [sp, #4]
 800696e:	ab02      	add	r3, sp, #8
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	ec47 6b10 	vmov	d0, r6, r7
 8006976:	4653      	mov	r3, sl
 8006978:	4622      	mov	r2, r4
 800697a:	f000 fee1 	bl	8007740 <_dtoa_r>
 800697e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006982:	4605      	mov	r5, r0
 8006984:	d119      	bne.n	80069ba <__cvt+0x94>
 8006986:	f019 0f01 	tst.w	r9, #1
 800698a:	d00e      	beq.n	80069aa <__cvt+0x84>
 800698c:	eb00 0904 	add.w	r9, r0, r4
 8006990:	2200      	movs	r2, #0
 8006992:	2300      	movs	r3, #0
 8006994:	4630      	mov	r0, r6
 8006996:	4639      	mov	r1, r7
 8006998:	f7fa f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800699c:	b108      	cbz	r0, 80069a2 <__cvt+0x7c>
 800699e:	f8cd 900c 	str.w	r9, [sp, #12]
 80069a2:	2230      	movs	r2, #48	@ 0x30
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	454b      	cmp	r3, r9
 80069a8:	d31e      	bcc.n	80069e8 <__cvt+0xc2>
 80069aa:	9b03      	ldr	r3, [sp, #12]
 80069ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069ae:	1b5b      	subs	r3, r3, r5
 80069b0:	4628      	mov	r0, r5
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	b004      	add	sp, #16
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069be:	eb00 0904 	add.w	r9, r0, r4
 80069c2:	d1e5      	bne.n	8006990 <__cvt+0x6a>
 80069c4:	7803      	ldrb	r3, [r0, #0]
 80069c6:	2b30      	cmp	r3, #48	@ 0x30
 80069c8:	d10a      	bne.n	80069e0 <__cvt+0xba>
 80069ca:	2200      	movs	r2, #0
 80069cc:	2300      	movs	r3, #0
 80069ce:	4630      	mov	r0, r6
 80069d0:	4639      	mov	r1, r7
 80069d2:	f7fa f879 	bl	8000ac8 <__aeabi_dcmpeq>
 80069d6:	b918      	cbnz	r0, 80069e0 <__cvt+0xba>
 80069d8:	f1c4 0401 	rsb	r4, r4, #1
 80069dc:	f8ca 4000 	str.w	r4, [sl]
 80069e0:	f8da 3000 	ldr.w	r3, [sl]
 80069e4:	4499      	add	r9, r3
 80069e6:	e7d3      	b.n	8006990 <__cvt+0x6a>
 80069e8:	1c59      	adds	r1, r3, #1
 80069ea:	9103      	str	r1, [sp, #12]
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e7d9      	b.n	80069a4 <__cvt+0x7e>

080069f0 <__exponent>:
 80069f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069f2:	2900      	cmp	r1, #0
 80069f4:	bfba      	itte	lt
 80069f6:	4249      	neglt	r1, r1
 80069f8:	232d      	movlt	r3, #45	@ 0x2d
 80069fa:	232b      	movge	r3, #43	@ 0x2b
 80069fc:	2909      	cmp	r1, #9
 80069fe:	7002      	strb	r2, [r0, #0]
 8006a00:	7043      	strb	r3, [r0, #1]
 8006a02:	dd29      	ble.n	8006a58 <__exponent+0x68>
 8006a04:	f10d 0307 	add.w	r3, sp, #7
 8006a08:	461d      	mov	r5, r3
 8006a0a:	270a      	movs	r7, #10
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a12:	fb07 1416 	mls	r4, r7, r6, r1
 8006a16:	3430      	adds	r4, #48	@ 0x30
 8006a18:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	2c63      	cmp	r4, #99	@ 0x63
 8006a20:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a24:	4631      	mov	r1, r6
 8006a26:	dcf1      	bgt.n	8006a0c <__exponent+0x1c>
 8006a28:	3130      	adds	r1, #48	@ 0x30
 8006a2a:	1e94      	subs	r4, r2, #2
 8006a2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a30:	1c41      	adds	r1, r0, #1
 8006a32:	4623      	mov	r3, r4
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	d30a      	bcc.n	8006a4e <__exponent+0x5e>
 8006a38:	f10d 0309 	add.w	r3, sp, #9
 8006a3c:	1a9b      	subs	r3, r3, r2
 8006a3e:	42ac      	cmp	r4, r5
 8006a40:	bf88      	it	hi
 8006a42:	2300      	movhi	r3, #0
 8006a44:	3302      	adds	r3, #2
 8006a46:	4403      	add	r3, r0
 8006a48:	1a18      	subs	r0, r3, r0
 8006a4a:	b003      	add	sp, #12
 8006a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a4e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a52:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a56:	e7ed      	b.n	8006a34 <__exponent+0x44>
 8006a58:	2330      	movs	r3, #48	@ 0x30
 8006a5a:	3130      	adds	r1, #48	@ 0x30
 8006a5c:	7083      	strb	r3, [r0, #2]
 8006a5e:	70c1      	strb	r1, [r0, #3]
 8006a60:	1d03      	adds	r3, r0, #4
 8006a62:	e7f1      	b.n	8006a48 <__exponent+0x58>

08006a64 <_printf_float>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	b08d      	sub	sp, #52	@ 0x34
 8006a6a:	460c      	mov	r4, r1
 8006a6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a70:	4616      	mov	r6, r2
 8006a72:	461f      	mov	r7, r3
 8006a74:	4605      	mov	r5, r0
 8006a76:	f000 fd61 	bl	800753c <_localeconv_r>
 8006a7a:	6803      	ldr	r3, [r0, #0]
 8006a7c:	9304      	str	r3, [sp, #16]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7f9 fbf6 	bl	8000270 <strlen>
 8006a84:	2300      	movs	r3, #0
 8006a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a88:	f8d8 3000 	ldr.w	r3, [r8]
 8006a8c:	9005      	str	r0, [sp, #20]
 8006a8e:	3307      	adds	r3, #7
 8006a90:	f023 0307 	bic.w	r3, r3, #7
 8006a94:	f103 0208 	add.w	r2, r3, #8
 8006a98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a9c:	f8d4 b000 	ldr.w	fp, [r4]
 8006aa0:	f8c8 2000 	str.w	r2, [r8]
 8006aa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006aa8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006aac:	9307      	str	r3, [sp, #28]
 8006aae:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ab2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aba:	4b9c      	ldr	r3, [pc, #624]	@ (8006d2c <_printf_float+0x2c8>)
 8006abc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac0:	f7fa f834 	bl	8000b2c <__aeabi_dcmpun>
 8006ac4:	bb70      	cbnz	r0, 8006b24 <_printf_float+0xc0>
 8006ac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aca:	4b98      	ldr	r3, [pc, #608]	@ (8006d2c <_printf_float+0x2c8>)
 8006acc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad0:	f7fa f80e 	bl	8000af0 <__aeabi_dcmple>
 8006ad4:	bb30      	cbnz	r0, 8006b24 <_printf_float+0xc0>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	4640      	mov	r0, r8
 8006adc:	4649      	mov	r1, r9
 8006ade:	f7f9 fffd 	bl	8000adc <__aeabi_dcmplt>
 8006ae2:	b110      	cbz	r0, 8006aea <_printf_float+0x86>
 8006ae4:	232d      	movs	r3, #45	@ 0x2d
 8006ae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aea:	4a91      	ldr	r2, [pc, #580]	@ (8006d30 <_printf_float+0x2cc>)
 8006aec:	4b91      	ldr	r3, [pc, #580]	@ (8006d34 <_printf_float+0x2d0>)
 8006aee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006af2:	bf94      	ite	ls
 8006af4:	4690      	movls	r8, r2
 8006af6:	4698      	movhi	r8, r3
 8006af8:	2303      	movs	r3, #3
 8006afa:	6123      	str	r3, [r4, #16]
 8006afc:	f02b 0304 	bic.w	r3, fp, #4
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	f04f 0900 	mov.w	r9, #0
 8006b06:	9700      	str	r7, [sp, #0]
 8006b08:	4633      	mov	r3, r6
 8006b0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f9d2 	bl	8006eb8 <_printf_common>
 8006b14:	3001      	adds	r0, #1
 8006b16:	f040 808d 	bne.w	8006c34 <_printf_float+0x1d0>
 8006b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1e:	b00d      	add	sp, #52	@ 0x34
 8006b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b24:	4642      	mov	r2, r8
 8006b26:	464b      	mov	r3, r9
 8006b28:	4640      	mov	r0, r8
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	f7f9 fffe 	bl	8000b2c <__aeabi_dcmpun>
 8006b30:	b140      	cbz	r0, 8006b44 <_printf_float+0xe0>
 8006b32:	464b      	mov	r3, r9
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	bfbc      	itt	lt
 8006b38:	232d      	movlt	r3, #45	@ 0x2d
 8006b3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d38 <_printf_float+0x2d4>)
 8006b40:	4b7e      	ldr	r3, [pc, #504]	@ (8006d3c <_printf_float+0x2d8>)
 8006b42:	e7d4      	b.n	8006aee <_printf_float+0x8a>
 8006b44:	6863      	ldr	r3, [r4, #4]
 8006b46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b4a:	9206      	str	r2, [sp, #24]
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	d13b      	bne.n	8006bc8 <_printf_float+0x164>
 8006b50:	2306      	movs	r3, #6
 8006b52:	6063      	str	r3, [r4, #4]
 8006b54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6022      	str	r2, [r4, #0]
 8006b5c:	9303      	str	r3, [sp, #12]
 8006b5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b64:	ab09      	add	r3, sp, #36	@ 0x24
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	6861      	ldr	r1, [r4, #4]
 8006b6a:	ec49 8b10 	vmov	d0, r8, r9
 8006b6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b72:	4628      	mov	r0, r5
 8006b74:	f7ff fed7 	bl	8006926 <__cvt>
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b7c:	2b47      	cmp	r3, #71	@ 0x47
 8006b7e:	4680      	mov	r8, r0
 8006b80:	d129      	bne.n	8006bd6 <_printf_float+0x172>
 8006b82:	1cc8      	adds	r0, r1, #3
 8006b84:	db02      	blt.n	8006b8c <_printf_float+0x128>
 8006b86:	6863      	ldr	r3, [r4, #4]
 8006b88:	4299      	cmp	r1, r3
 8006b8a:	dd41      	ble.n	8006c10 <_printf_float+0x1ac>
 8006b8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b90:	fa5f fa8a 	uxtb.w	sl, sl
 8006b94:	3901      	subs	r1, #1
 8006b96:	4652      	mov	r2, sl
 8006b98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8006b9e:	f7ff ff27 	bl	80069f0 <__exponent>
 8006ba2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ba4:	1813      	adds	r3, r2, r0
 8006ba6:	2a01      	cmp	r2, #1
 8006ba8:	4681      	mov	r9, r0
 8006baa:	6123      	str	r3, [r4, #16]
 8006bac:	dc02      	bgt.n	8006bb4 <_printf_float+0x150>
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	07d2      	lsls	r2, r2, #31
 8006bb2:	d501      	bpl.n	8006bb8 <_printf_float+0x154>
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	6123      	str	r3, [r4, #16]
 8006bb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0a2      	beq.n	8006b06 <_printf_float+0xa2>
 8006bc0:	232d      	movs	r3, #45	@ 0x2d
 8006bc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bc6:	e79e      	b.n	8006b06 <_printf_float+0xa2>
 8006bc8:	9a06      	ldr	r2, [sp, #24]
 8006bca:	2a47      	cmp	r2, #71	@ 0x47
 8006bcc:	d1c2      	bne.n	8006b54 <_printf_float+0xf0>
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1c0      	bne.n	8006b54 <_printf_float+0xf0>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e7bd      	b.n	8006b52 <_printf_float+0xee>
 8006bd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bda:	d9db      	bls.n	8006b94 <_printf_float+0x130>
 8006bdc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006be0:	d118      	bne.n	8006c14 <_printf_float+0x1b0>
 8006be2:	2900      	cmp	r1, #0
 8006be4:	6863      	ldr	r3, [r4, #4]
 8006be6:	dd0b      	ble.n	8006c00 <_printf_float+0x19c>
 8006be8:	6121      	str	r1, [r4, #16]
 8006bea:	b913      	cbnz	r3, 8006bf2 <_printf_float+0x18e>
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	07d0      	lsls	r0, r2, #31
 8006bf0:	d502      	bpl.n	8006bf8 <_printf_float+0x194>
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	440b      	add	r3, r1
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006bfa:	f04f 0900 	mov.w	r9, #0
 8006bfe:	e7db      	b.n	8006bb8 <_printf_float+0x154>
 8006c00:	b913      	cbnz	r3, 8006c08 <_printf_float+0x1a4>
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	07d2      	lsls	r2, r2, #31
 8006c06:	d501      	bpl.n	8006c0c <_printf_float+0x1a8>
 8006c08:	3302      	adds	r3, #2
 8006c0a:	e7f4      	b.n	8006bf6 <_printf_float+0x192>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e7f2      	b.n	8006bf6 <_printf_float+0x192>
 8006c10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c16:	4299      	cmp	r1, r3
 8006c18:	db05      	blt.n	8006c26 <_printf_float+0x1c2>
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	6121      	str	r1, [r4, #16]
 8006c1e:	07d8      	lsls	r0, r3, #31
 8006c20:	d5ea      	bpl.n	8006bf8 <_printf_float+0x194>
 8006c22:	1c4b      	adds	r3, r1, #1
 8006c24:	e7e7      	b.n	8006bf6 <_printf_float+0x192>
 8006c26:	2900      	cmp	r1, #0
 8006c28:	bfd4      	ite	le
 8006c2a:	f1c1 0202 	rsble	r2, r1, #2
 8006c2e:	2201      	movgt	r2, #1
 8006c30:	4413      	add	r3, r2
 8006c32:	e7e0      	b.n	8006bf6 <_printf_float+0x192>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	055a      	lsls	r2, r3, #21
 8006c38:	d407      	bmi.n	8006c4a <_printf_float+0x1e6>
 8006c3a:	6923      	ldr	r3, [r4, #16]
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4628      	mov	r0, r5
 8006c42:	47b8      	blx	r7
 8006c44:	3001      	adds	r0, #1
 8006c46:	d12b      	bne.n	8006ca0 <_printf_float+0x23c>
 8006c48:	e767      	b.n	8006b1a <_printf_float+0xb6>
 8006c4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c4e:	f240 80dd 	bls.w	8006e0c <_printf_float+0x3a8>
 8006c52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c56:	2200      	movs	r2, #0
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f7f9 ff35 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d033      	beq.n	8006cca <_printf_float+0x266>
 8006c62:	4a37      	ldr	r2, [pc, #220]	@ (8006d40 <_printf_float+0x2dc>)
 8006c64:	2301      	movs	r3, #1
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f af54 	beq.w	8006b1a <_printf_float+0xb6>
 8006c72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c76:	4543      	cmp	r3, r8
 8006c78:	db02      	blt.n	8006c80 <_printf_float+0x21c>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	07d8      	lsls	r0, r3, #31
 8006c7e:	d50f      	bpl.n	8006ca0 <_printf_float+0x23c>
 8006c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c84:	4631      	mov	r1, r6
 8006c86:	4628      	mov	r0, r5
 8006c88:	47b8      	blx	r7
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f43f af45 	beq.w	8006b1a <_printf_float+0xb6>
 8006c90:	f04f 0900 	mov.w	r9, #0
 8006c94:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c98:	f104 0a1a 	add.w	sl, r4, #26
 8006c9c:	45c8      	cmp	r8, r9
 8006c9e:	dc09      	bgt.n	8006cb4 <_printf_float+0x250>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	079b      	lsls	r3, r3, #30
 8006ca4:	f100 8103 	bmi.w	8006eae <_printf_float+0x44a>
 8006ca8:	68e0      	ldr	r0, [r4, #12]
 8006caa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cac:	4298      	cmp	r0, r3
 8006cae:	bfb8      	it	lt
 8006cb0:	4618      	movlt	r0, r3
 8006cb2:	e734      	b.n	8006b1e <_printf_float+0xba>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	4652      	mov	r2, sl
 8006cb8:	4631      	mov	r1, r6
 8006cba:	4628      	mov	r0, r5
 8006cbc:	47b8      	blx	r7
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f43f af2b 	beq.w	8006b1a <_printf_float+0xb6>
 8006cc4:	f109 0901 	add.w	r9, r9, #1
 8006cc8:	e7e8      	b.n	8006c9c <_printf_float+0x238>
 8006cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dc39      	bgt.n	8006d44 <_printf_float+0x2e0>
 8006cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d40 <_printf_float+0x2dc>)
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	47b8      	blx	r7
 8006cda:	3001      	adds	r0, #1
 8006cdc:	f43f af1d 	beq.w	8006b1a <_printf_float+0xb6>
 8006ce0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006ce4:	ea59 0303 	orrs.w	r3, r9, r3
 8006ce8:	d102      	bne.n	8006cf0 <_printf_float+0x28c>
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	07d9      	lsls	r1, r3, #31
 8006cee:	d5d7      	bpl.n	8006ca0 <_printf_float+0x23c>
 8006cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	47b8      	blx	r7
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	f43f af0d 	beq.w	8006b1a <_printf_float+0xb6>
 8006d00:	f04f 0a00 	mov.w	sl, #0
 8006d04:	f104 0b1a 	add.w	fp, r4, #26
 8006d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0a:	425b      	negs	r3, r3
 8006d0c:	4553      	cmp	r3, sl
 8006d0e:	dc01      	bgt.n	8006d14 <_printf_float+0x2b0>
 8006d10:	464b      	mov	r3, r9
 8006d12:	e793      	b.n	8006c3c <_printf_float+0x1d8>
 8006d14:	2301      	movs	r3, #1
 8006d16:	465a      	mov	r2, fp
 8006d18:	4631      	mov	r1, r6
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	47b8      	blx	r7
 8006d1e:	3001      	adds	r0, #1
 8006d20:	f43f aefb 	beq.w	8006b1a <_printf_float+0xb6>
 8006d24:	f10a 0a01 	add.w	sl, sl, #1
 8006d28:	e7ee      	b.n	8006d08 <_printf_float+0x2a4>
 8006d2a:	bf00      	nop
 8006d2c:	7fefffff 	.word	0x7fefffff
 8006d30:	08009318 	.word	0x08009318
 8006d34:	0800931c 	.word	0x0800931c
 8006d38:	08009320 	.word	0x08009320
 8006d3c:	08009324 	.word	0x08009324
 8006d40:	08009328 	.word	0x08009328
 8006d44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d4a:	4553      	cmp	r3, sl
 8006d4c:	bfa8      	it	ge
 8006d4e:	4653      	movge	r3, sl
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	4699      	mov	r9, r3
 8006d54:	dc36      	bgt.n	8006dc4 <_printf_float+0x360>
 8006d56:	f04f 0b00 	mov.w	fp, #0
 8006d5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d5e:	f104 021a 	add.w	r2, r4, #26
 8006d62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d64:	9306      	str	r3, [sp, #24]
 8006d66:	eba3 0309 	sub.w	r3, r3, r9
 8006d6a:	455b      	cmp	r3, fp
 8006d6c:	dc31      	bgt.n	8006dd2 <_printf_float+0x36e>
 8006d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d70:	459a      	cmp	sl, r3
 8006d72:	dc3a      	bgt.n	8006dea <_printf_float+0x386>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	07da      	lsls	r2, r3, #31
 8006d78:	d437      	bmi.n	8006dea <_printf_float+0x386>
 8006d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7c:	ebaa 0903 	sub.w	r9, sl, r3
 8006d80:	9b06      	ldr	r3, [sp, #24]
 8006d82:	ebaa 0303 	sub.w	r3, sl, r3
 8006d86:	4599      	cmp	r9, r3
 8006d88:	bfa8      	it	ge
 8006d8a:	4699      	movge	r9, r3
 8006d8c:	f1b9 0f00 	cmp.w	r9, #0
 8006d90:	dc33      	bgt.n	8006dfa <_printf_float+0x396>
 8006d92:	f04f 0800 	mov.w	r8, #0
 8006d96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d9a:	f104 0b1a 	add.w	fp, r4, #26
 8006d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da0:	ebaa 0303 	sub.w	r3, sl, r3
 8006da4:	eba3 0309 	sub.w	r3, r3, r9
 8006da8:	4543      	cmp	r3, r8
 8006daa:	f77f af79 	ble.w	8006ca0 <_printf_float+0x23c>
 8006dae:	2301      	movs	r3, #1
 8006db0:	465a      	mov	r2, fp
 8006db2:	4631      	mov	r1, r6
 8006db4:	4628      	mov	r0, r5
 8006db6:	47b8      	blx	r7
 8006db8:	3001      	adds	r0, #1
 8006dba:	f43f aeae 	beq.w	8006b1a <_printf_float+0xb6>
 8006dbe:	f108 0801 	add.w	r8, r8, #1
 8006dc2:	e7ec      	b.n	8006d9e <_printf_float+0x33a>
 8006dc4:	4642      	mov	r2, r8
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4628      	mov	r0, r5
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d1c2      	bne.n	8006d56 <_printf_float+0x2f2>
 8006dd0:	e6a3      	b.n	8006b1a <_printf_float+0xb6>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	9206      	str	r2, [sp, #24]
 8006dda:	47b8      	blx	r7
 8006ddc:	3001      	adds	r0, #1
 8006dde:	f43f ae9c 	beq.w	8006b1a <_printf_float+0xb6>
 8006de2:	9a06      	ldr	r2, [sp, #24]
 8006de4:	f10b 0b01 	add.w	fp, fp, #1
 8006de8:	e7bb      	b.n	8006d62 <_printf_float+0x2fe>
 8006dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	d1c0      	bne.n	8006d7a <_printf_float+0x316>
 8006df8:	e68f      	b.n	8006b1a <_printf_float+0xb6>
 8006dfa:	9a06      	ldr	r2, [sp, #24]
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	4442      	add	r2, r8
 8006e00:	4631      	mov	r1, r6
 8006e02:	4628      	mov	r0, r5
 8006e04:	47b8      	blx	r7
 8006e06:	3001      	adds	r0, #1
 8006e08:	d1c3      	bne.n	8006d92 <_printf_float+0x32e>
 8006e0a:	e686      	b.n	8006b1a <_printf_float+0xb6>
 8006e0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e10:	f1ba 0f01 	cmp.w	sl, #1
 8006e14:	dc01      	bgt.n	8006e1a <_printf_float+0x3b6>
 8006e16:	07db      	lsls	r3, r3, #31
 8006e18:	d536      	bpl.n	8006e88 <_printf_float+0x424>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4628      	mov	r0, r5
 8006e22:	47b8      	blx	r7
 8006e24:	3001      	adds	r0, #1
 8006e26:	f43f ae78 	beq.w	8006b1a <_printf_float+0xb6>
 8006e2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4628      	mov	r0, r5
 8006e32:	47b8      	blx	r7
 8006e34:	3001      	adds	r0, #1
 8006e36:	f43f ae70 	beq.w	8006b1a <_printf_float+0xb6>
 8006e3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2300      	movs	r3, #0
 8006e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e46:	f7f9 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e4a:	b9c0      	cbnz	r0, 8006e7e <_printf_float+0x41a>
 8006e4c:	4653      	mov	r3, sl
 8006e4e:	f108 0201 	add.w	r2, r8, #1
 8006e52:	4631      	mov	r1, r6
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b8      	blx	r7
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d10c      	bne.n	8006e76 <_printf_float+0x412>
 8006e5c:	e65d      	b.n	8006b1a <_printf_float+0xb6>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	465a      	mov	r2, fp
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	f43f ae56 	beq.w	8006b1a <_printf_float+0xb6>
 8006e6e:	f108 0801 	add.w	r8, r8, #1
 8006e72:	45d0      	cmp	r8, sl
 8006e74:	dbf3      	blt.n	8006e5e <_printf_float+0x3fa>
 8006e76:	464b      	mov	r3, r9
 8006e78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e7c:	e6df      	b.n	8006c3e <_printf_float+0x1da>
 8006e7e:	f04f 0800 	mov.w	r8, #0
 8006e82:	f104 0b1a 	add.w	fp, r4, #26
 8006e86:	e7f4      	b.n	8006e72 <_printf_float+0x40e>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4642      	mov	r2, r8
 8006e8c:	e7e1      	b.n	8006e52 <_printf_float+0x3ee>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	464a      	mov	r2, r9
 8006e92:	4631      	mov	r1, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b8      	blx	r7
 8006e98:	3001      	adds	r0, #1
 8006e9a:	f43f ae3e 	beq.w	8006b1a <_printf_float+0xb6>
 8006e9e:	f108 0801 	add.w	r8, r8, #1
 8006ea2:	68e3      	ldr	r3, [r4, #12]
 8006ea4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ea6:	1a5b      	subs	r3, r3, r1
 8006ea8:	4543      	cmp	r3, r8
 8006eaa:	dcf0      	bgt.n	8006e8e <_printf_float+0x42a>
 8006eac:	e6fc      	b.n	8006ca8 <_printf_float+0x244>
 8006eae:	f04f 0800 	mov.w	r8, #0
 8006eb2:	f104 0919 	add.w	r9, r4, #25
 8006eb6:	e7f4      	b.n	8006ea2 <_printf_float+0x43e>

08006eb8 <_printf_common>:
 8006eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	4698      	mov	r8, r3
 8006ec0:	688a      	ldr	r2, [r1, #8]
 8006ec2:	690b      	ldr	r3, [r1, #16]
 8006ec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	bfb8      	it	lt
 8006ecc:	4613      	movlt	r3, r2
 8006ece:	6033      	str	r3, [r6, #0]
 8006ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ed4:	4607      	mov	r7, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	b10a      	cbz	r2, 8006ede <_printf_common+0x26>
 8006eda:	3301      	adds	r3, #1
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	0699      	lsls	r1, r3, #26
 8006ee2:	bf42      	ittt	mi
 8006ee4:	6833      	ldrmi	r3, [r6, #0]
 8006ee6:	3302      	addmi	r3, #2
 8006ee8:	6033      	strmi	r3, [r6, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	f015 0506 	ands.w	r5, r5, #6
 8006ef0:	d106      	bne.n	8006f00 <_printf_common+0x48>
 8006ef2:	f104 0a19 	add.w	sl, r4, #25
 8006ef6:	68e3      	ldr	r3, [r4, #12]
 8006ef8:	6832      	ldr	r2, [r6, #0]
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	dc26      	bgt.n	8006f4e <_printf_common+0x96>
 8006f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	3b00      	subs	r3, #0
 8006f08:	bf18      	it	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	0692      	lsls	r2, r2, #26
 8006f0e:	d42b      	bmi.n	8006f68 <_printf_common+0xb0>
 8006f10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f14:	4641      	mov	r1, r8
 8006f16:	4638      	mov	r0, r7
 8006f18:	47c8      	blx	r9
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d01e      	beq.n	8006f5c <_printf_common+0xa4>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	6922      	ldr	r2, [r4, #16]
 8006f22:	f003 0306 	and.w	r3, r3, #6
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	bf02      	ittt	eq
 8006f2a:	68e5      	ldreq	r5, [r4, #12]
 8006f2c:	6833      	ldreq	r3, [r6, #0]
 8006f2e:	1aed      	subeq	r5, r5, r3
 8006f30:	68a3      	ldr	r3, [r4, #8]
 8006f32:	bf0c      	ite	eq
 8006f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f38:	2500      	movne	r5, #0
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	bfc4      	itt	gt
 8006f3e:	1a9b      	subgt	r3, r3, r2
 8006f40:	18ed      	addgt	r5, r5, r3
 8006f42:	2600      	movs	r6, #0
 8006f44:	341a      	adds	r4, #26
 8006f46:	42b5      	cmp	r5, r6
 8006f48:	d11a      	bne.n	8006f80 <_printf_common+0xc8>
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	e008      	b.n	8006f60 <_printf_common+0xa8>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	4652      	mov	r2, sl
 8006f52:	4641      	mov	r1, r8
 8006f54:	4638      	mov	r0, r7
 8006f56:	47c8      	blx	r9
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d103      	bne.n	8006f64 <_printf_common+0xac>
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f64:	3501      	adds	r5, #1
 8006f66:	e7c6      	b.n	8006ef6 <_printf_common+0x3e>
 8006f68:	18e1      	adds	r1, r4, r3
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	2030      	movs	r0, #48	@ 0x30
 8006f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f72:	4422      	add	r2, r4
 8006f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	e7c7      	b.n	8006f10 <_printf_common+0x58>
 8006f80:	2301      	movs	r3, #1
 8006f82:	4622      	mov	r2, r4
 8006f84:	4641      	mov	r1, r8
 8006f86:	4638      	mov	r0, r7
 8006f88:	47c8      	blx	r9
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	d0e6      	beq.n	8006f5c <_printf_common+0xa4>
 8006f8e:	3601      	adds	r6, #1
 8006f90:	e7d9      	b.n	8006f46 <_printf_common+0x8e>
	...

08006f94 <_printf_i>:
 8006f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f98:	7e0f      	ldrb	r7, [r1, #24]
 8006f9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f9c:	2f78      	cmp	r7, #120	@ 0x78
 8006f9e:	4691      	mov	r9, r2
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	469a      	mov	sl, r3
 8006fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006faa:	d807      	bhi.n	8006fbc <_printf_i+0x28>
 8006fac:	2f62      	cmp	r7, #98	@ 0x62
 8006fae:	d80a      	bhi.n	8006fc6 <_printf_i+0x32>
 8006fb0:	2f00      	cmp	r7, #0
 8006fb2:	f000 80d2 	beq.w	800715a <_printf_i+0x1c6>
 8006fb6:	2f58      	cmp	r7, #88	@ 0x58
 8006fb8:	f000 80b9 	beq.w	800712e <_printf_i+0x19a>
 8006fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fc4:	e03a      	b.n	800703c <_printf_i+0xa8>
 8006fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fca:	2b15      	cmp	r3, #21
 8006fcc:	d8f6      	bhi.n	8006fbc <_printf_i+0x28>
 8006fce:	a101      	add	r1, pc, #4	@ (adr r1, 8006fd4 <_printf_i+0x40>)
 8006fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fd4:	0800702d 	.word	0x0800702d
 8006fd8:	08007041 	.word	0x08007041
 8006fdc:	08006fbd 	.word	0x08006fbd
 8006fe0:	08006fbd 	.word	0x08006fbd
 8006fe4:	08006fbd 	.word	0x08006fbd
 8006fe8:	08006fbd 	.word	0x08006fbd
 8006fec:	08007041 	.word	0x08007041
 8006ff0:	08006fbd 	.word	0x08006fbd
 8006ff4:	08006fbd 	.word	0x08006fbd
 8006ff8:	08006fbd 	.word	0x08006fbd
 8006ffc:	08006fbd 	.word	0x08006fbd
 8007000:	08007141 	.word	0x08007141
 8007004:	0800706b 	.word	0x0800706b
 8007008:	080070fb 	.word	0x080070fb
 800700c:	08006fbd 	.word	0x08006fbd
 8007010:	08006fbd 	.word	0x08006fbd
 8007014:	08007163 	.word	0x08007163
 8007018:	08006fbd 	.word	0x08006fbd
 800701c:	0800706b 	.word	0x0800706b
 8007020:	08006fbd 	.word	0x08006fbd
 8007024:	08006fbd 	.word	0x08006fbd
 8007028:	08007103 	.word	0x08007103
 800702c:	6833      	ldr	r3, [r6, #0]
 800702e:	1d1a      	adds	r2, r3, #4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6032      	str	r2, [r6, #0]
 8007034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800703c:	2301      	movs	r3, #1
 800703e:	e09d      	b.n	800717c <_printf_i+0x1e8>
 8007040:	6833      	ldr	r3, [r6, #0]
 8007042:	6820      	ldr	r0, [r4, #0]
 8007044:	1d19      	adds	r1, r3, #4
 8007046:	6031      	str	r1, [r6, #0]
 8007048:	0606      	lsls	r6, r0, #24
 800704a:	d501      	bpl.n	8007050 <_printf_i+0xbc>
 800704c:	681d      	ldr	r5, [r3, #0]
 800704e:	e003      	b.n	8007058 <_printf_i+0xc4>
 8007050:	0645      	lsls	r5, r0, #25
 8007052:	d5fb      	bpl.n	800704c <_printf_i+0xb8>
 8007054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007058:	2d00      	cmp	r5, #0
 800705a:	da03      	bge.n	8007064 <_printf_i+0xd0>
 800705c:	232d      	movs	r3, #45	@ 0x2d
 800705e:	426d      	negs	r5, r5
 8007060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007064:	4859      	ldr	r0, [pc, #356]	@ (80071cc <_printf_i+0x238>)
 8007066:	230a      	movs	r3, #10
 8007068:	e011      	b.n	800708e <_printf_i+0xfa>
 800706a:	6821      	ldr	r1, [r4, #0]
 800706c:	6833      	ldr	r3, [r6, #0]
 800706e:	0608      	lsls	r0, r1, #24
 8007070:	f853 5b04 	ldr.w	r5, [r3], #4
 8007074:	d402      	bmi.n	800707c <_printf_i+0xe8>
 8007076:	0649      	lsls	r1, r1, #25
 8007078:	bf48      	it	mi
 800707a:	b2ad      	uxthmi	r5, r5
 800707c:	2f6f      	cmp	r7, #111	@ 0x6f
 800707e:	4853      	ldr	r0, [pc, #332]	@ (80071cc <_printf_i+0x238>)
 8007080:	6033      	str	r3, [r6, #0]
 8007082:	bf14      	ite	ne
 8007084:	230a      	movne	r3, #10
 8007086:	2308      	moveq	r3, #8
 8007088:	2100      	movs	r1, #0
 800708a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800708e:	6866      	ldr	r6, [r4, #4]
 8007090:	60a6      	str	r6, [r4, #8]
 8007092:	2e00      	cmp	r6, #0
 8007094:	bfa2      	ittt	ge
 8007096:	6821      	ldrge	r1, [r4, #0]
 8007098:	f021 0104 	bicge.w	r1, r1, #4
 800709c:	6021      	strge	r1, [r4, #0]
 800709e:	b90d      	cbnz	r5, 80070a4 <_printf_i+0x110>
 80070a0:	2e00      	cmp	r6, #0
 80070a2:	d04b      	beq.n	800713c <_printf_i+0x1a8>
 80070a4:	4616      	mov	r6, r2
 80070a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80070aa:	fb03 5711 	mls	r7, r3, r1, r5
 80070ae:	5dc7      	ldrb	r7, [r0, r7]
 80070b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070b4:	462f      	mov	r7, r5
 80070b6:	42bb      	cmp	r3, r7
 80070b8:	460d      	mov	r5, r1
 80070ba:	d9f4      	bls.n	80070a6 <_printf_i+0x112>
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d10b      	bne.n	80070d8 <_printf_i+0x144>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	07df      	lsls	r7, r3, #31
 80070c4:	d508      	bpl.n	80070d8 <_printf_i+0x144>
 80070c6:	6923      	ldr	r3, [r4, #16]
 80070c8:	6861      	ldr	r1, [r4, #4]
 80070ca:	4299      	cmp	r1, r3
 80070cc:	bfde      	ittt	le
 80070ce:	2330      	movle	r3, #48	@ 0x30
 80070d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070d8:	1b92      	subs	r2, r2, r6
 80070da:	6122      	str	r2, [r4, #16]
 80070dc:	f8cd a000 	str.w	sl, [sp]
 80070e0:	464b      	mov	r3, r9
 80070e2:	aa03      	add	r2, sp, #12
 80070e4:	4621      	mov	r1, r4
 80070e6:	4640      	mov	r0, r8
 80070e8:	f7ff fee6 	bl	8006eb8 <_printf_common>
 80070ec:	3001      	adds	r0, #1
 80070ee:	d14a      	bne.n	8007186 <_printf_i+0x1f2>
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	b004      	add	sp, #16
 80070f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	f043 0320 	orr.w	r3, r3, #32
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	4833      	ldr	r0, [pc, #204]	@ (80071d0 <_printf_i+0x23c>)
 8007104:	2778      	movs	r7, #120	@ 0x78
 8007106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	6831      	ldr	r1, [r6, #0]
 800710e:	061f      	lsls	r7, r3, #24
 8007110:	f851 5b04 	ldr.w	r5, [r1], #4
 8007114:	d402      	bmi.n	800711c <_printf_i+0x188>
 8007116:	065f      	lsls	r7, r3, #25
 8007118:	bf48      	it	mi
 800711a:	b2ad      	uxthmi	r5, r5
 800711c:	6031      	str	r1, [r6, #0]
 800711e:	07d9      	lsls	r1, r3, #31
 8007120:	bf44      	itt	mi
 8007122:	f043 0320 	orrmi.w	r3, r3, #32
 8007126:	6023      	strmi	r3, [r4, #0]
 8007128:	b11d      	cbz	r5, 8007132 <_printf_i+0x19e>
 800712a:	2310      	movs	r3, #16
 800712c:	e7ac      	b.n	8007088 <_printf_i+0xf4>
 800712e:	4827      	ldr	r0, [pc, #156]	@ (80071cc <_printf_i+0x238>)
 8007130:	e7e9      	b.n	8007106 <_printf_i+0x172>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	f023 0320 	bic.w	r3, r3, #32
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	e7f6      	b.n	800712a <_printf_i+0x196>
 800713c:	4616      	mov	r6, r2
 800713e:	e7bd      	b.n	80070bc <_printf_i+0x128>
 8007140:	6833      	ldr	r3, [r6, #0]
 8007142:	6825      	ldr	r5, [r4, #0]
 8007144:	6961      	ldr	r1, [r4, #20]
 8007146:	1d18      	adds	r0, r3, #4
 8007148:	6030      	str	r0, [r6, #0]
 800714a:	062e      	lsls	r6, r5, #24
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	d501      	bpl.n	8007154 <_printf_i+0x1c0>
 8007150:	6019      	str	r1, [r3, #0]
 8007152:	e002      	b.n	800715a <_printf_i+0x1c6>
 8007154:	0668      	lsls	r0, r5, #25
 8007156:	d5fb      	bpl.n	8007150 <_printf_i+0x1bc>
 8007158:	8019      	strh	r1, [r3, #0]
 800715a:	2300      	movs	r3, #0
 800715c:	6123      	str	r3, [r4, #16]
 800715e:	4616      	mov	r6, r2
 8007160:	e7bc      	b.n	80070dc <_printf_i+0x148>
 8007162:	6833      	ldr	r3, [r6, #0]
 8007164:	1d1a      	adds	r2, r3, #4
 8007166:	6032      	str	r2, [r6, #0]
 8007168:	681e      	ldr	r6, [r3, #0]
 800716a:	6862      	ldr	r2, [r4, #4]
 800716c:	2100      	movs	r1, #0
 800716e:	4630      	mov	r0, r6
 8007170:	f7f9 f82e 	bl	80001d0 <memchr>
 8007174:	b108      	cbz	r0, 800717a <_printf_i+0x1e6>
 8007176:	1b80      	subs	r0, r0, r6
 8007178:	6060      	str	r0, [r4, #4]
 800717a:	6863      	ldr	r3, [r4, #4]
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	2300      	movs	r3, #0
 8007180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007184:	e7aa      	b.n	80070dc <_printf_i+0x148>
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	4632      	mov	r2, r6
 800718a:	4649      	mov	r1, r9
 800718c:	4640      	mov	r0, r8
 800718e:	47d0      	blx	sl
 8007190:	3001      	adds	r0, #1
 8007192:	d0ad      	beq.n	80070f0 <_printf_i+0x15c>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	079b      	lsls	r3, r3, #30
 8007198:	d413      	bmi.n	80071c2 <_printf_i+0x22e>
 800719a:	68e0      	ldr	r0, [r4, #12]
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	4298      	cmp	r0, r3
 80071a0:	bfb8      	it	lt
 80071a2:	4618      	movlt	r0, r3
 80071a4:	e7a6      	b.n	80070f4 <_printf_i+0x160>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4632      	mov	r2, r6
 80071aa:	4649      	mov	r1, r9
 80071ac:	4640      	mov	r0, r8
 80071ae:	47d0      	blx	sl
 80071b0:	3001      	adds	r0, #1
 80071b2:	d09d      	beq.n	80070f0 <_printf_i+0x15c>
 80071b4:	3501      	adds	r5, #1
 80071b6:	68e3      	ldr	r3, [r4, #12]
 80071b8:	9903      	ldr	r1, [sp, #12]
 80071ba:	1a5b      	subs	r3, r3, r1
 80071bc:	42ab      	cmp	r3, r5
 80071be:	dcf2      	bgt.n	80071a6 <_printf_i+0x212>
 80071c0:	e7eb      	b.n	800719a <_printf_i+0x206>
 80071c2:	2500      	movs	r5, #0
 80071c4:	f104 0619 	add.w	r6, r4, #25
 80071c8:	e7f5      	b.n	80071b6 <_printf_i+0x222>
 80071ca:	bf00      	nop
 80071cc:	0800932a 	.word	0x0800932a
 80071d0:	0800933b 	.word	0x0800933b

080071d4 <std>:
 80071d4:	2300      	movs	r3, #0
 80071d6:	b510      	push	{r4, lr}
 80071d8:	4604      	mov	r4, r0
 80071da:	e9c0 3300 	strd	r3, r3, [r0]
 80071de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071e2:	6083      	str	r3, [r0, #8]
 80071e4:	8181      	strh	r1, [r0, #12]
 80071e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80071e8:	81c2      	strh	r2, [r0, #14]
 80071ea:	6183      	str	r3, [r0, #24]
 80071ec:	4619      	mov	r1, r3
 80071ee:	2208      	movs	r2, #8
 80071f0:	305c      	adds	r0, #92	@ 0x5c
 80071f2:	f000 f99b 	bl	800752c <memset>
 80071f6:	4b0d      	ldr	r3, [pc, #52]	@ (800722c <std+0x58>)
 80071f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80071fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <std+0x5c>)
 80071fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80071fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <std+0x60>)
 8007200:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007202:	4b0d      	ldr	r3, [pc, #52]	@ (8007238 <std+0x64>)
 8007204:	6323      	str	r3, [r4, #48]	@ 0x30
 8007206:	4b0d      	ldr	r3, [pc, #52]	@ (800723c <std+0x68>)
 8007208:	6224      	str	r4, [r4, #32]
 800720a:	429c      	cmp	r4, r3
 800720c:	d006      	beq.n	800721c <std+0x48>
 800720e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007212:	4294      	cmp	r4, r2
 8007214:	d002      	beq.n	800721c <std+0x48>
 8007216:	33d0      	adds	r3, #208	@ 0xd0
 8007218:	429c      	cmp	r4, r3
 800721a:	d105      	bne.n	8007228 <std+0x54>
 800721c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007224:	f000 b9fe 	b.w	8007624 <__retarget_lock_init_recursive>
 8007228:	bd10      	pop	{r4, pc}
 800722a:	bf00      	nop
 800722c:	0800737d 	.word	0x0800737d
 8007230:	0800739f 	.word	0x0800739f
 8007234:	080073d7 	.word	0x080073d7
 8007238:	080073fb 	.word	0x080073fb
 800723c:	2000047c 	.word	0x2000047c

08007240 <stdio_exit_handler>:
 8007240:	4a02      	ldr	r2, [pc, #8]	@ (800724c <stdio_exit_handler+0xc>)
 8007242:	4903      	ldr	r1, [pc, #12]	@ (8007250 <stdio_exit_handler+0x10>)
 8007244:	4803      	ldr	r0, [pc, #12]	@ (8007254 <stdio_exit_handler+0x14>)
 8007246:	f000 b869 	b.w	800731c <_fwalk_sglue>
 800724a:	bf00      	nop
 800724c:	2000000c 	.word	0x2000000c
 8007250:	08008f59 	.word	0x08008f59
 8007254:	2000001c 	.word	0x2000001c

08007258 <cleanup_stdio>:
 8007258:	6841      	ldr	r1, [r0, #4]
 800725a:	4b0c      	ldr	r3, [pc, #48]	@ (800728c <cleanup_stdio+0x34>)
 800725c:	4299      	cmp	r1, r3
 800725e:	b510      	push	{r4, lr}
 8007260:	4604      	mov	r4, r0
 8007262:	d001      	beq.n	8007268 <cleanup_stdio+0x10>
 8007264:	f001 fe78 	bl	8008f58 <_fflush_r>
 8007268:	68a1      	ldr	r1, [r4, #8]
 800726a:	4b09      	ldr	r3, [pc, #36]	@ (8007290 <cleanup_stdio+0x38>)
 800726c:	4299      	cmp	r1, r3
 800726e:	d002      	beq.n	8007276 <cleanup_stdio+0x1e>
 8007270:	4620      	mov	r0, r4
 8007272:	f001 fe71 	bl	8008f58 <_fflush_r>
 8007276:	68e1      	ldr	r1, [r4, #12]
 8007278:	4b06      	ldr	r3, [pc, #24]	@ (8007294 <cleanup_stdio+0x3c>)
 800727a:	4299      	cmp	r1, r3
 800727c:	d004      	beq.n	8007288 <cleanup_stdio+0x30>
 800727e:	4620      	mov	r0, r4
 8007280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007284:	f001 be68 	b.w	8008f58 <_fflush_r>
 8007288:	bd10      	pop	{r4, pc}
 800728a:	bf00      	nop
 800728c:	2000047c 	.word	0x2000047c
 8007290:	200004e4 	.word	0x200004e4
 8007294:	2000054c 	.word	0x2000054c

08007298 <global_stdio_init.part.0>:
 8007298:	b510      	push	{r4, lr}
 800729a:	4b0b      	ldr	r3, [pc, #44]	@ (80072c8 <global_stdio_init.part.0+0x30>)
 800729c:	4c0b      	ldr	r4, [pc, #44]	@ (80072cc <global_stdio_init.part.0+0x34>)
 800729e:	4a0c      	ldr	r2, [pc, #48]	@ (80072d0 <global_stdio_init.part.0+0x38>)
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	4620      	mov	r0, r4
 80072a4:	2200      	movs	r2, #0
 80072a6:	2104      	movs	r1, #4
 80072a8:	f7ff ff94 	bl	80071d4 <std>
 80072ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072b0:	2201      	movs	r2, #1
 80072b2:	2109      	movs	r1, #9
 80072b4:	f7ff ff8e 	bl	80071d4 <std>
 80072b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072bc:	2202      	movs	r2, #2
 80072be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c2:	2112      	movs	r1, #18
 80072c4:	f7ff bf86 	b.w	80071d4 <std>
 80072c8:	200005b4 	.word	0x200005b4
 80072cc:	2000047c 	.word	0x2000047c
 80072d0:	08007241 	.word	0x08007241

080072d4 <__sfp_lock_acquire>:
 80072d4:	4801      	ldr	r0, [pc, #4]	@ (80072dc <__sfp_lock_acquire+0x8>)
 80072d6:	f000 b9a6 	b.w	8007626 <__retarget_lock_acquire_recursive>
 80072da:	bf00      	nop
 80072dc:	200005bd 	.word	0x200005bd

080072e0 <__sfp_lock_release>:
 80072e0:	4801      	ldr	r0, [pc, #4]	@ (80072e8 <__sfp_lock_release+0x8>)
 80072e2:	f000 b9a1 	b.w	8007628 <__retarget_lock_release_recursive>
 80072e6:	bf00      	nop
 80072e8:	200005bd 	.word	0x200005bd

080072ec <__sinit>:
 80072ec:	b510      	push	{r4, lr}
 80072ee:	4604      	mov	r4, r0
 80072f0:	f7ff fff0 	bl	80072d4 <__sfp_lock_acquire>
 80072f4:	6a23      	ldr	r3, [r4, #32]
 80072f6:	b11b      	cbz	r3, 8007300 <__sinit+0x14>
 80072f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072fc:	f7ff bff0 	b.w	80072e0 <__sfp_lock_release>
 8007300:	4b04      	ldr	r3, [pc, #16]	@ (8007314 <__sinit+0x28>)
 8007302:	6223      	str	r3, [r4, #32]
 8007304:	4b04      	ldr	r3, [pc, #16]	@ (8007318 <__sinit+0x2c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1f5      	bne.n	80072f8 <__sinit+0xc>
 800730c:	f7ff ffc4 	bl	8007298 <global_stdio_init.part.0>
 8007310:	e7f2      	b.n	80072f8 <__sinit+0xc>
 8007312:	bf00      	nop
 8007314:	08007259 	.word	0x08007259
 8007318:	200005b4 	.word	0x200005b4

0800731c <_fwalk_sglue>:
 800731c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007320:	4607      	mov	r7, r0
 8007322:	4688      	mov	r8, r1
 8007324:	4614      	mov	r4, r2
 8007326:	2600      	movs	r6, #0
 8007328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800732c:	f1b9 0901 	subs.w	r9, r9, #1
 8007330:	d505      	bpl.n	800733e <_fwalk_sglue+0x22>
 8007332:	6824      	ldr	r4, [r4, #0]
 8007334:	2c00      	cmp	r4, #0
 8007336:	d1f7      	bne.n	8007328 <_fwalk_sglue+0xc>
 8007338:	4630      	mov	r0, r6
 800733a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800733e:	89ab      	ldrh	r3, [r5, #12]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d907      	bls.n	8007354 <_fwalk_sglue+0x38>
 8007344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007348:	3301      	adds	r3, #1
 800734a:	d003      	beq.n	8007354 <_fwalk_sglue+0x38>
 800734c:	4629      	mov	r1, r5
 800734e:	4638      	mov	r0, r7
 8007350:	47c0      	blx	r8
 8007352:	4306      	orrs	r6, r0
 8007354:	3568      	adds	r5, #104	@ 0x68
 8007356:	e7e9      	b.n	800732c <_fwalk_sglue+0x10>

08007358 <iprintf>:
 8007358:	b40f      	push	{r0, r1, r2, r3}
 800735a:	b507      	push	{r0, r1, r2, lr}
 800735c:	4906      	ldr	r1, [pc, #24]	@ (8007378 <iprintf+0x20>)
 800735e:	ab04      	add	r3, sp, #16
 8007360:	6808      	ldr	r0, [r1, #0]
 8007362:	f853 2b04 	ldr.w	r2, [r3], #4
 8007366:	6881      	ldr	r1, [r0, #8]
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	f001 fc59 	bl	8008c20 <_vfiprintf_r>
 800736e:	b003      	add	sp, #12
 8007370:	f85d eb04 	ldr.w	lr, [sp], #4
 8007374:	b004      	add	sp, #16
 8007376:	4770      	bx	lr
 8007378:	20000018 	.word	0x20000018

0800737c <__sread>:
 800737c:	b510      	push	{r4, lr}
 800737e:	460c      	mov	r4, r1
 8007380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007384:	f000 f900 	bl	8007588 <_read_r>
 8007388:	2800      	cmp	r0, #0
 800738a:	bfab      	itete	ge
 800738c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800738e:	89a3      	ldrhlt	r3, [r4, #12]
 8007390:	181b      	addge	r3, r3, r0
 8007392:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007396:	bfac      	ite	ge
 8007398:	6563      	strge	r3, [r4, #84]	@ 0x54
 800739a:	81a3      	strhlt	r3, [r4, #12]
 800739c:	bd10      	pop	{r4, pc}

0800739e <__swrite>:
 800739e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a2:	461f      	mov	r7, r3
 80073a4:	898b      	ldrh	r3, [r1, #12]
 80073a6:	05db      	lsls	r3, r3, #23
 80073a8:	4605      	mov	r5, r0
 80073aa:	460c      	mov	r4, r1
 80073ac:	4616      	mov	r6, r2
 80073ae:	d505      	bpl.n	80073bc <__swrite+0x1e>
 80073b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b4:	2302      	movs	r3, #2
 80073b6:	2200      	movs	r2, #0
 80073b8:	f000 f8d4 	bl	8007564 <_lseek_r>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073c6:	81a3      	strh	r3, [r4, #12]
 80073c8:	4632      	mov	r2, r6
 80073ca:	463b      	mov	r3, r7
 80073cc:	4628      	mov	r0, r5
 80073ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d2:	f000 b8eb 	b.w	80075ac <_write_r>

080073d6 <__sseek>:
 80073d6:	b510      	push	{r4, lr}
 80073d8:	460c      	mov	r4, r1
 80073da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073de:	f000 f8c1 	bl	8007564 <_lseek_r>
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	bf15      	itete	ne
 80073e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073f2:	81a3      	strheq	r3, [r4, #12]
 80073f4:	bf18      	it	ne
 80073f6:	81a3      	strhne	r3, [r4, #12]
 80073f8:	bd10      	pop	{r4, pc}

080073fa <__sclose>:
 80073fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073fe:	f000 b8a1 	b.w	8007544 <_close_r>

08007402 <__swbuf_r>:
 8007402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007404:	460e      	mov	r6, r1
 8007406:	4614      	mov	r4, r2
 8007408:	4605      	mov	r5, r0
 800740a:	b118      	cbz	r0, 8007414 <__swbuf_r+0x12>
 800740c:	6a03      	ldr	r3, [r0, #32]
 800740e:	b90b      	cbnz	r3, 8007414 <__swbuf_r+0x12>
 8007410:	f7ff ff6c 	bl	80072ec <__sinit>
 8007414:	69a3      	ldr	r3, [r4, #24]
 8007416:	60a3      	str	r3, [r4, #8]
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	071a      	lsls	r2, r3, #28
 800741c:	d501      	bpl.n	8007422 <__swbuf_r+0x20>
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	b943      	cbnz	r3, 8007434 <__swbuf_r+0x32>
 8007422:	4621      	mov	r1, r4
 8007424:	4628      	mov	r0, r5
 8007426:	f000 f82b 	bl	8007480 <__swsetup_r>
 800742a:	b118      	cbz	r0, 8007434 <__swbuf_r+0x32>
 800742c:	f04f 37ff 	mov.w	r7, #4294967295
 8007430:	4638      	mov	r0, r7
 8007432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	6922      	ldr	r2, [r4, #16]
 8007438:	1a98      	subs	r0, r3, r2
 800743a:	6963      	ldr	r3, [r4, #20]
 800743c:	b2f6      	uxtb	r6, r6
 800743e:	4283      	cmp	r3, r0
 8007440:	4637      	mov	r7, r6
 8007442:	dc05      	bgt.n	8007450 <__swbuf_r+0x4e>
 8007444:	4621      	mov	r1, r4
 8007446:	4628      	mov	r0, r5
 8007448:	f001 fd86 	bl	8008f58 <_fflush_r>
 800744c:	2800      	cmp	r0, #0
 800744e:	d1ed      	bne.n	800742c <__swbuf_r+0x2a>
 8007450:	68a3      	ldr	r3, [r4, #8]
 8007452:	3b01      	subs	r3, #1
 8007454:	60a3      	str	r3, [r4, #8]
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	6022      	str	r2, [r4, #0]
 800745c:	701e      	strb	r6, [r3, #0]
 800745e:	6962      	ldr	r2, [r4, #20]
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	429a      	cmp	r2, r3
 8007464:	d004      	beq.n	8007470 <__swbuf_r+0x6e>
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	07db      	lsls	r3, r3, #31
 800746a:	d5e1      	bpl.n	8007430 <__swbuf_r+0x2e>
 800746c:	2e0a      	cmp	r6, #10
 800746e:	d1df      	bne.n	8007430 <__swbuf_r+0x2e>
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f001 fd70 	bl	8008f58 <_fflush_r>
 8007478:	2800      	cmp	r0, #0
 800747a:	d0d9      	beq.n	8007430 <__swbuf_r+0x2e>
 800747c:	e7d6      	b.n	800742c <__swbuf_r+0x2a>
	...

08007480 <__swsetup_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4b29      	ldr	r3, [pc, #164]	@ (8007528 <__swsetup_r+0xa8>)
 8007484:	4605      	mov	r5, r0
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	460c      	mov	r4, r1
 800748a:	b118      	cbz	r0, 8007494 <__swsetup_r+0x14>
 800748c:	6a03      	ldr	r3, [r0, #32]
 800748e:	b90b      	cbnz	r3, 8007494 <__swsetup_r+0x14>
 8007490:	f7ff ff2c 	bl	80072ec <__sinit>
 8007494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007498:	0719      	lsls	r1, r3, #28
 800749a:	d422      	bmi.n	80074e2 <__swsetup_r+0x62>
 800749c:	06da      	lsls	r2, r3, #27
 800749e:	d407      	bmi.n	80074b0 <__swsetup_r+0x30>
 80074a0:	2209      	movs	r2, #9
 80074a2:	602a      	str	r2, [r5, #0]
 80074a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	f04f 30ff 	mov.w	r0, #4294967295
 80074ae:	e033      	b.n	8007518 <__swsetup_r+0x98>
 80074b0:	0758      	lsls	r0, r3, #29
 80074b2:	d512      	bpl.n	80074da <__swsetup_r+0x5a>
 80074b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074b6:	b141      	cbz	r1, 80074ca <__swsetup_r+0x4a>
 80074b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074bc:	4299      	cmp	r1, r3
 80074be:	d002      	beq.n	80074c6 <__swsetup_r+0x46>
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 ff01 	bl	80082c8 <_free_r>
 80074c6:	2300      	movs	r3, #0
 80074c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074d0:	81a3      	strh	r3, [r4, #12]
 80074d2:	2300      	movs	r3, #0
 80074d4:	6063      	str	r3, [r4, #4]
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	f043 0308 	orr.w	r3, r3, #8
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	b94b      	cbnz	r3, 80074fa <__swsetup_r+0x7a>
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f0:	d003      	beq.n	80074fa <__swsetup_r+0x7a>
 80074f2:	4621      	mov	r1, r4
 80074f4:	4628      	mov	r0, r5
 80074f6:	f001 fd7d 	bl	8008ff4 <__smakebuf_r>
 80074fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074fe:	f013 0201 	ands.w	r2, r3, #1
 8007502:	d00a      	beq.n	800751a <__swsetup_r+0x9a>
 8007504:	2200      	movs	r2, #0
 8007506:	60a2      	str	r2, [r4, #8]
 8007508:	6962      	ldr	r2, [r4, #20]
 800750a:	4252      	negs	r2, r2
 800750c:	61a2      	str	r2, [r4, #24]
 800750e:	6922      	ldr	r2, [r4, #16]
 8007510:	b942      	cbnz	r2, 8007524 <__swsetup_r+0xa4>
 8007512:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007516:	d1c5      	bne.n	80074a4 <__swsetup_r+0x24>
 8007518:	bd38      	pop	{r3, r4, r5, pc}
 800751a:	0799      	lsls	r1, r3, #30
 800751c:	bf58      	it	pl
 800751e:	6962      	ldrpl	r2, [r4, #20]
 8007520:	60a2      	str	r2, [r4, #8]
 8007522:	e7f4      	b.n	800750e <__swsetup_r+0x8e>
 8007524:	2000      	movs	r0, #0
 8007526:	e7f7      	b.n	8007518 <__swsetup_r+0x98>
 8007528:	20000018 	.word	0x20000018

0800752c <memset>:
 800752c:	4402      	add	r2, r0
 800752e:	4603      	mov	r3, r0
 8007530:	4293      	cmp	r3, r2
 8007532:	d100      	bne.n	8007536 <memset+0xa>
 8007534:	4770      	bx	lr
 8007536:	f803 1b01 	strb.w	r1, [r3], #1
 800753a:	e7f9      	b.n	8007530 <memset+0x4>

0800753c <_localeconv_r>:
 800753c:	4800      	ldr	r0, [pc, #0]	@ (8007540 <_localeconv_r+0x4>)
 800753e:	4770      	bx	lr
 8007540:	20000158 	.word	0x20000158

08007544 <_close_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4d06      	ldr	r5, [pc, #24]	@ (8007560 <_close_r+0x1c>)
 8007548:	2300      	movs	r3, #0
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f7fa fb68 	bl	8001c24 <_close>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_close_r+0x1a>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_close_r+0x1a>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	200005b8 	.word	0x200005b8

08007564 <_lseek_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d07      	ldr	r5, [pc, #28]	@ (8007584 <_lseek_r+0x20>)
 8007568:	4604      	mov	r4, r0
 800756a:	4608      	mov	r0, r1
 800756c:	4611      	mov	r1, r2
 800756e:	2200      	movs	r2, #0
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f7fa fb7d 	bl	8001c72 <_lseek>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_lseek_r+0x1e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_lseek_r+0x1e>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	200005b8 	.word	0x200005b8

08007588 <_read_r>:
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4d07      	ldr	r5, [pc, #28]	@ (80075a8 <_read_r+0x20>)
 800758c:	4604      	mov	r4, r0
 800758e:	4608      	mov	r0, r1
 8007590:	4611      	mov	r1, r2
 8007592:	2200      	movs	r2, #0
 8007594:	602a      	str	r2, [r5, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	f7fa fb27 	bl	8001bea <_read>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d102      	bne.n	80075a6 <_read_r+0x1e>
 80075a0:	682b      	ldr	r3, [r5, #0]
 80075a2:	b103      	cbz	r3, 80075a6 <_read_r+0x1e>
 80075a4:	6023      	str	r3, [r4, #0]
 80075a6:	bd38      	pop	{r3, r4, r5, pc}
 80075a8:	200005b8 	.word	0x200005b8

080075ac <_write_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d07      	ldr	r5, [pc, #28]	@ (80075cc <_write_r+0x20>)
 80075b0:	4604      	mov	r4, r0
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	2200      	movs	r2, #0
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f7f9 fdfa 	bl	80011b4 <_write>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_write_r+0x1e>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_write_r+0x1e>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	200005b8 	.word	0x200005b8

080075d0 <__errno>:
 80075d0:	4b01      	ldr	r3, [pc, #4]	@ (80075d8 <__errno+0x8>)
 80075d2:	6818      	ldr	r0, [r3, #0]
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	20000018 	.word	0x20000018

080075dc <__libc_init_array>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4d0d      	ldr	r5, [pc, #52]	@ (8007614 <__libc_init_array+0x38>)
 80075e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007618 <__libc_init_array+0x3c>)
 80075e2:	1b64      	subs	r4, r4, r5
 80075e4:	10a4      	asrs	r4, r4, #2
 80075e6:	2600      	movs	r6, #0
 80075e8:	42a6      	cmp	r6, r4
 80075ea:	d109      	bne.n	8007600 <__libc_init_array+0x24>
 80075ec:	4d0b      	ldr	r5, [pc, #44]	@ (800761c <__libc_init_array+0x40>)
 80075ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007620 <__libc_init_array+0x44>)
 80075f0:	f001 fe2c 	bl	800924c <_init>
 80075f4:	1b64      	subs	r4, r4, r5
 80075f6:	10a4      	asrs	r4, r4, #2
 80075f8:	2600      	movs	r6, #0
 80075fa:	42a6      	cmp	r6, r4
 80075fc:	d105      	bne.n	800760a <__libc_init_array+0x2e>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	f855 3b04 	ldr.w	r3, [r5], #4
 8007604:	4798      	blx	r3
 8007606:	3601      	adds	r6, #1
 8007608:	e7ee      	b.n	80075e8 <__libc_init_array+0xc>
 800760a:	f855 3b04 	ldr.w	r3, [r5], #4
 800760e:	4798      	blx	r3
 8007610:	3601      	adds	r6, #1
 8007612:	e7f2      	b.n	80075fa <__libc_init_array+0x1e>
 8007614:	08009690 	.word	0x08009690
 8007618:	08009690 	.word	0x08009690
 800761c:	08009690 	.word	0x08009690
 8007620:	08009694 	.word	0x08009694

08007624 <__retarget_lock_init_recursive>:
 8007624:	4770      	bx	lr

08007626 <__retarget_lock_acquire_recursive>:
 8007626:	4770      	bx	lr

08007628 <__retarget_lock_release_recursive>:
 8007628:	4770      	bx	lr

0800762a <quorem>:
 800762a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762e:	6903      	ldr	r3, [r0, #16]
 8007630:	690c      	ldr	r4, [r1, #16]
 8007632:	42a3      	cmp	r3, r4
 8007634:	4607      	mov	r7, r0
 8007636:	db7e      	blt.n	8007736 <quorem+0x10c>
 8007638:	3c01      	subs	r4, #1
 800763a:	f101 0814 	add.w	r8, r1, #20
 800763e:	00a3      	lsls	r3, r4, #2
 8007640:	f100 0514 	add.w	r5, r0, #20
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007650:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007654:	3301      	adds	r3, #1
 8007656:	429a      	cmp	r2, r3
 8007658:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800765c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007660:	d32e      	bcc.n	80076c0 <quorem+0x96>
 8007662:	f04f 0a00 	mov.w	sl, #0
 8007666:	46c4      	mov	ip, r8
 8007668:	46ae      	mov	lr, r5
 800766a:	46d3      	mov	fp, sl
 800766c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007670:	b298      	uxth	r0, r3
 8007672:	fb06 a000 	mla	r0, r6, r0, sl
 8007676:	0c02      	lsrs	r2, r0, #16
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	fb06 2303 	mla	r3, r6, r3, r2
 800767e:	f8de 2000 	ldr.w	r2, [lr]
 8007682:	b280      	uxth	r0, r0
 8007684:	b292      	uxth	r2, r2
 8007686:	1a12      	subs	r2, r2, r0
 8007688:	445a      	add	r2, fp
 800768a:	f8de 0000 	ldr.w	r0, [lr]
 800768e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007692:	b29b      	uxth	r3, r3
 8007694:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007698:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800769c:	b292      	uxth	r2, r2
 800769e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076a2:	45e1      	cmp	r9, ip
 80076a4:	f84e 2b04 	str.w	r2, [lr], #4
 80076a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076ac:	d2de      	bcs.n	800766c <quorem+0x42>
 80076ae:	9b00      	ldr	r3, [sp, #0]
 80076b0:	58eb      	ldr	r3, [r5, r3]
 80076b2:	b92b      	cbnz	r3, 80076c0 <quorem+0x96>
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	3b04      	subs	r3, #4
 80076b8:	429d      	cmp	r5, r3
 80076ba:	461a      	mov	r2, r3
 80076bc:	d32f      	bcc.n	800771e <quorem+0xf4>
 80076be:	613c      	str	r4, [r7, #16]
 80076c0:	4638      	mov	r0, r7
 80076c2:	f001 f97b 	bl	80089bc <__mcmp>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	db25      	blt.n	8007716 <quorem+0xec>
 80076ca:	4629      	mov	r1, r5
 80076cc:	2000      	movs	r0, #0
 80076ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80076d2:	f8d1 c000 	ldr.w	ip, [r1]
 80076d6:	fa1f fe82 	uxth.w	lr, r2
 80076da:	fa1f f38c 	uxth.w	r3, ip
 80076de:	eba3 030e 	sub.w	r3, r3, lr
 80076e2:	4403      	add	r3, r0
 80076e4:	0c12      	lsrs	r2, r2, #16
 80076e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076f4:	45c1      	cmp	r9, r8
 80076f6:	f841 3b04 	str.w	r3, [r1], #4
 80076fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076fe:	d2e6      	bcs.n	80076ce <quorem+0xa4>
 8007700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007704:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007708:	b922      	cbnz	r2, 8007714 <quorem+0xea>
 800770a:	3b04      	subs	r3, #4
 800770c:	429d      	cmp	r5, r3
 800770e:	461a      	mov	r2, r3
 8007710:	d30b      	bcc.n	800772a <quorem+0x100>
 8007712:	613c      	str	r4, [r7, #16]
 8007714:	3601      	adds	r6, #1
 8007716:	4630      	mov	r0, r6
 8007718:	b003      	add	sp, #12
 800771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771e:	6812      	ldr	r2, [r2, #0]
 8007720:	3b04      	subs	r3, #4
 8007722:	2a00      	cmp	r2, #0
 8007724:	d1cb      	bne.n	80076be <quorem+0x94>
 8007726:	3c01      	subs	r4, #1
 8007728:	e7c6      	b.n	80076b8 <quorem+0x8e>
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	3b04      	subs	r3, #4
 800772e:	2a00      	cmp	r2, #0
 8007730:	d1ef      	bne.n	8007712 <quorem+0xe8>
 8007732:	3c01      	subs	r4, #1
 8007734:	e7ea      	b.n	800770c <quorem+0xe2>
 8007736:	2000      	movs	r0, #0
 8007738:	e7ee      	b.n	8007718 <quorem+0xee>
 800773a:	0000      	movs	r0, r0
 800773c:	0000      	movs	r0, r0
	...

08007740 <_dtoa_r>:
 8007740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	69c7      	ldr	r7, [r0, #28]
 8007746:	b099      	sub	sp, #100	@ 0x64
 8007748:	ed8d 0b02 	vstr	d0, [sp, #8]
 800774c:	ec55 4b10 	vmov	r4, r5, d0
 8007750:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007752:	9109      	str	r1, [sp, #36]	@ 0x24
 8007754:	4683      	mov	fp, r0
 8007756:	920e      	str	r2, [sp, #56]	@ 0x38
 8007758:	9313      	str	r3, [sp, #76]	@ 0x4c
 800775a:	b97f      	cbnz	r7, 800777c <_dtoa_r+0x3c>
 800775c:	2010      	movs	r0, #16
 800775e:	f000 fdfd 	bl	800835c <malloc>
 8007762:	4602      	mov	r2, r0
 8007764:	f8cb 001c 	str.w	r0, [fp, #28]
 8007768:	b920      	cbnz	r0, 8007774 <_dtoa_r+0x34>
 800776a:	4ba7      	ldr	r3, [pc, #668]	@ (8007a08 <_dtoa_r+0x2c8>)
 800776c:	21ef      	movs	r1, #239	@ 0xef
 800776e:	48a7      	ldr	r0, [pc, #668]	@ (8007a0c <_dtoa_r+0x2cc>)
 8007770:	f001 fcbc 	bl	80090ec <__assert_func>
 8007774:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007778:	6007      	str	r7, [r0, #0]
 800777a:	60c7      	str	r7, [r0, #12]
 800777c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007780:	6819      	ldr	r1, [r3, #0]
 8007782:	b159      	cbz	r1, 800779c <_dtoa_r+0x5c>
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	604a      	str	r2, [r1, #4]
 8007788:	2301      	movs	r3, #1
 800778a:	4093      	lsls	r3, r2
 800778c:	608b      	str	r3, [r1, #8]
 800778e:	4658      	mov	r0, fp
 8007790:	f000 feda 	bl	8008548 <_Bfree>
 8007794:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	1e2b      	subs	r3, r5, #0
 800779e:	bfb9      	ittee	lt
 80077a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077a4:	9303      	strlt	r3, [sp, #12]
 80077a6:	2300      	movge	r3, #0
 80077a8:	6033      	strge	r3, [r6, #0]
 80077aa:	9f03      	ldr	r7, [sp, #12]
 80077ac:	4b98      	ldr	r3, [pc, #608]	@ (8007a10 <_dtoa_r+0x2d0>)
 80077ae:	bfbc      	itt	lt
 80077b0:	2201      	movlt	r2, #1
 80077b2:	6032      	strlt	r2, [r6, #0]
 80077b4:	43bb      	bics	r3, r7
 80077b6:	d112      	bne.n	80077de <_dtoa_r+0x9e>
 80077b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077c4:	4323      	orrs	r3, r4
 80077c6:	f000 854d 	beq.w	8008264 <_dtoa_r+0xb24>
 80077ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a24 <_dtoa_r+0x2e4>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 854f 	beq.w	8008274 <_dtoa_r+0xb34>
 80077d6:	f10a 0303 	add.w	r3, sl, #3
 80077da:	f000 bd49 	b.w	8008270 <_dtoa_r+0xb30>
 80077de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	ec51 0b17 	vmov	r0, r1, d7
 80077e8:	2300      	movs	r3, #0
 80077ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80077ee:	f7f9 f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 80077f2:	4680      	mov	r8, r0
 80077f4:	b158      	cbz	r0, 800780e <_dtoa_r+0xce>
 80077f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80077f8:	2301      	movs	r3, #1
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077fe:	b113      	cbz	r3, 8007806 <_dtoa_r+0xc6>
 8007800:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007802:	4b84      	ldr	r3, [pc, #528]	@ (8007a14 <_dtoa_r+0x2d4>)
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007a28 <_dtoa_r+0x2e8>
 800780a:	f000 bd33 	b.w	8008274 <_dtoa_r+0xb34>
 800780e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007812:	aa16      	add	r2, sp, #88	@ 0x58
 8007814:	a917      	add	r1, sp, #92	@ 0x5c
 8007816:	4658      	mov	r0, fp
 8007818:	f001 f980 	bl	8008b1c <__d2b>
 800781c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007820:	4681      	mov	r9, r0
 8007822:	2e00      	cmp	r6, #0
 8007824:	d077      	beq.n	8007916 <_dtoa_r+0x1d6>
 8007826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007828:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800782c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007834:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007838:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800783c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007840:	4619      	mov	r1, r3
 8007842:	2200      	movs	r2, #0
 8007844:	4b74      	ldr	r3, [pc, #464]	@ (8007a18 <_dtoa_r+0x2d8>)
 8007846:	f7f8 fd1f 	bl	8000288 <__aeabi_dsub>
 800784a:	a369      	add	r3, pc, #420	@ (adr r3, 80079f0 <_dtoa_r+0x2b0>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fed2 	bl	80005f8 <__aeabi_dmul>
 8007854:	a368      	add	r3, pc, #416	@ (adr r3, 80079f8 <_dtoa_r+0x2b8>)
 8007856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785a:	f7f8 fd17 	bl	800028c <__adddf3>
 800785e:	4604      	mov	r4, r0
 8007860:	4630      	mov	r0, r6
 8007862:	460d      	mov	r5, r1
 8007864:	f7f8 fe5e 	bl	8000524 <__aeabi_i2d>
 8007868:	a365      	add	r3, pc, #404	@ (adr r3, 8007a00 <_dtoa_r+0x2c0>)
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	f7f8 fec3 	bl	80005f8 <__aeabi_dmul>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4620      	mov	r0, r4
 8007878:	4629      	mov	r1, r5
 800787a:	f7f8 fd07 	bl	800028c <__adddf3>
 800787e:	4604      	mov	r4, r0
 8007880:	460d      	mov	r5, r1
 8007882:	f7f9 f969 	bl	8000b58 <__aeabi_d2iz>
 8007886:	2200      	movs	r2, #0
 8007888:	4607      	mov	r7, r0
 800788a:	2300      	movs	r3, #0
 800788c:	4620      	mov	r0, r4
 800788e:	4629      	mov	r1, r5
 8007890:	f7f9 f924 	bl	8000adc <__aeabi_dcmplt>
 8007894:	b140      	cbz	r0, 80078a8 <_dtoa_r+0x168>
 8007896:	4638      	mov	r0, r7
 8007898:	f7f8 fe44 	bl	8000524 <__aeabi_i2d>
 800789c:	4622      	mov	r2, r4
 800789e:	462b      	mov	r3, r5
 80078a0:	f7f9 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80078a4:	b900      	cbnz	r0, 80078a8 <_dtoa_r+0x168>
 80078a6:	3f01      	subs	r7, #1
 80078a8:	2f16      	cmp	r7, #22
 80078aa:	d851      	bhi.n	8007950 <_dtoa_r+0x210>
 80078ac:	4b5b      	ldr	r3, [pc, #364]	@ (8007a1c <_dtoa_r+0x2dc>)
 80078ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078ba:	f7f9 f90f 	bl	8000adc <__aeabi_dcmplt>
 80078be:	2800      	cmp	r0, #0
 80078c0:	d048      	beq.n	8007954 <_dtoa_r+0x214>
 80078c2:	3f01      	subs	r7, #1
 80078c4:	2300      	movs	r3, #0
 80078c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80078c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078ca:	1b9b      	subs	r3, r3, r6
 80078cc:	1e5a      	subs	r2, r3, #1
 80078ce:	bf44      	itt	mi
 80078d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80078d4:	2300      	movmi	r3, #0
 80078d6:	9208      	str	r2, [sp, #32]
 80078d8:	bf54      	ite	pl
 80078da:	f04f 0800 	movpl.w	r8, #0
 80078de:	9308      	strmi	r3, [sp, #32]
 80078e0:	2f00      	cmp	r7, #0
 80078e2:	db39      	blt.n	8007958 <_dtoa_r+0x218>
 80078e4:	9b08      	ldr	r3, [sp, #32]
 80078e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80078e8:	443b      	add	r3, r7
 80078ea:	9308      	str	r3, [sp, #32]
 80078ec:	2300      	movs	r3, #0
 80078ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f2:	2b09      	cmp	r3, #9
 80078f4:	d864      	bhi.n	80079c0 <_dtoa_r+0x280>
 80078f6:	2b05      	cmp	r3, #5
 80078f8:	bfc4      	itt	gt
 80078fa:	3b04      	subgt	r3, #4
 80078fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80078fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007900:	f1a3 0302 	sub.w	r3, r3, #2
 8007904:	bfcc      	ite	gt
 8007906:	2400      	movgt	r4, #0
 8007908:	2401      	movle	r4, #1
 800790a:	2b03      	cmp	r3, #3
 800790c:	d863      	bhi.n	80079d6 <_dtoa_r+0x296>
 800790e:	e8df f003 	tbb	[pc, r3]
 8007912:	372a      	.short	0x372a
 8007914:	5535      	.short	0x5535
 8007916:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800791a:	441e      	add	r6, r3
 800791c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007920:	2b20      	cmp	r3, #32
 8007922:	bfc1      	itttt	gt
 8007924:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007928:	409f      	lslgt	r7, r3
 800792a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800792e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007932:	bfd6      	itet	le
 8007934:	f1c3 0320 	rsble	r3, r3, #32
 8007938:	ea47 0003 	orrgt.w	r0, r7, r3
 800793c:	fa04 f003 	lslle.w	r0, r4, r3
 8007940:	f7f8 fde0 	bl	8000504 <__aeabi_ui2d>
 8007944:	2201      	movs	r2, #1
 8007946:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800794a:	3e01      	subs	r6, #1
 800794c:	9214      	str	r2, [sp, #80]	@ 0x50
 800794e:	e777      	b.n	8007840 <_dtoa_r+0x100>
 8007950:	2301      	movs	r3, #1
 8007952:	e7b8      	b.n	80078c6 <_dtoa_r+0x186>
 8007954:	9012      	str	r0, [sp, #72]	@ 0x48
 8007956:	e7b7      	b.n	80078c8 <_dtoa_r+0x188>
 8007958:	427b      	negs	r3, r7
 800795a:	930a      	str	r3, [sp, #40]	@ 0x28
 800795c:	2300      	movs	r3, #0
 800795e:	eba8 0807 	sub.w	r8, r8, r7
 8007962:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007964:	e7c4      	b.n	80078f0 <_dtoa_r+0x1b0>
 8007966:	2300      	movs	r3, #0
 8007968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800796a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800796c:	2b00      	cmp	r3, #0
 800796e:	dc35      	bgt.n	80079dc <_dtoa_r+0x29c>
 8007970:	2301      	movs	r3, #1
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	461a      	mov	r2, r3
 8007978:	920e      	str	r2, [sp, #56]	@ 0x38
 800797a:	e00b      	b.n	8007994 <_dtoa_r+0x254>
 800797c:	2301      	movs	r3, #1
 800797e:	e7f3      	b.n	8007968 <_dtoa_r+0x228>
 8007980:	2300      	movs	r3, #0
 8007982:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007986:	18fb      	adds	r3, r7, r3
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	2b01      	cmp	r3, #1
 800798e:	9307      	str	r3, [sp, #28]
 8007990:	bfb8      	it	lt
 8007992:	2301      	movlt	r3, #1
 8007994:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007998:	2100      	movs	r1, #0
 800799a:	2204      	movs	r2, #4
 800799c:	f102 0514 	add.w	r5, r2, #20
 80079a0:	429d      	cmp	r5, r3
 80079a2:	d91f      	bls.n	80079e4 <_dtoa_r+0x2a4>
 80079a4:	6041      	str	r1, [r0, #4]
 80079a6:	4658      	mov	r0, fp
 80079a8:	f000 fd8e 	bl	80084c8 <_Balloc>
 80079ac:	4682      	mov	sl, r0
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d13c      	bne.n	8007a2c <_dtoa_r+0x2ec>
 80079b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a20 <_dtoa_r+0x2e0>)
 80079b4:	4602      	mov	r2, r0
 80079b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80079ba:	e6d8      	b.n	800776e <_dtoa_r+0x2e>
 80079bc:	2301      	movs	r3, #1
 80079be:	e7e0      	b.n	8007982 <_dtoa_r+0x242>
 80079c0:	2401      	movs	r4, #1
 80079c2:	2300      	movs	r3, #0
 80079c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80079c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079c8:	f04f 33ff 	mov.w	r3, #4294967295
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	9307      	str	r3, [sp, #28]
 80079d0:	2200      	movs	r2, #0
 80079d2:	2312      	movs	r3, #18
 80079d4:	e7d0      	b.n	8007978 <_dtoa_r+0x238>
 80079d6:	2301      	movs	r3, #1
 80079d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079da:	e7f5      	b.n	80079c8 <_dtoa_r+0x288>
 80079dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	9307      	str	r3, [sp, #28]
 80079e2:	e7d7      	b.n	8007994 <_dtoa_r+0x254>
 80079e4:	3101      	adds	r1, #1
 80079e6:	0052      	lsls	r2, r2, #1
 80079e8:	e7d8      	b.n	800799c <_dtoa_r+0x25c>
 80079ea:	bf00      	nop
 80079ec:	f3af 8000 	nop.w
 80079f0:	636f4361 	.word	0x636f4361
 80079f4:	3fd287a7 	.word	0x3fd287a7
 80079f8:	8b60c8b3 	.word	0x8b60c8b3
 80079fc:	3fc68a28 	.word	0x3fc68a28
 8007a00:	509f79fb 	.word	0x509f79fb
 8007a04:	3fd34413 	.word	0x3fd34413
 8007a08:	08009359 	.word	0x08009359
 8007a0c:	08009370 	.word	0x08009370
 8007a10:	7ff00000 	.word	0x7ff00000
 8007a14:	08009329 	.word	0x08009329
 8007a18:	3ff80000 	.word	0x3ff80000
 8007a1c:	08009468 	.word	0x08009468
 8007a20:	080093c8 	.word	0x080093c8
 8007a24:	08009355 	.word	0x08009355
 8007a28:	08009328 	.word	0x08009328
 8007a2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a30:	6018      	str	r0, [r3, #0]
 8007a32:	9b07      	ldr	r3, [sp, #28]
 8007a34:	2b0e      	cmp	r3, #14
 8007a36:	f200 80a4 	bhi.w	8007b82 <_dtoa_r+0x442>
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	f000 80a1 	beq.w	8007b82 <_dtoa_r+0x442>
 8007a40:	2f00      	cmp	r7, #0
 8007a42:	dd33      	ble.n	8007aac <_dtoa_r+0x36c>
 8007a44:	4bad      	ldr	r3, [pc, #692]	@ (8007cfc <_dtoa_r+0x5bc>)
 8007a46:	f007 020f 	and.w	r2, r7, #15
 8007a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a4e:	ed93 7b00 	vldr	d7, [r3]
 8007a52:	05f8      	lsls	r0, r7, #23
 8007a54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007a58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a5c:	d516      	bpl.n	8007a8c <_dtoa_r+0x34c>
 8007a5e:	4ba8      	ldr	r3, [pc, #672]	@ (8007d00 <_dtoa_r+0x5c0>)
 8007a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a68:	f7f8 fef0 	bl	800084c <__aeabi_ddiv>
 8007a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a70:	f004 040f 	and.w	r4, r4, #15
 8007a74:	2603      	movs	r6, #3
 8007a76:	4da2      	ldr	r5, [pc, #648]	@ (8007d00 <_dtoa_r+0x5c0>)
 8007a78:	b954      	cbnz	r4, 8007a90 <_dtoa_r+0x350>
 8007a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a82:	f7f8 fee3 	bl	800084c <__aeabi_ddiv>
 8007a86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a8a:	e028      	b.n	8007ade <_dtoa_r+0x39e>
 8007a8c:	2602      	movs	r6, #2
 8007a8e:	e7f2      	b.n	8007a76 <_dtoa_r+0x336>
 8007a90:	07e1      	lsls	r1, r4, #31
 8007a92:	d508      	bpl.n	8007aa6 <_dtoa_r+0x366>
 8007a94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a9c:	f7f8 fdac 	bl	80005f8 <__aeabi_dmul>
 8007aa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007aa4:	3601      	adds	r6, #1
 8007aa6:	1064      	asrs	r4, r4, #1
 8007aa8:	3508      	adds	r5, #8
 8007aaa:	e7e5      	b.n	8007a78 <_dtoa_r+0x338>
 8007aac:	f000 80d2 	beq.w	8007c54 <_dtoa_r+0x514>
 8007ab0:	427c      	negs	r4, r7
 8007ab2:	4b92      	ldr	r3, [pc, #584]	@ (8007cfc <_dtoa_r+0x5bc>)
 8007ab4:	4d92      	ldr	r5, [pc, #584]	@ (8007d00 <_dtoa_r+0x5c0>)
 8007ab6:	f004 020f 	and.w	r2, r4, #15
 8007aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ac6:	f7f8 fd97 	bl	80005f8 <__aeabi_dmul>
 8007aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ace:	1124      	asrs	r4, r4, #4
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	2602      	movs	r6, #2
 8007ad4:	2c00      	cmp	r4, #0
 8007ad6:	f040 80b2 	bne.w	8007c3e <_dtoa_r+0x4fe>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1d3      	bne.n	8007a86 <_dtoa_r+0x346>
 8007ade:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ae0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 80b7 	beq.w	8007c58 <_dtoa_r+0x518>
 8007aea:	4b86      	ldr	r3, [pc, #536]	@ (8007d04 <_dtoa_r+0x5c4>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	4620      	mov	r0, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f8 fff3 	bl	8000adc <__aeabi_dcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f000 80ae 	beq.w	8007c58 <_dtoa_r+0x518>
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 80aa 	beq.w	8007c58 <_dtoa_r+0x518>
 8007b04:	9b00      	ldr	r3, [sp, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	dd37      	ble.n	8007b7a <_dtoa_r+0x43a>
 8007b0a:	1e7b      	subs	r3, r7, #1
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	4620      	mov	r0, r4
 8007b10:	4b7d      	ldr	r3, [pc, #500]	@ (8007d08 <_dtoa_r+0x5c8>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	4629      	mov	r1, r5
 8007b16:	f7f8 fd6f 	bl	80005f8 <__aeabi_dmul>
 8007b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b1e:	9c00      	ldr	r4, [sp, #0]
 8007b20:	3601      	adds	r6, #1
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7f8 fcfe 	bl	8000524 <__aeabi_i2d>
 8007b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b2c:	f7f8 fd64 	bl	80005f8 <__aeabi_dmul>
 8007b30:	4b76      	ldr	r3, [pc, #472]	@ (8007d0c <_dtoa_r+0x5cc>)
 8007b32:	2200      	movs	r2, #0
 8007b34:	f7f8 fbaa 	bl	800028c <__adddf3>
 8007b38:	4605      	mov	r5, r0
 8007b3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b3e:	2c00      	cmp	r4, #0
 8007b40:	f040 808d 	bne.w	8007c5e <_dtoa_r+0x51e>
 8007b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b48:	4b71      	ldr	r3, [pc, #452]	@ (8007d10 <_dtoa_r+0x5d0>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f7f8 fb9c 	bl	8000288 <__aeabi_dsub>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b58:	462a      	mov	r2, r5
 8007b5a:	4633      	mov	r3, r6
 8007b5c:	f7f8 ffdc 	bl	8000b18 <__aeabi_dcmpgt>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	f040 828b 	bne.w	800807c <_dtoa_r+0x93c>
 8007b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b6a:	462a      	mov	r2, r5
 8007b6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b70:	f7f8 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	f040 8128 	bne.w	8007dca <_dtoa_r+0x68a>
 8007b7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f2c0 815a 	blt.w	8007e3e <_dtoa_r+0x6fe>
 8007b8a:	2f0e      	cmp	r7, #14
 8007b8c:	f300 8157 	bgt.w	8007e3e <_dtoa_r+0x6fe>
 8007b90:	4b5a      	ldr	r3, [pc, #360]	@ (8007cfc <_dtoa_r+0x5bc>)
 8007b92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b96:	ed93 7b00 	vldr	d7, [r3]
 8007b9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	ed8d 7b00 	vstr	d7, [sp]
 8007ba2:	da03      	bge.n	8007bac <_dtoa_r+0x46c>
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f340 8101 	ble.w	8007dae <_dtoa_r+0x66e>
 8007bac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007bb0:	4656      	mov	r6, sl
 8007bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 fe47 	bl	800084c <__aeabi_ddiv>
 8007bbe:	f7f8 ffcb 	bl	8000b58 <__aeabi_d2iz>
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	f7f8 fcae 	bl	8000524 <__aeabi_i2d>
 8007bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bcc:	f7f8 fd14 	bl	80005f8 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007bdc:	f7f8 fb54 	bl	8000288 <__aeabi_dsub>
 8007be0:	f806 4b01 	strb.w	r4, [r6], #1
 8007be4:	9d07      	ldr	r5, [sp, #28]
 8007be6:	eba6 040a 	sub.w	r4, r6, sl
 8007bea:	42a5      	cmp	r5, r4
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	f040 8117 	bne.w	8007e22 <_dtoa_r+0x6e2>
 8007bf4:	f7f8 fb4a 	bl	800028c <__adddf3>
 8007bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	460d      	mov	r5, r1
 8007c00:	f7f8 ff8a 	bl	8000b18 <__aeabi_dcmpgt>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	f040 80f9 	bne.w	8007dfc <_dtoa_r+0x6bc>
 8007c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c0e:	4620      	mov	r0, r4
 8007c10:	4629      	mov	r1, r5
 8007c12:	f7f8 ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c16:	b118      	cbz	r0, 8007c20 <_dtoa_r+0x4e0>
 8007c18:	f018 0f01 	tst.w	r8, #1
 8007c1c:	f040 80ee 	bne.w	8007dfc <_dtoa_r+0x6bc>
 8007c20:	4649      	mov	r1, r9
 8007c22:	4658      	mov	r0, fp
 8007c24:	f000 fc90 	bl	8008548 <_Bfree>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	7033      	strb	r3, [r6, #0]
 8007c2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c2e:	3701      	adds	r7, #1
 8007c30:	601f      	str	r7, [r3, #0]
 8007c32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 831d 	beq.w	8008274 <_dtoa_r+0xb34>
 8007c3a:	601e      	str	r6, [r3, #0]
 8007c3c:	e31a      	b.n	8008274 <_dtoa_r+0xb34>
 8007c3e:	07e2      	lsls	r2, r4, #31
 8007c40:	d505      	bpl.n	8007c4e <_dtoa_r+0x50e>
 8007c42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c46:	f7f8 fcd7 	bl	80005f8 <__aeabi_dmul>
 8007c4a:	3601      	adds	r6, #1
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	1064      	asrs	r4, r4, #1
 8007c50:	3508      	adds	r5, #8
 8007c52:	e73f      	b.n	8007ad4 <_dtoa_r+0x394>
 8007c54:	2602      	movs	r6, #2
 8007c56:	e742      	b.n	8007ade <_dtoa_r+0x39e>
 8007c58:	9c07      	ldr	r4, [sp, #28]
 8007c5a:	9704      	str	r7, [sp, #16]
 8007c5c:	e761      	b.n	8007b22 <_dtoa_r+0x3e2>
 8007c5e:	4b27      	ldr	r3, [pc, #156]	@ (8007cfc <_dtoa_r+0x5bc>)
 8007c60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c6a:	4454      	add	r4, sl
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	d053      	beq.n	8007d18 <_dtoa_r+0x5d8>
 8007c70:	4928      	ldr	r1, [pc, #160]	@ (8007d14 <_dtoa_r+0x5d4>)
 8007c72:	2000      	movs	r0, #0
 8007c74:	f7f8 fdea 	bl	800084c <__aeabi_ddiv>
 8007c78:	4633      	mov	r3, r6
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	f7f8 fb04 	bl	8000288 <__aeabi_dsub>
 8007c80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c84:	4656      	mov	r6, sl
 8007c86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c8a:	f7f8 ff65 	bl	8000b58 <__aeabi_d2iz>
 8007c8e:	4605      	mov	r5, r0
 8007c90:	f7f8 fc48 	bl	8000524 <__aeabi_i2d>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c9c:	f7f8 faf4 	bl	8000288 <__aeabi_dsub>
 8007ca0:	3530      	adds	r5, #48	@ 0x30
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007caa:	f806 5b01 	strb.w	r5, [r6], #1
 8007cae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cb2:	f7f8 ff13 	bl	8000adc <__aeabi_dcmplt>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d171      	bne.n	8007d9e <_dtoa_r+0x65e>
 8007cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cbe:	4911      	ldr	r1, [pc, #68]	@ (8007d04 <_dtoa_r+0x5c4>)
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	f7f8 fae1 	bl	8000288 <__aeabi_dsub>
 8007cc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cca:	f7f8 ff07 	bl	8000adc <__aeabi_dcmplt>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f040 8095 	bne.w	8007dfe <_dtoa_r+0x6be>
 8007cd4:	42a6      	cmp	r6, r4
 8007cd6:	f43f af50 	beq.w	8007b7a <_dtoa_r+0x43a>
 8007cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cde:	4b0a      	ldr	r3, [pc, #40]	@ (8007d08 <_dtoa_r+0x5c8>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f7f8 fc89 	bl	80005f8 <__aeabi_dmul>
 8007ce6:	4b08      	ldr	r3, [pc, #32]	@ (8007d08 <_dtoa_r+0x5c8>)
 8007ce8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cec:	2200      	movs	r2, #0
 8007cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf2:	f7f8 fc81 	bl	80005f8 <__aeabi_dmul>
 8007cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cfa:	e7c4      	b.n	8007c86 <_dtoa_r+0x546>
 8007cfc:	08009468 	.word	0x08009468
 8007d00:	08009440 	.word	0x08009440
 8007d04:	3ff00000 	.word	0x3ff00000
 8007d08:	40240000 	.word	0x40240000
 8007d0c:	401c0000 	.word	0x401c0000
 8007d10:	40140000 	.word	0x40140000
 8007d14:	3fe00000 	.word	0x3fe00000
 8007d18:	4631      	mov	r1, r6
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f7f8 fc6c 	bl	80005f8 <__aeabi_dmul>
 8007d20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d24:	9415      	str	r4, [sp, #84]	@ 0x54
 8007d26:	4656      	mov	r6, sl
 8007d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d2c:	f7f8 ff14 	bl	8000b58 <__aeabi_d2iz>
 8007d30:	4605      	mov	r5, r0
 8007d32:	f7f8 fbf7 	bl	8000524 <__aeabi_i2d>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d3e:	f7f8 faa3 	bl	8000288 <__aeabi_dsub>
 8007d42:	3530      	adds	r5, #48	@ 0x30
 8007d44:	f806 5b01 	strb.w	r5, [r6], #1
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	42a6      	cmp	r6, r4
 8007d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	d124      	bne.n	8007da2 <_dtoa_r+0x662>
 8007d58:	4bac      	ldr	r3, [pc, #688]	@ (800800c <_dtoa_r+0x8cc>)
 8007d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d5e:	f7f8 fa95 	bl	800028c <__adddf3>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6a:	f7f8 fed5 	bl	8000b18 <__aeabi_dcmpgt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d145      	bne.n	8007dfe <_dtoa_r+0x6be>
 8007d72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d76:	49a5      	ldr	r1, [pc, #660]	@ (800800c <_dtoa_r+0x8cc>)
 8007d78:	2000      	movs	r0, #0
 8007d7a:	f7f8 fa85 	bl	8000288 <__aeabi_dsub>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d86:	f7f8 fea9 	bl	8000adc <__aeabi_dcmplt>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	f43f aef5 	beq.w	8007b7a <_dtoa_r+0x43a>
 8007d90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007d92:	1e73      	subs	r3, r6, #1
 8007d94:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d9a:	2b30      	cmp	r3, #48	@ 0x30
 8007d9c:	d0f8      	beq.n	8007d90 <_dtoa_r+0x650>
 8007d9e:	9f04      	ldr	r7, [sp, #16]
 8007da0:	e73e      	b.n	8007c20 <_dtoa_r+0x4e0>
 8007da2:	4b9b      	ldr	r3, [pc, #620]	@ (8008010 <_dtoa_r+0x8d0>)
 8007da4:	f7f8 fc28 	bl	80005f8 <__aeabi_dmul>
 8007da8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dac:	e7bc      	b.n	8007d28 <_dtoa_r+0x5e8>
 8007dae:	d10c      	bne.n	8007dca <_dtoa_r+0x68a>
 8007db0:	4b98      	ldr	r3, [pc, #608]	@ (8008014 <_dtoa_r+0x8d4>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007db8:	f7f8 fc1e 	bl	80005f8 <__aeabi_dmul>
 8007dbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dc0:	f7f8 fea0 	bl	8000b04 <__aeabi_dcmpge>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	f000 8157 	beq.w	8008078 <_dtoa_r+0x938>
 8007dca:	2400      	movs	r4, #0
 8007dcc:	4625      	mov	r5, r4
 8007dce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	9304      	str	r3, [sp, #16]
 8007dd4:	4656      	mov	r6, sl
 8007dd6:	2700      	movs	r7, #0
 8007dd8:	4621      	mov	r1, r4
 8007dda:	4658      	mov	r0, fp
 8007ddc:	f000 fbb4 	bl	8008548 <_Bfree>
 8007de0:	2d00      	cmp	r5, #0
 8007de2:	d0dc      	beq.n	8007d9e <_dtoa_r+0x65e>
 8007de4:	b12f      	cbz	r7, 8007df2 <_dtoa_r+0x6b2>
 8007de6:	42af      	cmp	r7, r5
 8007de8:	d003      	beq.n	8007df2 <_dtoa_r+0x6b2>
 8007dea:	4639      	mov	r1, r7
 8007dec:	4658      	mov	r0, fp
 8007dee:	f000 fbab 	bl	8008548 <_Bfree>
 8007df2:	4629      	mov	r1, r5
 8007df4:	4658      	mov	r0, fp
 8007df6:	f000 fba7 	bl	8008548 <_Bfree>
 8007dfa:	e7d0      	b.n	8007d9e <_dtoa_r+0x65e>
 8007dfc:	9704      	str	r7, [sp, #16]
 8007dfe:	4633      	mov	r3, r6
 8007e00:	461e      	mov	r6, r3
 8007e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e06:	2a39      	cmp	r2, #57	@ 0x39
 8007e08:	d107      	bne.n	8007e1a <_dtoa_r+0x6da>
 8007e0a:	459a      	cmp	sl, r3
 8007e0c:	d1f8      	bne.n	8007e00 <_dtoa_r+0x6c0>
 8007e0e:	9a04      	ldr	r2, [sp, #16]
 8007e10:	3201      	adds	r2, #1
 8007e12:	9204      	str	r2, [sp, #16]
 8007e14:	2230      	movs	r2, #48	@ 0x30
 8007e16:	f88a 2000 	strb.w	r2, [sl]
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	3201      	adds	r2, #1
 8007e1e:	701a      	strb	r2, [r3, #0]
 8007e20:	e7bd      	b.n	8007d9e <_dtoa_r+0x65e>
 8007e22:	4b7b      	ldr	r3, [pc, #492]	@ (8008010 <_dtoa_r+0x8d0>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	f7f8 fbe7 	bl	80005f8 <__aeabi_dmul>
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	4604      	mov	r4, r0
 8007e30:	460d      	mov	r5, r1
 8007e32:	f7f8 fe49 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	f43f aebb 	beq.w	8007bb2 <_dtoa_r+0x472>
 8007e3c:	e6f0      	b.n	8007c20 <_dtoa_r+0x4e0>
 8007e3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e40:	2a00      	cmp	r2, #0
 8007e42:	f000 80db 	beq.w	8007ffc <_dtoa_r+0x8bc>
 8007e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e48:	2a01      	cmp	r2, #1
 8007e4a:	f300 80bf 	bgt.w	8007fcc <_dtoa_r+0x88c>
 8007e4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	f000 80b7 	beq.w	8007fc4 <_dtoa_r+0x884>
 8007e56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e5c:	4646      	mov	r6, r8
 8007e5e:	9a08      	ldr	r2, [sp, #32]
 8007e60:	2101      	movs	r1, #1
 8007e62:	441a      	add	r2, r3
 8007e64:	4658      	mov	r0, fp
 8007e66:	4498      	add	r8, r3
 8007e68:	9208      	str	r2, [sp, #32]
 8007e6a:	f000 fc21 	bl	80086b0 <__i2b>
 8007e6e:	4605      	mov	r5, r0
 8007e70:	b15e      	cbz	r6, 8007e8a <_dtoa_r+0x74a>
 8007e72:	9b08      	ldr	r3, [sp, #32]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	dd08      	ble.n	8007e8a <_dtoa_r+0x74a>
 8007e78:	42b3      	cmp	r3, r6
 8007e7a:	9a08      	ldr	r2, [sp, #32]
 8007e7c:	bfa8      	it	ge
 8007e7e:	4633      	movge	r3, r6
 8007e80:	eba8 0803 	sub.w	r8, r8, r3
 8007e84:	1af6      	subs	r6, r6, r3
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	9308      	str	r3, [sp, #32]
 8007e8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e8c:	b1f3      	cbz	r3, 8007ecc <_dtoa_r+0x78c>
 8007e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 80b7 	beq.w	8008004 <_dtoa_r+0x8c4>
 8007e96:	b18c      	cbz	r4, 8007ebc <_dtoa_r+0x77c>
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4622      	mov	r2, r4
 8007e9c:	4658      	mov	r0, fp
 8007e9e:	f000 fcc7 	bl	8008830 <__pow5mult>
 8007ea2:	464a      	mov	r2, r9
 8007ea4:	4601      	mov	r1, r0
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	4658      	mov	r0, fp
 8007eaa:	f000 fc17 	bl	80086dc <__multiply>
 8007eae:	4649      	mov	r1, r9
 8007eb0:	9004      	str	r0, [sp, #16]
 8007eb2:	4658      	mov	r0, fp
 8007eb4:	f000 fb48 	bl	8008548 <_Bfree>
 8007eb8:	9b04      	ldr	r3, [sp, #16]
 8007eba:	4699      	mov	r9, r3
 8007ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ebe:	1b1a      	subs	r2, r3, r4
 8007ec0:	d004      	beq.n	8007ecc <_dtoa_r+0x78c>
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	4658      	mov	r0, fp
 8007ec6:	f000 fcb3 	bl	8008830 <__pow5mult>
 8007eca:	4681      	mov	r9, r0
 8007ecc:	2101      	movs	r1, #1
 8007ece:	4658      	mov	r0, fp
 8007ed0:	f000 fbee 	bl	80086b0 <__i2b>
 8007ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 81cf 	beq.w	800827c <_dtoa_r+0xb3c>
 8007ede:	461a      	mov	r2, r3
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	4658      	mov	r0, fp
 8007ee4:	f000 fca4 	bl	8008830 <__pow5mult>
 8007ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	4604      	mov	r4, r0
 8007eee:	f300 8095 	bgt.w	800801c <_dtoa_r+0x8dc>
 8007ef2:	9b02      	ldr	r3, [sp, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f040 8087 	bne.w	8008008 <_dtoa_r+0x8c8>
 8007efa:	9b03      	ldr	r3, [sp, #12]
 8007efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 8089 	bne.w	8008018 <_dtoa_r+0x8d8>
 8007f06:	9b03      	ldr	r3, [sp, #12]
 8007f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f0c:	0d1b      	lsrs	r3, r3, #20
 8007f0e:	051b      	lsls	r3, r3, #20
 8007f10:	b12b      	cbz	r3, 8007f1e <_dtoa_r+0x7de>
 8007f12:	9b08      	ldr	r3, [sp, #32]
 8007f14:	3301      	adds	r3, #1
 8007f16:	9308      	str	r3, [sp, #32]
 8007f18:	f108 0801 	add.w	r8, r8, #1
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 81b0 	beq.w	8008288 <_dtoa_r+0xb48>
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f2e:	6918      	ldr	r0, [r3, #16]
 8007f30:	f000 fb72 	bl	8008618 <__hi0bits>
 8007f34:	f1c0 0020 	rsb	r0, r0, #32
 8007f38:	9b08      	ldr	r3, [sp, #32]
 8007f3a:	4418      	add	r0, r3
 8007f3c:	f010 001f 	ands.w	r0, r0, #31
 8007f40:	d077      	beq.n	8008032 <_dtoa_r+0x8f2>
 8007f42:	f1c0 0320 	rsb	r3, r0, #32
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	dd6b      	ble.n	8008022 <_dtoa_r+0x8e2>
 8007f4a:	9b08      	ldr	r3, [sp, #32]
 8007f4c:	f1c0 001c 	rsb	r0, r0, #28
 8007f50:	4403      	add	r3, r0
 8007f52:	4480      	add	r8, r0
 8007f54:	4406      	add	r6, r0
 8007f56:	9308      	str	r3, [sp, #32]
 8007f58:	f1b8 0f00 	cmp.w	r8, #0
 8007f5c:	dd05      	ble.n	8007f6a <_dtoa_r+0x82a>
 8007f5e:	4649      	mov	r1, r9
 8007f60:	4642      	mov	r2, r8
 8007f62:	4658      	mov	r0, fp
 8007f64:	f000 fcbe 	bl	80088e4 <__lshift>
 8007f68:	4681      	mov	r9, r0
 8007f6a:	9b08      	ldr	r3, [sp, #32]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dd05      	ble.n	8007f7c <_dtoa_r+0x83c>
 8007f70:	4621      	mov	r1, r4
 8007f72:	461a      	mov	r2, r3
 8007f74:	4658      	mov	r0, fp
 8007f76:	f000 fcb5 	bl	80088e4 <__lshift>
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d059      	beq.n	8008036 <_dtoa_r+0x8f6>
 8007f82:	4621      	mov	r1, r4
 8007f84:	4648      	mov	r0, r9
 8007f86:	f000 fd19 	bl	80089bc <__mcmp>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	da53      	bge.n	8008036 <_dtoa_r+0x8f6>
 8007f8e:	1e7b      	subs	r3, r7, #1
 8007f90:	9304      	str	r3, [sp, #16]
 8007f92:	4649      	mov	r1, r9
 8007f94:	2300      	movs	r3, #0
 8007f96:	220a      	movs	r2, #10
 8007f98:	4658      	mov	r0, fp
 8007f9a:	f000 faf7 	bl	800858c <__multadd>
 8007f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fa0:	4681      	mov	r9, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 8172 	beq.w	800828c <_dtoa_r+0xb4c>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4629      	mov	r1, r5
 8007fac:	220a      	movs	r2, #10
 8007fae:	4658      	mov	r0, fp
 8007fb0:	f000 faec 	bl	800858c <__multadd>
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	4605      	mov	r5, r0
 8007fba:	dc67      	bgt.n	800808c <_dtoa_r+0x94c>
 8007fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	dc41      	bgt.n	8008046 <_dtoa_r+0x906>
 8007fc2:	e063      	b.n	800808c <_dtoa_r+0x94c>
 8007fc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fca:	e746      	b.n	8007e5a <_dtoa_r+0x71a>
 8007fcc:	9b07      	ldr	r3, [sp, #28]
 8007fce:	1e5c      	subs	r4, r3, #1
 8007fd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	bfbf      	itttt	lt
 8007fd6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fd8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007fda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fdc:	1ae3      	sublt	r3, r4, r3
 8007fde:	bfb4      	ite	lt
 8007fe0:	18d2      	addlt	r2, r2, r3
 8007fe2:	1b1c      	subge	r4, r3, r4
 8007fe4:	9b07      	ldr	r3, [sp, #28]
 8007fe6:	bfbc      	itt	lt
 8007fe8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007fea:	2400      	movlt	r4, #0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfb5      	itete	lt
 8007ff0:	eba8 0603 	sublt.w	r6, r8, r3
 8007ff4:	9b07      	ldrge	r3, [sp, #28]
 8007ff6:	2300      	movlt	r3, #0
 8007ff8:	4646      	movge	r6, r8
 8007ffa:	e730      	b.n	8007e5e <_dtoa_r+0x71e>
 8007ffc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ffe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008000:	4646      	mov	r6, r8
 8008002:	e735      	b.n	8007e70 <_dtoa_r+0x730>
 8008004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008006:	e75c      	b.n	8007ec2 <_dtoa_r+0x782>
 8008008:	2300      	movs	r3, #0
 800800a:	e788      	b.n	8007f1e <_dtoa_r+0x7de>
 800800c:	3fe00000 	.word	0x3fe00000
 8008010:	40240000 	.word	0x40240000
 8008014:	40140000 	.word	0x40140000
 8008018:	9b02      	ldr	r3, [sp, #8]
 800801a:	e780      	b.n	8007f1e <_dtoa_r+0x7de>
 800801c:	2300      	movs	r3, #0
 800801e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008020:	e782      	b.n	8007f28 <_dtoa_r+0x7e8>
 8008022:	d099      	beq.n	8007f58 <_dtoa_r+0x818>
 8008024:	9a08      	ldr	r2, [sp, #32]
 8008026:	331c      	adds	r3, #28
 8008028:	441a      	add	r2, r3
 800802a:	4498      	add	r8, r3
 800802c:	441e      	add	r6, r3
 800802e:	9208      	str	r2, [sp, #32]
 8008030:	e792      	b.n	8007f58 <_dtoa_r+0x818>
 8008032:	4603      	mov	r3, r0
 8008034:	e7f6      	b.n	8008024 <_dtoa_r+0x8e4>
 8008036:	9b07      	ldr	r3, [sp, #28]
 8008038:	9704      	str	r7, [sp, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	dc20      	bgt.n	8008080 <_dtoa_r+0x940>
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008042:	2b02      	cmp	r3, #2
 8008044:	dd1e      	ble.n	8008084 <_dtoa_r+0x944>
 8008046:	9b00      	ldr	r3, [sp, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f47f aec0 	bne.w	8007dce <_dtoa_r+0x68e>
 800804e:	4621      	mov	r1, r4
 8008050:	2205      	movs	r2, #5
 8008052:	4658      	mov	r0, fp
 8008054:	f000 fa9a 	bl	800858c <__multadd>
 8008058:	4601      	mov	r1, r0
 800805a:	4604      	mov	r4, r0
 800805c:	4648      	mov	r0, r9
 800805e:	f000 fcad 	bl	80089bc <__mcmp>
 8008062:	2800      	cmp	r0, #0
 8008064:	f77f aeb3 	ble.w	8007dce <_dtoa_r+0x68e>
 8008068:	4656      	mov	r6, sl
 800806a:	2331      	movs	r3, #49	@ 0x31
 800806c:	f806 3b01 	strb.w	r3, [r6], #1
 8008070:	9b04      	ldr	r3, [sp, #16]
 8008072:	3301      	adds	r3, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	e6ae      	b.n	8007dd6 <_dtoa_r+0x696>
 8008078:	9c07      	ldr	r4, [sp, #28]
 800807a:	9704      	str	r7, [sp, #16]
 800807c:	4625      	mov	r5, r4
 800807e:	e7f3      	b.n	8008068 <_dtoa_r+0x928>
 8008080:	9b07      	ldr	r3, [sp, #28]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8104 	beq.w	8008294 <_dtoa_r+0xb54>
 800808c:	2e00      	cmp	r6, #0
 800808e:	dd05      	ble.n	800809c <_dtoa_r+0x95c>
 8008090:	4629      	mov	r1, r5
 8008092:	4632      	mov	r2, r6
 8008094:	4658      	mov	r0, fp
 8008096:	f000 fc25 	bl	80088e4 <__lshift>
 800809a:	4605      	mov	r5, r0
 800809c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d05a      	beq.n	8008158 <_dtoa_r+0xa18>
 80080a2:	6869      	ldr	r1, [r5, #4]
 80080a4:	4658      	mov	r0, fp
 80080a6:	f000 fa0f 	bl	80084c8 <_Balloc>
 80080aa:	4606      	mov	r6, r0
 80080ac:	b928      	cbnz	r0, 80080ba <_dtoa_r+0x97a>
 80080ae:	4b84      	ldr	r3, [pc, #528]	@ (80082c0 <_dtoa_r+0xb80>)
 80080b0:	4602      	mov	r2, r0
 80080b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080b6:	f7ff bb5a 	b.w	800776e <_dtoa_r+0x2e>
 80080ba:	692a      	ldr	r2, [r5, #16]
 80080bc:	3202      	adds	r2, #2
 80080be:	0092      	lsls	r2, r2, #2
 80080c0:	f105 010c 	add.w	r1, r5, #12
 80080c4:	300c      	adds	r0, #12
 80080c6:	f001 f803 	bl	80090d0 <memcpy>
 80080ca:	2201      	movs	r2, #1
 80080cc:	4631      	mov	r1, r6
 80080ce:	4658      	mov	r0, fp
 80080d0:	f000 fc08 	bl	80088e4 <__lshift>
 80080d4:	f10a 0301 	add.w	r3, sl, #1
 80080d8:	9307      	str	r3, [sp, #28]
 80080da:	9b00      	ldr	r3, [sp, #0]
 80080dc:	4453      	add	r3, sl
 80080de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e0:	9b02      	ldr	r3, [sp, #8]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	462f      	mov	r7, r5
 80080e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ea:	4605      	mov	r5, r0
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	4621      	mov	r1, r4
 80080f0:	3b01      	subs	r3, #1
 80080f2:	4648      	mov	r0, r9
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	f7ff fa98 	bl	800762a <quorem>
 80080fa:	4639      	mov	r1, r7
 80080fc:	9002      	str	r0, [sp, #8]
 80080fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008102:	4648      	mov	r0, r9
 8008104:	f000 fc5a 	bl	80089bc <__mcmp>
 8008108:	462a      	mov	r2, r5
 800810a:	9008      	str	r0, [sp, #32]
 800810c:	4621      	mov	r1, r4
 800810e:	4658      	mov	r0, fp
 8008110:	f000 fc70 	bl	80089f4 <__mdiff>
 8008114:	68c2      	ldr	r2, [r0, #12]
 8008116:	4606      	mov	r6, r0
 8008118:	bb02      	cbnz	r2, 800815c <_dtoa_r+0xa1c>
 800811a:	4601      	mov	r1, r0
 800811c:	4648      	mov	r0, r9
 800811e:	f000 fc4d 	bl	80089bc <__mcmp>
 8008122:	4602      	mov	r2, r0
 8008124:	4631      	mov	r1, r6
 8008126:	4658      	mov	r0, fp
 8008128:	920e      	str	r2, [sp, #56]	@ 0x38
 800812a:	f000 fa0d 	bl	8008548 <_Bfree>
 800812e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008130:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008132:	9e07      	ldr	r6, [sp, #28]
 8008134:	ea43 0102 	orr.w	r1, r3, r2
 8008138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800813a:	4319      	orrs	r1, r3
 800813c:	d110      	bne.n	8008160 <_dtoa_r+0xa20>
 800813e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008142:	d029      	beq.n	8008198 <_dtoa_r+0xa58>
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd02      	ble.n	8008150 <_dtoa_r+0xa10>
 800814a:	9b02      	ldr	r3, [sp, #8]
 800814c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008150:	9b00      	ldr	r3, [sp, #0]
 8008152:	f883 8000 	strb.w	r8, [r3]
 8008156:	e63f      	b.n	8007dd8 <_dtoa_r+0x698>
 8008158:	4628      	mov	r0, r5
 800815a:	e7bb      	b.n	80080d4 <_dtoa_r+0x994>
 800815c:	2201      	movs	r2, #1
 800815e:	e7e1      	b.n	8008124 <_dtoa_r+0x9e4>
 8008160:	9b08      	ldr	r3, [sp, #32]
 8008162:	2b00      	cmp	r3, #0
 8008164:	db04      	blt.n	8008170 <_dtoa_r+0xa30>
 8008166:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008168:	430b      	orrs	r3, r1
 800816a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800816c:	430b      	orrs	r3, r1
 800816e:	d120      	bne.n	80081b2 <_dtoa_r+0xa72>
 8008170:	2a00      	cmp	r2, #0
 8008172:	dded      	ble.n	8008150 <_dtoa_r+0xa10>
 8008174:	4649      	mov	r1, r9
 8008176:	2201      	movs	r2, #1
 8008178:	4658      	mov	r0, fp
 800817a:	f000 fbb3 	bl	80088e4 <__lshift>
 800817e:	4621      	mov	r1, r4
 8008180:	4681      	mov	r9, r0
 8008182:	f000 fc1b 	bl	80089bc <__mcmp>
 8008186:	2800      	cmp	r0, #0
 8008188:	dc03      	bgt.n	8008192 <_dtoa_r+0xa52>
 800818a:	d1e1      	bne.n	8008150 <_dtoa_r+0xa10>
 800818c:	f018 0f01 	tst.w	r8, #1
 8008190:	d0de      	beq.n	8008150 <_dtoa_r+0xa10>
 8008192:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008196:	d1d8      	bne.n	800814a <_dtoa_r+0xa0a>
 8008198:	9a00      	ldr	r2, [sp, #0]
 800819a:	2339      	movs	r3, #57	@ 0x39
 800819c:	7013      	strb	r3, [r2, #0]
 800819e:	4633      	mov	r3, r6
 80081a0:	461e      	mov	r6, r3
 80081a2:	3b01      	subs	r3, #1
 80081a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081a8:	2a39      	cmp	r2, #57	@ 0x39
 80081aa:	d052      	beq.n	8008252 <_dtoa_r+0xb12>
 80081ac:	3201      	adds	r2, #1
 80081ae:	701a      	strb	r2, [r3, #0]
 80081b0:	e612      	b.n	8007dd8 <_dtoa_r+0x698>
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	dd07      	ble.n	80081c6 <_dtoa_r+0xa86>
 80081b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081ba:	d0ed      	beq.n	8008198 <_dtoa_r+0xa58>
 80081bc:	9a00      	ldr	r2, [sp, #0]
 80081be:	f108 0301 	add.w	r3, r8, #1
 80081c2:	7013      	strb	r3, [r2, #0]
 80081c4:	e608      	b.n	8007dd8 <_dtoa_r+0x698>
 80081c6:	9b07      	ldr	r3, [sp, #28]
 80081c8:	9a07      	ldr	r2, [sp, #28]
 80081ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d028      	beq.n	8008226 <_dtoa_r+0xae6>
 80081d4:	4649      	mov	r1, r9
 80081d6:	2300      	movs	r3, #0
 80081d8:	220a      	movs	r2, #10
 80081da:	4658      	mov	r0, fp
 80081dc:	f000 f9d6 	bl	800858c <__multadd>
 80081e0:	42af      	cmp	r7, r5
 80081e2:	4681      	mov	r9, r0
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	f04f 020a 	mov.w	r2, #10
 80081ec:	4639      	mov	r1, r7
 80081ee:	4658      	mov	r0, fp
 80081f0:	d107      	bne.n	8008202 <_dtoa_r+0xac2>
 80081f2:	f000 f9cb 	bl	800858c <__multadd>
 80081f6:	4607      	mov	r7, r0
 80081f8:	4605      	mov	r5, r0
 80081fa:	9b07      	ldr	r3, [sp, #28]
 80081fc:	3301      	adds	r3, #1
 80081fe:	9307      	str	r3, [sp, #28]
 8008200:	e774      	b.n	80080ec <_dtoa_r+0x9ac>
 8008202:	f000 f9c3 	bl	800858c <__multadd>
 8008206:	4629      	mov	r1, r5
 8008208:	4607      	mov	r7, r0
 800820a:	2300      	movs	r3, #0
 800820c:	220a      	movs	r2, #10
 800820e:	4658      	mov	r0, fp
 8008210:	f000 f9bc 	bl	800858c <__multadd>
 8008214:	4605      	mov	r5, r0
 8008216:	e7f0      	b.n	80081fa <_dtoa_r+0xaba>
 8008218:	9b00      	ldr	r3, [sp, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	bfcc      	ite	gt
 800821e:	461e      	movgt	r6, r3
 8008220:	2601      	movle	r6, #1
 8008222:	4456      	add	r6, sl
 8008224:	2700      	movs	r7, #0
 8008226:	4649      	mov	r1, r9
 8008228:	2201      	movs	r2, #1
 800822a:	4658      	mov	r0, fp
 800822c:	f000 fb5a 	bl	80088e4 <__lshift>
 8008230:	4621      	mov	r1, r4
 8008232:	4681      	mov	r9, r0
 8008234:	f000 fbc2 	bl	80089bc <__mcmp>
 8008238:	2800      	cmp	r0, #0
 800823a:	dcb0      	bgt.n	800819e <_dtoa_r+0xa5e>
 800823c:	d102      	bne.n	8008244 <_dtoa_r+0xb04>
 800823e:	f018 0f01 	tst.w	r8, #1
 8008242:	d1ac      	bne.n	800819e <_dtoa_r+0xa5e>
 8008244:	4633      	mov	r3, r6
 8008246:	461e      	mov	r6, r3
 8008248:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800824c:	2a30      	cmp	r2, #48	@ 0x30
 800824e:	d0fa      	beq.n	8008246 <_dtoa_r+0xb06>
 8008250:	e5c2      	b.n	8007dd8 <_dtoa_r+0x698>
 8008252:	459a      	cmp	sl, r3
 8008254:	d1a4      	bne.n	80081a0 <_dtoa_r+0xa60>
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	3301      	adds	r3, #1
 800825a:	9304      	str	r3, [sp, #16]
 800825c:	2331      	movs	r3, #49	@ 0x31
 800825e:	f88a 3000 	strb.w	r3, [sl]
 8008262:	e5b9      	b.n	8007dd8 <_dtoa_r+0x698>
 8008264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008266:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082c4 <_dtoa_r+0xb84>
 800826a:	b11b      	cbz	r3, 8008274 <_dtoa_r+0xb34>
 800826c:	f10a 0308 	add.w	r3, sl, #8
 8008270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	4650      	mov	r0, sl
 8008276:	b019      	add	sp, #100	@ 0x64
 8008278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800827e:	2b01      	cmp	r3, #1
 8008280:	f77f ae37 	ble.w	8007ef2 <_dtoa_r+0x7b2>
 8008284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008286:	930a      	str	r3, [sp, #40]	@ 0x28
 8008288:	2001      	movs	r0, #1
 800828a:	e655      	b.n	8007f38 <_dtoa_r+0x7f8>
 800828c:	9b00      	ldr	r3, [sp, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f77f aed6 	ble.w	8008040 <_dtoa_r+0x900>
 8008294:	4656      	mov	r6, sl
 8008296:	4621      	mov	r1, r4
 8008298:	4648      	mov	r0, r9
 800829a:	f7ff f9c6 	bl	800762a <quorem>
 800829e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082a2:	f806 8b01 	strb.w	r8, [r6], #1
 80082a6:	9b00      	ldr	r3, [sp, #0]
 80082a8:	eba6 020a 	sub.w	r2, r6, sl
 80082ac:	4293      	cmp	r3, r2
 80082ae:	ddb3      	ble.n	8008218 <_dtoa_r+0xad8>
 80082b0:	4649      	mov	r1, r9
 80082b2:	2300      	movs	r3, #0
 80082b4:	220a      	movs	r2, #10
 80082b6:	4658      	mov	r0, fp
 80082b8:	f000 f968 	bl	800858c <__multadd>
 80082bc:	4681      	mov	r9, r0
 80082be:	e7ea      	b.n	8008296 <_dtoa_r+0xb56>
 80082c0:	080093c8 	.word	0x080093c8
 80082c4:	0800934c 	.word	0x0800934c

080082c8 <_free_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4605      	mov	r5, r0
 80082cc:	2900      	cmp	r1, #0
 80082ce:	d041      	beq.n	8008354 <_free_r+0x8c>
 80082d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082d4:	1f0c      	subs	r4, r1, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bfb8      	it	lt
 80082da:	18e4      	addlt	r4, r4, r3
 80082dc:	f000 f8e8 	bl	80084b0 <__malloc_lock>
 80082e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008358 <_free_r+0x90>)
 80082e2:	6813      	ldr	r3, [r2, #0]
 80082e4:	b933      	cbnz	r3, 80082f4 <_free_r+0x2c>
 80082e6:	6063      	str	r3, [r4, #4]
 80082e8:	6014      	str	r4, [r2, #0]
 80082ea:	4628      	mov	r0, r5
 80082ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f0:	f000 b8e4 	b.w	80084bc <__malloc_unlock>
 80082f4:	42a3      	cmp	r3, r4
 80082f6:	d908      	bls.n	800830a <_free_r+0x42>
 80082f8:	6820      	ldr	r0, [r4, #0]
 80082fa:	1821      	adds	r1, r4, r0
 80082fc:	428b      	cmp	r3, r1
 80082fe:	bf01      	itttt	eq
 8008300:	6819      	ldreq	r1, [r3, #0]
 8008302:	685b      	ldreq	r3, [r3, #4]
 8008304:	1809      	addeq	r1, r1, r0
 8008306:	6021      	streq	r1, [r4, #0]
 8008308:	e7ed      	b.n	80082e6 <_free_r+0x1e>
 800830a:	461a      	mov	r2, r3
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	b10b      	cbz	r3, 8008314 <_free_r+0x4c>
 8008310:	42a3      	cmp	r3, r4
 8008312:	d9fa      	bls.n	800830a <_free_r+0x42>
 8008314:	6811      	ldr	r1, [r2, #0]
 8008316:	1850      	adds	r0, r2, r1
 8008318:	42a0      	cmp	r0, r4
 800831a:	d10b      	bne.n	8008334 <_free_r+0x6c>
 800831c:	6820      	ldr	r0, [r4, #0]
 800831e:	4401      	add	r1, r0
 8008320:	1850      	adds	r0, r2, r1
 8008322:	4283      	cmp	r3, r0
 8008324:	6011      	str	r1, [r2, #0]
 8008326:	d1e0      	bne.n	80082ea <_free_r+0x22>
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	6053      	str	r3, [r2, #4]
 800832e:	4408      	add	r0, r1
 8008330:	6010      	str	r0, [r2, #0]
 8008332:	e7da      	b.n	80082ea <_free_r+0x22>
 8008334:	d902      	bls.n	800833c <_free_r+0x74>
 8008336:	230c      	movs	r3, #12
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	e7d6      	b.n	80082ea <_free_r+0x22>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	1821      	adds	r1, r4, r0
 8008340:	428b      	cmp	r3, r1
 8008342:	bf04      	itt	eq
 8008344:	6819      	ldreq	r1, [r3, #0]
 8008346:	685b      	ldreq	r3, [r3, #4]
 8008348:	6063      	str	r3, [r4, #4]
 800834a:	bf04      	itt	eq
 800834c:	1809      	addeq	r1, r1, r0
 800834e:	6021      	streq	r1, [r4, #0]
 8008350:	6054      	str	r4, [r2, #4]
 8008352:	e7ca      	b.n	80082ea <_free_r+0x22>
 8008354:	bd38      	pop	{r3, r4, r5, pc}
 8008356:	bf00      	nop
 8008358:	200005c4 	.word	0x200005c4

0800835c <malloc>:
 800835c:	4b02      	ldr	r3, [pc, #8]	@ (8008368 <malloc+0xc>)
 800835e:	4601      	mov	r1, r0
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	f000 b825 	b.w	80083b0 <_malloc_r>
 8008366:	bf00      	nop
 8008368:	20000018 	.word	0x20000018

0800836c <sbrk_aligned>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4e0f      	ldr	r6, [pc, #60]	@ (80083ac <sbrk_aligned+0x40>)
 8008370:	460c      	mov	r4, r1
 8008372:	6831      	ldr	r1, [r6, #0]
 8008374:	4605      	mov	r5, r0
 8008376:	b911      	cbnz	r1, 800837e <sbrk_aligned+0x12>
 8008378:	f000 fe9a 	bl	80090b0 <_sbrk_r>
 800837c:	6030      	str	r0, [r6, #0]
 800837e:	4621      	mov	r1, r4
 8008380:	4628      	mov	r0, r5
 8008382:	f000 fe95 	bl	80090b0 <_sbrk_r>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	d103      	bne.n	8008392 <sbrk_aligned+0x26>
 800838a:	f04f 34ff 	mov.w	r4, #4294967295
 800838e:	4620      	mov	r0, r4
 8008390:	bd70      	pop	{r4, r5, r6, pc}
 8008392:	1cc4      	adds	r4, r0, #3
 8008394:	f024 0403 	bic.w	r4, r4, #3
 8008398:	42a0      	cmp	r0, r4
 800839a:	d0f8      	beq.n	800838e <sbrk_aligned+0x22>
 800839c:	1a21      	subs	r1, r4, r0
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 fe86 	bl	80090b0 <_sbrk_r>
 80083a4:	3001      	adds	r0, #1
 80083a6:	d1f2      	bne.n	800838e <sbrk_aligned+0x22>
 80083a8:	e7ef      	b.n	800838a <sbrk_aligned+0x1e>
 80083aa:	bf00      	nop
 80083ac:	200005c0 	.word	0x200005c0

080083b0 <_malloc_r>:
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083b4:	1ccd      	adds	r5, r1, #3
 80083b6:	f025 0503 	bic.w	r5, r5, #3
 80083ba:	3508      	adds	r5, #8
 80083bc:	2d0c      	cmp	r5, #12
 80083be:	bf38      	it	cc
 80083c0:	250c      	movcc	r5, #12
 80083c2:	2d00      	cmp	r5, #0
 80083c4:	4606      	mov	r6, r0
 80083c6:	db01      	blt.n	80083cc <_malloc_r+0x1c>
 80083c8:	42a9      	cmp	r1, r5
 80083ca:	d904      	bls.n	80083d6 <_malloc_r+0x26>
 80083cc:	230c      	movs	r3, #12
 80083ce:	6033      	str	r3, [r6, #0]
 80083d0:	2000      	movs	r0, #0
 80083d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084ac <_malloc_r+0xfc>
 80083da:	f000 f869 	bl	80084b0 <__malloc_lock>
 80083de:	f8d8 3000 	ldr.w	r3, [r8]
 80083e2:	461c      	mov	r4, r3
 80083e4:	bb44      	cbnz	r4, 8008438 <_malloc_r+0x88>
 80083e6:	4629      	mov	r1, r5
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff ffbf 	bl	800836c <sbrk_aligned>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	4604      	mov	r4, r0
 80083f2:	d158      	bne.n	80084a6 <_malloc_r+0xf6>
 80083f4:	f8d8 4000 	ldr.w	r4, [r8]
 80083f8:	4627      	mov	r7, r4
 80083fa:	2f00      	cmp	r7, #0
 80083fc:	d143      	bne.n	8008486 <_malloc_r+0xd6>
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d04b      	beq.n	800849a <_malloc_r+0xea>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	4639      	mov	r1, r7
 8008406:	4630      	mov	r0, r6
 8008408:	eb04 0903 	add.w	r9, r4, r3
 800840c:	f000 fe50 	bl	80090b0 <_sbrk_r>
 8008410:	4581      	cmp	r9, r0
 8008412:	d142      	bne.n	800849a <_malloc_r+0xea>
 8008414:	6821      	ldr	r1, [r4, #0]
 8008416:	1a6d      	subs	r5, r5, r1
 8008418:	4629      	mov	r1, r5
 800841a:	4630      	mov	r0, r6
 800841c:	f7ff ffa6 	bl	800836c <sbrk_aligned>
 8008420:	3001      	adds	r0, #1
 8008422:	d03a      	beq.n	800849a <_malloc_r+0xea>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	442b      	add	r3, r5
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	f8d8 3000 	ldr.w	r3, [r8]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	bb62      	cbnz	r2, 800848c <_malloc_r+0xdc>
 8008432:	f8c8 7000 	str.w	r7, [r8]
 8008436:	e00f      	b.n	8008458 <_malloc_r+0xa8>
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	1b52      	subs	r2, r2, r5
 800843c:	d420      	bmi.n	8008480 <_malloc_r+0xd0>
 800843e:	2a0b      	cmp	r2, #11
 8008440:	d917      	bls.n	8008472 <_malloc_r+0xc2>
 8008442:	1961      	adds	r1, r4, r5
 8008444:	42a3      	cmp	r3, r4
 8008446:	6025      	str	r5, [r4, #0]
 8008448:	bf18      	it	ne
 800844a:	6059      	strne	r1, [r3, #4]
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	bf08      	it	eq
 8008450:	f8c8 1000 	streq.w	r1, [r8]
 8008454:	5162      	str	r2, [r4, r5]
 8008456:	604b      	str	r3, [r1, #4]
 8008458:	4630      	mov	r0, r6
 800845a:	f000 f82f 	bl	80084bc <__malloc_unlock>
 800845e:	f104 000b 	add.w	r0, r4, #11
 8008462:	1d23      	adds	r3, r4, #4
 8008464:	f020 0007 	bic.w	r0, r0, #7
 8008468:	1ac2      	subs	r2, r0, r3
 800846a:	bf1c      	itt	ne
 800846c:	1a1b      	subne	r3, r3, r0
 800846e:	50a3      	strne	r3, [r4, r2]
 8008470:	e7af      	b.n	80083d2 <_malloc_r+0x22>
 8008472:	6862      	ldr	r2, [r4, #4]
 8008474:	42a3      	cmp	r3, r4
 8008476:	bf0c      	ite	eq
 8008478:	f8c8 2000 	streq.w	r2, [r8]
 800847c:	605a      	strne	r2, [r3, #4]
 800847e:	e7eb      	b.n	8008458 <_malloc_r+0xa8>
 8008480:	4623      	mov	r3, r4
 8008482:	6864      	ldr	r4, [r4, #4]
 8008484:	e7ae      	b.n	80083e4 <_malloc_r+0x34>
 8008486:	463c      	mov	r4, r7
 8008488:	687f      	ldr	r7, [r7, #4]
 800848a:	e7b6      	b.n	80083fa <_malloc_r+0x4a>
 800848c:	461a      	mov	r2, r3
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	42a3      	cmp	r3, r4
 8008492:	d1fb      	bne.n	800848c <_malloc_r+0xdc>
 8008494:	2300      	movs	r3, #0
 8008496:	6053      	str	r3, [r2, #4]
 8008498:	e7de      	b.n	8008458 <_malloc_r+0xa8>
 800849a:	230c      	movs	r3, #12
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	4630      	mov	r0, r6
 80084a0:	f000 f80c 	bl	80084bc <__malloc_unlock>
 80084a4:	e794      	b.n	80083d0 <_malloc_r+0x20>
 80084a6:	6005      	str	r5, [r0, #0]
 80084a8:	e7d6      	b.n	8008458 <_malloc_r+0xa8>
 80084aa:	bf00      	nop
 80084ac:	200005c4 	.word	0x200005c4

080084b0 <__malloc_lock>:
 80084b0:	4801      	ldr	r0, [pc, #4]	@ (80084b8 <__malloc_lock+0x8>)
 80084b2:	f7ff b8b8 	b.w	8007626 <__retarget_lock_acquire_recursive>
 80084b6:	bf00      	nop
 80084b8:	200005bc 	.word	0x200005bc

080084bc <__malloc_unlock>:
 80084bc:	4801      	ldr	r0, [pc, #4]	@ (80084c4 <__malloc_unlock+0x8>)
 80084be:	f7ff b8b3 	b.w	8007628 <__retarget_lock_release_recursive>
 80084c2:	bf00      	nop
 80084c4:	200005bc 	.word	0x200005bc

080084c8 <_Balloc>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	69c6      	ldr	r6, [r0, #28]
 80084cc:	4604      	mov	r4, r0
 80084ce:	460d      	mov	r5, r1
 80084d0:	b976      	cbnz	r6, 80084f0 <_Balloc+0x28>
 80084d2:	2010      	movs	r0, #16
 80084d4:	f7ff ff42 	bl	800835c <malloc>
 80084d8:	4602      	mov	r2, r0
 80084da:	61e0      	str	r0, [r4, #28]
 80084dc:	b920      	cbnz	r0, 80084e8 <_Balloc+0x20>
 80084de:	4b18      	ldr	r3, [pc, #96]	@ (8008540 <_Balloc+0x78>)
 80084e0:	4818      	ldr	r0, [pc, #96]	@ (8008544 <_Balloc+0x7c>)
 80084e2:	216b      	movs	r1, #107	@ 0x6b
 80084e4:	f000 fe02 	bl	80090ec <__assert_func>
 80084e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084ec:	6006      	str	r6, [r0, #0]
 80084ee:	60c6      	str	r6, [r0, #12]
 80084f0:	69e6      	ldr	r6, [r4, #28]
 80084f2:	68f3      	ldr	r3, [r6, #12]
 80084f4:	b183      	cbz	r3, 8008518 <_Balloc+0x50>
 80084f6:	69e3      	ldr	r3, [r4, #28]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084fe:	b9b8      	cbnz	r0, 8008530 <_Balloc+0x68>
 8008500:	2101      	movs	r1, #1
 8008502:	fa01 f605 	lsl.w	r6, r1, r5
 8008506:	1d72      	adds	r2, r6, #5
 8008508:	0092      	lsls	r2, r2, #2
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fe0c 	bl	8009128 <_calloc_r>
 8008510:	b160      	cbz	r0, 800852c <_Balloc+0x64>
 8008512:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008516:	e00e      	b.n	8008536 <_Balloc+0x6e>
 8008518:	2221      	movs	r2, #33	@ 0x21
 800851a:	2104      	movs	r1, #4
 800851c:	4620      	mov	r0, r4
 800851e:	f000 fe03 	bl	8009128 <_calloc_r>
 8008522:	69e3      	ldr	r3, [r4, #28]
 8008524:	60f0      	str	r0, [r6, #12]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e4      	bne.n	80084f6 <_Balloc+0x2e>
 800852c:	2000      	movs	r0, #0
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	6802      	ldr	r2, [r0, #0]
 8008532:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008536:	2300      	movs	r3, #0
 8008538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800853c:	e7f7      	b.n	800852e <_Balloc+0x66>
 800853e:	bf00      	nop
 8008540:	08009359 	.word	0x08009359
 8008544:	080093d9 	.word	0x080093d9

08008548 <_Bfree>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	69c6      	ldr	r6, [r0, #28]
 800854c:	4605      	mov	r5, r0
 800854e:	460c      	mov	r4, r1
 8008550:	b976      	cbnz	r6, 8008570 <_Bfree+0x28>
 8008552:	2010      	movs	r0, #16
 8008554:	f7ff ff02 	bl	800835c <malloc>
 8008558:	4602      	mov	r2, r0
 800855a:	61e8      	str	r0, [r5, #28]
 800855c:	b920      	cbnz	r0, 8008568 <_Bfree+0x20>
 800855e:	4b09      	ldr	r3, [pc, #36]	@ (8008584 <_Bfree+0x3c>)
 8008560:	4809      	ldr	r0, [pc, #36]	@ (8008588 <_Bfree+0x40>)
 8008562:	218f      	movs	r1, #143	@ 0x8f
 8008564:	f000 fdc2 	bl	80090ec <__assert_func>
 8008568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800856c:	6006      	str	r6, [r0, #0]
 800856e:	60c6      	str	r6, [r0, #12]
 8008570:	b13c      	cbz	r4, 8008582 <_Bfree+0x3a>
 8008572:	69eb      	ldr	r3, [r5, #28]
 8008574:	6862      	ldr	r2, [r4, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800857c:	6021      	str	r1, [r4, #0]
 800857e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	08009359 	.word	0x08009359
 8008588:	080093d9 	.word	0x080093d9

0800858c <__multadd>:
 800858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008590:	690d      	ldr	r5, [r1, #16]
 8008592:	4607      	mov	r7, r0
 8008594:	460c      	mov	r4, r1
 8008596:	461e      	mov	r6, r3
 8008598:	f101 0c14 	add.w	ip, r1, #20
 800859c:	2000      	movs	r0, #0
 800859e:	f8dc 3000 	ldr.w	r3, [ip]
 80085a2:	b299      	uxth	r1, r3
 80085a4:	fb02 6101 	mla	r1, r2, r1, r6
 80085a8:	0c1e      	lsrs	r6, r3, #16
 80085aa:	0c0b      	lsrs	r3, r1, #16
 80085ac:	fb02 3306 	mla	r3, r2, r6, r3
 80085b0:	b289      	uxth	r1, r1
 80085b2:	3001      	adds	r0, #1
 80085b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085b8:	4285      	cmp	r5, r0
 80085ba:	f84c 1b04 	str.w	r1, [ip], #4
 80085be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085c2:	dcec      	bgt.n	800859e <__multadd+0x12>
 80085c4:	b30e      	cbz	r6, 800860a <__multadd+0x7e>
 80085c6:	68a3      	ldr	r3, [r4, #8]
 80085c8:	42ab      	cmp	r3, r5
 80085ca:	dc19      	bgt.n	8008600 <__multadd+0x74>
 80085cc:	6861      	ldr	r1, [r4, #4]
 80085ce:	4638      	mov	r0, r7
 80085d0:	3101      	adds	r1, #1
 80085d2:	f7ff ff79 	bl	80084c8 <_Balloc>
 80085d6:	4680      	mov	r8, r0
 80085d8:	b928      	cbnz	r0, 80085e6 <__multadd+0x5a>
 80085da:	4602      	mov	r2, r0
 80085dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008610 <__multadd+0x84>)
 80085de:	480d      	ldr	r0, [pc, #52]	@ (8008614 <__multadd+0x88>)
 80085e0:	21ba      	movs	r1, #186	@ 0xba
 80085e2:	f000 fd83 	bl	80090ec <__assert_func>
 80085e6:	6922      	ldr	r2, [r4, #16]
 80085e8:	3202      	adds	r2, #2
 80085ea:	f104 010c 	add.w	r1, r4, #12
 80085ee:	0092      	lsls	r2, r2, #2
 80085f0:	300c      	adds	r0, #12
 80085f2:	f000 fd6d 	bl	80090d0 <memcpy>
 80085f6:	4621      	mov	r1, r4
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff ffa5 	bl	8008548 <_Bfree>
 80085fe:	4644      	mov	r4, r8
 8008600:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008604:	3501      	adds	r5, #1
 8008606:	615e      	str	r6, [r3, #20]
 8008608:	6125      	str	r5, [r4, #16]
 800860a:	4620      	mov	r0, r4
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008610:	080093c8 	.word	0x080093c8
 8008614:	080093d9 	.word	0x080093d9

08008618 <__hi0bits>:
 8008618:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800861c:	4603      	mov	r3, r0
 800861e:	bf36      	itet	cc
 8008620:	0403      	lslcc	r3, r0, #16
 8008622:	2000      	movcs	r0, #0
 8008624:	2010      	movcc	r0, #16
 8008626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800862a:	bf3c      	itt	cc
 800862c:	021b      	lslcc	r3, r3, #8
 800862e:	3008      	addcc	r0, #8
 8008630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008634:	bf3c      	itt	cc
 8008636:	011b      	lslcc	r3, r3, #4
 8008638:	3004      	addcc	r0, #4
 800863a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800863e:	bf3c      	itt	cc
 8008640:	009b      	lslcc	r3, r3, #2
 8008642:	3002      	addcc	r0, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	db05      	blt.n	8008654 <__hi0bits+0x3c>
 8008648:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800864c:	f100 0001 	add.w	r0, r0, #1
 8008650:	bf08      	it	eq
 8008652:	2020      	moveq	r0, #32
 8008654:	4770      	bx	lr

08008656 <__lo0bits>:
 8008656:	6803      	ldr	r3, [r0, #0]
 8008658:	4602      	mov	r2, r0
 800865a:	f013 0007 	ands.w	r0, r3, #7
 800865e:	d00b      	beq.n	8008678 <__lo0bits+0x22>
 8008660:	07d9      	lsls	r1, r3, #31
 8008662:	d421      	bmi.n	80086a8 <__lo0bits+0x52>
 8008664:	0798      	lsls	r0, r3, #30
 8008666:	bf49      	itett	mi
 8008668:	085b      	lsrmi	r3, r3, #1
 800866a:	089b      	lsrpl	r3, r3, #2
 800866c:	2001      	movmi	r0, #1
 800866e:	6013      	strmi	r3, [r2, #0]
 8008670:	bf5c      	itt	pl
 8008672:	6013      	strpl	r3, [r2, #0]
 8008674:	2002      	movpl	r0, #2
 8008676:	4770      	bx	lr
 8008678:	b299      	uxth	r1, r3
 800867a:	b909      	cbnz	r1, 8008680 <__lo0bits+0x2a>
 800867c:	0c1b      	lsrs	r3, r3, #16
 800867e:	2010      	movs	r0, #16
 8008680:	b2d9      	uxtb	r1, r3
 8008682:	b909      	cbnz	r1, 8008688 <__lo0bits+0x32>
 8008684:	3008      	adds	r0, #8
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	0719      	lsls	r1, r3, #28
 800868a:	bf04      	itt	eq
 800868c:	091b      	lsreq	r3, r3, #4
 800868e:	3004      	addeq	r0, #4
 8008690:	0799      	lsls	r1, r3, #30
 8008692:	bf04      	itt	eq
 8008694:	089b      	lsreq	r3, r3, #2
 8008696:	3002      	addeq	r0, #2
 8008698:	07d9      	lsls	r1, r3, #31
 800869a:	d403      	bmi.n	80086a4 <__lo0bits+0x4e>
 800869c:	085b      	lsrs	r3, r3, #1
 800869e:	f100 0001 	add.w	r0, r0, #1
 80086a2:	d003      	beq.n	80086ac <__lo0bits+0x56>
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	4770      	bx	lr
 80086a8:	2000      	movs	r0, #0
 80086aa:	4770      	bx	lr
 80086ac:	2020      	movs	r0, #32
 80086ae:	4770      	bx	lr

080086b0 <__i2b>:
 80086b0:	b510      	push	{r4, lr}
 80086b2:	460c      	mov	r4, r1
 80086b4:	2101      	movs	r1, #1
 80086b6:	f7ff ff07 	bl	80084c8 <_Balloc>
 80086ba:	4602      	mov	r2, r0
 80086bc:	b928      	cbnz	r0, 80086ca <__i2b+0x1a>
 80086be:	4b05      	ldr	r3, [pc, #20]	@ (80086d4 <__i2b+0x24>)
 80086c0:	4805      	ldr	r0, [pc, #20]	@ (80086d8 <__i2b+0x28>)
 80086c2:	f240 1145 	movw	r1, #325	@ 0x145
 80086c6:	f000 fd11 	bl	80090ec <__assert_func>
 80086ca:	2301      	movs	r3, #1
 80086cc:	6144      	str	r4, [r0, #20]
 80086ce:	6103      	str	r3, [r0, #16]
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	bf00      	nop
 80086d4:	080093c8 	.word	0x080093c8
 80086d8:	080093d9 	.word	0x080093d9

080086dc <__multiply>:
 80086dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	4614      	mov	r4, r2
 80086e2:	690a      	ldr	r2, [r1, #16]
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	bfa8      	it	ge
 80086ea:	4623      	movge	r3, r4
 80086ec:	460f      	mov	r7, r1
 80086ee:	bfa4      	itt	ge
 80086f0:	460c      	movge	r4, r1
 80086f2:	461f      	movge	r7, r3
 80086f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80086f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	6861      	ldr	r1, [r4, #4]
 8008700:	eb0a 0609 	add.w	r6, sl, r9
 8008704:	42b3      	cmp	r3, r6
 8008706:	b085      	sub	sp, #20
 8008708:	bfb8      	it	lt
 800870a:	3101      	addlt	r1, #1
 800870c:	f7ff fedc 	bl	80084c8 <_Balloc>
 8008710:	b930      	cbnz	r0, 8008720 <__multiply+0x44>
 8008712:	4602      	mov	r2, r0
 8008714:	4b44      	ldr	r3, [pc, #272]	@ (8008828 <__multiply+0x14c>)
 8008716:	4845      	ldr	r0, [pc, #276]	@ (800882c <__multiply+0x150>)
 8008718:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800871c:	f000 fce6 	bl	80090ec <__assert_func>
 8008720:	f100 0514 	add.w	r5, r0, #20
 8008724:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008728:	462b      	mov	r3, r5
 800872a:	2200      	movs	r2, #0
 800872c:	4543      	cmp	r3, r8
 800872e:	d321      	bcc.n	8008774 <__multiply+0x98>
 8008730:	f107 0114 	add.w	r1, r7, #20
 8008734:	f104 0214 	add.w	r2, r4, #20
 8008738:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800873c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008740:	9302      	str	r3, [sp, #8]
 8008742:	1b13      	subs	r3, r2, r4
 8008744:	3b15      	subs	r3, #21
 8008746:	f023 0303 	bic.w	r3, r3, #3
 800874a:	3304      	adds	r3, #4
 800874c:	f104 0715 	add.w	r7, r4, #21
 8008750:	42ba      	cmp	r2, r7
 8008752:	bf38      	it	cc
 8008754:	2304      	movcc	r3, #4
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	9b02      	ldr	r3, [sp, #8]
 800875a:	9103      	str	r1, [sp, #12]
 800875c:	428b      	cmp	r3, r1
 800875e:	d80c      	bhi.n	800877a <__multiply+0x9e>
 8008760:	2e00      	cmp	r6, #0
 8008762:	dd03      	ble.n	800876c <__multiply+0x90>
 8008764:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008768:	2b00      	cmp	r3, #0
 800876a:	d05b      	beq.n	8008824 <__multiply+0x148>
 800876c:	6106      	str	r6, [r0, #16]
 800876e:	b005      	add	sp, #20
 8008770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008774:	f843 2b04 	str.w	r2, [r3], #4
 8008778:	e7d8      	b.n	800872c <__multiply+0x50>
 800877a:	f8b1 a000 	ldrh.w	sl, [r1]
 800877e:	f1ba 0f00 	cmp.w	sl, #0
 8008782:	d024      	beq.n	80087ce <__multiply+0xf2>
 8008784:	f104 0e14 	add.w	lr, r4, #20
 8008788:	46a9      	mov	r9, r5
 800878a:	f04f 0c00 	mov.w	ip, #0
 800878e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008792:	f8d9 3000 	ldr.w	r3, [r9]
 8008796:	fa1f fb87 	uxth.w	fp, r7
 800879a:	b29b      	uxth	r3, r3
 800879c:	fb0a 330b 	mla	r3, sl, fp, r3
 80087a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80087a4:	f8d9 7000 	ldr.w	r7, [r9]
 80087a8:	4463      	add	r3, ip
 80087aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80087b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087bc:	4572      	cmp	r2, lr
 80087be:	f849 3b04 	str.w	r3, [r9], #4
 80087c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087c6:	d8e2      	bhi.n	800878e <__multiply+0xb2>
 80087c8:	9b01      	ldr	r3, [sp, #4]
 80087ca:	f845 c003 	str.w	ip, [r5, r3]
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087d4:	3104      	adds	r1, #4
 80087d6:	f1b9 0f00 	cmp.w	r9, #0
 80087da:	d021      	beq.n	8008820 <__multiply+0x144>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	f104 0c14 	add.w	ip, r4, #20
 80087e2:	46ae      	mov	lr, r5
 80087e4:	f04f 0a00 	mov.w	sl, #0
 80087e8:	f8bc b000 	ldrh.w	fp, [ip]
 80087ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80087f0:	fb09 770b 	mla	r7, r9, fp, r7
 80087f4:	4457      	add	r7, sl
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087fc:	f84e 3b04 	str.w	r3, [lr], #4
 8008800:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008808:	f8be 3000 	ldrh.w	r3, [lr]
 800880c:	fb09 330a 	mla	r3, r9, sl, r3
 8008810:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008814:	4562      	cmp	r2, ip
 8008816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800881a:	d8e5      	bhi.n	80087e8 <__multiply+0x10c>
 800881c:	9f01      	ldr	r7, [sp, #4]
 800881e:	51eb      	str	r3, [r5, r7]
 8008820:	3504      	adds	r5, #4
 8008822:	e799      	b.n	8008758 <__multiply+0x7c>
 8008824:	3e01      	subs	r6, #1
 8008826:	e79b      	b.n	8008760 <__multiply+0x84>
 8008828:	080093c8 	.word	0x080093c8
 800882c:	080093d9 	.word	0x080093d9

08008830 <__pow5mult>:
 8008830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008834:	4615      	mov	r5, r2
 8008836:	f012 0203 	ands.w	r2, r2, #3
 800883a:	4607      	mov	r7, r0
 800883c:	460e      	mov	r6, r1
 800883e:	d007      	beq.n	8008850 <__pow5mult+0x20>
 8008840:	4c25      	ldr	r4, [pc, #148]	@ (80088d8 <__pow5mult+0xa8>)
 8008842:	3a01      	subs	r2, #1
 8008844:	2300      	movs	r3, #0
 8008846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800884a:	f7ff fe9f 	bl	800858c <__multadd>
 800884e:	4606      	mov	r6, r0
 8008850:	10ad      	asrs	r5, r5, #2
 8008852:	d03d      	beq.n	80088d0 <__pow5mult+0xa0>
 8008854:	69fc      	ldr	r4, [r7, #28]
 8008856:	b97c      	cbnz	r4, 8008878 <__pow5mult+0x48>
 8008858:	2010      	movs	r0, #16
 800885a:	f7ff fd7f 	bl	800835c <malloc>
 800885e:	4602      	mov	r2, r0
 8008860:	61f8      	str	r0, [r7, #28]
 8008862:	b928      	cbnz	r0, 8008870 <__pow5mult+0x40>
 8008864:	4b1d      	ldr	r3, [pc, #116]	@ (80088dc <__pow5mult+0xac>)
 8008866:	481e      	ldr	r0, [pc, #120]	@ (80088e0 <__pow5mult+0xb0>)
 8008868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800886c:	f000 fc3e 	bl	80090ec <__assert_func>
 8008870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008874:	6004      	str	r4, [r0, #0]
 8008876:	60c4      	str	r4, [r0, #12]
 8008878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800887c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008880:	b94c      	cbnz	r4, 8008896 <__pow5mult+0x66>
 8008882:	f240 2171 	movw	r1, #625	@ 0x271
 8008886:	4638      	mov	r0, r7
 8008888:	f7ff ff12 	bl	80086b0 <__i2b>
 800888c:	2300      	movs	r3, #0
 800888e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008892:	4604      	mov	r4, r0
 8008894:	6003      	str	r3, [r0, #0]
 8008896:	f04f 0900 	mov.w	r9, #0
 800889a:	07eb      	lsls	r3, r5, #31
 800889c:	d50a      	bpl.n	80088b4 <__pow5mult+0x84>
 800889e:	4631      	mov	r1, r6
 80088a0:	4622      	mov	r2, r4
 80088a2:	4638      	mov	r0, r7
 80088a4:	f7ff ff1a 	bl	80086dc <__multiply>
 80088a8:	4631      	mov	r1, r6
 80088aa:	4680      	mov	r8, r0
 80088ac:	4638      	mov	r0, r7
 80088ae:	f7ff fe4b 	bl	8008548 <_Bfree>
 80088b2:	4646      	mov	r6, r8
 80088b4:	106d      	asrs	r5, r5, #1
 80088b6:	d00b      	beq.n	80088d0 <__pow5mult+0xa0>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	b938      	cbnz	r0, 80088cc <__pow5mult+0x9c>
 80088bc:	4622      	mov	r2, r4
 80088be:	4621      	mov	r1, r4
 80088c0:	4638      	mov	r0, r7
 80088c2:	f7ff ff0b 	bl	80086dc <__multiply>
 80088c6:	6020      	str	r0, [r4, #0]
 80088c8:	f8c0 9000 	str.w	r9, [r0]
 80088cc:	4604      	mov	r4, r0
 80088ce:	e7e4      	b.n	800889a <__pow5mult+0x6a>
 80088d0:	4630      	mov	r0, r6
 80088d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d6:	bf00      	nop
 80088d8:	08009434 	.word	0x08009434
 80088dc:	08009359 	.word	0x08009359
 80088e0:	080093d9 	.word	0x080093d9

080088e4 <__lshift>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	460c      	mov	r4, r1
 80088ea:	6849      	ldr	r1, [r1, #4]
 80088ec:	6923      	ldr	r3, [r4, #16]
 80088ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088f2:	68a3      	ldr	r3, [r4, #8]
 80088f4:	4607      	mov	r7, r0
 80088f6:	4691      	mov	r9, r2
 80088f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088fc:	f108 0601 	add.w	r6, r8, #1
 8008900:	42b3      	cmp	r3, r6
 8008902:	db0b      	blt.n	800891c <__lshift+0x38>
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff fddf 	bl	80084c8 <_Balloc>
 800890a:	4605      	mov	r5, r0
 800890c:	b948      	cbnz	r0, 8008922 <__lshift+0x3e>
 800890e:	4602      	mov	r2, r0
 8008910:	4b28      	ldr	r3, [pc, #160]	@ (80089b4 <__lshift+0xd0>)
 8008912:	4829      	ldr	r0, [pc, #164]	@ (80089b8 <__lshift+0xd4>)
 8008914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008918:	f000 fbe8 	bl	80090ec <__assert_func>
 800891c:	3101      	adds	r1, #1
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	e7ee      	b.n	8008900 <__lshift+0x1c>
 8008922:	2300      	movs	r3, #0
 8008924:	f100 0114 	add.w	r1, r0, #20
 8008928:	f100 0210 	add.w	r2, r0, #16
 800892c:	4618      	mov	r0, r3
 800892e:	4553      	cmp	r3, sl
 8008930:	db33      	blt.n	800899a <__lshift+0xb6>
 8008932:	6920      	ldr	r0, [r4, #16]
 8008934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008938:	f104 0314 	add.w	r3, r4, #20
 800893c:	f019 091f 	ands.w	r9, r9, #31
 8008940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008948:	d02b      	beq.n	80089a2 <__lshift+0xbe>
 800894a:	f1c9 0e20 	rsb	lr, r9, #32
 800894e:	468a      	mov	sl, r1
 8008950:	2200      	movs	r2, #0
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	fa00 f009 	lsl.w	r0, r0, r9
 8008958:	4310      	orrs	r0, r2
 800895a:	f84a 0b04 	str.w	r0, [sl], #4
 800895e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008962:	459c      	cmp	ip, r3
 8008964:	fa22 f20e 	lsr.w	r2, r2, lr
 8008968:	d8f3      	bhi.n	8008952 <__lshift+0x6e>
 800896a:	ebac 0304 	sub.w	r3, ip, r4
 800896e:	3b15      	subs	r3, #21
 8008970:	f023 0303 	bic.w	r3, r3, #3
 8008974:	3304      	adds	r3, #4
 8008976:	f104 0015 	add.w	r0, r4, #21
 800897a:	4584      	cmp	ip, r0
 800897c:	bf38      	it	cc
 800897e:	2304      	movcc	r3, #4
 8008980:	50ca      	str	r2, [r1, r3]
 8008982:	b10a      	cbz	r2, 8008988 <__lshift+0xa4>
 8008984:	f108 0602 	add.w	r6, r8, #2
 8008988:	3e01      	subs	r6, #1
 800898a:	4638      	mov	r0, r7
 800898c:	612e      	str	r6, [r5, #16]
 800898e:	4621      	mov	r1, r4
 8008990:	f7ff fdda 	bl	8008548 <_Bfree>
 8008994:	4628      	mov	r0, r5
 8008996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800899a:	f842 0f04 	str.w	r0, [r2, #4]!
 800899e:	3301      	adds	r3, #1
 80089a0:	e7c5      	b.n	800892e <__lshift+0x4a>
 80089a2:	3904      	subs	r1, #4
 80089a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80089ac:	459c      	cmp	ip, r3
 80089ae:	d8f9      	bhi.n	80089a4 <__lshift+0xc0>
 80089b0:	e7ea      	b.n	8008988 <__lshift+0xa4>
 80089b2:	bf00      	nop
 80089b4:	080093c8 	.word	0x080093c8
 80089b8:	080093d9 	.word	0x080093d9

080089bc <__mcmp>:
 80089bc:	690a      	ldr	r2, [r1, #16]
 80089be:	4603      	mov	r3, r0
 80089c0:	6900      	ldr	r0, [r0, #16]
 80089c2:	1a80      	subs	r0, r0, r2
 80089c4:	b530      	push	{r4, r5, lr}
 80089c6:	d10e      	bne.n	80089e6 <__mcmp+0x2a>
 80089c8:	3314      	adds	r3, #20
 80089ca:	3114      	adds	r1, #20
 80089cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089dc:	4295      	cmp	r5, r2
 80089de:	d003      	beq.n	80089e8 <__mcmp+0x2c>
 80089e0:	d205      	bcs.n	80089ee <__mcmp+0x32>
 80089e2:	f04f 30ff 	mov.w	r0, #4294967295
 80089e6:	bd30      	pop	{r4, r5, pc}
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	d3f3      	bcc.n	80089d4 <__mcmp+0x18>
 80089ec:	e7fb      	b.n	80089e6 <__mcmp+0x2a>
 80089ee:	2001      	movs	r0, #1
 80089f0:	e7f9      	b.n	80089e6 <__mcmp+0x2a>
	...

080089f4 <__mdiff>:
 80089f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f8:	4689      	mov	r9, r1
 80089fa:	4606      	mov	r6, r0
 80089fc:	4611      	mov	r1, r2
 80089fe:	4648      	mov	r0, r9
 8008a00:	4614      	mov	r4, r2
 8008a02:	f7ff ffdb 	bl	80089bc <__mcmp>
 8008a06:	1e05      	subs	r5, r0, #0
 8008a08:	d112      	bne.n	8008a30 <__mdiff+0x3c>
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff fd5b 	bl	80084c8 <_Balloc>
 8008a12:	4602      	mov	r2, r0
 8008a14:	b928      	cbnz	r0, 8008a22 <__mdiff+0x2e>
 8008a16:	4b3f      	ldr	r3, [pc, #252]	@ (8008b14 <__mdiff+0x120>)
 8008a18:	f240 2137 	movw	r1, #567	@ 0x237
 8008a1c:	483e      	ldr	r0, [pc, #248]	@ (8008b18 <__mdiff+0x124>)
 8008a1e:	f000 fb65 	bl	80090ec <__assert_func>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a28:	4610      	mov	r0, r2
 8008a2a:	b003      	add	sp, #12
 8008a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a30:	bfbc      	itt	lt
 8008a32:	464b      	movlt	r3, r9
 8008a34:	46a1      	movlt	r9, r4
 8008a36:	4630      	mov	r0, r6
 8008a38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a3c:	bfba      	itte	lt
 8008a3e:	461c      	movlt	r4, r3
 8008a40:	2501      	movlt	r5, #1
 8008a42:	2500      	movge	r5, #0
 8008a44:	f7ff fd40 	bl	80084c8 <_Balloc>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	b918      	cbnz	r0, 8008a54 <__mdiff+0x60>
 8008a4c:	4b31      	ldr	r3, [pc, #196]	@ (8008b14 <__mdiff+0x120>)
 8008a4e:	f240 2145 	movw	r1, #581	@ 0x245
 8008a52:	e7e3      	b.n	8008a1c <__mdiff+0x28>
 8008a54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a58:	6926      	ldr	r6, [r4, #16]
 8008a5a:	60c5      	str	r5, [r0, #12]
 8008a5c:	f109 0310 	add.w	r3, r9, #16
 8008a60:	f109 0514 	add.w	r5, r9, #20
 8008a64:	f104 0e14 	add.w	lr, r4, #20
 8008a68:	f100 0b14 	add.w	fp, r0, #20
 8008a6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a74:	9301      	str	r3, [sp, #4]
 8008a76:	46d9      	mov	r9, fp
 8008a78:	f04f 0c00 	mov.w	ip, #0
 8008a7c:	9b01      	ldr	r3, [sp, #4]
 8008a7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	fa1f f38a 	uxth.w	r3, sl
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	b283      	uxth	r3, r0
 8008a90:	1acb      	subs	r3, r1, r3
 8008a92:	0c00      	lsrs	r0, r0, #16
 8008a94:	4463      	add	r3, ip
 8008a96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008aa4:	4576      	cmp	r6, lr
 8008aa6:	f849 3b04 	str.w	r3, [r9], #4
 8008aaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008aae:	d8e5      	bhi.n	8008a7c <__mdiff+0x88>
 8008ab0:	1b33      	subs	r3, r6, r4
 8008ab2:	3b15      	subs	r3, #21
 8008ab4:	f023 0303 	bic.w	r3, r3, #3
 8008ab8:	3415      	adds	r4, #21
 8008aba:	3304      	adds	r3, #4
 8008abc:	42a6      	cmp	r6, r4
 8008abe:	bf38      	it	cc
 8008ac0:	2304      	movcc	r3, #4
 8008ac2:	441d      	add	r5, r3
 8008ac4:	445b      	add	r3, fp
 8008ac6:	461e      	mov	r6, r3
 8008ac8:	462c      	mov	r4, r5
 8008aca:	4544      	cmp	r4, r8
 8008acc:	d30e      	bcc.n	8008aec <__mdiff+0xf8>
 8008ace:	f108 0103 	add.w	r1, r8, #3
 8008ad2:	1b49      	subs	r1, r1, r5
 8008ad4:	f021 0103 	bic.w	r1, r1, #3
 8008ad8:	3d03      	subs	r5, #3
 8008ada:	45a8      	cmp	r8, r5
 8008adc:	bf38      	it	cc
 8008ade:	2100      	movcc	r1, #0
 8008ae0:	440b      	add	r3, r1
 8008ae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ae6:	b191      	cbz	r1, 8008b0e <__mdiff+0x11a>
 8008ae8:	6117      	str	r7, [r2, #16]
 8008aea:	e79d      	b.n	8008a28 <__mdiff+0x34>
 8008aec:	f854 1b04 	ldr.w	r1, [r4], #4
 8008af0:	46e6      	mov	lr, ip
 8008af2:	0c08      	lsrs	r0, r1, #16
 8008af4:	fa1c fc81 	uxtah	ip, ip, r1
 8008af8:	4471      	add	r1, lr
 8008afa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008afe:	b289      	uxth	r1, r1
 8008b00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b04:	f846 1b04 	str.w	r1, [r6], #4
 8008b08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b0c:	e7dd      	b.n	8008aca <__mdiff+0xd6>
 8008b0e:	3f01      	subs	r7, #1
 8008b10:	e7e7      	b.n	8008ae2 <__mdiff+0xee>
 8008b12:	bf00      	nop
 8008b14:	080093c8 	.word	0x080093c8
 8008b18:	080093d9 	.word	0x080093d9

08008b1c <__d2b>:
 8008b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b20:	460f      	mov	r7, r1
 8008b22:	2101      	movs	r1, #1
 8008b24:	ec59 8b10 	vmov	r8, r9, d0
 8008b28:	4616      	mov	r6, r2
 8008b2a:	f7ff fccd 	bl	80084c8 <_Balloc>
 8008b2e:	4604      	mov	r4, r0
 8008b30:	b930      	cbnz	r0, 8008b40 <__d2b+0x24>
 8008b32:	4602      	mov	r2, r0
 8008b34:	4b23      	ldr	r3, [pc, #140]	@ (8008bc4 <__d2b+0xa8>)
 8008b36:	4824      	ldr	r0, [pc, #144]	@ (8008bc8 <__d2b+0xac>)
 8008b38:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b3c:	f000 fad6 	bl	80090ec <__assert_func>
 8008b40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b48:	b10d      	cbz	r5, 8008b4e <__d2b+0x32>
 8008b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	f1b8 0300 	subs.w	r3, r8, #0
 8008b54:	d023      	beq.n	8008b9e <__d2b+0x82>
 8008b56:	4668      	mov	r0, sp
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	f7ff fd7c 	bl	8008656 <__lo0bits>
 8008b5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b62:	b1d0      	cbz	r0, 8008b9a <__d2b+0x7e>
 8008b64:	f1c0 0320 	rsb	r3, r0, #32
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	40c2      	lsrs	r2, r0
 8008b70:	6163      	str	r3, [r4, #20]
 8008b72:	9201      	str	r2, [sp, #4]
 8008b74:	9b01      	ldr	r3, [sp, #4]
 8008b76:	61a3      	str	r3, [r4, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2201      	moveq	r2, #1
 8008b7e:	2202      	movne	r2, #2
 8008b80:	6122      	str	r2, [r4, #16]
 8008b82:	b1a5      	cbz	r5, 8008bae <__d2b+0x92>
 8008b84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b88:	4405      	add	r5, r0
 8008b8a:	603d      	str	r5, [r7, #0]
 8008b8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b90:	6030      	str	r0, [r6, #0]
 8008b92:	4620      	mov	r0, r4
 8008b94:	b003      	add	sp, #12
 8008b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b9a:	6161      	str	r1, [r4, #20]
 8008b9c:	e7ea      	b.n	8008b74 <__d2b+0x58>
 8008b9e:	a801      	add	r0, sp, #4
 8008ba0:	f7ff fd59 	bl	8008656 <__lo0bits>
 8008ba4:	9b01      	ldr	r3, [sp, #4]
 8008ba6:	6163      	str	r3, [r4, #20]
 8008ba8:	3020      	adds	r0, #32
 8008baa:	2201      	movs	r2, #1
 8008bac:	e7e8      	b.n	8008b80 <__d2b+0x64>
 8008bae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bb6:	6038      	str	r0, [r7, #0]
 8008bb8:	6918      	ldr	r0, [r3, #16]
 8008bba:	f7ff fd2d 	bl	8008618 <__hi0bits>
 8008bbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bc2:	e7e5      	b.n	8008b90 <__d2b+0x74>
 8008bc4:	080093c8 	.word	0x080093c8
 8008bc8:	080093d9 	.word	0x080093d9

08008bcc <__sfputc_r>:
 8008bcc:	6893      	ldr	r3, [r2, #8]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	b410      	push	{r4}
 8008bd4:	6093      	str	r3, [r2, #8]
 8008bd6:	da08      	bge.n	8008bea <__sfputc_r+0x1e>
 8008bd8:	6994      	ldr	r4, [r2, #24]
 8008bda:	42a3      	cmp	r3, r4
 8008bdc:	db01      	blt.n	8008be2 <__sfputc_r+0x16>
 8008bde:	290a      	cmp	r1, #10
 8008be0:	d103      	bne.n	8008bea <__sfputc_r+0x1e>
 8008be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008be6:	f7fe bc0c 	b.w	8007402 <__swbuf_r>
 8008bea:	6813      	ldr	r3, [r2, #0]
 8008bec:	1c58      	adds	r0, r3, #1
 8008bee:	6010      	str	r0, [r2, #0]
 8008bf0:	7019      	strb	r1, [r3, #0]
 8008bf2:	4608      	mov	r0, r1
 8008bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bf8:	4770      	bx	lr

08008bfa <__sfputs_r>:
 8008bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	460f      	mov	r7, r1
 8008c00:	4614      	mov	r4, r2
 8008c02:	18d5      	adds	r5, r2, r3
 8008c04:	42ac      	cmp	r4, r5
 8008c06:	d101      	bne.n	8008c0c <__sfputs_r+0x12>
 8008c08:	2000      	movs	r0, #0
 8008c0a:	e007      	b.n	8008c1c <__sfputs_r+0x22>
 8008c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c10:	463a      	mov	r2, r7
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7ff ffda 	bl	8008bcc <__sfputc_r>
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	d1f3      	bne.n	8008c04 <__sfputs_r+0xa>
 8008c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c20 <_vfiprintf_r>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	460d      	mov	r5, r1
 8008c26:	b09d      	sub	sp, #116	@ 0x74
 8008c28:	4614      	mov	r4, r2
 8008c2a:	4698      	mov	r8, r3
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	b118      	cbz	r0, 8008c38 <_vfiprintf_r+0x18>
 8008c30:	6a03      	ldr	r3, [r0, #32]
 8008c32:	b90b      	cbnz	r3, 8008c38 <_vfiprintf_r+0x18>
 8008c34:	f7fe fb5a 	bl	80072ec <__sinit>
 8008c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c3a:	07d9      	lsls	r1, r3, #31
 8008c3c:	d405      	bmi.n	8008c4a <_vfiprintf_r+0x2a>
 8008c3e:	89ab      	ldrh	r3, [r5, #12]
 8008c40:	059a      	lsls	r2, r3, #22
 8008c42:	d402      	bmi.n	8008c4a <_vfiprintf_r+0x2a>
 8008c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c46:	f7fe fcee 	bl	8007626 <__retarget_lock_acquire_recursive>
 8008c4a:	89ab      	ldrh	r3, [r5, #12]
 8008c4c:	071b      	lsls	r3, r3, #28
 8008c4e:	d501      	bpl.n	8008c54 <_vfiprintf_r+0x34>
 8008c50:	692b      	ldr	r3, [r5, #16]
 8008c52:	b99b      	cbnz	r3, 8008c7c <_vfiprintf_r+0x5c>
 8008c54:	4629      	mov	r1, r5
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7fe fc12 	bl	8007480 <__swsetup_r>
 8008c5c:	b170      	cbz	r0, 8008c7c <_vfiprintf_r+0x5c>
 8008c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c60:	07dc      	lsls	r4, r3, #31
 8008c62:	d504      	bpl.n	8008c6e <_vfiprintf_r+0x4e>
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	b01d      	add	sp, #116	@ 0x74
 8008c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	0598      	lsls	r0, r3, #22
 8008c72:	d4f7      	bmi.n	8008c64 <_vfiprintf_r+0x44>
 8008c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c76:	f7fe fcd7 	bl	8007628 <__retarget_lock_release_recursive>
 8008c7a:	e7f3      	b.n	8008c64 <_vfiprintf_r+0x44>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c80:	2320      	movs	r3, #32
 8008c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c8a:	2330      	movs	r3, #48	@ 0x30
 8008c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e3c <_vfiprintf_r+0x21c>
 8008c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c94:	f04f 0901 	mov.w	r9, #1
 8008c98:	4623      	mov	r3, r4
 8008c9a:	469a      	mov	sl, r3
 8008c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_vfiprintf_r+0x86>
 8008ca2:	2a25      	cmp	r2, #37	@ 0x25
 8008ca4:	d1f9      	bne.n	8008c9a <_vfiprintf_r+0x7a>
 8008ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8008caa:	d00b      	beq.n	8008cc4 <_vfiprintf_r+0xa4>
 8008cac:	465b      	mov	r3, fp
 8008cae:	4622      	mov	r2, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7ff ffa1 	bl	8008bfa <__sfputs_r>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f000 80a7 	beq.w	8008e0c <_vfiprintf_r+0x1ec>
 8008cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cc0:	445a      	add	r2, fp
 8008cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 809f 	beq.w	8008e0c <_vfiprintf_r+0x1ec>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd8:	f10a 0a01 	add.w	sl, sl, #1
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ce6:	4654      	mov	r4, sl
 8008ce8:	2205      	movs	r2, #5
 8008cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cee:	4853      	ldr	r0, [pc, #332]	@ (8008e3c <_vfiprintf_r+0x21c>)
 8008cf0:	f7f7 fa6e 	bl	80001d0 <memchr>
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	b9d8      	cbnz	r0, 8008d30 <_vfiprintf_r+0x110>
 8008cf8:	06d1      	lsls	r1, r2, #27
 8008cfa:	bf44      	itt	mi
 8008cfc:	2320      	movmi	r3, #32
 8008cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d02:	0713      	lsls	r3, r2, #28
 8008d04:	bf44      	itt	mi
 8008d06:	232b      	movmi	r3, #43	@ 0x2b
 8008d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d12:	d015      	beq.n	8008d40 <_vfiprintf_r+0x120>
 8008d14:	9a07      	ldr	r2, [sp, #28]
 8008d16:	4654      	mov	r4, sl
 8008d18:	2000      	movs	r0, #0
 8008d1a:	f04f 0c0a 	mov.w	ip, #10
 8008d1e:	4621      	mov	r1, r4
 8008d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d24:	3b30      	subs	r3, #48	@ 0x30
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d94b      	bls.n	8008dc2 <_vfiprintf_r+0x1a2>
 8008d2a:	b1b0      	cbz	r0, 8008d5a <_vfiprintf_r+0x13a>
 8008d2c:	9207      	str	r2, [sp, #28]
 8008d2e:	e014      	b.n	8008d5a <_vfiprintf_r+0x13a>
 8008d30:	eba0 0308 	sub.w	r3, r0, r8
 8008d34:	fa09 f303 	lsl.w	r3, r9, r3
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	9304      	str	r3, [sp, #16]
 8008d3c:	46a2      	mov	sl, r4
 8008d3e:	e7d2      	b.n	8008ce6 <_vfiprintf_r+0xc6>
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	1d19      	adds	r1, r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	9103      	str	r1, [sp, #12]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bfbb      	ittet	lt
 8008d4c:	425b      	neglt	r3, r3
 8008d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d52:	9307      	strge	r3, [sp, #28]
 8008d54:	9307      	strlt	r3, [sp, #28]
 8008d56:	bfb8      	it	lt
 8008d58:	9204      	strlt	r2, [sp, #16]
 8008d5a:	7823      	ldrb	r3, [r4, #0]
 8008d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d5e:	d10a      	bne.n	8008d76 <_vfiprintf_r+0x156>
 8008d60:	7863      	ldrb	r3, [r4, #1]
 8008d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d64:	d132      	bne.n	8008dcc <_vfiprintf_r+0x1ac>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	1d1a      	adds	r2, r3, #4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	9203      	str	r2, [sp, #12]
 8008d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d72:	3402      	adds	r4, #2
 8008d74:	9305      	str	r3, [sp, #20]
 8008d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e4c <_vfiprintf_r+0x22c>
 8008d7a:	7821      	ldrb	r1, [r4, #0]
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	4650      	mov	r0, sl
 8008d80:	f7f7 fa26 	bl	80001d0 <memchr>
 8008d84:	b138      	cbz	r0, 8008d96 <_vfiprintf_r+0x176>
 8008d86:	9b04      	ldr	r3, [sp, #16]
 8008d88:	eba0 000a 	sub.w	r0, r0, sl
 8008d8c:	2240      	movs	r2, #64	@ 0x40
 8008d8e:	4082      	lsls	r2, r0
 8008d90:	4313      	orrs	r3, r2
 8008d92:	3401      	adds	r4, #1
 8008d94:	9304      	str	r3, [sp, #16]
 8008d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9a:	4829      	ldr	r0, [pc, #164]	@ (8008e40 <_vfiprintf_r+0x220>)
 8008d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008da0:	2206      	movs	r2, #6
 8008da2:	f7f7 fa15 	bl	80001d0 <memchr>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d03f      	beq.n	8008e2a <_vfiprintf_r+0x20a>
 8008daa:	4b26      	ldr	r3, [pc, #152]	@ (8008e44 <_vfiprintf_r+0x224>)
 8008dac:	bb1b      	cbnz	r3, 8008df6 <_vfiprintf_r+0x1d6>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	3307      	adds	r3, #7
 8008db2:	f023 0307 	bic.w	r3, r3, #7
 8008db6:	3308      	adds	r3, #8
 8008db8:	9303      	str	r3, [sp, #12]
 8008dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dbc:	443b      	add	r3, r7
 8008dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dc0:	e76a      	b.n	8008c98 <_vfiprintf_r+0x78>
 8008dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	2001      	movs	r0, #1
 8008dca:	e7a8      	b.n	8008d1e <_vfiprintf_r+0xfe>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	3401      	adds	r4, #1
 8008dd0:	9305      	str	r3, [sp, #20]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	f04f 0c0a 	mov.w	ip, #10
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dde:	3a30      	subs	r2, #48	@ 0x30
 8008de0:	2a09      	cmp	r2, #9
 8008de2:	d903      	bls.n	8008dec <_vfiprintf_r+0x1cc>
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0c6      	beq.n	8008d76 <_vfiprintf_r+0x156>
 8008de8:	9105      	str	r1, [sp, #20]
 8008dea:	e7c4      	b.n	8008d76 <_vfiprintf_r+0x156>
 8008dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df0:	4604      	mov	r4, r0
 8008df2:	2301      	movs	r3, #1
 8008df4:	e7f0      	b.n	8008dd8 <_vfiprintf_r+0x1b8>
 8008df6:	ab03      	add	r3, sp, #12
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	462a      	mov	r2, r5
 8008dfc:	4b12      	ldr	r3, [pc, #72]	@ (8008e48 <_vfiprintf_r+0x228>)
 8008dfe:	a904      	add	r1, sp, #16
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7fd fe2f 	bl	8006a64 <_printf_float>
 8008e06:	4607      	mov	r7, r0
 8008e08:	1c78      	adds	r0, r7, #1
 8008e0a:	d1d6      	bne.n	8008dba <_vfiprintf_r+0x19a>
 8008e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e0e:	07d9      	lsls	r1, r3, #31
 8008e10:	d405      	bmi.n	8008e1e <_vfiprintf_r+0x1fe>
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	059a      	lsls	r2, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <_vfiprintf_r+0x1fe>
 8008e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e1a:	f7fe fc05 	bl	8007628 <__retarget_lock_release_recursive>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	065b      	lsls	r3, r3, #25
 8008e22:	f53f af1f 	bmi.w	8008c64 <_vfiprintf_r+0x44>
 8008e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e28:	e71e      	b.n	8008c68 <_vfiprintf_r+0x48>
 8008e2a:	ab03      	add	r3, sp, #12
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	462a      	mov	r2, r5
 8008e30:	4b05      	ldr	r3, [pc, #20]	@ (8008e48 <_vfiprintf_r+0x228>)
 8008e32:	a904      	add	r1, sp, #16
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7fe f8ad 	bl	8006f94 <_printf_i>
 8008e3a:	e7e4      	b.n	8008e06 <_vfiprintf_r+0x1e6>
 8008e3c:	08009530 	.word	0x08009530
 8008e40:	0800953a 	.word	0x0800953a
 8008e44:	08006a65 	.word	0x08006a65
 8008e48:	08008bfb 	.word	0x08008bfb
 8008e4c:	08009536 	.word	0x08009536

08008e50 <__sflush_r>:
 8008e50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e58:	0716      	lsls	r6, r2, #28
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	d454      	bmi.n	8008f0a <__sflush_r+0xba>
 8008e60:	684b      	ldr	r3, [r1, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	dc02      	bgt.n	8008e6c <__sflush_r+0x1c>
 8008e66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dd48      	ble.n	8008efe <__sflush_r+0xae>
 8008e6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e6e:	2e00      	cmp	r6, #0
 8008e70:	d045      	beq.n	8008efe <__sflush_r+0xae>
 8008e72:	2300      	movs	r3, #0
 8008e74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e78:	682f      	ldr	r7, [r5, #0]
 8008e7a:	6a21      	ldr	r1, [r4, #32]
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	d030      	beq.n	8008ee2 <__sflush_r+0x92>
 8008e80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	0759      	lsls	r1, r3, #29
 8008e86:	d505      	bpl.n	8008e94 <__sflush_r+0x44>
 8008e88:	6863      	ldr	r3, [r4, #4]
 8008e8a:	1ad2      	subs	r2, r2, r3
 8008e8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e8e:	b10b      	cbz	r3, 8008e94 <__sflush_r+0x44>
 8008e90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e92:	1ad2      	subs	r2, r2, r3
 8008e94:	2300      	movs	r3, #0
 8008e96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e98:	6a21      	ldr	r1, [r4, #32]
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	47b0      	blx	r6
 8008e9e:	1c43      	adds	r3, r0, #1
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	d106      	bne.n	8008eb2 <__sflush_r+0x62>
 8008ea4:	6829      	ldr	r1, [r5, #0]
 8008ea6:	291d      	cmp	r1, #29
 8008ea8:	d82b      	bhi.n	8008f02 <__sflush_r+0xb2>
 8008eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8008f54 <__sflush_r+0x104>)
 8008eac:	410a      	asrs	r2, r1
 8008eae:	07d6      	lsls	r6, r2, #31
 8008eb0:	d427      	bmi.n	8008f02 <__sflush_r+0xb2>
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	6062      	str	r2, [r4, #4]
 8008eb6:	04d9      	lsls	r1, r3, #19
 8008eb8:	6922      	ldr	r2, [r4, #16]
 8008eba:	6022      	str	r2, [r4, #0]
 8008ebc:	d504      	bpl.n	8008ec8 <__sflush_r+0x78>
 8008ebe:	1c42      	adds	r2, r0, #1
 8008ec0:	d101      	bne.n	8008ec6 <__sflush_r+0x76>
 8008ec2:	682b      	ldr	r3, [r5, #0]
 8008ec4:	b903      	cbnz	r3, 8008ec8 <__sflush_r+0x78>
 8008ec6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008eca:	602f      	str	r7, [r5, #0]
 8008ecc:	b1b9      	cbz	r1, 8008efe <__sflush_r+0xae>
 8008ece:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ed2:	4299      	cmp	r1, r3
 8008ed4:	d002      	beq.n	8008edc <__sflush_r+0x8c>
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f7ff f9f6 	bl	80082c8 <_free_r>
 8008edc:	2300      	movs	r3, #0
 8008ede:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ee0:	e00d      	b.n	8008efe <__sflush_r+0xae>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b0      	blx	r6
 8008ee8:	4602      	mov	r2, r0
 8008eea:	1c50      	adds	r0, r2, #1
 8008eec:	d1c9      	bne.n	8008e82 <__sflush_r+0x32>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d0c6      	beq.n	8008e82 <__sflush_r+0x32>
 8008ef4:	2b1d      	cmp	r3, #29
 8008ef6:	d001      	beq.n	8008efc <__sflush_r+0xac>
 8008ef8:	2b16      	cmp	r3, #22
 8008efa:	d11e      	bne.n	8008f3a <__sflush_r+0xea>
 8008efc:	602f      	str	r7, [r5, #0]
 8008efe:	2000      	movs	r0, #0
 8008f00:	e022      	b.n	8008f48 <__sflush_r+0xf8>
 8008f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f06:	b21b      	sxth	r3, r3
 8008f08:	e01b      	b.n	8008f42 <__sflush_r+0xf2>
 8008f0a:	690f      	ldr	r7, [r1, #16]
 8008f0c:	2f00      	cmp	r7, #0
 8008f0e:	d0f6      	beq.n	8008efe <__sflush_r+0xae>
 8008f10:	0793      	lsls	r3, r2, #30
 8008f12:	680e      	ldr	r6, [r1, #0]
 8008f14:	bf08      	it	eq
 8008f16:	694b      	ldreq	r3, [r1, #20]
 8008f18:	600f      	str	r7, [r1, #0]
 8008f1a:	bf18      	it	ne
 8008f1c:	2300      	movne	r3, #0
 8008f1e:	eba6 0807 	sub.w	r8, r6, r7
 8008f22:	608b      	str	r3, [r1, #8]
 8008f24:	f1b8 0f00 	cmp.w	r8, #0
 8008f28:	dde9      	ble.n	8008efe <__sflush_r+0xae>
 8008f2a:	6a21      	ldr	r1, [r4, #32]
 8008f2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f2e:	4643      	mov	r3, r8
 8008f30:	463a      	mov	r2, r7
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b0      	blx	r6
 8008f36:	2800      	cmp	r0, #0
 8008f38:	dc08      	bgt.n	8008f4c <__sflush_r+0xfc>
 8008f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f42:	81a3      	strh	r3, [r4, #12]
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f4c:	4407      	add	r7, r0
 8008f4e:	eba8 0800 	sub.w	r8, r8, r0
 8008f52:	e7e7      	b.n	8008f24 <__sflush_r+0xd4>
 8008f54:	dfbffffe 	.word	0xdfbffffe

08008f58 <_fflush_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	690b      	ldr	r3, [r1, #16]
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	460c      	mov	r4, r1
 8008f60:	b913      	cbnz	r3, 8008f68 <_fflush_r+0x10>
 8008f62:	2500      	movs	r5, #0
 8008f64:	4628      	mov	r0, r5
 8008f66:	bd38      	pop	{r3, r4, r5, pc}
 8008f68:	b118      	cbz	r0, 8008f72 <_fflush_r+0x1a>
 8008f6a:	6a03      	ldr	r3, [r0, #32]
 8008f6c:	b90b      	cbnz	r3, 8008f72 <_fflush_r+0x1a>
 8008f6e:	f7fe f9bd 	bl	80072ec <__sinit>
 8008f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f3      	beq.n	8008f62 <_fflush_r+0xa>
 8008f7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f7c:	07d0      	lsls	r0, r2, #31
 8008f7e:	d404      	bmi.n	8008f8a <_fflush_r+0x32>
 8008f80:	0599      	lsls	r1, r3, #22
 8008f82:	d402      	bmi.n	8008f8a <_fflush_r+0x32>
 8008f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f86:	f7fe fb4e 	bl	8007626 <__retarget_lock_acquire_recursive>
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	f7ff ff5f 	bl	8008e50 <__sflush_r>
 8008f92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f94:	07da      	lsls	r2, r3, #31
 8008f96:	4605      	mov	r5, r0
 8008f98:	d4e4      	bmi.n	8008f64 <_fflush_r+0xc>
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	059b      	lsls	r3, r3, #22
 8008f9e:	d4e1      	bmi.n	8008f64 <_fflush_r+0xc>
 8008fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fa2:	f7fe fb41 	bl	8007628 <__retarget_lock_release_recursive>
 8008fa6:	e7dd      	b.n	8008f64 <_fflush_r+0xc>

08008fa8 <__swhatbuf_r>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	460c      	mov	r4, r1
 8008fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb0:	2900      	cmp	r1, #0
 8008fb2:	b096      	sub	sp, #88	@ 0x58
 8008fb4:	4615      	mov	r5, r2
 8008fb6:	461e      	mov	r6, r3
 8008fb8:	da0d      	bge.n	8008fd6 <__swhatbuf_r+0x2e>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008fc0:	f04f 0100 	mov.w	r1, #0
 8008fc4:	bf14      	ite	ne
 8008fc6:	2340      	movne	r3, #64	@ 0x40
 8008fc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008fcc:	2000      	movs	r0, #0
 8008fce:	6031      	str	r1, [r6, #0]
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	b016      	add	sp, #88	@ 0x58
 8008fd4:	bd70      	pop	{r4, r5, r6, pc}
 8008fd6:	466a      	mov	r2, sp
 8008fd8:	f000 f848 	bl	800906c <_fstat_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	dbec      	blt.n	8008fba <__swhatbuf_r+0x12>
 8008fe0:	9901      	ldr	r1, [sp, #4]
 8008fe2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008fe6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008fea:	4259      	negs	r1, r3
 8008fec:	4159      	adcs	r1, r3
 8008fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ff2:	e7eb      	b.n	8008fcc <__swhatbuf_r+0x24>

08008ff4 <__smakebuf_r>:
 8008ff4:	898b      	ldrh	r3, [r1, #12]
 8008ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ff8:	079d      	lsls	r5, r3, #30
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	d507      	bpl.n	8009010 <__smakebuf_r+0x1c>
 8009000:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	6123      	str	r3, [r4, #16]
 8009008:	2301      	movs	r3, #1
 800900a:	6163      	str	r3, [r4, #20]
 800900c:	b003      	add	sp, #12
 800900e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009010:	ab01      	add	r3, sp, #4
 8009012:	466a      	mov	r2, sp
 8009014:	f7ff ffc8 	bl	8008fa8 <__swhatbuf_r>
 8009018:	9f00      	ldr	r7, [sp, #0]
 800901a:	4605      	mov	r5, r0
 800901c:	4639      	mov	r1, r7
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff f9c6 	bl	80083b0 <_malloc_r>
 8009024:	b948      	cbnz	r0, 800903a <__smakebuf_r+0x46>
 8009026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902a:	059a      	lsls	r2, r3, #22
 800902c:	d4ee      	bmi.n	800900c <__smakebuf_r+0x18>
 800902e:	f023 0303 	bic.w	r3, r3, #3
 8009032:	f043 0302 	orr.w	r3, r3, #2
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	e7e2      	b.n	8009000 <__smakebuf_r+0xc>
 800903a:	89a3      	ldrh	r3, [r4, #12]
 800903c:	6020      	str	r0, [r4, #0]
 800903e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	9b01      	ldr	r3, [sp, #4]
 8009046:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800904a:	b15b      	cbz	r3, 8009064 <__smakebuf_r+0x70>
 800904c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009050:	4630      	mov	r0, r6
 8009052:	f000 f81d 	bl	8009090 <_isatty_r>
 8009056:	b128      	cbz	r0, 8009064 <__smakebuf_r+0x70>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	f043 0301 	orr.w	r3, r3, #1
 8009062:	81a3      	strh	r3, [r4, #12]
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	431d      	orrs	r5, r3
 8009068:	81a5      	strh	r5, [r4, #12]
 800906a:	e7cf      	b.n	800900c <__smakebuf_r+0x18>

0800906c <_fstat_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	@ (800908c <_fstat_r+0x20>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	4611      	mov	r1, r2
 8009078:	602b      	str	r3, [r5, #0]
 800907a:	f7f8 fddf 	bl	8001c3c <_fstat>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	d102      	bne.n	8009088 <_fstat_r+0x1c>
 8009082:	682b      	ldr	r3, [r5, #0]
 8009084:	b103      	cbz	r3, 8009088 <_fstat_r+0x1c>
 8009086:	6023      	str	r3, [r4, #0]
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	bf00      	nop
 800908c:	200005b8 	.word	0x200005b8

08009090 <_isatty_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d06      	ldr	r5, [pc, #24]	@ (80090ac <_isatty_r+0x1c>)
 8009094:	2300      	movs	r3, #0
 8009096:	4604      	mov	r4, r0
 8009098:	4608      	mov	r0, r1
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	f7f8 fdde 	bl	8001c5c <_isatty>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_isatty_r+0x1a>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_isatty_r+0x1a>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	200005b8 	.word	0x200005b8

080090b0 <_sbrk_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d06      	ldr	r5, [pc, #24]	@ (80090cc <_sbrk_r+0x1c>)
 80090b4:	2300      	movs	r3, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	f7f8 fde6 	bl	8001c8c <_sbrk>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_sbrk_r+0x1a>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_sbrk_r+0x1a>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	200005b8 	.word	0x200005b8

080090d0 <memcpy>:
 80090d0:	440a      	add	r2, r1
 80090d2:	4291      	cmp	r1, r2
 80090d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80090d8:	d100      	bne.n	80090dc <memcpy+0xc>
 80090da:	4770      	bx	lr
 80090dc:	b510      	push	{r4, lr}
 80090de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090e6:	4291      	cmp	r1, r2
 80090e8:	d1f9      	bne.n	80090de <memcpy+0xe>
 80090ea:	bd10      	pop	{r4, pc}

080090ec <__assert_func>:
 80090ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ee:	4614      	mov	r4, r2
 80090f0:	461a      	mov	r2, r3
 80090f2:	4b09      	ldr	r3, [pc, #36]	@ (8009118 <__assert_func+0x2c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4605      	mov	r5, r0
 80090f8:	68d8      	ldr	r0, [r3, #12]
 80090fa:	b954      	cbnz	r4, 8009112 <__assert_func+0x26>
 80090fc:	4b07      	ldr	r3, [pc, #28]	@ (800911c <__assert_func+0x30>)
 80090fe:	461c      	mov	r4, r3
 8009100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009104:	9100      	str	r1, [sp, #0]
 8009106:	462b      	mov	r3, r5
 8009108:	4905      	ldr	r1, [pc, #20]	@ (8009120 <__assert_func+0x34>)
 800910a:	f000 f841 	bl	8009190 <fiprintf>
 800910e:	f000 f851 	bl	80091b4 <abort>
 8009112:	4b04      	ldr	r3, [pc, #16]	@ (8009124 <__assert_func+0x38>)
 8009114:	e7f4      	b.n	8009100 <__assert_func+0x14>
 8009116:	bf00      	nop
 8009118:	20000018 	.word	0x20000018
 800911c:	08009586 	.word	0x08009586
 8009120:	08009558 	.word	0x08009558
 8009124:	0800954b 	.word	0x0800954b

08009128 <_calloc_r>:
 8009128:	b570      	push	{r4, r5, r6, lr}
 800912a:	fba1 5402 	umull	r5, r4, r1, r2
 800912e:	b93c      	cbnz	r4, 8009140 <_calloc_r+0x18>
 8009130:	4629      	mov	r1, r5
 8009132:	f7ff f93d 	bl	80083b0 <_malloc_r>
 8009136:	4606      	mov	r6, r0
 8009138:	b928      	cbnz	r0, 8009146 <_calloc_r+0x1e>
 800913a:	2600      	movs	r6, #0
 800913c:	4630      	mov	r0, r6
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	220c      	movs	r2, #12
 8009142:	6002      	str	r2, [r0, #0]
 8009144:	e7f9      	b.n	800913a <_calloc_r+0x12>
 8009146:	462a      	mov	r2, r5
 8009148:	4621      	mov	r1, r4
 800914a:	f7fe f9ef 	bl	800752c <memset>
 800914e:	e7f5      	b.n	800913c <_calloc_r+0x14>

08009150 <__ascii_mbtowc>:
 8009150:	b082      	sub	sp, #8
 8009152:	b901      	cbnz	r1, 8009156 <__ascii_mbtowc+0x6>
 8009154:	a901      	add	r1, sp, #4
 8009156:	b142      	cbz	r2, 800916a <__ascii_mbtowc+0x1a>
 8009158:	b14b      	cbz	r3, 800916e <__ascii_mbtowc+0x1e>
 800915a:	7813      	ldrb	r3, [r2, #0]
 800915c:	600b      	str	r3, [r1, #0]
 800915e:	7812      	ldrb	r2, [r2, #0]
 8009160:	1e10      	subs	r0, r2, #0
 8009162:	bf18      	it	ne
 8009164:	2001      	movne	r0, #1
 8009166:	b002      	add	sp, #8
 8009168:	4770      	bx	lr
 800916a:	4610      	mov	r0, r2
 800916c:	e7fb      	b.n	8009166 <__ascii_mbtowc+0x16>
 800916e:	f06f 0001 	mvn.w	r0, #1
 8009172:	e7f8      	b.n	8009166 <__ascii_mbtowc+0x16>

08009174 <__ascii_wctomb>:
 8009174:	4603      	mov	r3, r0
 8009176:	4608      	mov	r0, r1
 8009178:	b141      	cbz	r1, 800918c <__ascii_wctomb+0x18>
 800917a:	2aff      	cmp	r2, #255	@ 0xff
 800917c:	d904      	bls.n	8009188 <__ascii_wctomb+0x14>
 800917e:	228a      	movs	r2, #138	@ 0x8a
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	f04f 30ff 	mov.w	r0, #4294967295
 8009186:	4770      	bx	lr
 8009188:	700a      	strb	r2, [r1, #0]
 800918a:	2001      	movs	r0, #1
 800918c:	4770      	bx	lr
	...

08009190 <fiprintf>:
 8009190:	b40e      	push	{r1, r2, r3}
 8009192:	b503      	push	{r0, r1, lr}
 8009194:	4601      	mov	r1, r0
 8009196:	ab03      	add	r3, sp, #12
 8009198:	4805      	ldr	r0, [pc, #20]	@ (80091b0 <fiprintf+0x20>)
 800919a:	f853 2b04 	ldr.w	r2, [r3], #4
 800919e:	6800      	ldr	r0, [r0, #0]
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	f7ff fd3d 	bl	8008c20 <_vfiprintf_r>
 80091a6:	b002      	add	sp, #8
 80091a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80091ac:	b003      	add	sp, #12
 80091ae:	4770      	bx	lr
 80091b0:	20000018 	.word	0x20000018

080091b4 <abort>:
 80091b4:	b508      	push	{r3, lr}
 80091b6:	2006      	movs	r0, #6
 80091b8:	f000 f82c 	bl	8009214 <raise>
 80091bc:	2001      	movs	r0, #1
 80091be:	f7f8 fd09 	bl	8001bd4 <_exit>

080091c2 <_raise_r>:
 80091c2:	291f      	cmp	r1, #31
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4605      	mov	r5, r0
 80091c8:	460c      	mov	r4, r1
 80091ca:	d904      	bls.n	80091d6 <_raise_r+0x14>
 80091cc:	2316      	movs	r3, #22
 80091ce:	6003      	str	r3, [r0, #0]
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	bd38      	pop	{r3, r4, r5, pc}
 80091d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091d8:	b112      	cbz	r2, 80091e0 <_raise_r+0x1e>
 80091da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091de:	b94b      	cbnz	r3, 80091f4 <_raise_r+0x32>
 80091e0:	4628      	mov	r0, r5
 80091e2:	f000 f831 	bl	8009248 <_getpid_r>
 80091e6:	4622      	mov	r2, r4
 80091e8:	4601      	mov	r1, r0
 80091ea:	4628      	mov	r0, r5
 80091ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091f0:	f000 b818 	b.w	8009224 <_kill_r>
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d00a      	beq.n	800920e <_raise_r+0x4c>
 80091f8:	1c59      	adds	r1, r3, #1
 80091fa:	d103      	bne.n	8009204 <_raise_r+0x42>
 80091fc:	2316      	movs	r3, #22
 80091fe:	6003      	str	r3, [r0, #0]
 8009200:	2001      	movs	r0, #1
 8009202:	e7e7      	b.n	80091d4 <_raise_r+0x12>
 8009204:	2100      	movs	r1, #0
 8009206:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800920a:	4620      	mov	r0, r4
 800920c:	4798      	blx	r3
 800920e:	2000      	movs	r0, #0
 8009210:	e7e0      	b.n	80091d4 <_raise_r+0x12>
	...

08009214 <raise>:
 8009214:	4b02      	ldr	r3, [pc, #8]	@ (8009220 <raise+0xc>)
 8009216:	4601      	mov	r1, r0
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	f7ff bfd2 	b.w	80091c2 <_raise_r>
 800921e:	bf00      	nop
 8009220:	20000018 	.word	0x20000018

08009224 <_kill_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4d07      	ldr	r5, [pc, #28]	@ (8009244 <_kill_r+0x20>)
 8009228:	2300      	movs	r3, #0
 800922a:	4604      	mov	r4, r0
 800922c:	4608      	mov	r0, r1
 800922e:	4611      	mov	r1, r2
 8009230:	602b      	str	r3, [r5, #0]
 8009232:	f7f8 fcbf 	bl	8001bb4 <_kill>
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	d102      	bne.n	8009240 <_kill_r+0x1c>
 800923a:	682b      	ldr	r3, [r5, #0]
 800923c:	b103      	cbz	r3, 8009240 <_kill_r+0x1c>
 800923e:	6023      	str	r3, [r4, #0]
 8009240:	bd38      	pop	{r3, r4, r5, pc}
 8009242:	bf00      	nop
 8009244:	200005b8 	.word	0x200005b8

08009248 <_getpid_r>:
 8009248:	f7f8 bcac 	b.w	8001ba4 <_getpid>

0800924c <_init>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	bf00      	nop
 8009250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009252:	bc08      	pop	{r3}
 8009254:	469e      	mov	lr, r3
 8009256:	4770      	bx	lr

08009258 <_fini>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	bf00      	nop
 800925c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800925e:	bc08      	pop	{r3}
 8009260:	469e      	mov	lr, r3
 8009262:	4770      	bx	lr
