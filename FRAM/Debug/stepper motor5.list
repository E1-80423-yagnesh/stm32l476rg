
stepper motor5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004934  08004934  00005934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800497c  0800497c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800497c  0800497c  0000597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004984  08004984  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004984  08004984  00005984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004988  08004988  00005988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800498c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  08004998  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004998  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128ae  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b7  00000000  00000000  000188ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0001aca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df4  00000000  00000000  0001be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273fc  00000000  00000000  0001cc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015964  00000000  00000000  00044050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5307  00000000  00000000  000599b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ecbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b80  00000000  00000000  0014ed00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00153880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800491c 	.word	0x0800491c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800491c 	.word	0x0800491c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fd82 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f81e 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004c4:	f000 f9dc 	bl	8000880 <MX_GPIO_Init>
	MX_I2C1_Init();
 80004c8:	f000 f86c 	bl	80005a4 <MX_I2C1_Init>
	MX_TIM3_Init();
 80004cc:	f000 f8aa 	bl	8000624 <MX_TIM3_Init>
	MX_UART4_Init();
 80004d0:	f000 f946 	bl	8000760 <MX_UART4_Init>
	MX_UART5_Init();
 80004d4:	f000 f974 	bl	80007c0 <MX_UART5_Init>
	MX_USART3_UART_Init();
 80004d8:	f000 f9a2 	bl	8000820 <MX_USART3_UART_Init>
	MX_TIM16_Init();
 80004dc:	f000 f91a 	bl	8000714 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	//setupSensor();
	setupMotor();
 80004e0:	f000 fa8e 	bl	8000a00 <setupMotor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(3000);
 80004e4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80004e8:	f000 fde8 	bl	80010bc <HAL_Delay>


	  rotateMotor(200,1);
 80004ec:	2101      	movs	r1, #1
 80004ee:	20c8      	movs	r0, #200	@ 0xc8
 80004f0:	f000 faae 	bl	8000a50 <rotateMotor>
//						for (int channel = 0; channel < CHANNELS; channel++)
//						{
//							printf("Channel %d: %d\r\n", channel, spectra[channel]);
//						}
//
						HAL_Delay(1000); // 1 sec delay between scans
 80004f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f8:	f000 fde0 	bl	80010bc <HAL_Delay>
	  HAL_Delay(3000);
 80004fc:	bf00      	nop
 80004fe:	e7f1      	b.n	80004e4 <main+0x2c>

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b096      	sub	sp, #88	@ 0x58
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2244      	movs	r2, #68	@ 0x44
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f004 f9d7 	bl	80048c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000522:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000526:	f001 f9d5 	bl	80018d4 <HAL_PWREx_ControlVoltageScaling>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000530:	f000 fa60 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	2302      	movs	r3, #2
 8000536:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800053c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2310      	movs	r3, #16
 8000540:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000546:	2302      	movs	r3, #2
 8000548:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800054a:	2301      	movs	r3, #1
 800054c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800054e:	230a      	movs	r3, #10
 8000550:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000552:	2307      	movs	r3, #7
 8000554:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000556:	2302      	movs	r3, #2
 8000558:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800055a:	2302      	movs	r3, #2
 800055c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fa0c 	bl	8001980 <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800056e:	f000 fa41 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	230f      	movs	r3, #15
 8000574:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000576:	2303      	movs	r3, #3
 8000578:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	2104      	movs	r1, #4
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fdd4 	bl	8002138 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000596:	f000 fa2d 	bl	80009f4 <Error_Handler>
  }
}
 800059a:	bf00      	nop
 800059c:	3758      	adds	r7, #88	@ 0x58
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005aa:	4a1c      	ldr	r2, [pc, #112]	@ (800061c <MX_I2C1_Init+0x78>)
 80005ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80005ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <MX_I2C1_Init+0x7c>)
 80005b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ba:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005bc:	2201      	movs	r2, #1
 80005be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005cc:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005de:	480e      	ldr	r0, [pc, #56]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005e0:	f001 f838 	bl	8001654 <HAL_I2C_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005ea:	f000 fa03 	bl	80009f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ee:	2100      	movs	r1, #0
 80005f0:	4809      	ldr	r0, [pc, #36]	@ (8000618 <MX_I2C1_Init+0x74>)
 80005f2:	f001 f8ca 	bl	800178a <HAL_I2CEx_ConfigAnalogFilter>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005fc:	f000 f9fa 	bl	80009f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000600:	2100      	movs	r1, #0
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <MX_I2C1_Init+0x74>)
 8000604:	f001 f90c 	bl	8001820 <HAL_I2CEx_ConfigDigitalFilter>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800060e:	f000 f9f1 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000028 	.word	0x20000028
 800061c:	40005400 	.word	0x40005400
 8000620:	10d19ce4 	.word	0x10d19ce4

08000624 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	@ 0x38
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
 8000652:	615a      	str	r2, [r3, #20]
 8000654:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000656:	4b2d      	ldr	r3, [pc, #180]	@ (800070c <MX_TIM3_Init+0xe8>)
 8000658:	4a2d      	ldr	r2, [pc, #180]	@ (8000710 <MX_TIM3_Init+0xec>)
 800065a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800065c:	4b2b      	ldr	r3, [pc, #172]	@ (800070c <MX_TIM3_Init+0xe8>)
 800065e:	224f      	movs	r2, #79	@ 0x4f
 8000660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b2a      	ldr	r3, [pc, #168]	@ (800070c <MX_TIM3_Init+0xe8>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000668:	4b28      	ldr	r3, [pc, #160]	@ (800070c <MX_TIM3_Init+0xe8>)
 800066a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800066e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <MX_TIM3_Init+0xe8>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000676:	4b25      	ldr	r3, [pc, #148]	@ (800070c <MX_TIM3_Init+0xe8>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800067c:	4823      	ldr	r0, [pc, #140]	@ (800070c <MX_TIM3_Init+0xe8>)
 800067e:	f002 fc3b 	bl	8002ef8 <HAL_TIM_Base_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000688:	f000 f9b4 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000692:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000696:	4619      	mov	r1, r3
 8000698:	481c      	ldr	r0, [pc, #112]	@ (800070c <MX_TIM3_Init+0xe8>)
 800069a:	f002 fe89 	bl	80033b0 <HAL_TIM_ConfigClockSource>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80006a4:	f000 f9a6 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006a8:	4818      	ldr	r0, [pc, #96]	@ (800070c <MX_TIM3_Init+0xe8>)
 80006aa:	f002 fd0c 	bl	80030c6 <HAL_TIM_PWM_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80006b4:	f000 f99e 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	4811      	ldr	r0, [pc, #68]	@ (800070c <MX_TIM3_Init+0xe8>)
 80006c8:	f003 fb52 	bl	8003d70 <HAL_TIMEx_MasterConfigSynchronization>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80006d2:	f000 f98f 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d6:	2360      	movs	r3, #96	@ 0x60
 80006d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	2204      	movs	r2, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4807      	ldr	r0, [pc, #28]	@ (800070c <MX_TIM3_Init+0xe8>)
 80006ee:	f002 fd4b 	bl	8003188 <HAL_TIM_PWM_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80006f8:	f000 f97c 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006fc:	4803      	ldr	r0, [pc, #12]	@ (800070c <MX_TIM3_Init+0xe8>)
 80006fe:	f000 fab7 	bl	8000c70 <HAL_TIM_MspPostInit>

}
 8000702:	bf00      	nop
 8000704:	3738      	adds	r7, #56	@ 0x38
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000007c 	.word	0x2000007c
 8000710:	40000400 	.word	0x40000400

08000714 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_TIM16_Init+0x44>)
 800071a:	4a10      	ldr	r2, [pc, #64]	@ (800075c <MX_TIM16_Init+0x48>)
 800071c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 800071e:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000720:	224f      	movs	r2, #79	@ 0x4f
 8000722:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <MX_TIM16_Init+0x44>)
 800072c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000730:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <MX_TIM16_Init+0x44>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b06      	ldr	r3, [pc, #24]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_TIM16_Init+0x44>)
 8000746:	f002 fbd7 	bl	8002ef8 <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000750:	f000 f950 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	200000c8 	.word	0x200000c8
 800075c:	40014400 	.word	0x40014400

08000760 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000764:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_UART4_Init+0x58>)
 8000766:	4a15      	ldr	r2, [pc, #84]	@ (80007bc <MX_UART4_Init+0x5c>)
 8000768:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800076a:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <MX_UART4_Init+0x58>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_UART4_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_UART4_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_UART4_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_UART4_Init+0x58>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <MX_UART4_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_UART4_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <MX_UART4_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_UART4_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <MX_UART4_Init+0x58>)
 80007a4:	f003 fb6c 	bl	8003e80 <HAL_UART_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80007ae:	f000 f921 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000114 	.word	0x20000114
 80007bc:	40004c00 	.word	0x40004c00

080007c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_UART5_Init+0x58>)
 80007c6:	4a15      	ldr	r2, [pc, #84]	@ (800081c <MX_UART5_Init+0x5c>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_UART5_Init+0x58>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_UART5_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_UART5_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_UART5_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_UART5_Init+0x58>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_UART5_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_UART5_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_UART5_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_UART5_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_UART5_Init+0x58>)
 8000804:	f003 fb3c 	bl	8003e80 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800080e:	f000 f8f1 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000019c 	.word	0x2000019c
 800081c:	40005000 	.word	0x40005000

08000820 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 8000826:	4a15      	ldr	r2, [pc, #84]	@ (800087c <MX_USART3_UART_Init+0x5c>)
 8000828:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 800082c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000830:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_USART3_UART_Init+0x58>)
 8000864:	f003 fb0c 	bl	8003e80 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f8c1 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000224 	.word	0x20000224
 800087c:	40004800 	.word	0x40004800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	@ 0x28
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b54      	ldr	r3, [pc, #336]	@ (80009e8 <MX_GPIO_Init+0x168>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089a:	4a53      	ldr	r2, [pc, #332]	@ (80009e8 <MX_GPIO_Init+0x168>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a2:	4b51      	ldr	r3, [pc, #324]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b4e      	ldr	r3, [pc, #312]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b2:	4a4d      	ldr	r2, [pc, #308]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ba:	4b4b      	ldr	r3, [pc, #300]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b48      	ldr	r3, [pc, #288]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	4a47      	ldr	r2, [pc, #284]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d2:	4b45      	ldr	r3, [pc, #276]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	4b42      	ldr	r3, [pc, #264]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	4a41      	ldr	r2, [pc, #260]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ea:	4b3f      	ldr	r3, [pc, #252]	@ (80009e8 <MX_GPIO_Init+0x168>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	f003 0308 	and.w	r3, r3, #8
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80008f6:	2200      	movs	r2, #0
 80008f8:	f640 7182 	movw	r1, #3970	@ 0xf82
 80008fc:	483b      	ldr	r0, [pc, #236]	@ (80009ec <MX_GPIO_Init+0x16c>)
 80008fe:	f000 fe91 	bl	8001624 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8000908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090c:	f000 fe8a 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000916:	4836      	ldr	r0, [pc, #216]	@ (80009f0 <MX_GPIO_Init+0x170>)
 8000918:	f000 fe84 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800091c:	2301      	movs	r3, #1
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	482f      	ldr	r0, [pc, #188]	@ (80009ec <MX_GPIO_Init+0x16c>)
 8000930:	f000 fcce 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000934:	f640 7382 	movw	r3, #3970	@ 0xf82
 8000938:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4827      	ldr	r0, [pc, #156]	@ (80009ec <MX_GPIO_Init+0x16c>)
 800094e:	f000 fcbf 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8000952:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f000 fcaf 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000972:	2320      	movs	r3, #32
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000988:	f000 fca2 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800098c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4812      	ldr	r0, [pc, #72]	@ (80009f0 <MX_GPIO_Init+0x170>)
 80009a6:	f000 fc93 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <MX_GPIO_Init+0x170>)
 80009c0:	f000 fc86 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009dc:	f000 fc78 	bl	80012d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	@ 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000800 	.word	0x48000800
 80009f0:	48000400 	.word	0x48000400

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <setupMotor>:
#include <stdio.h>



void setupMotor(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    // Power-on reset sequence
    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, GPIO_PIN_SET);  // Disable first
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a0a:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <setupMotor+0x48>)
 8000a0c:	f000 fe0a 	bl	8001624 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Wait 10ms
 8000a10:	200a      	movs	r0, #10
 8000a12:	f000 fb53 	bl	80010bc <HAL_Delay>

    // Configure pins before enabling
    HAL_GPIO_WritePin(PDN_UART_TX_PORT, PDN_UART_TX_PIN, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a1c:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <setupMotor+0x4c>)
 8000a1e:	f000 fe01 	bl	8001624 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PDN_UART_RX_PORT, PDN_UART_RX_PIN, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2104      	movs	r1, #4
 8000a26:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <setupMotor+0x48>)
 8000a28:	f000 fdfc 	bl	8001624 <HAL_GPIO_WritePin>
    //setMicrostepping(1, 1);

    // Enable stealth mode
//    enableStealthMode();

    HAL_Delay(1);  // Short delay before enabling
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 fb45 	bl	80010bc <HAL_Delay>

    // Now enable the driver
    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, GPIO_PIN_RESET);  // Enable motor
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <setupMotor+0x48>)
 8000a3a:	f000 fdf3 	bl	8001624 <HAL_GPIO_WritePin>

    HAL_Delay(10);
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f000 fb3c 	bl	80010bc <HAL_Delay>

 //   setupLamp();
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	48000c00 	.word	0x48000c00

08000a50 <rotateMotor>:
}



void rotateMotor(int steps, uint8_t clockwise)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
    // Set motor direction
    if(clockwise)
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d006      	beq.n	8000a70 <rotateMotor+0x20>
    {
        HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a68:	4815      	ldr	r0, [pc, #84]	@ (8000ac0 <rotateMotor+0x70>)
 8000a6a:	f000 fddb 	bl	8001624 <HAL_GPIO_WritePin>
 8000a6e:	e005      	b.n	8000a7c <rotateMotor+0x2c>
    }
    else
    {
        HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a76:	4812      	ldr	r0, [pc, #72]	@ (8000ac0 <rotateMotor+0x70>)
 8000a78:	f000 fdd4 	bl	8001624 <HAL_GPIO_WritePin>
    }

    // Step the motor
    for(int i = 0; i < steps; i++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	e014      	b.n	8000aac <rotateMotor+0x5c>
    {
        HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000a82:	2201      	movs	r2, #1
 8000a84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a88:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <rotateMotor+0x70>)
 8000a8a:	f000 fdcb 	bl	8001624 <HAL_GPIO_WritePin>

        microsecond_delay(200);
 8000a8e:	20c8      	movs	r0, #200	@ 0xc8
 8000a90:	f000 f818 	bl	8000ac4 <microsecond_delay>
        HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a9a:	4809      	ldr	r0, [pc, #36]	@ (8000ac0 <rotateMotor+0x70>)
 8000a9c:	f000 fdc2 	bl	8001624 <HAL_GPIO_WritePin>

        microsecond_delay(200);
 8000aa0:	20c8      	movs	r0, #200	@ 0xc8
 8000aa2:	f000 f80f 	bl	8000ac4 <microsecond_delay>
    for(int i = 0; i < steps; i++)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbe6      	blt.n	8000a82 <rotateMotor+0x32>
    }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	48000800 	.word	0x48000800

08000ac4 <microsecond_delay>:
    return 0;
}


void microsecond_delay(uint16_t microseconds)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim16, 0);
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <microsecond_delay+0x3c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	@ 0x24
	 HAL_TIM_Base_Start(&htim16);
 8000ad6:	480a      	ldr	r0, [pc, #40]	@ (8000b00 <microsecond_delay+0x3c>)
 8000ad8:	f002 fa66 	bl	8002fa8 <HAL_TIM_Base_Start>
    __HAL_TIM_SET_COUNTER(&htim16, 0);
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <microsecond_delay+0x3c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	@ 0x24




    while (__HAL_TIM_GET_COUNTER(&htim16) < microseconds);
 8000ae4:	bf00      	nop
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <microsecond_delay+0x3c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d3f9      	bcc.n	8000ae6 <microsecond_delay+0x22>
    HAL_TIM_Base_Stop(&htim16);
 8000af2:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <microsecond_delay+0x3c>)
 8000af4:	f002 fac0 	bl	8003078 <HAL_TIM_Base_Stop>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000c8 	.word	0x200000c8

08000b04 <HAL_MspInit>:
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_I2C_MspInit>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2288      	movs	r2, #136	@ 0x88
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fea8 	bl	80048c2 <memset>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <HAL_I2C_MspInit+0xb0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d13a      	bne.n	8000bf2 <HAL_I2C_MspInit+0xa6>
 8000b7c:	2340      	movs	r3, #64	@ 0x40
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	2300      	movs	r3, #0
 8000b82:	667b      	str	r3, [r7, #100]	@ 0x64
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fcf9 	bl	8002580 <HAL_RCCEx_PeriphCLKConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_I2C_MspInit+0x4c>
 8000b94:	f7ff ff2e 	bl	80009f4 <Error_Handler>
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_I2C_MspInit+0xb4>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9c:	4a18      	ldr	r2, [pc, #96]	@ (8000c00 <HAL_I2C_MspInit+0xb4>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <HAL_I2C_MspInit+0xb4>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	23c0      	movs	r3, #192	@ 0xc0
 8000bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000bc8:	2304      	movs	r3, #4
 8000bca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000bce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <HAL_I2C_MspInit+0xb8>)
 8000bd6:	f000 fb7b 	bl	80012d0 <HAL_GPIO_Init>
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_I2C_MspInit+0xb4>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bde:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <HAL_I2C_MspInit+0xb4>)
 8000be0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_I2C_MspInit+0xb4>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	bf00      	nop
 8000bf4:	37b0      	adds	r7, #176	@ 0xb0
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40005400 	.word	0x40005400
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000400 	.word	0x48000400

08000c08 <HAL_TIM_Base_MspInit>:
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <HAL_TIM_Base_MspInit+0x5c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10c      	bne.n	8000c34 <HAL_TIM_Base_MspInit+0x2c>
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <HAL_TIM_Base_MspInit+0x60>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <HAL_TIM_Base_MspInit+0x60>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <HAL_TIM_Base_MspInit+0x60>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	e010      	b.n	8000c56 <HAL_TIM_Base_MspInit+0x4e>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <HAL_TIM_Base_MspInit+0x64>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d10b      	bne.n	8000c56 <HAL_TIM_Base_MspInit+0x4e>
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_TIM_Base_MspInit+0x60>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <HAL_TIM_Base_MspInit+0x60>)
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c48:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <HAL_TIM_Base_MspInit+0x60>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40000400 	.word	0x40000400
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40014400 	.word	0x40014400

08000c70 <HAL_TIM_MspPostInit>:
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a11      	ldr	r2, [pc, #68]	@ (8000cd4 <HAL_TIM_MspPostInit+0x64>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d11c      	bne.n	8000ccc <HAL_TIM_MspPostInit+0x5c>
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_TIM_MspPostInit+0x68>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	4a10      	ldr	r2, [pc, #64]	@ (8000cd8 <HAL_TIM_MspPostInit+0x68>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_TIM_MspPostInit+0x68>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	2380      	movs	r3, #128	@ 0x80
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	2302      	movs	r3, #2
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc8:	f000 fb02 	bl	80012d0 <HAL_GPIO_Init>
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_UART_MspInit>:
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0b0      	sub	sp, #192	@ 0xc0
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	2288      	movs	r2, #136	@ 0x88
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 fde0 	bl	80048c2 <memset>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a73      	ldr	r2, [pc, #460]	@ (8000ed4 <HAL_UART_MspInit+0x1f8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d13c      	bne.n	8000d86 <HAL_UART_MspInit+0xaa>
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d10:	2300      	movs	r3, #0
 8000d12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fc31 	bl	8002580 <HAL_RCCEx_PeriphCLKConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_UART_MspInit+0x4c>
 8000d24:	f7ff fe66 	bl	80009f4 <Error_Handler>
 8000d28:	4b6b      	ldr	r3, [pc, #428]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000d2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d34:	4b68      	ldr	r3, [pc, #416]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	6a3b      	ldr	r3, [r7, #32]
 8000d40:	4b65      	ldr	r3, [pc, #404]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	4a64      	ldr	r2, [pc, #400]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4c:	4b62      	ldr	r3, [pc, #392]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2303      	movs	r3, #3
 8000d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000d70:	2308      	movs	r3, #8
 8000d72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000d76:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d80:	f000 faa6 	bl	80012d0 <HAL_GPIO_Init>
 8000d84:	e0a2      	b.n	8000ecc <HAL_UART_MspInit+0x1f0>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a54      	ldr	r2, [pc, #336]	@ (8000edc <HAL_UART_MspInit+0x200>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d15d      	bne.n	8000e4c <HAL_UART_MspInit+0x170>
 8000d90:	2310      	movs	r3, #16
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d94:	2300      	movs	r3, #0
 8000d96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 fbef 	bl	8002580 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_UART_MspInit+0xd0>
 8000da8:	f7ff fe24 	bl	80009f4 <Error_Handler>
 8000dac:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db0:	4a49      	ldr	r2, [pc, #292]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db8:	4b47      	ldr	r3, [pc, #284]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4b44      	ldr	r3, [pc, #272]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc8:	4a43      	ldr	r2, [pc, #268]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd0:	4b41      	ldr	r3, [pc, #260]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000de2:	f043 0308 	orr.w	r3, r3, #8
 8000de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000e08:	2303      	movs	r3, #3
 8000e0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000e0e:	2308      	movs	r3, #8
 8000e10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000e14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4831      	ldr	r0, [pc, #196]	@ (8000ee0 <HAL_UART_MspInit+0x204>)
 8000e1c:	f000 fa58 	bl	80012d0 <HAL_GPIO_Init>
 8000e20:	2304      	movs	r3, #4
 8000e22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000e32:	2303      	movs	r3, #3
 8000e34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000e38:	2308      	movs	r3, #8
 8000e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000e3e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e42:	4619      	mov	r1, r3
 8000e44:	4827      	ldr	r0, [pc, #156]	@ (8000ee4 <HAL_UART_MspInit+0x208>)
 8000e46:	f000 fa43 	bl	80012d0 <HAL_GPIO_Init>
 8000e4a:	e03f      	b.n	8000ecc <HAL_UART_MspInit+0x1f0>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a25      	ldr	r2, [pc, #148]	@ (8000ee8 <HAL_UART_MspInit+0x20c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d13a      	bne.n	8000ecc <HAL_UART_MspInit+0x1f0>
 8000e56:	2304      	movs	r3, #4
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fb8c 	bl	8002580 <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0x196>
 8000e6e:	f7ff fdc1 	bl	80009f4 <Error_Handler>
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	4a18      	ldr	r2, [pc, #96]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <HAL_UART_MspInit+0x1fc>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	2330      	movs	r3, #48	@ 0x30
 8000ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000eba:	2307      	movs	r3, #7
 8000ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000ec0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	@ (8000ee0 <HAL_UART_MspInit+0x204>)
 8000ec8:	f000 fa02 	bl	80012d0 <HAL_GPIO_Init>
 8000ecc:	bf00      	nop
 8000ece:	37c0      	adds	r7, #192	@ 0xc0
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40004c00 	.word	0x40004c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40005000 	.word	0x40005000
 8000ee0:	48000800 	.word	0x48000800
 8000ee4:	48000c00 	.word	0x48000c00
 8000ee8:	40004800 	.word	0x40004800

08000eec <NMI_Handler>:
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	f000 f89b 	bl	800107c <HAL_IncTick>
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <SystemInit>:
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f74:	f7ff ffea 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f003 fc99 	bl	80048d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fa2:	f7ff fa89 	bl	80004b8 <main>

08000fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fb4:	0800498c 	.word	0x0800498c
  ldr r2, =_sbss
 8000fb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fbc:	200002b0 	.word	0x200002b0

08000fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_2_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fce:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <HAL_Init+0x3c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_Init+0x3c>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f000 f944 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f000 f80f 	bl	8001004 <HAL_InitTick>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	e001      	b.n	8000ff6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ff2:	f7ff fd87 	bl	8000b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40022000 	.word	0x40022000

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <HAL_InitTick+0x6c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d023      	beq.n	8001060 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_InitTick+0x70>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b14      	ldr	r3, [pc, #80]	@ (8001070 <HAL_InitTick+0x6c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f941 	bl	80012b6 <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10f      	bne.n	800105a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d809      	bhi.n	8001054 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f919 	bl	800127e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800104c:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_InitTick+0x74>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e007      	b.n	8001064 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e004      	b.n	8001064 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	e001      	b.n	8001064 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	20000000 	.word	0x20000000
 8001078:	20000004 	.word	0x20000004

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	200002ac 	.word	0x200002ac

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200002ac 	.word	0x200002ac

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	@ (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f7ff ff8e 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff47 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff5c 	bl	800114c <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff8e 	bl	80011bc <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffb0 	bl	8001224 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e17f      	b.n	80015e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2101      	movs	r1, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8171 	beq.w	80015da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d005      	beq.n	8001310 <HAL_GPIO_Init+0x40>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d130      	bne.n	8001372 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001346:	2201      	movs	r2, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 0201 	and.w	r2, r3, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b03      	cmp	r3, #3
 800137c:	d118      	bne.n	80013b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001384:	2201      	movs	r2, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	f003 0201 	and.w	r2, r3, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d017      	beq.n	80013ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d123      	bne.n	8001440 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	220f      	movs	r2, #15
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	08da      	lsrs	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3208      	adds	r2, #8
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0203 	and.w	r2, r3, #3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80ac 	beq.w	80015da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	4b5f      	ldr	r3, [pc, #380]	@ (8001600 <HAL_GPIO_Init+0x330>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001486:	4a5e      	ldr	r2, [pc, #376]	@ (8001600 <HAL_GPIO_Init+0x330>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6613      	str	r3, [r2, #96]	@ 0x60
 800148e:	4b5c      	ldr	r3, [pc, #368]	@ (8001600 <HAL_GPIO_Init+0x330>)
 8001490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800149a:	4a5a      	ldr	r2, [pc, #360]	@ (8001604 <HAL_GPIO_Init+0x334>)
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80014c4:	d025      	beq.n	8001512 <HAL_GPIO_Init+0x242>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001608 <HAL_GPIO_Init+0x338>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01f      	beq.n	800150e <HAL_GPIO_Init+0x23e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4e      	ldr	r2, [pc, #312]	@ (800160c <HAL_GPIO_Init+0x33c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d019      	beq.n	800150a <HAL_GPIO_Init+0x23a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001610 <HAL_GPIO_Init+0x340>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0x236>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001614 <HAL_GPIO_Init+0x344>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00d      	beq.n	8001502 <HAL_GPIO_Init+0x232>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001618 <HAL_GPIO_Init+0x348>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d007      	beq.n	80014fe <HAL_GPIO_Init+0x22e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4a      	ldr	r2, [pc, #296]	@ (800161c <HAL_GPIO_Init+0x34c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_GPIO_Init+0x22a>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e00c      	b.n	8001514 <HAL_GPIO_Init+0x244>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e00a      	b.n	8001514 <HAL_GPIO_Init+0x244>
 80014fe:	2305      	movs	r3, #5
 8001500:	e008      	b.n	8001514 <HAL_GPIO_Init+0x244>
 8001502:	2304      	movs	r3, #4
 8001504:	e006      	b.n	8001514 <HAL_GPIO_Init+0x244>
 8001506:	2303      	movs	r3, #3
 8001508:	e004      	b.n	8001514 <HAL_GPIO_Init+0x244>
 800150a:	2302      	movs	r3, #2
 800150c:	e002      	b.n	8001514 <HAL_GPIO_Init+0x244>
 800150e:	2301      	movs	r3, #1
 8001510:	e000      	b.n	8001514 <HAL_GPIO_Init+0x244>
 8001512:	2300      	movs	r3, #0
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	f002 0203 	and.w	r2, r2, #3
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	4093      	lsls	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001524:	4937      	ldr	r1, [pc, #220]	@ (8001604 <HAL_GPIO_Init+0x334>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001532:	4b3b      	ldr	r3, [pc, #236]	@ (8001620 <HAL_GPIO_Init+0x350>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4313      	orrs	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001556:	4a32      	ldr	r2, [pc, #200]	@ (8001620 <HAL_GPIO_Init+0x350>)
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800155c:	4b30      	ldr	r3, [pc, #192]	@ (8001620 <HAL_GPIO_Init+0x350>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001580:	4a27      	ldr	r2, [pc, #156]	@ (8001620 <HAL_GPIO_Init+0x350>)
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <HAL_GPIO_Init+0x350>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <HAL_GPIO_Init+0x350>)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <HAL_GPIO_Init+0x350>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d4:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <HAL_GPIO_Init+0x350>)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f47f ae78 	bne.w	80012e0 <HAL_GPIO_Init+0x10>
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	48000400 	.word	0x48000400
 800160c:	48000800 	.word	0x48000800
 8001610:	48000c00 	.word	0x48000c00
 8001614:	48001000 	.word	0x48001000
 8001618:	48001400 	.word	0x48001400
 800161c:	48001800 	.word	0x48001800
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001640:	e002      	b.n	8001648 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e08d      	b.n	8001782 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fa66 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2224      	movs	r2, #36	@ 0x24
 8001684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d107      	bne.n	80016ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	e006      	b.n	80016dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80016da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d108      	bne.n	80016f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	e007      	b.n	8001706 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001704:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001714:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001718:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001728:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69d9      	ldr	r1, [r3, #28]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1a      	ldr	r2, [r3, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b20      	cmp	r3, #32
 800179e:	d138      	bne.n	8001812 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e032      	b.n	8001814 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2224      	movs	r2, #36	@ 0x24
 80017ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017dc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0201 	orr.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2220      	movs	r2, #32
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b20      	cmp	r3, #32
 8001834:	d139      	bne.n	80018aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001840:	2302      	movs	r3, #2
 8001842:	e033      	b.n	80018ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2224      	movs	r2, #36	@ 0x24
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0201 	bic.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001872:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018aa:	2302      	movs	r3, #2
  }
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018bc:	4b04      	ldr	r3, [pc, #16]	@ (80018d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40007000 	.word	0x40007000

080018d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018e2:	d130      	bne.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018f0:	d038      	beq.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f2:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001902:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2232      	movs	r2, #50	@ 0x32
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	4a1b      	ldr	r2, [pc, #108]	@ (800197c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800190e:	fba2 2303 	umull	r2, r3, r2, r3
 8001912:	0c9b      	lsrs	r3, r3, #18
 8001914:	3301      	adds	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001918:	e002      	b.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3b01      	subs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800192c:	d102      	bne.n	8001934 <HAL_PWREx_ControlVoltageScaling+0x60>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f2      	bne.n	800191a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800193c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001940:	d110      	bne.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e00f      	b.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001946:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800194e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001952:	d007      	beq.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800195c:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800195e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001962:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40007000 	.word	0x40007000
 8001978:	20000000 	.word	0x20000000
 800197c:	431bde83 	.word	0x431bde83

08001980 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e3ca      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001992:	4b97      	ldr	r3, [pc, #604]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800199c:	4b94      	ldr	r3, [pc, #592]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80e4 	beq.w	8001b7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_RCC_OscConfig+0x4a>
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	f040 808b 	bne.w	8001ad8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	f040 8087 	bne.w	8001ad8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ca:	4b89      	ldr	r3, [pc, #548]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_RCC_OscConfig+0x62>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e3a2      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1a      	ldr	r2, [r3, #32]
 80019e6:	4b82      	ldr	r3, [pc, #520]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d004      	beq.n	80019fc <HAL_RCC_OscConfig+0x7c>
 80019f2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019fa:	e005      	b.n	8001a08 <HAL_RCC_OscConfig+0x88>
 80019fc:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d223      	bcs.n	8001a54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fd55 	bl	80024c0 <RCC_SetFlashLatencyFromMSIRange>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e383      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a20:	4b73      	ldr	r3, [pc, #460]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a72      	ldr	r2, [pc, #456]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b70      	ldr	r3, [pc, #448]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	496d      	ldr	r1, [pc, #436]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	4968      	ldr	r1, [pc, #416]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
 8001a52:	e025      	b.n	8001aa0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a54:	4b66      	ldr	r3, [pc, #408]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a65      	ldr	r2, [pc, #404]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b63      	ldr	r3, [pc, #396]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	4960      	ldr	r1, [pc, #384]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a72:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	495b      	ldr	r1, [pc, #364]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fd15 	bl	80024c0 <RCC_SetFlashLatencyFromMSIRange>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e343      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aa0:	f000 fc4a 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b52      	ldr	r3, [pc, #328]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	f003 030f 	and.w	r3, r3, #15
 8001ab0:	4950      	ldr	r1, [pc, #320]	@ (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001ab2:	5ccb      	ldrb	r3, [r1, r3]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8001abc:	4a4e      	ldr	r2, [pc, #312]	@ (8001bf8 <HAL_RCC_OscConfig+0x278>)
 8001abe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ac0:	4b4e      	ldr	r3, [pc, #312]	@ (8001bfc <HAL_RCC_OscConfig+0x27c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fa9d 	bl	8001004 <HAL_InitTick>
 8001aca:	4603      	mov	r3, r0
 8001acc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d052      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	e327      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d032      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ae0:	4b43      	ldr	r3, [pc, #268]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a42      	ldr	r2, [pc, #264]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fada 	bl	80010a4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af4:	f7ff fad6 	bl	80010a4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e310      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b06:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b12:	4b37      	ldr	r3, [pc, #220]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a36      	ldr	r2, [pc, #216]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b18:	f043 0308 	orr.w	r3, r3, #8
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b34      	ldr	r3, [pc, #208]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4931      	ldr	r1, [pc, #196]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b30:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	492c      	ldr	r1, [pc, #176]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
 8001b44:	e01a      	b.n	8001b7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b46:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a29      	ldr	r2, [pc, #164]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b52:	f7ff faa7 	bl	80010a4 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b5a:	f7ff faa3 	bl	80010a4 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e2dd      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b6c:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x1da>
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d074      	beq.n	8001c72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d005      	beq.n	8001b9a <HAL_RCC_OscConfig+0x21a>
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d10e      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d10b      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d064      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d160      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e2ba      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x24a>
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e026      	b.n	8001c18 <HAL_RCC_OscConfig+0x298>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd2:	d115      	bne.n	8001c00 <HAL_RCC_OscConfig+0x280>
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001bda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b03      	ldr	r3, [pc, #12]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a02      	ldr	r2, [pc, #8]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x298>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08004934 	.word	0x08004934
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	4ba0      	ldr	r3, [pc, #640]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a9f      	ldr	r2, [pc, #636]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b9d      	ldr	r3, [pc, #628]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a9c      	ldr	r2, [pc, #624]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fa40 	bl	80010a4 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff fa3c 	bl	80010a4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b64      	cmp	r3, #100	@ 0x64
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e276      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3a:	4b92      	ldr	r3, [pc, #584]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x2a8>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff fa2c 	bl	80010a4 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff fa28 	bl	80010a4 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	@ 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e262      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c62:	4b88      	ldr	r3, [pc, #544]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2d0>
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d060      	beq.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_OscConfig+0x310>
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d119      	bne.n	8001cbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d116      	bne.n	8001cbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c90:	4b7c      	ldr	r3, [pc, #496]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x328>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e23f      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b76      	ldr	r3, [pc, #472]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	061b      	lsls	r3, r3, #24
 8001cb6:	4973      	ldr	r1, [pc, #460]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cbc:	e040      	b.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d023      	beq.n	8001d0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6e      	ldr	r2, [pc, #440]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f9e7 	bl	80010a4 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff f9e3 	bl	80010a4 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e21d      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cec:	4b65      	ldr	r3, [pc, #404]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b62      	ldr	r3, [pc, #392]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	061b      	lsls	r3, r3, #24
 8001d06:	495f      	ldr	r1, [pc, #380]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
 8001d0c:	e018      	b.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a5c      	ldr	r2, [pc, #368]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f9c3 	bl	80010a4 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d22:	f7ff f9bf 	bl	80010a4 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e1f9      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d34:	4b53      	ldr	r3, [pc, #332]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d03c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01c      	beq.n	8001d8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d54:	4b4b      	ldr	r3, [pc, #300]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f99e 	bl	80010a4 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f99a 	bl	80010a4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1d4      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d7e:	4b41      	ldr	r3, [pc, #260]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ef      	beq.n	8001d6c <HAL_RCC_OscConfig+0x3ec>
 8001d8c:	e01b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d94:	4a3b      	ldr	r2, [pc, #236]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f981 	bl	80010a4 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da6:	f7ff f97d 	bl	80010a4 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1b7      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db8:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ef      	bne.n	8001da6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80a6 	beq.w	8001f20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10d      	bne.n	8001e00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	4a26      	ldr	r2, [pc, #152]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8001df0:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e00:	4b21      	ldr	r3, [pc, #132]	@ (8001e88 <HAL_RCC_OscConfig+0x508>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d118      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e88 <HAL_RCC_OscConfig+0x508>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1d      	ldr	r2, [pc, #116]	@ (8001e88 <HAL_RCC_OscConfig+0x508>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e18:	f7ff f944 	bl	80010a4 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e20:	f7ff f940 	bl	80010a4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e17a      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_RCC_OscConfig+0x508>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4d8>
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e56:	e029      	b.n	8001eac <HAL_RCC_OscConfig+0x52c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d115      	bne.n	8001e8c <HAL_RCC_OscConfig+0x50c>
 8001e60:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e66:	4a07      	ldr	r2, [pc, #28]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e70:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e76:	4a03      	ldr	r2, [pc, #12]	@ (8001e84 <HAL_RCC_OscConfig+0x504>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e80:	e014      	b.n	8001eac <HAL_RCC_OscConfig+0x52c>
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e92:	4a9b      	ldr	r2, [pc, #620]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e9c:	4b98      	ldr	r3, [pc, #608]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea2:	4a97      	ldr	r2, [pc, #604]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d016      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f8f6 	bl	80010a4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f8f2 	bl	80010a4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e12a      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ed      	beq.n	8001ebc <HAL_RCC_OscConfig+0x53c>
 8001ee0:	e015      	b.n	8001f0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f8df 	bl	80010a4 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7ff f8db 	bl	80010a4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e113      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f00:	4b7f      	ldr	r3, [pc, #508]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1ed      	bne.n	8001eea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f0e:	7ffb      	ldrb	r3, [r7, #31]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f14:	4b7a      	ldr	r3, [pc, #488]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f18:	4a79      	ldr	r2, [pc, #484]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80fe 	beq.w	8002126 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	f040 80d0 	bne.w	80020d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f34:	4b72      	ldr	r3, [pc, #456]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d130      	bne.n	8001faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	3b01      	subs	r3, #1
 8001f54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d127      	bne.n	8001faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d11f      	bne.n	8001faa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f74:	2a07      	cmp	r2, #7
 8001f76:	bf14      	ite	ne
 8001f78:	2201      	movne	r2, #1
 8001f7a:	2200      	moveq	r2, #0
 8001f7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d113      	bne.n	8001faa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8c:	085b      	lsrs	r3, r3, #1
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d06e      	beq.n	8002088 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	d069      	beq.n	8002084 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fb0:	4b53      	ldr	r3, [pc, #332]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fbc:	4b50      	ldr	r3, [pc, #320]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0ad      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fd8:	f7ff f864 	bl	80010a4 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7ff f860 	bl	80010a4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e09a      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff2:	4b43      	ldr	r3, [pc, #268]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ffe:	4b40      	ldr	r3, [pc, #256]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	4b40      	ldr	r3, [pc, #256]	@ (8002104 <HAL_RCC_OscConfig+0x784>)
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800200e:	3a01      	subs	r2, #1
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	4311      	orrs	r1, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002018:	0212      	lsls	r2, r2, #8
 800201a:	4311      	orrs	r1, r2
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002020:	0852      	lsrs	r2, r2, #1
 8002022:	3a01      	subs	r2, #1
 8002024:	0552      	lsls	r2, r2, #21
 8002026:	4311      	orrs	r1, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800202c:	0852      	lsrs	r2, r2, #1
 800202e:	3a01      	subs	r2, #1
 8002030:	0652      	lsls	r2, r2, #25
 8002032:	4311      	orrs	r1, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002038:	0912      	lsrs	r2, r2, #4
 800203a:	0452      	lsls	r2, r2, #17
 800203c:	430a      	orrs	r2, r1
 800203e:	4930      	ldr	r1, [pc, #192]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8002040:	4313      	orrs	r3, r2
 8002042:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002044:	4b2e      	ldr	r3, [pc, #184]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a2d      	ldr	r2, [pc, #180]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 800204a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800204e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002050:	4b2b      	ldr	r3, [pc, #172]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a2a      	ldr	r2, [pc, #168]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800205a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800205c:	f7ff f822 	bl	80010a4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff f81e 	bl	80010a4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e058      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002076:	4b22      	ldr	r3, [pc, #136]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002082:	e050      	b.n	8002126 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e04f      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d148      	bne.n	8002126 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a19      	ldr	r2, [pc, #100]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800209e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020a0:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a16      	ldr	r2, [pc, #88]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020ac:	f7fe fffa 	bl	80010a4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fff6 	bl	80010a4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e030      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x734>
 80020d2:	e028      	b.n	8002126 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d023      	beq.n	8002122 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a08      	ldr	r2, [pc, #32]	@ (8002100 <HAL_RCC_OscConfig+0x780>)
 80020e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7fe ffdd 	bl	80010a4 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ec:	e00c      	b.n	8002108 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7fe ffd9 	bl	80010a4 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d905      	bls.n	8002108 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e013      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
 8002100:	40021000 	.word	0x40021000
 8002104:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <HAL_RCC_OscConfig+0x7b0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ec      	bne.n	80020ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_RCC_OscConfig+0x7b0>)
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	4905      	ldr	r1, [pc, #20]	@ (8002130 <HAL_RCC_OscConfig+0x7b0>)
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_RCC_OscConfig+0x7b4>)
 800211c:	4013      	ands	r3, r2
 800211e:	60cb      	str	r3, [r1, #12]
 8002120:	e001      	b.n	8002126 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	feeefffc 	.word	0xfeeefffc

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0e7      	b.n	800231c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b75      	ldr	r3, [pc, #468]	@ (8002324 <HAL_RCC_ClockConfig+0x1ec>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d910      	bls.n	800217c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b72      	ldr	r3, [pc, #456]	@ (8002324 <HAL_RCC_ClockConfig+0x1ec>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	4970      	ldr	r1, [pc, #448]	@ (8002324 <HAL_RCC_ClockConfig+0x1ec>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b6e      	ldr	r3, [pc, #440]	@ (8002324 <HAL_RCC_ClockConfig+0x1ec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0cf      	b.n	800231c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d010      	beq.n	80021aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	4b66      	ldr	r3, [pc, #408]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002194:	429a      	cmp	r2, r3
 8002196:	d908      	bls.n	80021aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b63      	ldr	r3, [pc, #396]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4960      	ldr	r1, [pc, #384]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d04c      	beq.n	8002250 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	4b5a      	ldr	r3, [pc, #360]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d121      	bne.n	800220e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0a6      	b.n	800231c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d6:	4b54      	ldr	r3, [pc, #336]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d115      	bne.n	800220e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e09a      	b.n	800231c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e08e      	b.n	800231c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e086      	b.n	800231c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b46      	ldr	r3, [pc, #280]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4943      	ldr	r1, [pc, #268]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002220:	f7fe ff40 	bl	80010a4 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7fe ff3c 	bl	80010a4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e06e      	b.n	800231c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d010      	beq.n	800227e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002268:	429a      	cmp	r2, r3
 800226a:	d208      	bcs.n	800227e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b2e      	ldr	r3, [pc, #184]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	492b      	ldr	r1, [pc, #172]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227e:	4b29      	ldr	r3, [pc, #164]	@ (8002324 <HAL_RCC_ClockConfig+0x1ec>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d210      	bcs.n	80022ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <HAL_RCC_ClockConfig+0x1ec>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 0207 	bic.w	r2, r3, #7
 8002294:	4923      	ldr	r1, [pc, #140]	@ (8002324 <HAL_RCC_ClockConfig+0x1ec>)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229c:	4b21      	ldr	r3, [pc, #132]	@ (8002324 <HAL_RCC_ClockConfig+0x1ec>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e036      	b.n	800231c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	4918      	ldr	r1, [pc, #96]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d009      	beq.n	80022ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d8:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4910      	ldr	r1, [pc, #64]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ec:	f000 f824 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	490b      	ldr	r1, [pc, #44]	@ (800232c <HAL_RCC_ClockConfig+0x1f4>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_RCC_ClockConfig+0x1f8>)
 800230a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <HAL_RCC_ClockConfig+0x1fc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fe77 	bl	8001004 <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	72fb      	strb	r3, [r7, #11]

  return status;
 800231a:	7afb      	ldrb	r3, [r7, #11]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40022000 	.word	0x40022000
 8002328:	40021000 	.word	0x40021000
 800232c:	08004934 	.word	0x08004934
 8002330:	20000000 	.word	0x20000000
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002346:	4b3e      	ldr	r3, [pc, #248]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002350:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x34>
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d121      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d11e      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800236c:	4b34      	ldr	r3, [pc, #208]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002378:	4b31      	ldr	r3, [pc, #196]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 800237a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e005      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002388:	4b2d      	ldr	r3, [pc, #180]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002394:	4a2b      	ldr	r2, [pc, #172]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10d      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b0:	4b25      	ldr	r3, [pc, #148]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x110>)
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	e004      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023bc:	4b23      	ldr	r3, [pc, #140]	@ (800244c <HAL_RCC_GetSysClockFreq+0x114>)
 80023be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d134      	bne.n	8002430 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d003      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0xa6>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d003      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0xac>
 80023dc:	e005      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023de:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x110>)
 80023e0:	617b      	str	r3, [r7, #20]
      break;
 80023e2:	e005      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023e4:	4b19      	ldr	r3, [pc, #100]	@ (800244c <HAL_RCC_GetSysClockFreq+0x114>)
 80023e6:	617b      	str	r3, [r7, #20]
      break;
 80023e8:	e002      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	617b      	str	r3, [r7, #20]
      break;
 80023ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f0:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	091b      	lsrs	r3, r3, #4
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	3301      	adds	r3, #1
 80023fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	fb03 f202 	mul.w	r2, r3, r2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x108>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	0e5b      	lsrs	r3, r3, #25
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	3301      	adds	r3, #1
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002430:	69bb      	ldr	r3, [r7, #24]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	@ 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	0800494c 	.word	0x0800494c
 8002448:	00f42400 	.word	0x00f42400
 800244c:	007a1200 	.word	0x007a1200

08002450 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002454:	4b03      	ldr	r3, [pc, #12]	@ (8002464 <HAL_RCC_GetHCLKFreq+0x14>)
 8002456:	681b      	ldr	r3, [r3, #0]
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000000 	.word	0x20000000

08002468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800246c:	f7ff fff0 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4904      	ldr	r1, [pc, #16]	@ (8002490 <HAL_RCC_GetPCLK1Freq+0x28>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	08004944 	.word	0x08004944

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002498:	f7ff ffda 	bl	8002450 <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0adb      	lsrs	r3, r3, #11
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4904      	ldr	r1, [pc, #16]	@ (80024bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08004944 	.word	0x08004944

080024c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024d8:	f7ff f9ee 	bl	80018b8 <HAL_PWREx_GetVoltageRange>
 80024dc:	6178      	str	r0, [r7, #20]
 80024de:	e014      	b.n	800250a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	4a24      	ldr	r2, [pc, #144]	@ (8002578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ec:	4b22      	ldr	r3, [pc, #136]	@ (8002578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024f8:	f7ff f9de 	bl	80018b8 <HAL_PWREx_GetVoltageRange>
 80024fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	4a1d      	ldr	r2, [pc, #116]	@ (8002578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002508:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002510:	d10b      	bne.n	800252a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b80      	cmp	r3, #128	@ 0x80
 8002516:	d919      	bls.n	800254c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2ba0      	cmp	r3, #160	@ 0xa0
 800251c:	d902      	bls.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800251e:	2302      	movs	r3, #2
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e013      	b.n	800254c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002524:	2301      	movs	r3, #1
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	e010      	b.n	800254c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b80      	cmp	r3, #128	@ 0x80
 800252e:	d902      	bls.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002530:	2303      	movs	r3, #3
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	e00a      	b.n	800254c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b80      	cmp	r3, #128	@ 0x80
 800253a:	d102      	bne.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800253c:	2302      	movs	r3, #2
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e004      	b.n	800254c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b70      	cmp	r3, #112	@ 0x70
 8002546:	d101      	bne.n	800254c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002548:	2301      	movs	r3, #1
 800254a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 0207 	bic.w	r2, r3, #7
 8002554:	4909      	ldr	r1, [pc, #36]	@ (800257c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800255c:	4b07      	ldr	r3, [pc, #28]	@ (800257c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	429a      	cmp	r2, r3
 8002568:	d001      	beq.n	800256e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	40022000 	.word	0x40022000

08002580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002588:	2300      	movs	r3, #0
 800258a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800258c:	2300      	movs	r3, #0
 800258e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002598:	2b00      	cmp	r3, #0
 800259a:	d041      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025a4:	d02a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025aa:	d824      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025b0:	d008      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025b6:	d81e      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025c0:	d010      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025c2:	e018      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c4:	4b86      	ldr	r3, [pc, #536]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a85      	ldr	r2, [pc, #532]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d0:	e015      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fabb 	bl	8002b54 <RCCEx_PLLSAI1_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e2:	e00c      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3320      	adds	r3, #32
 80025e8:	2100      	movs	r1, #0
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 fba6 	bl	8002d3c <RCCEx_PLLSAI2_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025f4:	e003      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	74fb      	strb	r3, [r7, #19]
      break;
 80025fa:	e000      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002604:	4b76      	ldr	r3, [pc, #472]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002612:	4973      	ldr	r1, [pc, #460]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800261a:	e001      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d041      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002630:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002634:	d02a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002636:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800263a:	d824      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800263c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002640:	d008      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002642:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002646:	d81e      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800264c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002650:	d010      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002652:	e018      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002654:	4b62      	ldr	r3, [pc, #392]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a61      	ldr	r2, [pc, #388]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002660:	e015      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3304      	adds	r3, #4
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fa73 	bl	8002b54 <RCCEx_PLLSAI1_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002672:	e00c      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3320      	adds	r3, #32
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fb5e 	bl	8002d3c <RCCEx_PLLSAI2_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002684:	e003      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	74fb      	strb	r3, [r7, #19]
      break;
 800268a:	e000      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800268c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10b      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002694:	4b52      	ldr	r3, [pc, #328]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026a2:	494f      	ldr	r1, [pc, #316]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026aa:	e001      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80a0 	beq.w	80027fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026c2:	4b47      	ldr	r3, [pc, #284]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026ce:	2301      	movs	r3, #1
 80026d0:	e000      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026d2:	2300      	movs	r3, #0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00d      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d8:	4b41      	ldr	r3, [pc, #260]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	4a40      	ldr	r2, [pc, #256]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026e4:	4b3e      	ldr	r3, [pc, #248]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f0:	2301      	movs	r3, #1
 80026f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f4:	4b3b      	ldr	r3, [pc, #236]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a3a      	ldr	r2, [pc, #232]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002700:	f7fe fcd0 	bl	80010a4 <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002706:	e009      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe fccc 	bl	80010a4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d902      	bls.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	74fb      	strb	r3, [r7, #19]
        break;
 800271a:	e005      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800271c:	4b31      	ldr	r3, [pc, #196]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ef      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002728:	7cfb      	ldrb	r3, [r7, #19]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d15c      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800272e:	4b2c      	ldr	r3, [pc, #176]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002734:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002738:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01f      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	429a      	cmp	r2, r3
 800274a:	d019      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800274c:	4b24      	ldr	r3, [pc, #144]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002756:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002758:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	4a20      	ldr	r2, [pc, #128]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002768:	4b1d      	ldr	r3, [pc, #116]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276e:	4a1c      	ldr	r2, [pc, #112]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002770:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002778:	4a19      	ldr	r2, [pc, #100]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7fe fc8b 	bl	80010a4 <HAL_GetTick>
 800278e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002790:	e00b      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7fe fc87 	bl	80010a4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d902      	bls.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	74fb      	strb	r3, [r7, #19]
            break;
 80027a8:	e006      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027aa:	4b0d      	ldr	r3, [pc, #52]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ec      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027be:	4b08      	ldr	r3, [pc, #32]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ce:	4904      	ldr	r1, [pc, #16]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027d6:	e009      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
 80027dc:	e006      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ec:	7c7b      	ldrb	r3, [r7, #17]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b9e      	ldr	r3, [pc, #632]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	4a9d      	ldr	r2, [pc, #628]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800280a:	4b98      	ldr	r3, [pc, #608]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002810:	f023 0203 	bic.w	r2, r3, #3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002818:	4994      	ldr	r1, [pc, #592]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800282c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	f023 020c 	bic.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283a:	498c      	ldr	r1, [pc, #560]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800284e:	4b87      	ldr	r3, [pc, #540]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002854:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285c:	4983      	ldr	r1, [pc, #524]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002870:	4b7e      	ldr	r3, [pc, #504]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	497b      	ldr	r1, [pc, #492]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002892:	4b76      	ldr	r3, [pc, #472]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a0:	4972      	ldr	r1, [pc, #456]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028b4:	4b6d      	ldr	r3, [pc, #436]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c2:	496a      	ldr	r1, [pc, #424]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028d6:	4b65      	ldr	r3, [pc, #404]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e4:	4961      	ldr	r1, [pc, #388]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028f8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002906:	4959      	ldr	r1, [pc, #356]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291a:	4b54      	ldr	r3, [pc, #336]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002928:	4950      	ldr	r1, [pc, #320]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800293c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294a:	4948      	ldr	r1, [pc, #288]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800295e:	4b43      	ldr	r3, [pc, #268]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	493f      	ldr	r1, [pc, #252]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d028      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002980:	4b3a      	ldr	r3, [pc, #232]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800298e:	4937      	ldr	r1, [pc, #220]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800299e:	d106      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a31      	ldr	r2, [pc, #196]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
 80029ac:	e011      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029b6:	d10c      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3304      	adds	r3, #4
 80029bc:	2101      	movs	r1, #1
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f8c8 	bl	8002b54 <RCCEx_PLLSAI1_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d028      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029de:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ec:	491f      	ldr	r1, [pc, #124]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029fc:	d106      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fe:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	4a1a      	ldr	r2, [pc, #104]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a08:	60d3      	str	r3, [r2, #12]
 8002a0a:	e011      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f899 	bl	8002b54 <RCCEx_PLLSAI1_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02b      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a4a:	4908      	ldr	r1, [pc, #32]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a5a:	d109      	bne.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a5c:	4b03      	ldr	r3, [pc, #12]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a02      	ldr	r2, [pc, #8]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a66:	60d3      	str	r3, [r2, #12]
 8002a68:	e014      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f867 	bl	8002b54 <RCCEx_PLLSAI1_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d02f      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aae:	4928      	ldr	r1, [pc, #160]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002abe:	d10d      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f844 	bl	8002b54 <RCCEx_PLLSAI1_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d014      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	74bb      	strb	r3, [r7, #18]
 8002ada:	e011      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ae0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3320      	adds	r3, #32
 8002aea:	2102      	movs	r1, #2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 f925 	bl	8002d3c <RCCEx_PLLSAI2_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b0c:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b12:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b1a:	490d      	ldr	r1, [pc, #52]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b2e:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b3e:	4904      	ldr	r1, [pc, #16]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b46:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000

08002b54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b62:	4b75      	ldr	r3, [pc, #468]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d018      	beq.n	8002ba0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b6e:	4b72      	ldr	r3, [pc, #456]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d10d      	bne.n	8002b9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
       ||
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b86:	4b6c      	ldr	r3, [pc, #432]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
       ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d047      	beq.n	8002c2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e044      	b.n	8002c2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d018      	beq.n	8002bda <RCCEx_PLLSAI1_Config+0x86>
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d825      	bhi.n	8002bf8 <RCCEx_PLLSAI1_Config+0xa4>
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d002      	beq.n	8002bb6 <RCCEx_PLLSAI1_Config+0x62>
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d009      	beq.n	8002bc8 <RCCEx_PLLSAI1_Config+0x74>
 8002bb4:	e020      	b.n	8002bf8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bb6:	4b60      	ldr	r3, [pc, #384]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d11d      	bne.n	8002bfe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc6:	e01a      	b.n	8002bfe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bc8:	4b5b      	ldr	r3, [pc, #364]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd8:	e013      	b.n	8002c02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bda:	4b57      	ldr	r3, [pc, #348]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002be6:	4b54      	ldr	r3, [pc, #336]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bf6:	e006      	b.n	8002c06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002bfc:	e004      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bfe:	bf00      	nop
 8002c00:	e002      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10d      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6819      	ldr	r1, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	430b      	orrs	r3, r1
 8002c24:	4944      	ldr	r1, [pc, #272]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d17d      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c30:	4b41      	ldr	r3, [pc, #260]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a40      	ldr	r2, [pc, #256]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fa32 	bl	80010a4 <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c42:	e009      	b.n	8002c58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c44:	f7fe fa2e 	bl	80010a4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d902      	bls.n	8002c58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	73fb      	strb	r3, [r7, #15]
        break;
 8002c56:	e005      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c58:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ef      	bne.n	8002c44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d160      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d111      	bne.n	8002c94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c70:	4b31      	ldr	r3, [pc, #196]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6892      	ldr	r2, [r2, #8]
 8002c80:	0211      	lsls	r1, r2, #8
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68d2      	ldr	r2, [r2, #12]
 8002c86:	0912      	lsrs	r2, r2, #4
 8002c88:	0452      	lsls	r2, r2, #17
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	492a      	ldr	r1, [pc, #168]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	610b      	str	r3, [r1, #16]
 8002c92:	e027      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d112      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c9a:	4b27      	ldr	r3, [pc, #156]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ca2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6892      	ldr	r2, [r2, #8]
 8002caa:	0211      	lsls	r1, r2, #8
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6912      	ldr	r2, [r2, #16]
 8002cb0:	0852      	lsrs	r2, r2, #1
 8002cb2:	3a01      	subs	r2, #1
 8002cb4:	0552      	lsls	r2, r2, #21
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	491f      	ldr	r1, [pc, #124]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	610b      	str	r3, [r1, #16]
 8002cbe:	e011      	b.n	8002ce4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	0211      	lsls	r1, r2, #8
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6952      	ldr	r2, [r2, #20]
 8002cd6:	0852      	lsrs	r2, r2, #1
 8002cd8:	3a01      	subs	r2, #1
 8002cda:	0652      	lsls	r2, r2, #25
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	4916      	ldr	r1, [pc, #88]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ce4:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a13      	ldr	r2, [pc, #76]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe f9d8 	bl	80010a4 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf6:	e009      	b.n	8002d0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf8:	f7fe f9d4 	bl	80010a4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d902      	bls.n	8002d0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	73fb      	strb	r3, [r7, #15]
          break;
 8002d0a:	e005      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ef      	beq.n	8002cf8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4904      	ldr	r1, [pc, #16]	@ (8002d38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40021000 	.word	0x40021000

08002d3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d018      	beq.n	8002d88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d56:	4b67      	ldr	r3, [pc, #412]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f003 0203 	and.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d10d      	bne.n	8002d82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
       ||
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d009      	beq.n	8002d82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d6e:	4b61      	ldr	r3, [pc, #388]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d047      	beq.n	8002e12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	e044      	b.n	8002e12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d018      	beq.n	8002dc2 <RCCEx_PLLSAI2_Config+0x86>
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d825      	bhi.n	8002de0 <RCCEx_PLLSAI2_Config+0xa4>
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d002      	beq.n	8002d9e <RCCEx_PLLSAI2_Config+0x62>
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d009      	beq.n	8002db0 <RCCEx_PLLSAI2_Config+0x74>
 8002d9c:	e020      	b.n	8002de0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d9e:	4b55      	ldr	r3, [pc, #340]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d11d      	bne.n	8002de6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dae:	e01a      	b.n	8002de6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002db0:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d116      	bne.n	8002dea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc0:	e013      	b.n	8002dea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dc2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dce:	4b49      	ldr	r3, [pc, #292]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dde:	e006      	b.n	8002dee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	73fb      	strb	r3, [r7, #15]
      break;
 8002de4:	e004      	b.n	8002df0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002de6:	bf00      	nop
 8002de8:	e002      	b.n	8002df0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dea:	bf00      	nop
 8002dec:	e000      	b.n	8002df0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dee:	bf00      	nop
    }

    if(status == HAL_OK)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10d      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002df6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6819      	ldr	r1, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	4939      	ldr	r1, [pc, #228]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d167      	bne.n	8002ee8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e18:	4b36      	ldr	r3, [pc, #216]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a35      	ldr	r2, [pc, #212]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fe f93e 	bl	80010a4 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e2a:	e009      	b.n	8002e40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e2c:	f7fe f93a 	bl	80010a4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d902      	bls.n	8002e40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e3e:	e005      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e40:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1ef      	bne.n	8002e2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d14a      	bne.n	8002ee8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d111      	bne.n	8002e7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e58:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6892      	ldr	r2, [r2, #8]
 8002e68:	0211      	lsls	r1, r2, #8
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68d2      	ldr	r2, [r2, #12]
 8002e6e:	0912      	lsrs	r2, r2, #4
 8002e70:	0452      	lsls	r2, r2, #17
 8002e72:	430a      	orrs	r2, r1
 8002e74:	491f      	ldr	r1, [pc, #124]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	614b      	str	r3, [r1, #20]
 8002e7a:	e011      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6892      	ldr	r2, [r2, #8]
 8002e8c:	0211      	lsls	r1, r2, #8
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6912      	ldr	r2, [r2, #16]
 8002e92:	0852      	lsrs	r2, r2, #1
 8002e94:	3a01      	subs	r2, #1
 8002e96:	0652      	lsls	r2, r2, #25
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	4916      	ldr	r1, [pc, #88]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ea0:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a13      	ldr	r2, [pc, #76]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe f8fa 	bl	80010a4 <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb2:	e009      	b.n	8002ec8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eb4:	f7fe f8f6 	bl	80010a4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d902      	bls.n	8002ec8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ec6:	e005      	b.n	8002ed4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ef      	beq.n	8002eb4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eda:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4904      	ldr	r1, [pc, #16]	@ (8002ef4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000

08002ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e049      	b.n	8002f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fd fe72 	bl	8000c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	4619      	mov	r1, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f000 fb04 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d001      	beq.n	8002fc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e047      	b.n	8003050 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a23      	ldr	r2, [pc, #140]	@ (800305c <HAL_TIM_Base_Start+0xb4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01d      	beq.n	800300e <HAL_TIM_Base_Start+0x66>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fda:	d018      	beq.n	800300e <HAL_TIM_Base_Start+0x66>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8003060 <HAL_TIM_Base_Start+0xb8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_TIM_Base_Start+0x66>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1e      	ldr	r2, [pc, #120]	@ (8003064 <HAL_TIM_Base_Start+0xbc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00e      	beq.n	800300e <HAL_TIM_Base_Start+0x66>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8003068 <HAL_TIM_Base_Start+0xc0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_TIM_Base_Start+0x66>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800306c <HAL_TIM_Base_Start+0xc4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_TIM_Base_Start+0x66>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a19      	ldr	r2, [pc, #100]	@ (8003070 <HAL_TIM_Base_Start+0xc8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d115      	bne.n	800303a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b17      	ldr	r3, [pc, #92]	@ (8003074 <HAL_TIM_Base_Start+0xcc>)
 8003016:	4013      	ands	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b06      	cmp	r3, #6
 800301e:	d015      	beq.n	800304c <HAL_TIM_Base_Start+0xa4>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003026:	d011      	beq.n	800304c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	e008      	b.n	800304c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	e000      	b.n	800304e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00
 800306c:	40013400 	.word	0x40013400
 8003070:	40014000 	.word	0x40014000
 8003074:	00010007 	.word	0x00010007

08003078 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	f241 1311 	movw	r3, #4369	@ 0x1111
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10f      	bne.n	80030b0 <HAL_TIM_Base_Stop+0x38>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6a1a      	ldr	r2, [r3, #32]
 8003096:	f240 4344 	movw	r3, #1092	@ 0x444
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_TIM_Base_Stop+0x38>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e049      	b.n	800316c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d106      	bne.n	80030f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f841 	bl	8003174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3304      	adds	r3, #4
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 fa1d 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e0ff      	b.n	80033a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b14      	cmp	r3, #20
 80031b2:	f200 80f0 	bhi.w	8003396 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031b6:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	08003211 	.word	0x08003211
 80031c0:	08003397 	.word	0x08003397
 80031c4:	08003397 	.word	0x08003397
 80031c8:	08003397 	.word	0x08003397
 80031cc:	08003251 	.word	0x08003251
 80031d0:	08003397 	.word	0x08003397
 80031d4:	08003397 	.word	0x08003397
 80031d8:	08003397 	.word	0x08003397
 80031dc:	08003293 	.word	0x08003293
 80031e0:	08003397 	.word	0x08003397
 80031e4:	08003397 	.word	0x08003397
 80031e8:	08003397 	.word	0x08003397
 80031ec:	080032d3 	.word	0x080032d3
 80031f0:	08003397 	.word	0x08003397
 80031f4:	08003397 	.word	0x08003397
 80031f8:	08003397 	.word	0x08003397
 80031fc:	08003315 	.word	0x08003315
 8003200:	08003397 	.word	0x08003397
 8003204:	08003397 	.word	0x08003397
 8003208:	08003397 	.word	0x08003397
 800320c:	08003355 	.word	0x08003355
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fa3a 	bl	8003690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0208 	orr.w	r2, r2, #8
 800322a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0204 	bic.w	r2, r2, #4
 800323a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6999      	ldr	r1, [r3, #24]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	619a      	str	r2, [r3, #24]
      break;
 800324e:	e0a5      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 faaa 	bl	80037b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800326a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800327a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6999      	ldr	r1, [r3, #24]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	021a      	lsls	r2, r3, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	619a      	str	r2, [r3, #24]
      break;
 8003290:	e084      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fb13 	bl	80038c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0208 	orr.w	r2, r2, #8
 80032ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0204 	bic.w	r2, r2, #4
 80032bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69d9      	ldr	r1, [r3, #28]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	61da      	str	r2, [r3, #28]
      break;
 80032d0:	e064      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fb7b 	bl	80039d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69d9      	ldr	r1, [r3, #28]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	021a      	lsls	r2, r3, #8
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	61da      	str	r2, [r3, #28]
      break;
 8003312:	e043      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fbc4 	bl	8003aa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0208 	orr.w	r2, r2, #8
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0204 	bic.w	r2, r2, #4
 800333e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003352:	e023      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fc08 	bl	8003b70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800336e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800337e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	021a      	lsls	r2, r3, #8
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003394:	e002      	b.n	800339c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
      break;
 800339a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop

080033b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIM_ConfigClockSource+0x1c>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0b6      	b.n	800353a <HAL_TIM_ConfigClockSource+0x18a>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003408:	d03e      	beq.n	8003488 <HAL_TIM_ConfigClockSource+0xd8>
 800340a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800340e:	f200 8087 	bhi.w	8003520 <HAL_TIM_ConfigClockSource+0x170>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003416:	f000 8086 	beq.w	8003526 <HAL_TIM_ConfigClockSource+0x176>
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341e:	d87f      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x170>
 8003420:	2b70      	cmp	r3, #112	@ 0x70
 8003422:	d01a      	beq.n	800345a <HAL_TIM_ConfigClockSource+0xaa>
 8003424:	2b70      	cmp	r3, #112	@ 0x70
 8003426:	d87b      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x170>
 8003428:	2b60      	cmp	r3, #96	@ 0x60
 800342a:	d050      	beq.n	80034ce <HAL_TIM_ConfigClockSource+0x11e>
 800342c:	2b60      	cmp	r3, #96	@ 0x60
 800342e:	d877      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x170>
 8003430:	2b50      	cmp	r3, #80	@ 0x50
 8003432:	d03c      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0xfe>
 8003434:	2b50      	cmp	r3, #80	@ 0x50
 8003436:	d873      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x170>
 8003438:	2b40      	cmp	r3, #64	@ 0x40
 800343a:	d058      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x13e>
 800343c:	2b40      	cmp	r3, #64	@ 0x40
 800343e:	d86f      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x170>
 8003440:	2b30      	cmp	r3, #48	@ 0x30
 8003442:	d064      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15e>
 8003444:	2b30      	cmp	r3, #48	@ 0x30
 8003446:	d86b      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x170>
 8003448:	2b20      	cmp	r3, #32
 800344a:	d060      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15e>
 800344c:	2b20      	cmp	r3, #32
 800344e:	d867      	bhi.n	8003520 <HAL_TIM_ConfigClockSource+0x170>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d05c      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15e>
 8003454:	2b10      	cmp	r3, #16
 8003456:	d05a      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x15e>
 8003458:	e062      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800346a:	f000 fc61 	bl	8003d30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800347c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	609a      	str	r2, [r3, #8]
      break;
 8003486:	e04f      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003498:	f000 fc4a 	bl	8003d30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034aa:	609a      	str	r2, [r3, #8]
      break;
 80034ac:	e03c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	461a      	mov	r2, r3
 80034bc:	f000 fbbe 	bl	8003c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2150      	movs	r1, #80	@ 0x50
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fc17 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 80034cc:	e02c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034da:	461a      	mov	r2, r3
 80034dc:	f000 fbdd 	bl	8003c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2160      	movs	r1, #96	@ 0x60
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fc07 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 80034ec:	e01c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 fb9e 	bl	8003c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2140      	movs	r1, #64	@ 0x40
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fbf7 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 800350c:	e00c      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f000 fbee 	bl	8003cfa <TIM_ITRx_SetConfig>
      break;
 800351e:	e003      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      break;
 8003524:	e000      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a46      	ldr	r2, [pc, #280]	@ (8003670 <TIM_Base_SetConfig+0x12c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d013      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003562:	d00f      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a43      	ldr	r2, [pc, #268]	@ (8003674 <TIM_Base_SetConfig+0x130>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00b      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a42      	ldr	r2, [pc, #264]	@ (8003678 <TIM_Base_SetConfig+0x134>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a41      	ldr	r2, [pc, #260]	@ (800367c <TIM_Base_SetConfig+0x138>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a40      	ldr	r2, [pc, #256]	@ (8003680 <TIM_Base_SetConfig+0x13c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d108      	bne.n	8003596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800358a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a35      	ldr	r2, [pc, #212]	@ (8003670 <TIM_Base_SetConfig+0x12c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01f      	beq.n	80035de <TIM_Base_SetConfig+0x9a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035a4:	d01b      	beq.n	80035de <TIM_Base_SetConfig+0x9a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a32      	ldr	r2, [pc, #200]	@ (8003674 <TIM_Base_SetConfig+0x130>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d017      	beq.n	80035de <TIM_Base_SetConfig+0x9a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a31      	ldr	r2, [pc, #196]	@ (8003678 <TIM_Base_SetConfig+0x134>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <TIM_Base_SetConfig+0x9a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a30      	ldr	r2, [pc, #192]	@ (800367c <TIM_Base_SetConfig+0x138>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00f      	beq.n	80035de <TIM_Base_SetConfig+0x9a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003680 <TIM_Base_SetConfig+0x13c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00b      	beq.n	80035de <TIM_Base_SetConfig+0x9a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003684 <TIM_Base_SetConfig+0x140>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <TIM_Base_SetConfig+0x9a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003688 <TIM_Base_SetConfig+0x144>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d003      	beq.n	80035de <TIM_Base_SetConfig+0x9a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2c      	ldr	r2, [pc, #176]	@ (800368c <TIM_Base_SetConfig+0x148>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a16      	ldr	r2, [pc, #88]	@ (8003670 <TIM_Base_SetConfig+0x12c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00f      	beq.n	800363c <TIM_Base_SetConfig+0xf8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a18      	ldr	r2, [pc, #96]	@ (8003680 <TIM_Base_SetConfig+0x13c>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <TIM_Base_SetConfig+0xf8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a17      	ldr	r2, [pc, #92]	@ (8003684 <TIM_Base_SetConfig+0x140>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <TIM_Base_SetConfig+0xf8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a16      	ldr	r2, [pc, #88]	@ (8003688 <TIM_Base_SetConfig+0x144>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_Base_SetConfig+0xf8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a15      	ldr	r2, [pc, #84]	@ (800368c <TIM_Base_SetConfig+0x148>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d103      	bne.n	8003644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f023 0201 	bic.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]
  }
}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40013400 	.word	0x40013400
 8003684:	40014000 	.word	0x40014000
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800

08003690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f023 0201 	bic.w	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0303 	bic.w	r3, r3, #3
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f023 0302 	bic.w	r3, r3, #2
 80036dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a2c      	ldr	r2, [pc, #176]	@ (800379c <TIM_OC1_SetConfig+0x10c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00f      	beq.n	8003710 <TIM_OC1_SetConfig+0x80>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a2b      	ldr	r2, [pc, #172]	@ (80037a0 <TIM_OC1_SetConfig+0x110>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00b      	beq.n	8003710 <TIM_OC1_SetConfig+0x80>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a2a      	ldr	r2, [pc, #168]	@ (80037a4 <TIM_OC1_SetConfig+0x114>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d007      	beq.n	8003710 <TIM_OC1_SetConfig+0x80>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a29      	ldr	r2, [pc, #164]	@ (80037a8 <TIM_OC1_SetConfig+0x118>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_OC1_SetConfig+0x80>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a28      	ldr	r2, [pc, #160]	@ (80037ac <TIM_OC1_SetConfig+0x11c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d10c      	bne.n	800372a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0308 	bic.w	r3, r3, #8
 8003716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f023 0304 	bic.w	r3, r3, #4
 8003728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1b      	ldr	r2, [pc, #108]	@ (800379c <TIM_OC1_SetConfig+0x10c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00f      	beq.n	8003752 <TIM_OC1_SetConfig+0xc2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a1a      	ldr	r2, [pc, #104]	@ (80037a0 <TIM_OC1_SetConfig+0x110>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00b      	beq.n	8003752 <TIM_OC1_SetConfig+0xc2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a19      	ldr	r2, [pc, #100]	@ (80037a4 <TIM_OC1_SetConfig+0x114>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <TIM_OC1_SetConfig+0xc2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a18      	ldr	r2, [pc, #96]	@ (80037a8 <TIM_OC1_SetConfig+0x118>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d003      	beq.n	8003752 <TIM_OC1_SetConfig+0xc2>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a17      	ldr	r2, [pc, #92]	@ (80037ac <TIM_OC1_SetConfig+0x11c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d111      	bne.n	8003776 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	621a      	str	r2, [r3, #32]
}
 8003790:	bf00      	nop
 8003792:	371c      	adds	r7, #28
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00
 80037a0:	40013400 	.word	0x40013400
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40014400 	.word	0x40014400
 80037ac:	40014800 	.word	0x40014800

080037b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f023 0210 	bic.w	r2, r3, #16
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0320 	bic.w	r3, r3, #32
 80037fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a28      	ldr	r2, [pc, #160]	@ (80038b0 <TIM_OC2_SetConfig+0x100>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_OC2_SetConfig+0x6c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a27      	ldr	r2, [pc, #156]	@ (80038b4 <TIM_OC2_SetConfig+0x104>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10d      	bne.n	8003838 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003836:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a1d      	ldr	r2, [pc, #116]	@ (80038b0 <TIM_OC2_SetConfig+0x100>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00f      	beq.n	8003860 <TIM_OC2_SetConfig+0xb0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a1c      	ldr	r2, [pc, #112]	@ (80038b4 <TIM_OC2_SetConfig+0x104>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00b      	beq.n	8003860 <TIM_OC2_SetConfig+0xb0>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a1b      	ldr	r2, [pc, #108]	@ (80038b8 <TIM_OC2_SetConfig+0x108>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d007      	beq.n	8003860 <TIM_OC2_SetConfig+0xb0>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4a1a      	ldr	r2, [pc, #104]	@ (80038bc <TIM_OC2_SetConfig+0x10c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <TIM_OC2_SetConfig+0xb0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a19      	ldr	r2, [pc, #100]	@ (80038c0 <TIM_OC2_SetConfig+0x110>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d113      	bne.n	8003888 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800386e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40013400 	.word	0x40013400
 80038b8:	40014000 	.word	0x40014000
 80038bc:	40014400 	.word	0x40014400
 80038c0:	40014800 	.word	0x40014800

080038c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a27      	ldr	r2, [pc, #156]	@ (80039c0 <TIM_OC3_SetConfig+0xfc>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_OC3_SetConfig+0x6a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a26      	ldr	r2, [pc, #152]	@ (80039c4 <TIM_OC3_SetConfig+0x100>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d10d      	bne.n	800394a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a1c      	ldr	r2, [pc, #112]	@ (80039c0 <TIM_OC3_SetConfig+0xfc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00f      	beq.n	8003972 <TIM_OC3_SetConfig+0xae>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a1b      	ldr	r2, [pc, #108]	@ (80039c4 <TIM_OC3_SetConfig+0x100>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00b      	beq.n	8003972 <TIM_OC3_SetConfig+0xae>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a1a      	ldr	r2, [pc, #104]	@ (80039c8 <TIM_OC3_SetConfig+0x104>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d007      	beq.n	8003972 <TIM_OC3_SetConfig+0xae>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <TIM_OC3_SetConfig+0x108>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d003      	beq.n	8003972 <TIM_OC3_SetConfig+0xae>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a18      	ldr	r2, [pc, #96]	@ (80039d0 <TIM_OC3_SetConfig+0x10c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d113      	bne.n	800399a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	621a      	str	r2, [r3, #32]
}
 80039b4:	bf00      	nop
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40012c00 	.word	0x40012c00
 80039c4:	40013400 	.word	0x40013400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800

080039d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <TIM_OC4_SetConfig+0xc0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00f      	beq.n	8003a58 <TIM_OC4_SetConfig+0x84>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a17      	ldr	r2, [pc, #92]	@ (8003a98 <TIM_OC4_SetConfig+0xc4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <TIM_OC4_SetConfig+0x84>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a16      	ldr	r2, [pc, #88]	@ (8003a9c <TIM_OC4_SetConfig+0xc8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d007      	beq.n	8003a58 <TIM_OC4_SetConfig+0x84>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a15      	ldr	r2, [pc, #84]	@ (8003aa0 <TIM_OC4_SetConfig+0xcc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <TIM_OC4_SetConfig+0x84>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a14      	ldr	r2, [pc, #80]	@ (8003aa4 <TIM_OC4_SetConfig+0xd0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d109      	bne.n	8003a6c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	019b      	lsls	r3, r3, #6
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	621a      	str	r2, [r3, #32]
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40013400 	.word	0x40013400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800

08003aa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003aec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	041b      	lsls	r3, r3, #16
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a17      	ldr	r2, [pc, #92]	@ (8003b5c <TIM_OC5_SetConfig+0xb4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00f      	beq.n	8003b22 <TIM_OC5_SetConfig+0x7a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a16      	ldr	r2, [pc, #88]	@ (8003b60 <TIM_OC5_SetConfig+0xb8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <TIM_OC5_SetConfig+0x7a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a15      	ldr	r2, [pc, #84]	@ (8003b64 <TIM_OC5_SetConfig+0xbc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <TIM_OC5_SetConfig+0x7a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a14      	ldr	r2, [pc, #80]	@ (8003b68 <TIM_OC5_SetConfig+0xc0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d003      	beq.n	8003b22 <TIM_OC5_SetConfig+0x7a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a13      	ldr	r2, [pc, #76]	@ (8003b6c <TIM_OC5_SetConfig+0xc4>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d109      	bne.n	8003b36 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40013400 	.word	0x40013400
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800

08003b70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	051b      	lsls	r3, r3, #20
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	@ (8003c28 <TIM_OC6_SetConfig+0xb8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00f      	beq.n	8003bec <TIM_OC6_SetConfig+0x7c>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a17      	ldr	r2, [pc, #92]	@ (8003c2c <TIM_OC6_SetConfig+0xbc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_OC6_SetConfig+0x7c>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a16      	ldr	r2, [pc, #88]	@ (8003c30 <TIM_OC6_SetConfig+0xc0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d007      	beq.n	8003bec <TIM_OC6_SetConfig+0x7c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a15      	ldr	r2, [pc, #84]	@ (8003c34 <TIM_OC6_SetConfig+0xc4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_OC6_SetConfig+0x7c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a14      	ldr	r2, [pc, #80]	@ (8003c38 <TIM_OC6_SetConfig+0xc8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d109      	bne.n	8003c00 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	029b      	lsls	r3, r3, #10
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	621a      	str	r2, [r3, #32]
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40013400 	.word	0x40013400
 8003c30:	40014000 	.word	0x40014000
 8003c34:	40014400 	.word	0x40014400
 8003c38:	40014800 	.word	0x40014800

08003c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 030a 	bic.w	r3, r3, #10
 8003c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	621a      	str	r2, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	371c      	adds	r7, #28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b087      	sub	sp, #28
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	f023 0210 	bic.w	r2, r3, #16
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f043 0307 	orr.w	r3, r3, #7
 8003d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021a      	lsls	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e068      	b.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2e      	ldr	r2, [pc, #184]	@ (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2d      	ldr	r2, [pc, #180]	@ (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a1e      	ldr	r2, [pc, #120]	@ (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01d      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dfa:	d018      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1b      	ldr	r2, [pc, #108]	@ (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a18      	ldr	r2, [pc, #96]	@ (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a13      	ldr	r2, [pc, #76]	@ (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a14      	ldr	r2, [pc, #80]	@ (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10c      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40013400 	.word	0x40013400
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40014000 	.word	0x40014000

08003e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e040      	b.n	8003f14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fc ff1a 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2224      	movs	r2, #36	@ 0x24
 8003eac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0201 	bic.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fae0 	bl	800448c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f825 	bl	8003f1c <UART_SetConfig>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e01b      	b.n	8003f14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fb5f 	bl	80045d0 <UART_CheckIdleState>
 8003f12:	4603      	mov	r3, r0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f20:	b08a      	sub	sp, #40	@ 0x28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4ba4      	ldr	r3, [pc, #656]	@ (80041dc <UART_SetConfig+0x2c0>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a99      	ldr	r2, [pc, #612]	@ (80041e0 <UART_SetConfig+0x2c4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f84:	4313      	orrs	r3, r2
 8003f86:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a90      	ldr	r2, [pc, #576]	@ (80041e4 <UART_SetConfig+0x2c8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d126      	bne.n	8003ff4 <UART_SetConfig+0xd8>
 8003fa6:	4b90      	ldr	r3, [pc, #576]	@ (80041e8 <UART_SetConfig+0x2cc>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b03      	cmp	r3, #3
 8003fb2:	d81b      	bhi.n	8003fec <UART_SetConfig+0xd0>
 8003fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <UART_SetConfig+0xa0>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fcd 	.word	0x08003fcd
 8003fc0:	08003fdd 	.word	0x08003fdd
 8003fc4:	08003fd5 	.word	0x08003fd5
 8003fc8:	08003fe5 	.word	0x08003fe5
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e116      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fda:	e112      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe2:	e10e      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fea:	e10a      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003fec:	2310      	movs	r3, #16
 8003fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ff2:	e106      	b.n	8004202 <UART_SetConfig+0x2e6>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7c      	ldr	r2, [pc, #496]	@ (80041ec <UART_SetConfig+0x2d0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d138      	bne.n	8004070 <UART_SetConfig+0x154>
 8003ffe:	4b7a      	ldr	r3, [pc, #488]	@ (80041e8 <UART_SetConfig+0x2cc>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b0c      	cmp	r3, #12
 800400a:	d82d      	bhi.n	8004068 <UART_SetConfig+0x14c>
 800400c:	a201      	add	r2, pc, #4	@ (adr r2, 8004014 <UART_SetConfig+0xf8>)
 800400e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004012:	bf00      	nop
 8004014:	08004049 	.word	0x08004049
 8004018:	08004069 	.word	0x08004069
 800401c:	08004069 	.word	0x08004069
 8004020:	08004069 	.word	0x08004069
 8004024:	08004059 	.word	0x08004059
 8004028:	08004069 	.word	0x08004069
 800402c:	08004069 	.word	0x08004069
 8004030:	08004069 	.word	0x08004069
 8004034:	08004051 	.word	0x08004051
 8004038:	08004069 	.word	0x08004069
 800403c:	08004069 	.word	0x08004069
 8004040:	08004069 	.word	0x08004069
 8004044:	08004061 	.word	0x08004061
 8004048:	2300      	movs	r3, #0
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404e:	e0d8      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004050:	2302      	movs	r3, #2
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004056:	e0d4      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004058:	2304      	movs	r3, #4
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405e:	e0d0      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004060:	2308      	movs	r3, #8
 8004062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004066:	e0cc      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004068:	2310      	movs	r3, #16
 800406a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800406e:	e0c8      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a5e      	ldr	r2, [pc, #376]	@ (80041f0 <UART_SetConfig+0x2d4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d125      	bne.n	80040c6 <UART_SetConfig+0x1aa>
 800407a:	4b5b      	ldr	r3, [pc, #364]	@ (80041e8 <UART_SetConfig+0x2cc>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004080:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004084:	2b30      	cmp	r3, #48	@ 0x30
 8004086:	d016      	beq.n	80040b6 <UART_SetConfig+0x19a>
 8004088:	2b30      	cmp	r3, #48	@ 0x30
 800408a:	d818      	bhi.n	80040be <UART_SetConfig+0x1a2>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d00a      	beq.n	80040a6 <UART_SetConfig+0x18a>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d814      	bhi.n	80040be <UART_SetConfig+0x1a2>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <UART_SetConfig+0x182>
 8004098:	2b10      	cmp	r3, #16
 800409a:	d008      	beq.n	80040ae <UART_SetConfig+0x192>
 800409c:	e00f      	b.n	80040be <UART_SetConfig+0x1a2>
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a4:	e0ad      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040a6:	2302      	movs	r3, #2
 80040a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ac:	e0a9      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040ae:	2304      	movs	r3, #4
 80040b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b4:	e0a5      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040b6:	2308      	movs	r3, #8
 80040b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040bc:	e0a1      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040be:	2310      	movs	r3, #16
 80040c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c4:	e09d      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a4a      	ldr	r2, [pc, #296]	@ (80041f4 <UART_SetConfig+0x2d8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d125      	bne.n	800411c <UART_SetConfig+0x200>
 80040d0:	4b45      	ldr	r3, [pc, #276]	@ (80041e8 <UART_SetConfig+0x2cc>)
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040da:	2bc0      	cmp	r3, #192	@ 0xc0
 80040dc:	d016      	beq.n	800410c <UART_SetConfig+0x1f0>
 80040de:	2bc0      	cmp	r3, #192	@ 0xc0
 80040e0:	d818      	bhi.n	8004114 <UART_SetConfig+0x1f8>
 80040e2:	2b80      	cmp	r3, #128	@ 0x80
 80040e4:	d00a      	beq.n	80040fc <UART_SetConfig+0x1e0>
 80040e6:	2b80      	cmp	r3, #128	@ 0x80
 80040e8:	d814      	bhi.n	8004114 <UART_SetConfig+0x1f8>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <UART_SetConfig+0x1d8>
 80040ee:	2b40      	cmp	r3, #64	@ 0x40
 80040f0:	d008      	beq.n	8004104 <UART_SetConfig+0x1e8>
 80040f2:	e00f      	b.n	8004114 <UART_SetConfig+0x1f8>
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fa:	e082      	b.n	8004202 <UART_SetConfig+0x2e6>
 80040fc:	2302      	movs	r3, #2
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004102:	e07e      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004104:	2304      	movs	r3, #4
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410a:	e07a      	b.n	8004202 <UART_SetConfig+0x2e6>
 800410c:	2308      	movs	r3, #8
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004112:	e076      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004114:	2310      	movs	r3, #16
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411a:	e072      	b.n	8004202 <UART_SetConfig+0x2e6>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a35      	ldr	r2, [pc, #212]	@ (80041f8 <UART_SetConfig+0x2dc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d12a      	bne.n	800417c <UART_SetConfig+0x260>
 8004126:	4b30      	ldr	r3, [pc, #192]	@ (80041e8 <UART_SetConfig+0x2cc>)
 8004128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004130:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004134:	d01a      	beq.n	800416c <UART_SetConfig+0x250>
 8004136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800413a:	d81b      	bhi.n	8004174 <UART_SetConfig+0x258>
 800413c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004140:	d00c      	beq.n	800415c <UART_SetConfig+0x240>
 8004142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004146:	d815      	bhi.n	8004174 <UART_SetConfig+0x258>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <UART_SetConfig+0x238>
 800414c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004150:	d008      	beq.n	8004164 <UART_SetConfig+0x248>
 8004152:	e00f      	b.n	8004174 <UART_SetConfig+0x258>
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415a:	e052      	b.n	8004202 <UART_SetConfig+0x2e6>
 800415c:	2302      	movs	r3, #2
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004162:	e04e      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004164:	2304      	movs	r3, #4
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416a:	e04a      	b.n	8004202 <UART_SetConfig+0x2e6>
 800416c:	2308      	movs	r3, #8
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004172:	e046      	b.n	8004202 <UART_SetConfig+0x2e6>
 8004174:	2310      	movs	r3, #16
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417a:	e042      	b.n	8004202 <UART_SetConfig+0x2e6>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a17      	ldr	r2, [pc, #92]	@ (80041e0 <UART_SetConfig+0x2c4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d13a      	bne.n	80041fc <UART_SetConfig+0x2e0>
 8004186:	4b18      	ldr	r3, [pc, #96]	@ (80041e8 <UART_SetConfig+0x2cc>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004190:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004194:	d01a      	beq.n	80041cc <UART_SetConfig+0x2b0>
 8004196:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800419a:	d81b      	bhi.n	80041d4 <UART_SetConfig+0x2b8>
 800419c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a0:	d00c      	beq.n	80041bc <UART_SetConfig+0x2a0>
 80041a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a6:	d815      	bhi.n	80041d4 <UART_SetConfig+0x2b8>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <UART_SetConfig+0x298>
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b0:	d008      	beq.n	80041c4 <UART_SetConfig+0x2a8>
 80041b2:	e00f      	b.n	80041d4 <UART_SetConfig+0x2b8>
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ba:	e022      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041bc:	2302      	movs	r3, #2
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c2:	e01e      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041c4:	2304      	movs	r3, #4
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ca:	e01a      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041cc:	2308      	movs	r3, #8
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041d2:	e016      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041d4:	2310      	movs	r3, #16
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041da:	e012      	b.n	8004202 <UART_SetConfig+0x2e6>
 80041dc:	efff69f3 	.word	0xefff69f3
 80041e0:	40008000 	.word	0x40008000
 80041e4:	40013800 	.word	0x40013800
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40004400 	.word	0x40004400
 80041f0:	40004800 	.word	0x40004800
 80041f4:	40004c00 	.word	0x40004c00
 80041f8:	40005000 	.word	0x40005000
 80041fc:	2310      	movs	r3, #16
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a9f      	ldr	r2, [pc, #636]	@ (8004484 <UART_SetConfig+0x568>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d17a      	bne.n	8004302 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800420c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004210:	2b08      	cmp	r3, #8
 8004212:	d824      	bhi.n	800425e <UART_SetConfig+0x342>
 8004214:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <UART_SetConfig+0x300>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004241 	.word	0x08004241
 8004220:	0800425f 	.word	0x0800425f
 8004224:	08004249 	.word	0x08004249
 8004228:	0800425f 	.word	0x0800425f
 800422c:	0800424f 	.word	0x0800424f
 8004230:	0800425f 	.word	0x0800425f
 8004234:	0800425f 	.word	0x0800425f
 8004238:	0800425f 	.word	0x0800425f
 800423c:	08004257 	.word	0x08004257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7fe f912 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8004244:	61f8      	str	r0, [r7, #28]
        break;
 8004246:	e010      	b.n	800426a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004248:	4b8f      	ldr	r3, [pc, #572]	@ (8004488 <UART_SetConfig+0x56c>)
 800424a:	61fb      	str	r3, [r7, #28]
        break;
 800424c:	e00d      	b.n	800426a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800424e:	f7fe f873 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8004252:	61f8      	str	r0, [r7, #28]
        break;
 8004254:	e009      	b.n	800426a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800425a:	61fb      	str	r3, [r7, #28]
        break;
 800425c:	e005      	b.n	800426a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004268:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80fb 	beq.w	8004468 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	4413      	add	r3, r2
 800427c:	69fa      	ldr	r2, [r7, #28]
 800427e:	429a      	cmp	r2, r3
 8004280:	d305      	bcc.n	800428e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	429a      	cmp	r2, r3
 800428c:	d903      	bls.n	8004296 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004294:	e0e8      	b.n	8004468 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	2200      	movs	r2, #0
 800429a:	461c      	mov	r4, r3
 800429c:	4615      	mov	r5, r2
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	022b      	lsls	r3, r5, #8
 80042a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80042ac:	0222      	lsls	r2, r4, #8
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	6849      	ldr	r1, [r1, #4]
 80042b2:	0849      	lsrs	r1, r1, #1
 80042b4:	2000      	movs	r0, #0
 80042b6:	4688      	mov	r8, r1
 80042b8:	4681      	mov	r9, r0
 80042ba:	eb12 0a08 	adds.w	sl, r2, r8
 80042be:	eb43 0b09 	adc.w	fp, r3, r9
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d0:	4650      	mov	r0, sl
 80042d2:	4659      	mov	r1, fp
 80042d4:	f7fb ff78 	bl	80001c8 <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4613      	mov	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e6:	d308      	bcc.n	80042fa <UART_SetConfig+0x3de>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ee:	d204      	bcs.n	80042fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	60da      	str	r2, [r3, #12]
 80042f8:	e0b6      	b.n	8004468 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004300:	e0b2      	b.n	8004468 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430a:	d15e      	bne.n	80043ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800430c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004310:	2b08      	cmp	r3, #8
 8004312:	d828      	bhi.n	8004366 <UART_SetConfig+0x44a>
 8004314:	a201      	add	r2, pc, #4	@ (adr r2, 800431c <UART_SetConfig+0x400>)
 8004316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431a:	bf00      	nop
 800431c:	08004341 	.word	0x08004341
 8004320:	08004349 	.word	0x08004349
 8004324:	08004351 	.word	0x08004351
 8004328:	08004367 	.word	0x08004367
 800432c:	08004357 	.word	0x08004357
 8004330:	08004367 	.word	0x08004367
 8004334:	08004367 	.word	0x08004367
 8004338:	08004367 	.word	0x08004367
 800433c:	0800435f 	.word	0x0800435f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004340:	f7fe f892 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8004344:	61f8      	str	r0, [r7, #28]
        break;
 8004346:	e014      	b.n	8004372 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004348:	f7fe f8a4 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 800434c:	61f8      	str	r0, [r7, #28]
        break;
 800434e:	e010      	b.n	8004372 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004350:	4b4d      	ldr	r3, [pc, #308]	@ (8004488 <UART_SetConfig+0x56c>)
 8004352:	61fb      	str	r3, [r7, #28]
        break;
 8004354:	e00d      	b.n	8004372 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004356:	f7fd ffef 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 800435a:	61f8      	str	r0, [r7, #28]
        break;
 800435c:	e009      	b.n	8004372 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004362:	61fb      	str	r3, [r7, #28]
        break;
 8004364:	e005      	b.n	8004372 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d077      	beq.n	8004468 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	005a      	lsls	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	441a      	add	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d916      	bls.n	80043c2 <UART_SetConfig+0x4a6>
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800439a:	d212      	bcs.n	80043c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f023 030f 	bic.w	r3, r3, #15
 80043a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	8afb      	ldrh	r3, [r7, #22]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	8afa      	ldrh	r2, [r7, #22]
 80043be:	60da      	str	r2, [r3, #12]
 80043c0:	e052      	b.n	8004468 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043c8:	e04e      	b.n	8004468 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d827      	bhi.n	8004422 <UART_SetConfig+0x506>
 80043d2:	a201      	add	r2, pc, #4	@ (adr r2, 80043d8 <UART_SetConfig+0x4bc>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004413 	.word	0x08004413
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004423 	.word	0x08004423
 80043f4:	08004423 	.word	0x08004423
 80043f8:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7fe f834 	bl	8002468 <HAL_RCC_GetPCLK1Freq>
 8004400:	61f8      	str	r0, [r7, #28]
        break;
 8004402:	e014      	b.n	800442e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004404:	f7fe f846 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8004408:	61f8      	str	r0, [r7, #28]
        break;
 800440a:	e010      	b.n	800442e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800440c:	4b1e      	ldr	r3, [pc, #120]	@ (8004488 <UART_SetConfig+0x56c>)
 800440e:	61fb      	str	r3, [r7, #28]
        break;
 8004410:	e00d      	b.n	800442e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004412:	f7fd ff91 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8004416:	61f8      	str	r0, [r7, #28]
        break;
 8004418:	e009      	b.n	800442e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800441e:	61fb      	str	r3, [r7, #28]
        break;
 8004420:	e005      	b.n	800442e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800442c:	bf00      	nop
    }

    if (pclk != 0U)
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d019      	beq.n	8004468 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	085a      	lsrs	r2, r3, #1
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	441a      	add	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b0f      	cmp	r3, #15
 800444c:	d909      	bls.n	8004462 <UART_SetConfig+0x546>
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004454:	d205      	bcs.n	8004462 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	e002      	b.n	8004468 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004474:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004478:	4618      	mov	r0, r3
 800447a:	3728      	adds	r7, #40	@ 0x28
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004482:	bf00      	nop
 8004484:	40008000 	.word	0x40008000
 8004488:	00f42400 	.word	0x00f42400

0800448c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01a      	beq.n	80045a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800458a:	d10a      	bne.n	80045a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b098      	sub	sp, #96	@ 0x60
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045e0:	f7fc fd60 	bl	80010a4 <HAL_GetTick>
 80045e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d12e      	bne.n	8004652 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045fc:	2200      	movs	r2, #0
 80045fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f88c 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d021      	beq.n	8004652 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800461c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004622:	653b      	str	r3, [r7, #80]	@ 0x50
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800462c:	647b      	str	r3, [r7, #68]	@ 0x44
 800462e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800463a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e6      	bne.n	800460e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e062      	b.n	8004718 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b04      	cmp	r3, #4
 800465e:	d149      	bne.n	80046f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004660:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004668:	2200      	movs	r2, #0
 800466a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f856 	bl	8004720 <UART_WaitOnFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03c      	beq.n	80046f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	623b      	str	r3, [r7, #32]
   return(result);
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800468e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004698:	633b      	str	r3, [r7, #48]	@ 0x30
 800469a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800469e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e6      	bne.n	800467a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3308      	adds	r3, #8
 80046b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046cc:	61fa      	str	r2, [r7, #28]
 80046ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	617b      	str	r3, [r7, #20]
   return(result);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e011      	b.n	8004718 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3758      	adds	r7, #88	@ 0x58
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004730:	e04f      	b.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d04b      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473a:	f7fc fcb3 	bl	80010a4 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	429a      	cmp	r2, r3
 8004748:	d302      	bcc.n	8004750 <UART_WaitOnFlagUntilTimeout+0x30>
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e04e      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d037      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b80      	cmp	r3, #128	@ 0x80
 8004766:	d034      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b40      	cmp	r3, #64	@ 0x40
 800476c:	d031      	beq.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b08      	cmp	r3, #8
 800477a:	d110      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2208      	movs	r2, #8
 8004782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f838 	bl	80047fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2208      	movs	r2, #8
 800478e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e029      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ac:	d111      	bne.n	80047d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f81e 	bl	80047fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e00f      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	429a      	cmp	r2, r3
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d0a0      	beq.n	8004732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b095      	sub	sp, #84	@ 0x54
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004820:	643b      	str	r3, [r7, #64]	@ 0x40
 8004822:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004826:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e6      	bne.n	8004802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3308      	adds	r3, #8
 800483a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	61fb      	str	r3, [r7, #28]
   return(result);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004856:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800485a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800486c:	2b01      	cmp	r3, #1
 800486e:	d118      	bne.n	80048a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	e853 3f00 	ldrex	r3, [r3]
 800487c:	60bb      	str	r3, [r7, #8]
   return(result);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f023 0310 	bic.w	r3, r3, #16
 8004884:	647b      	str	r3, [r7, #68]	@ 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800488e:	61bb      	str	r3, [r7, #24]
 8004890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004892:	6979      	ldr	r1, [r7, #20]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	613b      	str	r3, [r7, #16]
   return(result);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e6      	bne.n	8004870 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048b6:	bf00      	nop
 80048b8:	3754      	adds	r7, #84	@ 0x54
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <memset>:
 80048c2:	4402      	add	r2, r0
 80048c4:	4603      	mov	r3, r0
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d100      	bne.n	80048cc <memset+0xa>
 80048ca:	4770      	bx	lr
 80048cc:	f803 1b01 	strb.w	r1, [r3], #1
 80048d0:	e7f9      	b.n	80048c6 <memset+0x4>
	...

080048d4 <__libc_init_array>:
 80048d4:	b570      	push	{r4, r5, r6, lr}
 80048d6:	4d0d      	ldr	r5, [pc, #52]	@ (800490c <__libc_init_array+0x38>)
 80048d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004910 <__libc_init_array+0x3c>)
 80048da:	1b64      	subs	r4, r4, r5
 80048dc:	10a4      	asrs	r4, r4, #2
 80048de:	2600      	movs	r6, #0
 80048e0:	42a6      	cmp	r6, r4
 80048e2:	d109      	bne.n	80048f8 <__libc_init_array+0x24>
 80048e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004914 <__libc_init_array+0x40>)
 80048e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004918 <__libc_init_array+0x44>)
 80048e8:	f000 f818 	bl	800491c <_init>
 80048ec:	1b64      	subs	r4, r4, r5
 80048ee:	10a4      	asrs	r4, r4, #2
 80048f0:	2600      	movs	r6, #0
 80048f2:	42a6      	cmp	r6, r4
 80048f4:	d105      	bne.n	8004902 <__libc_init_array+0x2e>
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fc:	4798      	blx	r3
 80048fe:	3601      	adds	r6, #1
 8004900:	e7ee      	b.n	80048e0 <__libc_init_array+0xc>
 8004902:	f855 3b04 	ldr.w	r3, [r5], #4
 8004906:	4798      	blx	r3
 8004908:	3601      	adds	r6, #1
 800490a:	e7f2      	b.n	80048f2 <__libc_init_array+0x1e>
 800490c:	08004984 	.word	0x08004984
 8004910:	08004984 	.word	0x08004984
 8004914:	08004984 	.word	0x08004984
 8004918:	08004988 	.word	0x08004988

0800491c <_init>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	bf00      	nop
 8004920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004922:	bc08      	pop	{r3}
 8004924:	469e      	mov	lr, r3
 8004926:	4770      	bx	lr

08004928 <_fini>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	bf00      	nop
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr
