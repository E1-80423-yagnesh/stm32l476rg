
stepper_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08006de4  08006de4  00007de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f70  08006f70  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  08006f70  08006f70  00007f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f78  08006f78  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f78  08006f78  00007f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f7c  08006f7c  00007f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006f80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000078  08006ff8  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08006ff8  00008488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014116  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292d  00000000  00000000  0001c1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0001eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecd  00000000  00000000  0001fdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028932  00000000  00000000  00020ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017397  00000000  00000000  000495d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f77aa  00000000  00000000  0006096e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005790  00000000  00000000  0015815c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015d8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dcc 	.word	0x08006dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006dcc 	.word	0x08006dcc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	b29a      	uxth	r2, r3
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	68b9      	ldr	r1, [r7, #8]
 8000576:	4804      	ldr	r0, [pc, #16]	@ (8000588 <_write+0x28>)
 8000578:	f004 fe74 	bl	8005264 <HAL_UART_Transmit>
	return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000180 	.word	0x20000180

0800058c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000592:	f001 f935 	bl	8001800 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000596:	f000 f8ab 	bl	80006f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800059a:	f000 fa71 	bl	8000a80 <MX_GPIO_Init>
	MX_I2C1_Init();
 800059e:	f000 f8f9 	bl	8000794 <MX_I2C1_Init>
	MX_TIM3_Init();
 80005a2:	f000 f937 	bl	8000814 <MX_TIM3_Init>
	MX_UART4_Init();
 80005a6:	f000 f9db 	bl	8000960 <MX_UART4_Init>
	MX_UART5_Init();
 80005aa:	f000 fa09 	bl	80009c0 <MX_UART5_Init>
	MX_USART3_UART_Init();
 80005ae:	f000 fa37 	bl	8000a20 <MX_USART3_UART_Init>
	MX_TIM16_Init();
 80005b2:	f000 f9af 	bl	8000914 <MX_TIM16_Init>
	//DWT_Init();
	/* USER CODE BEGIN 2 */
	setupSensor();
 80005b6:	f000 fd3d 	bl	8001034 <setupSensor>
	setupMotor();
 80005ba:	f000 fc01 	bl	8000dc0 <setupMotor>
	//	uint8_t usercase = '0';


		uint8_t rx;

		HAL_UART_Receive(&huart4, &rx, 1, 100);
 80005be:	1cf9      	adds	r1, r7, #3
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	2201      	movs	r2, #1
 80005c4:	4840      	ldr	r0, [pc, #256]	@ (80006c8 <main+0x13c>)
 80005c6:	f004 fed6 	bl	8005376 <HAL_UART_Receive>
	    usercase = rx - '0';
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	3b30      	subs	r3, #48	@ 0x30
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b3e      	ldr	r3, [pc, #248]	@ (80006cc <main+0x140>)
 80005d2:	701a      	strb	r2, [r3, #0]



			switch (usercase) {
 80005d4:	4b3d      	ldr	r3, [pc, #244]	@ (80006cc <main+0x140>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d873      	bhi.n	80006c4 <main+0x138>
 80005dc:	a201      	add	r2, pc, #4	@ (adr r2, 80005e4 <main+0x58>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	080005f5 	.word	0x080005f5
 80005e8:	0800060b 	.word	0x0800060b
 80005ec:	08000627 	.word	0x08000627
 80005f0:	080006a9 	.word	0x080006a9
			case 0:

				lampOff();
 80005f4:	f000 fcc6 	bl	8000f84 <lampOff>
				homePosition();
 80005f8:	f000 fc90 	bl	8000f1c <homePosition>
				//HAL_UART_Transmit(&huart4, (uint8_t*)"Reached Home Position\r\n", 23, HAL_MAX_DELAY);
				printf("Reached Home Position\r\n");
 80005fc:	4834      	ldr	r0, [pc, #208]	@ (80006d0 <main+0x144>)
 80005fe:	f005 fd81 	bl	8006104 <puts>

				usercase = 255;
 8000602:	4b32      	ldr	r3, [pc, #200]	@ (80006cc <main+0x140>)
 8000604:	22ff      	movs	r2, #255	@ 0xff
 8000606:	701a      	strb	r2, [r3, #0]

				break;
 8000608:	e05d      	b.n	80006c6 <main+0x13a>

			case 1:
				lampOn();
 800060a:	f000 fca7 	bl	8000f5c <lampOn>
				rotateMotor(5100, 1);
 800060e:	2101      	movs	r1, #1
 8000610:	f241 30ec 	movw	r0, #5100	@ 0x13ec
 8000614:	f000 fc3c 	bl	8000e90 <rotateMotor>
				//HAL_UART_Transmit(&huart4, (uint8_t*)"Scan Initialized\r\n", 18, HAL_MAX_DELAY);
				printf("Scan Initialized\r\n");
 8000618:	482e      	ldr	r0, [pc, #184]	@ (80006d4 <main+0x148>)
 800061a:	f005 fd73 	bl	8006104 <puts>
				usercase = 255;
 800061e:	4b2b      	ldr	r3, [pc, #172]	@ (80006cc <main+0x140>)
 8000620:	22ff      	movs	r2, #255	@ 0xff
 8000622:	701a      	strb	r2, [r3, #0]
				break;
 8000624:	e04f      	b.n	80006c6 <main+0x13a>

			case 2:
				printf("Taking Scan\r\n");
 8000626:	482c      	ldr	r0, [pc, #176]	@ (80006d8 <main+0x14c>)
 8000628:	f005 fd6c 	bl	8006104 <puts>
				//HAL_UART_Transmit(&huart4, (uint8_t*)"Taking Scan\r\n", 13, HAL_MAX_DELAY);
				for (int stage = 0; stage < 14; stage++) {
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e030      	b.n	8000694 <main+0x108>
					rotateMotor(343, 1);
 8000632:	2101      	movs	r1, #1
 8000634:	f240 1057 	movw	r0, #343	@ 0x157
 8000638:	f000 fc2a 	bl	8000e90 <rotateMotor>

					for (int scan = 0; scan < 3; scan++) {
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e022      	b.n	8000688 <main+0xfc>
						//sprintf(scanMsg, "Scan %d_%d\r\n", stage + 1, scan + 1);
						//HAL_UART_Transmit(&huart4, (uint8_t*)scanMsg, strlen(scanMsg), HAL_MAX_DELAY);
						//char scanMsg[20];
						printf("Scan %d_%d\r\n", stage + 1, scan + 1);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	1c59      	adds	r1, r3, #1
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	3301      	adds	r3, #1
 800064a:	461a      	mov	r2, r3
 800064c:	4823      	ldr	r0, [pc, #140]	@ (80006dc <main+0x150>)
 800064e:	f005 fcf1 	bl	8006034 <iprintf>

						// Direct spectra acquisition
						acquireSpectra();
 8000652:	f000 fd41 	bl	80010d8 <acquireSpectra>

						// Print the acquired spectra
						for (int channel = 0; channel < CHANNELS; channel++) {
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	e00b      	b.n	8000674 <main+0xe8>
							//char channelMsg[30];
							//sprintf(channelMsg, "Channel %d: %d\r\n", channel, spectra[channel]);
							//HAL_UART_Transmit(&huart4, (uint8_t*)channelMsg, strlen(channelMsg), HAL_MAX_DELAY);
							printf("Channel %d: %d\r\n", channel,
									spectra[channel]);
 800065c:	4a20      	ldr	r2, [pc, #128]	@ (80006e0 <main+0x154>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
							printf("Channel %d: %d\r\n", channel,
 8000664:	461a      	mov	r2, r3
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	481e      	ldr	r0, [pc, #120]	@ (80006e4 <main+0x158>)
 800066a:	f005 fce3 	bl	8006034 <iprintf>
						for (int channel = 0; channel < CHANNELS; channel++) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b07      	cmp	r3, #7
 8000678:	ddf0      	ble.n	800065c <main+0xd0>
						}

						HAL_Delay(1000); // 1 sec delay between scans
 800067a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067e:	f001 f93b 	bl	80018f8 <HAL_Delay>
					for (int scan = 0; scan < 3; scan++) {
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3301      	adds	r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b02      	cmp	r3, #2
 800068c:	ddd9      	ble.n	8000642 <main+0xb6>
				for (int stage = 0; stage < 14; stage++) {
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	3301      	adds	r3, #1
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b0d      	cmp	r3, #13
 8000698:	ddcb      	ble.n	8000632 <main+0xa6>
					}
				}
				//HAL_UART_Transmit(&huart4, (uint8_t*)"Scan Finished\r\n", 15, HAL_MAX_DELAY);
				printf("Scan Finished\r\n");
 800069a:	4813      	ldr	r0, [pc, #76]	@ (80006e8 <main+0x15c>)
 800069c:	f005 fd32 	bl	8006104 <puts>
				usercase = 255;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <main+0x140>)
 80006a2:	22ff      	movs	r2, #255	@ 0xff
 80006a4:	701a      	strb	r2, [r3, #0]
				break;
 80006a6:	e00e      	b.n	80006c6 <main+0x13a>

			case 3:
				lampOff();
 80006a8:	f000 fc6c 	bl	8000f84 <lampOff>
				rotateMotor(9555, 1);
 80006ac:	2101      	movs	r1, #1
 80006ae:	f242 5053 	movw	r0, #9555	@ 0x2553
 80006b2:	f000 fbed 	bl	8000e90 <rotateMotor>
				// HAL_UART_Transmit(&huart4, (uint8_t*)"Sample Discarded\r\n", 18, HAL_MAX_DELAY);
				printf("Sample Discarded\r\n");
 80006b6:	480d      	ldr	r0, [pc, #52]	@ (80006ec <main+0x160>)
 80006b8:	f005 fd24 	bl	8006104 <puts>
                usercase =255;
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <main+0x140>)
 80006be:	22ff      	movs	r2, #255	@ 0xff
 80006c0:	701a      	strb	r2, [r3, #0]
				break;
 80006c2:	e000      	b.n	80006c6 <main+0x13a>

			default:

				break;
 80006c4:	bf00      	nop
	while (1) {
 80006c6:	e77a      	b.n	80005be <main+0x32>
 80006c8:	20000180 	.word	0x20000180
 80006cc:	20000000 	.word	0x20000000
 80006d0:	08006de4 	.word	0x08006de4
 80006d4:	08006dfc 	.word	0x08006dfc
 80006d8:	08006e10 	.word	0x08006e10
 80006dc:	08006e20 	.word	0x08006e20
 80006e0:	20000320 	.word	0x20000320
 80006e4:	08006e30 	.word	0x08006e30
 80006e8:	08006e44 	.word	0x08006e44
 80006ec:	08006e54 	.word	0x08006e54

080006f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b096      	sub	sp, #88	@ 0x58
 80006f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2244      	movs	r2, #68	@ 0x44
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 fde0 	bl	80062c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000704:	463b      	mov	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000712:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000716:	f002 f869 	bl	80027ec <HAL_PWREx_ControlVoltageScaling>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000720:	f000 fa68 	bl	8000bf4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	2310      	movs	r3, #16
 8000730:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000736:	2302      	movs	r3, #2
 8000738:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800073e:	230a      	movs	r3, #10
 8000740:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000742:	2307      	movs	r3, #7
 8000744:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000746:	2302      	movs	r3, #2
 8000748:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800074a:	2302      	movs	r3, #2
 800074c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4618      	mov	r0, r3
 8000754:	f002 f8a0 	bl	8002898 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x72>
		Error_Handler();
 800075e:	f000 fa49 	bl	8000bf4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2303      	movs	r3, #3
 8000768:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000776:	463b      	mov	r3, r7
 8000778:	2104      	movs	r1, #4
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fc68 	bl	8003050 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x9a>
		Error_Handler();
 8000786:	f000 fa35 	bl	8000bf4 <Error_Handler>
	}
}
 800078a:	bf00      	nop
 800078c:	3758      	adds	r7, #88	@ 0x58
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <MX_I2C1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	@ (800080c <MX_I2C1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10D19CE4;
 800079e:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000810 <MX_I2C1_Init+0x7c>)
 80007a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007aa:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80007ce:	480e      	ldr	r0, [pc, #56]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007d0:	f001 fb76 	bl	8001ec0 <HAL_I2C_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x4a>
		Error_Handler();
 80007da:	f000 fa0b 	bl	8000bf4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80007de:	2100      	movs	r1, #0
 80007e0:	4809      	ldr	r0, [pc, #36]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007e2:	f001 ff5d 	bl	80026a0 <HAL_I2CEx_ConfigAnalogFilter>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80007ec:	f000 fa02 	bl	8000bf4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80007f0:	2100      	movs	r1, #0
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_I2C1_Init+0x74>)
 80007f4:	f001 ff9f 	bl	8002736 <HAL_I2CEx_ConfigDigitalFilter>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80007fe:	f000 f9f9 	bl	8000bf4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000094 	.word	0x20000094
 800080c:	40005400 	.word	0x40005400
 8000810:	10d19ce4 	.word	0x10d19ce4

08000814 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b08e      	sub	sp, #56	@ 0x38
 8000818:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800081a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000834:	463b      	mov	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]
 8000844:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000846:	4b31      	ldr	r3, [pc, #196]	@ (800090c <MX_TIM3_Init+0xf8>)
 8000848:	4a31      	ldr	r2, [pc, #196]	@ (8000910 <MX_TIM3_Init+0xfc>)
 800084a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 79;
 800084c:	4b2f      	ldr	r3, [pc, #188]	@ (800090c <MX_TIM3_Init+0xf8>)
 800084e:	224f      	movs	r2, #79	@ 0x4f
 8000850:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b2e      	ldr	r3, [pc, #184]	@ (800090c <MX_TIM3_Init+0xf8>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 999;
 8000858:	4b2c      	ldr	r3, [pc, #176]	@ (800090c <MX_TIM3_Init+0xf8>)
 800085a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800085e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b2a      	ldr	r3, [pc, #168]	@ (800090c <MX_TIM3_Init+0xf8>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000866:	4b29      	ldr	r3, [pc, #164]	@ (800090c <MX_TIM3_Init+0xf8>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800086c:	4827      	ldr	r0, [pc, #156]	@ (800090c <MX_TIM3_Init+0xf8>)
 800086e:	f003 facf 	bl	8003e10 <HAL_TIM_Base_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x68>
		Error_Handler();
 8000878:	f000 f9bc 	bl	8000bf4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000880:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000882:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000886:	4619      	mov	r1, r3
 8000888:	4820      	ldr	r0, [pc, #128]	@ (800090c <MX_TIM3_Init+0xf8>)
 800088a:	f003 feb9 	bl	8004600 <HAL_TIM_ConfigClockSource>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM3_Init+0x84>
		Error_Handler();
 8000894:	f000 f9ae 	bl	8000bf4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000898:	481c      	ldr	r0, [pc, #112]	@ (800090c <MX_TIM3_Init+0xf8>)
 800089a:	f003 fba0 	bl	8003fde <HAL_TIM_PWM_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0x94>
		Error_Handler();
 80008a4:	f000 f9a6 	bl	8000bf4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4815      	ldr	r0, [pc, #84]	@ (800090c <MX_TIM3_Init+0xf8>)
 80008b8:	f004 fba8 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80008c2:	f000 f997 	bl	8000bf4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c6:	2360      	movs	r3, #96	@ 0x60
 80008c8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 999;
 80008ca:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80008ce:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80008d8:	463b      	mov	r3, r7
 80008da:	2204      	movs	r2, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	480b      	ldr	r0, [pc, #44]	@ (800090c <MX_TIM3_Init+0xf8>)
 80008e0:	f003 fd7a 	bl	80043d8 <HAL_TIM_PWM_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80008ea:	f000 f983 	bl	8000bf4 <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 80008ee:	4b07      	ldr	r3, [pc, #28]	@ (800090c <MX_TIM3_Init+0xf8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	699a      	ldr	r2, [r3, #24]
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <MX_TIM3_Init+0xf8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80008fc:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80008fe:	4803      	ldr	r0, [pc, #12]	@ (800090c <MX_TIM3_Init+0xf8>)
 8000900:	f000 fd4e 	bl	80013a0 <HAL_TIM_MspPostInit>

}
 8000904:	bf00      	nop
 8000906:	3738      	adds	r7, #56	@ 0x38
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000e8 	.word	0x200000e8
 8000910:	40000400 	.word	0x40000400

08000914 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <MX_TIM16_Init+0x44>)
 800091a:	4a10      	ldr	r2, [pc, #64]	@ (800095c <MX_TIM16_Init+0x48>)
 800091c:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 79;
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_TIM16_Init+0x44>)
 8000920:	224f      	movs	r2, #79	@ 0x4f
 8000922:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_TIM16_Init+0x44>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <MX_TIM16_Init+0x44>)
 800092c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000930:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_TIM16_Init+0x44>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <MX_TIM16_Init+0x44>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_TIM16_Init+0x44>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <MX_TIM16_Init+0x44>)
 8000946:	f003 fa63 	bl	8003e10 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM16_Init+0x40>
		Error_Handler();
 8000950:	f000 f950 	bl	8000bf4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000134 	.word	0x20000134
 800095c:	40014400 	.word	0x40014400

08000960 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000964:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_UART4_Init+0x58>)
 8000966:	4a15      	ldr	r2, [pc, #84]	@ (80009bc <MX_UART4_Init+0x5c>)
 8000968:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 9600;
 800096a:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <MX_UART4_Init+0x58>)
 800096c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000970:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <MX_UART4_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_UART4_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_UART4_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_UART4_Init+0x58>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <MX_UART4_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_UART4_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <MX_UART4_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_UART4_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80009a2:	4805      	ldr	r0, [pc, #20]	@ (80009b8 <MX_UART4_Init+0x58>)
 80009a4:	f004 fbba 	bl	800511c <HAL_UART_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_UART4_Init+0x52>
		Error_Handler();
 80009ae:	f000 f921 	bl	8000bf4 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000180 	.word	0x20000180
 80009bc:	40004c00 	.word	0x40004c00

080009c0 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80009c4:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	@ (8000a1c <MX_UART5_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 9600;
 80009ca:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009d0:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_UART5_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_HalfDuplex_Init(&huart5) != HAL_OK) {
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_UART5_Init+0x58>)
 8000a04:	f004 fbd8 	bl	80051b8 <HAL_HalfDuplex_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_UART5_Init+0x52>
		Error_Handler();
 8000a0e:	f000 f8f1 	bl	8000bf4 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000208 	.word	0x20000208
 8000a1c:	40005000 	.word	0x40005000

08000a20 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a26:	4a15      	ldr	r2, [pc, #84]	@ (8000a7c <MX_USART3_UART_Init+0x5c>)
 8000a28:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a30:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_USART3_UART_Init+0x58>)
 8000a64:	f004 fb5a 	bl	800511c <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000a6e:	f000 f8c1 	bl	8000bf4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000290 	.word	0x20000290
 8000a7c:	40004800 	.word	0x40004800

08000a80 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b54      	ldr	r3, [pc, #336]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9a:	4a53      	ldr	r2, [pc, #332]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa2:	4b51      	ldr	r3, [pc, #324]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa6:	f003 0304 	and.w	r3, r3, #4
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b4e      	ldr	r3, [pc, #312]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a4d      	ldr	r2, [pc, #308]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b4b      	ldr	r3, [pc, #300]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b48      	ldr	r3, [pc, #288]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	4a47      	ldr	r2, [pc, #284]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad2:	4b45      	ldr	r3, [pc, #276]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b42      	ldr	r3, [pc, #264]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a41      	ldr	r2, [pc, #260]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b3f      	ldr	r3, [pc, #252]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8000af6:	2200      	movs	r2, #0
 8000af8:	f640 7182 	movw	r1, #3970	@ 0xf82
 8000afc:	483b      	ldr	r0, [pc, #236]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000afe:	f001 f9c7 	bl	8001e90 <HAL_GPIO_WritePin>
			GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
					| GPIO_PIN_11, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_8,
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b0c:	f001 f9c0 	bl	8001e90 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b16:	4836      	ldr	r0, [pc, #216]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000b18:	f001 f9ba 	bl	8001e90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	482f      	ldr	r0, [pc, #188]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000b30:	f000 ffec 	bl	8001b0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC1 PC7 PC8 PC9
	 PC10 PC11 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
 8000b34:	f640 7382 	movw	r3, #3970	@ 0xf82
 8000b38:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_10 | GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4827      	ldr	r0, [pc, #156]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000b4e:	f000 ffdd 	bl	8001b0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA6 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_8;
 8000b52:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6e:	f000 ffcd 	bl	8001b0c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b72:	2320      	movs	r3, #32
 8000b74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b88:	f000 ffc0 	bl	8001b0c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000ba6:	f000 ffb1 	bl	8001b0c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000bc0:	f000 ffa4 	bl	8001b0c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000bc4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bc8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bdc:	f000 ff96 	bl	8001b0c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	@ 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000
 8000bec:	48000800 	.word	0x48000800
 8000bf0:	48000400 	.word	0x48000400

08000bf4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <Error_Handler+0x8>

08000c00 <calculateCRC>:

int step = 1;
uint8_t data[8];


uint8_t calculateCRC(uint8_t *data, uint8_t length) {
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8000c10:	2300      	movs	r3, #0
 8000c12:	73bb      	strb	r3, [r7, #14]
 8000c14:	e027      	b.n	8000c66 <calculateCRC+0x66>
        uint8_t currentByte = data[i];
 8000c16:	7bbb      	ldrb	r3, [r7, #14]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	737b      	strb	r3, [r7, #13]
        for (uint8_t j = 0; j < 8; j++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	733b      	strb	r3, [r7, #12]
 8000c24:	e019      	b.n	8000c5a <calculateCRC+0x5a>
            if ((crc >> 7) ^ (currentByte & 0x01)) {
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	09db      	lsrs	r3, r3, #7
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	7b7b      	ldrb	r3, [r7, #13]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d007      	beq.n	8000c48 <calculateCRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	f083 0307 	eor.w	r3, r3, #7
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e002      	b.n	8000c4e <calculateCRC+0x4e>
            } else {
                crc = crc << 1;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
            }
            currentByte = currentByte >> 1;
 8000c4e:	7b7b      	ldrb	r3, [r7, #13]
 8000c50:	085b      	lsrs	r3, r3, #1
 8000c52:	737b      	strb	r3, [r7, #13]
        for (uint8_t j = 0; j < 8; j++) {
 8000c54:	7b3b      	ldrb	r3, [r7, #12]
 8000c56:	3301      	adds	r3, #1
 8000c58:	733b      	strb	r3, [r7, #12]
 8000c5a:	7b3b      	ldrb	r3, [r7, #12]
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	d9e2      	bls.n	8000c26 <calculateCRC+0x26>
    for (uint8_t i = 0; i < length; i++) {
 8000c60:	7bbb      	ldrb	r3, [r7, #14]
 8000c62:	3301      	adds	r3, #1
 8000c64:	73bb      	strb	r3, [r7, #14]
 8000c66:	7bba      	ldrb	r2, [r7, #14]
 8000c68:	78fb      	ldrb	r3, [r7, #3]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d3d3      	bcc.n	8000c16 <calculateCRC+0x16>
        }
    }
    return crc;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <TMC2226_WriteRegister>:

void TMC2226_WriteRegister(uint8_t reg, uint32_t value) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]


    // Build the write frame
    data[0] = TMC2226_SYNC_BYTE;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	701a      	strb	r2, [r3, #0]
    data[1] = TMC2226_SLAVE_ADDR;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	705a      	strb	r2, [r3, #1]
    data[2] = reg | TMC2226_WRITE_FLAG;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000c9e:	709a      	strb	r2, [r3, #2]
    data[3] = (value >> 24) & 0xFF;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	0e1b      	lsrs	r3, r3, #24
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000ca8:	70da      	strb	r2, [r3, #3]
    data[4] = (value >> 16) & 0xFF;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000cb2:	711a      	strb	r2, [r3, #4]
    data[5] = (value >> 8) & 0xFF;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	0a1b      	lsrs	r3, r3, #8
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000cbc:	715a      	strb	r2, [r3, #5]
    data[6] = value & 0xFF;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000cc4:	719a      	strb	r2, [r3, #6]
    data[7] = calculateCRC(data, 7);
 8000cc6:	2107      	movs	r1, #7
 8000cc8:	480a      	ldr	r0, [pc, #40]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000cca:	f7ff ff99 	bl	8000c00 <calculateCRC>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000cd4:	71da      	strb	r2, [r3, #7]

    // Send via UART (adjust for your UART instance)
    HAL_UART_Transmit(&huart5, data, 8, 500);
 8000cd6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000cda:	2208      	movs	r2, #8
 8000cdc:	4905      	ldr	r1, [pc, #20]	@ (8000cf4 <TMC2226_WriteRegister+0x78>)
 8000cde:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <TMC2226_WriteRegister+0x7c>)
 8000ce0:	f004 fac0 	bl	8005264 <HAL_UART_Transmit>




    HAL_Delay(10);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f000 fe07 	bl	80018f8 <HAL_Delay>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000318 	.word	0x20000318
 8000cf8:	20000208 	.word	0x20000208

08000cfc <TMC2226_Init>:
    HAL_Delay(15); // Wait for programming


}

void TMC2226_Init(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
    HAL_Delay(100);  // Wait for driver to be ready
 8000d02:	2064      	movs	r0, #100	@ 0x64
 8000d04:	f000 fdf8 	bl	80018f8 <HAL_Delay>

    // Reset and configure GCONF register
    uint32_t gconf = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
    gconf |= (1 << 0);   // I_scale_analog = 1 (use VREF for current setting)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
    gconf |= (1 << 1);   // internal_rsense = 1 (use internal sense resistors)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	607b      	str	r3, [r7, #4]
    gconf |= (0 << 2);   // en_spreadcycle = 0 (start with StealthChop)
    gconf |= (0 << 3);   // shaft = 0 (normal direction)
    gconf |= (0 << 4);   // index_otpw = 0  INDEX shows the first microstep position of sequencer
    gconf |= (0 << 5);   // index_step = 0
    gconf |= (1 << 6);   // pdn_disable = 1 (UART control)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d22:	607b      	str	r3, [r7, #4]
    gconf |= (0 << 7);   // mstep_reg_select = 1 (microsteps via UART)
    gconf |= (0 << 8);   // multistep_filt = 0
    gconf |= (0 << 9);   // test_mode = 0
	TMC2226_WriteRegister(TMC2226_GCONF, gconf);
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ffa8 	bl	8000c7c <TMC2226_WriteRegister>

	HAL_Delay(10);
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f000 fde3 	bl	80018f8 <HAL_Delay>
	//gconf_readback = TMC2226_ReadRegister(TMC2226_GCONF);



    // Configure CHOPCONF register for basic StealthChop operation
    uint32_t chopconf = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
    chopconf |= (5 << 0);    // toff = 5 (chopper off time)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	f043 0305 	orr.w	r3, r3, #5
 8000d3c:	603b      	str	r3, [r7, #0]
    chopconf |= (2 << 4);    // hstrt = 2 (hysteresis start)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f043 0320 	orr.w	r3, r3, #32
 8000d44:	603b      	str	r3, [r7, #0]
    chopconf |= (0 << 7);    // hend = 0 (hysteresis end)
    chopconf |= (0 << 15);   // tbl = 0 (blanking time)
    chopconf |= (0 << 17);   // vsense = 0 (high sensitivity)
    //chopconf |= (8 << 24);   // mres = 4 (16 microsteps)
    chopconf |= (1 << 28);   // intpol = 1 (interpolation)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4c:	603b      	str	r3, [r7, #0]
    chopconf |= (0 << 29);   // dedge = 0

    chopconf |= (0 << 30);   // diss2g = 0
    chopconf |= (0 << 31);   // diss2vs = 0
    TMC2226_WriteRegister(TMC2226_CHOPCONF, chopconf);
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	206c      	movs	r0, #108	@ 0x6c
 8000d52:	f7ff ff93 	bl	8000c7c <TMC2226_WriteRegister>
    //chopconf_readback = TMC2226_ReadRegister(TMC2226_CHOPCONF);
    //setup hold, run current
    TMC2226_SetCurrent(10,3);
 8000d56:	2103      	movs	r1, #3
 8000d58:	200a      	movs	r0, #10
 8000d5a:	f000 f807 	bl	8000d6c <TMC2226_SetCurrent>
//    pwmconf |= (0 << 23);    // pwm_reg = 0
//    pwmconf |= (4 << 24);    // pwm_lim = 4
//    TMC2226_WriteRegister(TMC2226_PWMCONF, pwmconf);
//    // pwmconf_readback = TMC2226_ReadRegister(TMC2226_PWMCONF);

    HAL_Delay(10);
 8000d5e:	200a      	movs	r0, #10
 8000d60:	f000 fdca 	bl	80018f8 <HAL_Delay>
   // printf("TMC2226 Initialized Successfully\r\n");
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <TMC2226_SetCurrent>:

void TMC2226_SetCurrent(uint16_t run_current, uint16_t hold_current) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	80fb      	strh	r3, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	80bb      	strh	r3, [r7, #4]
    if (run_current > 31) run_current = 31;
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	2b1f      	cmp	r3, #31
 8000d80:	d901      	bls.n	8000d86 <TMC2226_SetCurrent+0x1a>
 8000d82:	231f      	movs	r3, #31
 8000d84:	80fb      	strh	r3, [r7, #6]
    if (hold_current > 31) hold_current = 31;
 8000d86:	88bb      	ldrh	r3, [r7, #4]
 8000d88:	2b1f      	cmp	r3, #31
 8000d8a:	d901      	bls.n	8000d90 <TMC2226_SetCurrent+0x24>
 8000d8c:	231f      	movs	r3, #31
 8000d8e:	80bb      	strh	r3, [r7, #4]

    uint32_t ihold_irun = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
    ihold_irun |= (hold_current << 0);  // IHOLD
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]
    ihold_irun |= (run_current << 8);   // IRUN
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
    ihold_irun |= (5 << 16);            // IHOLDDELAY
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000dac:	60fb      	str	r3, [r7, #12]

    TMC2226_WriteRegister(TMC2226_IHOLD_IRUN, ihold_irun);
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	2010      	movs	r0, #16
 8000db2:	f7ff ff63 	bl	8000c7c <TMC2226_WriteRegister>
   // printf("Current Set - Run: %d/31, Hold: %d/31\r\n", run_current, hold_current);
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <setupMotor>:

void setupMotor(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
    // Power-on reset sequence
    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, GPIO_PIN_SET);  // Disable first
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dca:	4813      	ldr	r0, [pc, #76]	@ (8000e18 <setupMotor+0x58>)
 8000dcc:	f001 f860 	bl	8001e90 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Wait 10ms
 8000dd0:	200a      	movs	r0, #10
 8000dd2:	f000 fd91 	bl	80018f8 <HAL_Delay>

    // Configure pins before enabling
    HAL_GPIO_WritePin(PDN_UART_TX_PORT, PDN_UART_TX_PIN, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ddc:	480f      	ldr	r0, [pc, #60]	@ (8000e1c <setupMotor+0x5c>)
 8000dde:	f001 f857 	bl	8001e90 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PDN_UART_RX_PORT, PDN_UART_RX_PIN, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2104      	movs	r1, #4
 8000de6:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <setupMotor+0x58>)
 8000de8:	f001 f852 	bl	8001e90 <HAL_GPIO_WritePin>


     TMC2226_Init();
 8000dec:	f7ff ff86 	bl	8000cfc <TMC2226_Init>
    // Set microstepping
    setMicrostepping(0, 0);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f814 	bl	8000e20 <setMicrostepping>


    // Enable stealth mode
    //enableStealthMode();

    enablespreadcyclemode();
 8000df8:	f000 f83e 	bl	8000e78 <enablespreadcyclemode>

    HAL_Delay(1);  // Short delay before enabling
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f000 fd7b 	bl	80018f8 <HAL_Delay>

    // enable the driver
    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e08:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <setupMotor+0x58>)
 8000e0a:	f001 f841 	bl	8001e90 <HAL_GPIO_WritePin>


    HAL_Delay(10);
 8000e0e:	200a      	movs	r0, #10
 8000e10:	f000 fd72 	bl	80018f8 <HAL_Delay>


}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	48000800 	.word	0x48000800
 8000e1c:	48000c00 	.word	0x48000c00

08000e20 <setMicrostepping>:


void setMicrostepping(uint8_t ms1_state, uint8_t ms2_state)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
    // Set MS1 pin
    if (ms1_state) {
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d005      	beq.n	8000e42 <setMicrostepping+0x22>
        HAL_GPIO_WritePin(MS1_PORT, MS1_PIN, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <setMicrostepping+0x54>)
 8000e3c:	f001 f828 	bl	8001e90 <HAL_GPIO_WritePin>
 8000e40:	e004      	b.n	8000e4c <setMicrostepping+0x2c>
    } else {
        HAL_GPIO_WritePin(MS1_PORT, MS1_PIN, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2180      	movs	r1, #128	@ 0x80
 8000e46:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <setMicrostepping+0x54>)
 8000e48:	f001 f822 	bl	8001e90 <HAL_GPIO_WritePin>
    }

    // Set MS2 pin
    if (ms2_state) {
 8000e4c:	79bb      	ldrb	r3, [r7, #6]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d006      	beq.n	8000e60 <setMicrostepping+0x40>
        HAL_GPIO_WritePin(MS2_PORT, MS2_PIN, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <setMicrostepping+0x54>)
 8000e5a:	f001 f819 	bl	8001e90 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(MS2_PORT, MS2_PIN, GPIO_PIN_RESET);
    }


}
 8000e5e:	e005      	b.n	8000e6c <setMicrostepping+0x4c>
        HAL_GPIO_WritePin(MS2_PORT, MS2_PIN, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e66:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <setMicrostepping+0x54>)
 8000e68:	f001 f812 	bl	8001e90 <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	48000800 	.word	0x48000800

08000e78 <enablespreadcyclemode>:
    HAL_GPIO_WritePin(SPREAD_PORT, SPREAD_PIN, GPIO_PIN_RESET);

}

void enablespreadcyclemode(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(SPREAD_PORT, SPREAD_PIN, GPIO_PIN_SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e86:	f001 f803 	bl	8001e90 <HAL_GPIO_WritePin>

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <rotateMotor>:


void rotateMotor(int steps, uint8_t clockwise)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	70fb      	strb	r3, [r7, #3]


    // Set motor direction
    if(clockwise)
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <rotateMotor+0x20>
    {
        HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ea8:	4818      	ldr	r0, [pc, #96]	@ (8000f0c <rotateMotor+0x7c>)
 8000eaa:	f000 fff1 	bl	8001e90 <HAL_GPIO_WritePin>
 8000eae:	e005      	b.n	8000ebc <rotateMotor+0x2c>
    }
    else
    {
        HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000eb6:	4815      	ldr	r0, [pc, #84]	@ (8000f0c <rotateMotor+0x7c>)
 8000eb8:	f000 ffea 	bl	8001e90 <HAL_GPIO_WritePin>
    }

    // Step the motor
    for(int i = 0; i < step; i++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e01a      	b.n	8000ef8 <rotateMotor+0x68>
    {
        HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ec8:	4810      	ldr	r0, [pc, #64]	@ (8000f0c <rotateMotor+0x7c>)
 8000eca:	f000 ffe1 	bl	8001e90 <HAL_GPIO_WritePin>

        microsecond_delay(time1);
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <rotateMotor+0x80>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f867 	bl	8000fa8 <microsecond_delay>
        HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ee0:	480a      	ldr	r0, [pc, #40]	@ (8000f0c <rotateMotor+0x7c>)
 8000ee2:	f000 ffd5 	bl	8001e90 <HAL_GPIO_WritePin>

        microsecond_delay(time2);
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <rotateMotor+0x84>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f85b 	bl	8000fa8 <microsecond_delay>
    for(int i = 0; i < step; i++)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <rotateMotor+0x88>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	dbdf      	blt.n	8000ec2 <rotateMotor+0x32>
    }

}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	20000004 	.word	0x20000004
 8000f14:	20000008 	.word	0x20000008
 8000f18:	2000000c 	.word	0x2000000c

08000f1c <homePosition>:

void homePosition(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
    GPIO_PinState caseState;
    caseState = HAL_GPIO_ReadPin(CASE_PORT, CASE_PIN);
 8000f22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f26:	480c      	ldr	r0, [pc, #48]	@ (8000f58 <homePosition+0x3c>)
 8000f28:	f000 ff9a 	bl	8001e60 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]

//    HAL_GPIO_WritePin(INDEX_PORT,INDEX_PIN, GPIO_PIN_SET);
//    microsecond_delay(100);
//    HAL_GPIO_WritePin(INDEX_PORT,INDEX_PIN, GPIO_PIN_RESET);

   if(caseState == GPIO_PIN_SET)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d105      	bne.n	8000f42 <homePosition+0x26>
   {
	   rotateMotor(300, 1);
 8000f36:	2101      	movs	r1, #1
 8000f38:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f3c:	f7ff ffa8 	bl	8000e90 <rotateMotor>
   }

    else if(caseState == GPIO_PIN_RESET){
	   rotateMotor(0, 1);
   }
}
 8000f40:	e006      	b.n	8000f50 <homePosition+0x34>
    else if(caseState == GPIO_PIN_RESET){
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d103      	bne.n	8000f50 <homePosition+0x34>
	   rotateMotor(0, 1);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff ffa0 	bl	8000e90 <rotateMotor>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	48000400 	.word	0x48000400

08000f5c <lampOn>:


void lampOn(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

    // ARR = 1000, PSC = 79 ,pwm freq = 1KHZ
    //uint32_t value = (duty_cycle * 1000) / 100;
    //TIM3->CCR2 = 1000
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f60:	2104      	movs	r1, #4
 8000f62:	4807      	ldr	r0, [pc, #28]	@ (8000f80 <lampOn+0x24>)
 8000f64:	f003 f89c 	bl	80040a0 <HAL_TIM_PWM_Start>
    // Set the PWM duty cycle
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <lampOn+0x24>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f70:	639a      	str	r2, [r3, #56]	@ 0x38

    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000f72:	2104      	movs	r1, #4
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <lampOn+0x24>)
 8000f76:	f003 f999 	bl	80042ac <HAL_TIM_PWM_Stop>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000e8 	.word	0x200000e8

08000f84 <lampOff>:

void lampOff(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

    // ARR = 1000, PSC = 79 ,pwm freq = 1KHZ
    //uint32_t value = (duty_cycle * 1000) / 100;
    //TIM3->CCR2 = 1000
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <lampOff+0x20>)
 8000f8c:	f003 f888 	bl	80040a0 <HAL_TIM_PWM_Start>
    // Set the PWM duty cycle
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <lampOff+0x20>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	639a      	str	r2, [r3, #56]	@ 0x38

    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <lampOff+0x20>)
 8000f9c:	f003 f986 	bl	80042ac <HAL_TIM_PWM_Stop>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200000e8 	.word	0x200000e8

08000fa8 <microsecond_delay>:

    return 0;
}

void microsecond_delay(uint16_t microseconds)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]


	__HAL_TIM_SET_COUNTER(&htim16, 0);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <microsecond_delay+0x34>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	625a      	str	r2, [r3, #36]	@ 0x24
	 HAL_TIM_Base_Start(&htim16);
 8000fba:	4808      	ldr	r0, [pc, #32]	@ (8000fdc <microsecond_delay+0x34>)
 8000fbc:	f002 ff80 	bl	8003ec0 <HAL_TIM_Base_Start>
    //__HAL_TIM_SET_COUNTER(&htim16, 0);




    while (__HAL_TIM_GET_COUNTER(&htim16) < microseconds);
 8000fc0:	bf00      	nop
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <microsecond_delay+0x34>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d3f9      	bcc.n	8000fc2 <microsecond_delay+0x1a>
    HAL_TIM_Base_Stop(&htim16);
 8000fce:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <microsecond_delay+0x34>)
 8000fd0:	f002 ffde 	bl	8003f90 <HAL_TIM_Base_Stop>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000134 	.word	0x20000134

08000fe0 <enableBuffers>:
volatile uint16_t packetIndex = 0;



HAL_StatusTypeDef enableBuffers(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
    // Enable signal buffer
    HAL_GPIO_WritePin(SIG_BUF_EN_PORT, SIG_BUF_EN_PIN, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fec:	f000 ff50 	bl	8001e90 <HAL_GPIO_WritePin>

    // Enable I2C buffer
    HAL_GPIO_WritePin(I2C_BUF_EN_PORT, I2C_BUF_EN_PIN, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2140      	movs	r1, #64	@ 0x40
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff8:	f000 ff4a 	bl	8001e90 <HAL_GPIO_WritePin>

    // Small delay to allow buffers to stabilize
    HAL_Delay(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 fc7b 	bl	80018f8 <HAL_Delay>

    return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}

08001008 <checkEOS>:

HAL_StatusTypeDef checkEOS(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
    // Check End of Scan signal
    GPIO_PinState eosState = HAL_GPIO_ReadPin(EOS_PORT, EOS_PIN);
 800100e:	2101      	movs	r1, #1
 8001010:	4807      	ldr	r0, [pc, #28]	@ (8001030 <checkEOS+0x28>)
 8001012:	f000 ff25 	bl	8001e60 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
    return (eosState == GPIO_PIN_SET) ? HAL_OK : HAL_ERROR;
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b01      	cmp	r3, #1
 800101e:	bf14      	ite	ne
 8001020:	2301      	movne	r3, #1
 8001022:	2300      	moveq	r3, #0
 8001024:	b2db      	uxtb	r3, r3
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	48000800 	.word	0x48000800

08001034 <setupSensor>:



void setupSensor(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
    // Enable buffers first
    enableBuffers();
 8001038:	f7ff ffd2 	bl	8000fe0 <enableBuffers>

    // ST pin as OUTPUT, initially HIGH
    HAL_GPIO_WritePin(ST_PORT, ST_PIN, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	2102      	movs	r1, #2
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <setupSensor+0x34>)
 8001042:	f000 ff25 	bl	8001e90 <HAL_GPIO_WritePin>

    // CLK pin as OUTPUT, initially LOW
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800104c:	4807      	ldr	r0, [pc, #28]	@ (800106c <setupSensor+0x38>)
 800104e:	f000 ff1f 	bl	8001e90 <HAL_GPIO_WritePin>

    // Initialize data available flag
    dataAvailable = 0;
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <setupSensor+0x3c>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
    packetIndex = 0;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <setupSensor+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]

    printf("Spectrum sensor initialized\r\n");
 800105e:	4806      	ldr	r0, [pc, #24]	@ (8001078 <setupSensor+0x44>)
 8001060:	f005 f850 	bl	8006104 <puts>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	48000800 	.word	0x48000800
 800106c:	48000400 	.word	0x48000400
 8001070:	20000330 	.word	0x20000330
 8001074:	20000332 	.word	0x20000332
 8001078:	08006e68 	.word	0x08006e68

0800107c <readExternalADC>:

uint16_t readExternalADC(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af02      	add	r7, sp, #8

    uint8_t adcData[2] = {0};
 8001082:	2300      	movs	r3, #0
 8001084:	803b      	strh	r3, [r7, #0]
    uint16_t adcValue = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    // Read 2 bytes from ADC
    status = HAL_I2C_Master_Receive(&hi2c1, (ADC_I2C_ADDRESS << 1), adcData, 2, 100);
 800108a:	463a      	mov	r2, r7
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2302      	movs	r3, #2
 8001092:	2190      	movs	r1, #144	@ 0x90
 8001094:	480e      	ldr	r0, [pc, #56]	@ (80010d0 <readExternalADC+0x54>)
 8001096:	f000 ffaf 	bl	8001ff8 <HAL_I2C_Master_Receive>
 800109a:	4603      	mov	r3, r0
 800109c:	717b      	strb	r3, [r7, #5]

    if (status == HAL_OK)
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d108      	bne.n	80010b6 <readExternalADC+0x3a>
    {
        // Combine bytes to form 16-bit value (MSB first)
        adcValue = (adcData[0] << 8) | adcData[1];
 80010a4:	783b      	ldrb	r3, [r7, #0]
 80010a6:	021b      	lsls	r3, r3, #8
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	787b      	ldrb	r3, [r7, #1]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	80fb      	strh	r3, [r7, #6]
 80010b4:	e006      	b.n	80010c4 <readExternalADC+0x48>
    }
    else
    {
        printf("ADC Read Error: %d\r\n", status);
 80010b6:	797b      	ldrb	r3, [r7, #5]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <readExternalADC+0x58>)
 80010bc:	f004 ffba 	bl	8006034 <iprintf>
        adcValue = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	80fb      	strh	r3, [r7, #6]
    }

    return adcValue;
 80010c4:	88fb      	ldrh	r3, [r7, #6]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000094 	.word	0x20000094
 80010d4:	08006e88 	.word	0x08006e88

080010d8 <acquireSpectra>:

void acquireSpectra(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
    // delayTime (dt) = 52microseconds, pixelread = 0
    uint32_t dt = 52;
 80010de:	2334      	movs	r3, #52	@ 0x34
 80010e0:	607b      	str	r3, [r7, #4]
    int pixelread = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]



    // Main acquisition loop - Discard first loop to avoid noisy acquisition, acquire from second loop
	for (int loop = 0; loop < 2; loop++) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	e083      	b.n	80011f4 <acquireSpectra+0x11c>
		// 3 clock cycles
		for (int clk = 0; clk < 3; clk++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e007      	b.n	8001102 <acquireSpectra+0x2a>
			microsecond_delay(dt);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff56 	bl	8000fa8 <microsecond_delay>
		for (int clk = 0; clk < 3; clk++) {
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	2b02      	cmp	r3, #2
 8001106:	ddf4      	ble.n	80010f2 <acquireSpectra+0x1a>
		}

		// CLK, LOW → dt
		HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800110e:	4842      	ldr	r0, [pc, #264]	@ (8001218 <acquireSpectra+0x140>)
 8001110:	f000 febe 	bl	8001e90 <HAL_GPIO_WritePin>
		microsecond_delay(dt);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	b29b      	uxth	r3, r3
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff45 	bl	8000fa8 <microsecond_delay>

		// ST, LOW
		HAL_GPIO_WritePin(ST_PORT, ST_PIN, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2102      	movs	r1, #2
 8001122:	483e      	ldr	r0, [pc, #248]	@ (800121c <acquireSpectra+0x144>)
 8001124:	f000 feb4 	bl	8001e90 <HAL_GPIO_WritePin>
		// 1 clock cycle
		microsecond_delay(dt);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	b29b      	uxth	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff3b 	bl	8000fa8 <microsecond_delay>

		// ST, HIGH
		HAL_GPIO_WritePin(ST_PORT, ST_PIN, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	2102      	movs	r1, #2
 8001136:	4839      	ldr	r0, [pc, #228]	@ (800121c <acquireSpectra+0x144>)
 8001138:	f000 feaa 	bl	8001e90 <HAL_GPIO_WritePin>
		// 1 clock cycle
		microsecond_delay(dt);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff31 	bl	8000fa8 <microsecond_delay>

		// 1 clock cycle
		microsecond_delay(dt);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff2c 	bl	8000fa8 <microsecond_delay>

		for (int channel = 0; channel < CHANNELS; channel++) {
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	e02f      	b.n	80011b6 <acquireSpectra+0xde>
			// CLK, HIGH
			HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800115c:	482e      	ldr	r0, [pc, #184]	@ (8001218 <acquireSpectra+0x140>)
 800115e:	f000 fe97 	bl	8001e90 <HAL_GPIO_WritePin>

			// Read Video, store pixel[Channel] (only in second loop to discard first loop)
			if (loop == 1) {
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d10a      	bne.n	800117e <acquireSpectra+0xa6>
				spectra[channel] = readExternalADC();
 8001168:	f7ff ff88 	bl	800107c <readExternalADC>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	4a2b      	ldr	r2, [pc, #172]	@ (8001220 <acquireSpectra+0x148>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pixelread++;
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	3301      	adds	r3, #1
 800117c:	61fb      	str	r3, [r7, #28]
			}

			// CLK, LOW → dt
			HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001184:	4824      	ldr	r0, [pc, #144]	@ (8001218 <acquireSpectra+0x140>)
 8001186:	f000 fe83 	bl	8001e90 <HAL_GPIO_WritePin>
			microsecond_delay(dt);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff0a 	bl	8000fa8 <microsecond_delay>

			// 2 clock cycles
			for (int clk = 0; clk < 2; clk++) {
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	e007      	b.n	80011aa <acquireSpectra+0xd2>
				microsecond_delay(dt);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff02 	bl	8000fa8 <microsecond_delay>
			for (int clk = 0; clk < 2; clk++) {
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	ddf4      	ble.n	800119a <acquireSpectra+0xc2>
		for (int channel = 0; channel < CHANNELS; channel++) {
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	3301      	adds	r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	2b07      	cmp	r3, #7
 80011ba:	ddcc      	ble.n	8001156 <acquireSpectra+0x7e>
			}
		}

		// 5 clock cycles between loops
		for (int clk = 0; clk < 5; clk++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	e007      	b.n	80011d2 <acquireSpectra+0xfa>
			microsecond_delay(dt);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff feee 	bl	8000fa8 <microsecond_delay>
		for (int clk = 0; clk < 5; clk++) {
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	ddf4      	ble.n	80011c2 <acquireSpectra+0xea>
		}

		// Check EOS signal after first loop
		if (loop == 0)
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d107      	bne.n	80011ee <acquireSpectra+0x116>
		{
			if (checkEOS() != HAL_OK)
 80011de:	f7ff ff13 	bl	8001008 <checkEOS>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <acquireSpectra+0x116>
			{
				printf("Warning: EOS signal not detected\r\n");
 80011e8:	480e      	ldr	r0, [pc, #56]	@ (8001224 <acquireSpectra+0x14c>)
 80011ea:	f004 ff8b 	bl	8006104 <puts>
	for (int loop = 0; loop < 2; loop++) {
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61bb      	str	r3, [r7, #24]
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	f77f af78 	ble.w	80010ec <acquireSpectra+0x14>
			}
		}
	}

    // Set data available flag
    dataAvailable = 1;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001228 <acquireSpectra+0x150>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
    packetIndex = 0;
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <acquireSpectra+0x154>)
 8001204:	2200      	movs	r2, #0
 8001206:	801a      	strh	r2, [r3, #0]

    printf("Spectra acquisition complete - %d pixels read\r\n", pixelread);
 8001208:	69f9      	ldr	r1, [r7, #28]
 800120a:	4809      	ldr	r0, [pc, #36]	@ (8001230 <acquireSpectra+0x158>)
 800120c:	f004 ff12 	bl	8006034 <iprintf>
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	48000400 	.word	0x48000400
 800121c:	48000800 	.word	0x48000800
 8001220:	20000320 	.word	0x20000320
 8001224:	08006ea0 	.word	0x08006ea0
 8001228:	20000330 	.word	0x20000330
 800122c:	20000332 	.word	0x20000332
 8001230:	08006ec4 	.word	0x08006ec4

08001234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_MspInit+0x44>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123e:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <HAL_MspInit+0x44>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6613      	str	r3, [r2, #96]	@ 0x60
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <HAL_MspInit+0x44>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_MspInit+0x44>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001256:	4a08      	ldr	r2, [pc, #32]	@ (8001278 <HAL_MspInit+0x44>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125c:	6593      	str	r3, [r2, #88]	@ 0x58
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_MspInit+0x44>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000

0800127c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0ac      	sub	sp, #176	@ 0xb0
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2288      	movs	r2, #136	@ 0x88
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f005 f811 	bl	80062c4 <memset>
  if(hi2c->Instance==I2C1)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a21      	ldr	r2, [pc, #132]	@ (800132c <HAL_I2C_MspInit+0xb0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d13a      	bne.n	8001322 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012ac:	2340      	movs	r3, #64	@ 0x40
 80012ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 f8ed 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012c4:	f7ff fc96 	bl	8000bf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_I2C_MspInit+0xb4>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	4a18      	ldr	r2, [pc, #96]	@ (8001330 <HAL_I2C_MspInit+0xb4>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d4:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <HAL_I2C_MspInit+0xb4>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e0:	23c0      	movs	r3, #192	@ 0xc0
 80012e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e6:	2312      	movs	r3, #18
 80012e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f8:	2304      	movs	r3, #4
 80012fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001302:	4619      	mov	r1, r3
 8001304:	480b      	ldr	r0, [pc, #44]	@ (8001334 <HAL_I2C_MspInit+0xb8>)
 8001306:	f000 fc01 	bl	8001b0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_I2C_MspInit+0xb4>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_I2C_MspInit+0xb4>)
 8001310:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001314:	6593      	str	r3, [r2, #88]	@ 0x58
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_I2C_MspInit+0xb4>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001322:	bf00      	nop
 8001324:	37b0      	adds	r7, #176	@ 0xb0
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40005400 	.word	0x40005400
 8001330:	40021000 	.word	0x40021000
 8001334:	48000400 	.word	0x48000400

08001338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a13      	ldr	r2, [pc, #76]	@ (8001394 <HAL_TIM_Base_MspInit+0x5c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d10c      	bne.n	8001364 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800134a:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <HAL_TIM_Base_MspInit+0x60>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <HAL_TIM_Base_MspInit+0x60>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6593      	str	r3, [r2, #88]	@ 0x58
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_TIM_Base_MspInit+0x60>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001362:	e010      	b.n	8001386 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0c      	ldr	r2, [pc, #48]	@ (800139c <HAL_TIM_Base_MspInit+0x64>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d10b      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_TIM_Base_MspInit+0x60>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <HAL_TIM_Base_MspInit+0x60>)
 8001374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001378:	6613      	str	r3, [r2, #96]	@ 0x60
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <HAL_TIM_Base_MspInit+0x60>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40000400 	.word	0x40000400
 8001398:	40021000 	.word	0x40021000
 800139c:	40014400 	.word	0x40014400

080013a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a11      	ldr	r2, [pc, #68]	@ (8001404 <HAL_TIM_MspPostInit+0x64>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d11c      	bne.n	80013fc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_TIM_MspPostInit+0x68>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <HAL_TIM_MspPostInit+0x68>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <HAL_TIM_MspPostInit+0x68>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f8:	f000 fb88 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40000400 	.word	0x40000400
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b0b0      	sub	sp, #192	@ 0xc0
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001428:	2288      	movs	r2, #136	@ 0x88
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f004 ff49 	bl	80062c4 <memset>
  if(huart->Instance==UART4)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a73      	ldr	r2, [pc, #460]	@ (8001604 <HAL_UART_MspInit+0x1f8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d13c      	bne.n	80014b6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800143c:	2308      	movs	r3, #8
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001440:	2300      	movs	r3, #0
 8001442:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f825 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001454:	f7ff fbce 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001458:	4b6b      	ldr	r3, [pc, #428]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145c:	4a6a      	ldr	r2, [pc, #424]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 800145e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001462:	6593      	str	r3, [r2, #88]	@ 0x58
 8001464:	4b68      	ldr	r3, [pc, #416]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001468:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b65      	ldr	r3, [pc, #404]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	4a64      	ldr	r2, [pc, #400]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147c:	4b62      	ldr	r3, [pc, #392]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001488:	2303      	movs	r3, #3
 800148a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014a0:	2308      	movs	r3, #8
 80014a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014aa:	4619      	mov	r1, r3
 80014ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014b0:	f000 fb2c 	bl	8001b0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014b4:	e0a2      	b.n	80015fc <HAL_UART_MspInit+0x1f0>
  else if(huart->Instance==UART5)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a54      	ldr	r2, [pc, #336]	@ (800160c <HAL_UART_MspInit+0x200>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d15d      	bne.n	800157c <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80014c0:	2310      	movs	r3, #16
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 ffe3 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80014d8:	f7ff fb8c 	bl	8000bf4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80014dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e0:	4a49      	ldr	r2, [pc, #292]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80014e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80014e8:	4b47      	ldr	r3, [pc, #284]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	4b44      	ldr	r3, [pc, #272]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f8:	4a43      	ldr	r2, [pc, #268]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001500:	4b41      	ldr	r3, [pc, #260]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150c:	4b3e      	ldr	r3, [pc, #248]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	4a3d      	ldr	r2, [pc, #244]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 8001512:	f043 0308 	orr.w	r3, r3, #8
 8001516:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001518:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001524:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001528:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152c:	2312      	movs	r3, #18
 800152e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001532:	2301      	movs	r3, #1
 8001534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800153e:	2308      	movs	r3, #8
 8001540:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001548:	4619      	mov	r1, r3
 800154a:	4831      	ldr	r0, [pc, #196]	@ (8001610 <HAL_UART_MspInit+0x204>)
 800154c:	f000 fade 	bl	8001b0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001550:	2304      	movs	r3, #4
 8001552:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001568:	2308      	movs	r3, #8
 800156a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800156e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001572:	4619      	mov	r1, r3
 8001574:	4827      	ldr	r0, [pc, #156]	@ (8001614 <HAL_UART_MspInit+0x208>)
 8001576:	f000 fac9 	bl	8001b0c <HAL_GPIO_Init>
}
 800157a:	e03f      	b.n	80015fc <HAL_UART_MspInit+0x1f0>
  else if(huart->Instance==USART3)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a25      	ldr	r2, [pc, #148]	@ (8001618 <HAL_UART_MspInit+0x20c>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d13a      	bne.n	80015fc <HAL_UART_MspInit+0x1f0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001586:	2304      	movs	r3, #4
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800158a:	2300      	movs	r3, #0
 800158c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001592:	4618      	mov	r0, r3
 8001594:	f001 ff80 	bl	8003498 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_UART_MspInit+0x196>
      Error_Handler();
 800159e:	f7ff fb29 	bl	8000bf4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a6:	4a18      	ldr	r2, [pc, #96]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	4a12      	ldr	r2, [pc, #72]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_UART_MspInit+0x1fc>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015d2:	2330      	movs	r3, #48	@ 0x30
 80015d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ea:	2307      	movs	r3, #7
 80015ec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015f4:	4619      	mov	r1, r3
 80015f6:	4806      	ldr	r0, [pc, #24]	@ (8001610 <HAL_UART_MspInit+0x204>)
 80015f8:	f000 fa88 	bl	8001b0c <HAL_GPIO_Init>
}
 80015fc:	bf00      	nop
 80015fe:	37c0      	adds	r7, #192	@ 0xc0
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40004c00 	.word	0x40004c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40005000 	.word	0x40005000
 8001610:	48000800 	.word	0x48000800
 8001614:	48000c00 	.word	0x48000c00
 8001618:	40004800 	.word	0x40004800

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <NMI_Handler+0x4>

08001624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <MemManage_Handler+0x4>

08001634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <BusFault_Handler+0x4>

0800163c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <UsageFault_Handler+0x4>

08001644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001672:	f000 f921 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}

0800167a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e00a      	b.n	80016a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168c:	f3af 8000 	nop.w
 8001690:	4601      	mov	r1, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	b2ca      	uxtb	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dbf0      	blt.n	800168c <_read+0x12>
  }

  return len;
 80016aa:	687b      	ldr	r3, [r7, #4]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016dc:	605a      	str	r2, [r3, #4]
  return 0;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_isatty>:

int _isatty(int file)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016f4:	2301      	movs	r3, #1
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001724:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <_sbrk+0x5c>)
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <_sbrk+0x60>)
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001730:	4b13      	ldr	r3, [pc, #76]	@ (8001780 <_sbrk+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <_sbrk+0x64>)
 800173a:	4a12      	ldr	r2, [pc, #72]	@ (8001784 <_sbrk+0x68>)
 800173c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173e:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	429a      	cmp	r2, r3
 800174a:	d207      	bcs.n	800175c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800174c:	f004 fe08 	bl	8006360 <__errno>
 8001750:	4603      	mov	r3, r0
 8001752:	220c      	movs	r2, #12
 8001754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	e009      	b.n	8001770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <_sbrk+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001762:	4b07      	ldr	r3, [pc, #28]	@ (8001780 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <_sbrk+0x64>)
 800176c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20018000 	.word	0x20018000
 800177c:	00000400 	.word	0x00000400
 8001780:	20000334 	.word	0x20000334
 8001784:	20000488 	.word	0x20000488

08001788 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <SystemInit+0x20>)
 800178e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001792:	4a05      	ldr	r2, [pc, #20]	@ (80017a8 <SystemInit+0x20>)
 8001794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b0:	f7ff ffea 	bl	8001788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	@ (80017ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <LoopForever+0xe>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	@ (80017f8 <LoopForever+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f004 fdc7 	bl	800636c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017de:	f7fe fed5 	bl	800058c <main>

080017e2 <LoopForever>:

LoopForever:
    b LoopForever
 80017e2:	e7fe      	b.n	80017e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017f0:	08006f80 	.word	0x08006f80
  ldr r2, =_sbss
 80017f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017f8:	20000488 	.word	0x20000488

080017fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC1_2_IRQHandler>
	...

08001800 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <HAL_Init+0x3c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a0b      	ldr	r2, [pc, #44]	@ (800183c <HAL_Init+0x3c>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001814:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001816:	2003      	movs	r0, #3
 8001818:	f000 f944 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800181c:	2000      	movs	r0, #0
 800181e:	f000 f80f 	bl	8001840 <HAL_InitTick>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	71fb      	strb	r3, [r7, #7]
 800182c:	e001      	b.n	8001832 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800182e:	f7ff fd01 	bl	8001234 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001832:	79fb      	ldrb	r3, [r7, #7]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40022000 	.word	0x40022000

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800184c:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <HAL_InitTick+0x6c>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d023      	beq.n	800189c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001854:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <HAL_InitTick+0x70>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <HAL_InitTick+0x6c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f941 	bl	8001af2 <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10f      	bne.n	8001896 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b0f      	cmp	r3, #15
 800187a:	d809      	bhi.n	8001890 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800187c:	2200      	movs	r2, #0
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f000 f919 	bl	8001aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001888:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <HAL_InitTick+0x74>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e007      	b.n	80018a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	73fb      	strb	r3, [r7, #15]
 8001894:	e004      	b.n	80018a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
 800189a:	e001      	b.n	80018a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000018 	.word	0x20000018
 80018b0:	20000010 	.word	0x20000010
 80018b4:	20000014 	.word	0x20000014

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000018 	.word	0x20000018
 80018dc:	20000338 	.word	0x20000338

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000338 	.word	0x20000338

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000018 	.word	0x20000018

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db0a      	blt.n	80019ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	490c      	ldr	r1, [pc, #48]	@ (80019f0 <__NVIC_SetPriority+0x4c>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	440b      	add	r3, r1
 80019c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019cc:	e00a      	b.n	80019e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4908      	ldr	r1, [pc, #32]	@ (80019f4 <__NVIC_SetPriority+0x50>)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	3b04      	subs	r3, #4
 80019dc:	0112      	lsls	r2, r2, #4
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	440b      	add	r3, r1
 80019e2:	761a      	strb	r2, [r3, #24]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	bf28      	it	cs
 8001a16:	2304      	movcs	r3, #4
 8001a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	2b06      	cmp	r3, #6
 8001a20:	d902      	bls.n	8001a28 <NVIC_EncodePriority+0x30>
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3b03      	subs	r3, #3
 8001a26:	e000      	b.n	8001a2a <NVIC_EncodePriority+0x32>
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43d9      	mvns	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	4313      	orrs	r3, r2
         );
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3724      	adds	r7, #36	@ 0x24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff8e 	bl	80019a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff47 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff5c 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff8e 	bl	80019f8 <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5d 	bl	80019a4 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffb0 	bl	8001a60 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b1a:	e17f      	b.n	8001e1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2101      	movs	r1, #1
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 8171 	beq.w	8001e16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d005      	beq.n	8001b4c <HAL_GPIO_Init+0x40>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d130      	bne.n	8001bae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b82:	2201      	movs	r2, #1
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	f003 0201 	and.w	r2, r3, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d118      	bne.n	8001bec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	f003 0201 	and.w	r2, r3, #1
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d017      	beq.n	8001c28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d123      	bne.n	8001c7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	6939      	ldr	r1, [r7, #16]
 8001c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80ac 	beq.w	8001e16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8001e3c <HAL_GPIO_Init+0x330>)
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e3c <HAL_GPIO_Init+0x330>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cca:	4b5c      	ldr	r3, [pc, #368]	@ (8001e3c <HAL_GPIO_Init+0x330>)
 8001ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cd6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e40 <HAL_GPIO_Init+0x334>)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d00:	d025      	beq.n	8001d4e <HAL_GPIO_Init+0x242>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4f      	ldr	r2, [pc, #316]	@ (8001e44 <HAL_GPIO_Init+0x338>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01f      	beq.n	8001d4a <HAL_GPIO_Init+0x23e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e48 <HAL_GPIO_Init+0x33c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x23a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4d      	ldr	r2, [pc, #308]	@ (8001e4c <HAL_GPIO_Init+0x340>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x236>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e50 <HAL_GPIO_Init+0x344>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x232>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4b      	ldr	r2, [pc, #300]	@ (8001e54 <HAL_GPIO_Init+0x348>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x22e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e58 <HAL_GPIO_Init+0x34c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x22a>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00c      	b.n	8001d50 <HAL_GPIO_Init+0x244>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e00a      	b.n	8001d50 <HAL_GPIO_Init+0x244>
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	e008      	b.n	8001d50 <HAL_GPIO_Init+0x244>
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x244>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e004      	b.n	8001d50 <HAL_GPIO_Init+0x244>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_Init+0x244>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_GPIO_Init+0x244>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	f002 0203 	and.w	r2, r2, #3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	4093      	lsls	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d60:	4937      	ldr	r1, [pc, #220]	@ (8001e40 <HAL_GPIO_Init+0x334>)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e5c <HAL_GPIO_Init+0x350>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d92:	4a32      	ldr	r2, [pc, #200]	@ (8001e5c <HAL_GPIO_Init+0x350>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d98:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <HAL_GPIO_Init+0x350>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dbc:	4a27      	ldr	r2, [pc, #156]	@ (8001e5c <HAL_GPIO_Init+0x350>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dc2:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <HAL_GPIO_Init+0x350>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001de6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e5c <HAL_GPIO_Init+0x350>)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <HAL_GPIO_Init+0x350>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e10:	4a12      	ldr	r2, [pc, #72]	@ (8001e5c <HAL_GPIO_Init+0x350>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa22 f303 	lsr.w	r3, r2, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f47f ae78 	bne.w	8001b1c <HAL_GPIO_Init+0x10>
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	371c      	adds	r7, #28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	48000400 	.word	0x48000400
 8001e48:	48000800 	.word	0x48000800
 8001e4c:	48000c00 	.word	0x48000c00
 8001e50:	48001000 	.word	0x48001000
 8001e54:	48001400 	.word	0x48001400
 8001e58:	48001800 	.word	0x48001800
 8001e5c:	40010400 	.word	0x40010400

08001e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e08d      	b.n	8001fee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d106      	bne.n	8001eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff f9c8 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2224      	movs	r2, #36	@ 0x24
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0201 	bic.w	r2, r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e006      	b.n	8001f48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d108      	bne.n	8001f62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	e007      	b.n	8001f72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69d9      	ldr	r1, [r3, #28]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2220      	movs	r2, #32
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	461a      	mov	r2, r3
 8002004:	460b      	mov	r3, r1
 8002006:	817b      	strh	r3, [r7, #10]
 8002008:	4613      	mov	r3, r2
 800200a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b20      	cmp	r3, #32
 8002016:	f040 80db 	bne.w	80021d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_I2C_Master_Receive+0x30>
 8002024:	2302      	movs	r3, #2
 8002026:	e0d4      	b.n	80021d2 <HAL_I2C_Master_Receive+0x1da>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002030:	f7ff fc56 	bl	80018e0 <HAL_GetTick>
 8002034:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2319      	movs	r3, #25
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f8f2 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0bf      	b.n	80021d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2222      	movs	r2, #34	@ 0x22
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2210      	movs	r2, #16
 800205e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	893a      	ldrh	r2, [r7, #8]
 8002072:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207e:	b29b      	uxth	r3, r3
 8002080:	2bff      	cmp	r3, #255	@ 0xff
 8002082:	d90e      	bls.n	80020a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800208e:	b2da      	uxtb	r2, r3
 8002090:	8979      	ldrh	r1, [r7, #10]
 8002092:	4b52      	ldr	r3, [pc, #328]	@ (80021dc <HAL_I2C_Master_Receive+0x1e4>)
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 face 	bl	800263c <I2C_TransferConfig>
 80020a0:	e06d      	b.n	800217e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	8979      	ldrh	r1, [r7, #10]
 80020b4:	4b49      	ldr	r3, [pc, #292]	@ (80021dc <HAL_I2C_Master_Receive+0x1e4>)
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fabd 	bl	800263c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80020c2:	e05c      	b.n	800217e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	6a39      	ldr	r1, [r7, #32]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f94b 	bl	8002364 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e07c      	b.n	80021d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d034      	beq.n	800217e <HAL_I2C_Master_Receive+0x186>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d130      	bne.n	800217e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	2200      	movs	r2, #0
 8002124:	2180      	movs	r1, #128	@ 0x80
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f880 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e04d      	b.n	80021d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	2bff      	cmp	r3, #255	@ 0xff
 800213e:	d90e      	bls.n	800215e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	22ff      	movs	r2, #255	@ 0xff
 8002144:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214a:	b2da      	uxtb	r2, r3
 800214c:	8979      	ldrh	r1, [r7, #10]
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 fa70 	bl	800263c <I2C_TransferConfig>
 800215c:	e00f      	b.n	800217e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216c:	b2da      	uxtb	r2, r3
 800216e:	8979      	ldrh	r1, [r7, #10]
 8002170:	2300      	movs	r3, #0
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fa5f 	bl	800263c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d19d      	bne.n	80020c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	6a39      	ldr	r1, [r7, #32]
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f8a6 	bl	80022de <I2C_WaitOnSTOPFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e01a      	b.n	80021d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2220      	movs	r2, #32
 80021a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <HAL_I2C_Master_Receive+0x1e8>)
 80021b0:	400b      	ands	r3, r1
 80021b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	e000      	b.n	80021d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80021d0:	2302      	movs	r3, #2
  }
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	80002400 	.word	0x80002400
 80021e0:	fe00e800 	.word	0xfe00e800

080021e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d103      	bne.n	8002202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d007      	beq.n	8002220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	619a      	str	r2, [r3, #24]
  }
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800223c:	e03b      	b.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 f91a 	bl	800247c <I2C_IsErrorOccurred>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e041      	b.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d02d      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225a:	f7ff fb41 	bl	80018e0 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d302      	bcc.n	8002270 <I2C_WaitOnFlagUntilTimeout+0x44>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d122      	bne.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4013      	ands	r3, r2
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	429a      	cmp	r2, r3
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	429a      	cmp	r2, r3
 800228c:	d113      	bne.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2220      	movs	r2, #32
 800229e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d0b4      	beq.n	800223e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ea:	e02f      	b.n	800234c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f8c3 	bl	800247c <I2C_IsErrorOccurred>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e02d      	b.n	800235c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002300:	f7ff faee 	bl	80018e0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d302      	bcc.n	8002316 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d11a      	bne.n	800234c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b20      	cmp	r3, #32
 8002322:	d013      	beq.n	800234c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e007      	b.n	800235c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b20      	cmp	r3, #32
 8002358:	d1c8      	bne.n	80022ec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002374:	e071      	b.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f87e 	bl	800247c <I2C_IsErrorOccurred>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b20      	cmp	r3, #32
 8002396:	d13b      	bne.n	8002410 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d138      	bne.n	8002410 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d105      	bne.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d121      	bne.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2210      	movs	r2, #16
 80023cc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2204      	movs	r2, #4
 80023d2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2220      	movs	r2, #32
 80023da:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b24      	ldr	r3, [pc, #144]	@ (8002478 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80023e8:	400b      	ands	r3, r1
 80023ea:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	75fb      	strb	r3, [r7, #23]
 8002408:	e002      	b.n	8002410 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002410:	f7ff fa66 	bl	80018e0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	429a      	cmp	r2, r3
 800241e:	d302      	bcc.n	8002426 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d119      	bne.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d116      	bne.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d00f      	beq.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f043 0220 	orr.w	r2, r3, #32
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d002      	beq.n	800246e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d083      	beq.n	8002376 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	fe00e800 	.word	0xfe00e800

0800247c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d068      	beq.n	800257a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2210      	movs	r2, #16
 80024ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024b0:	e049      	b.n	8002546 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d045      	beq.n	8002546 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024ba:	f7ff fa11 	bl	80018e0 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <I2C_IsErrorOccurred+0x54>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d13a      	bne.n	8002546 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024f2:	d121      	bne.n	8002538 <I2C_IsErrorOccurred+0xbc>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024fa:	d01d      	beq.n	8002538 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d01a      	beq.n	8002538 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002510:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002512:	f7ff f9e5 	bl	80018e0 <HAL_GetTick>
 8002516:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002518:	e00e      	b.n	8002538 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800251a:	f7ff f9e1 	bl	80018e0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b19      	cmp	r3, #25
 8002526:	d907      	bls.n	8002538 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	f043 0320 	orr.w	r3, r3, #32
 800252e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002536:	e006      	b.n	8002546 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b20      	cmp	r3, #32
 8002544:	d1e9      	bne.n	800251a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b20      	cmp	r3, #32
 8002552:	d003      	beq.n	800255c <I2C_IsErrorOccurred+0xe0>
 8002554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0aa      	beq.n	80024b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800255c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002560:	2b00      	cmp	r3, #0
 8002562:	d103      	bne.n	800256c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2220      	movs	r2, #32
 800256a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800259c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	f043 0308 	orr.w	r3, r3, #8
 80025b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80025e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01c      	beq.n	800262a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f7ff fdf7 	bl	80021e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6859      	ldr	r1, [r3, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <I2C_IsErrorOccurred+0x1bc>)
 8002602:	400b      	ands	r3, r1
 8002604:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800262a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800262e:	4618      	mov	r0, r3
 8002630:	3728      	adds	r7, #40	@ 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	fe00e800 	.word	0xfe00e800

0800263c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	817b      	strh	r3, [r7, #10]
 800264a:	4613      	mov	r3, r2
 800264c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800264e:	897b      	ldrh	r3, [r7, #10]
 8002650:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002654:	7a7b      	ldrb	r3, [r7, #9]
 8002656:	041b      	lsls	r3, r3, #16
 8002658:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800265c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	4313      	orrs	r3, r2
 8002666:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800266a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	0d5b      	lsrs	r3, r3, #21
 8002676:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800267a:	4b08      	ldr	r3, [pc, #32]	@ (800269c <I2C_TransferConfig+0x60>)
 800267c:	430b      	orrs	r3, r1
 800267e:	43db      	mvns	r3, r3
 8002680:	ea02 0103 	and.w	r1, r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	03ff63ff 	.word	0x03ff63ff

080026a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d138      	bne.n	8002728 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e032      	b.n	800272a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2224      	movs	r2, #36	@ 0x24
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80026f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	e000      	b.n	800272a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002728:	2302      	movs	r3, #2
  }
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b20      	cmp	r3, #32
 800274a:	d139      	bne.n	80027c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002756:	2302      	movs	r3, #2
 8002758:	e033      	b.n	80027c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2224      	movs	r2, #36	@ 0x24
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002788:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027d4:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40007000 	.word	0x40007000

080027ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027fa:	d130      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027fc:	4b23      	ldr	r3, [pc, #140]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002808:	d038      	beq.n	800287c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002812:	4a1e      	ldr	r2, [pc, #120]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002814:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002818:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800281a:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2232      	movs	r2, #50	@ 0x32
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	4a1b      	ldr	r2, [pc, #108]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	0c9b      	lsrs	r3, r3, #18
 800282c:	3301      	adds	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002830:	e002      	b.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	3b01      	subs	r3, #1
 8002836:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002838:	4b14      	ldr	r3, [pc, #80]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002844:	d102      	bne.n	800284c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f2      	bne.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800284c:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002858:	d110      	bne.n	800287c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e00f      	b.n	800287e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800285e:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286a:	d007      	beq.n	800287c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800286c:	4b07      	ldr	r3, [pc, #28]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002874:	4a05      	ldr	r2, [pc, #20]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002876:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800287a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40007000 	.word	0x40007000
 8002890:	20000010 	.word	0x20000010
 8002894:	431bde83 	.word	0x431bde83

08002898 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e3ca      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028aa:	4b97      	ldr	r3, [pc, #604]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b4:	4b94      	ldr	r3, [pc, #592]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80e4 	beq.w	8002a94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <HAL_RCC_OscConfig+0x4a>
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	f040 808b 	bne.w	80029f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	f040 8087 	bne.w	80029f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028e2:	4b89      	ldr	r3, [pc, #548]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x62>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e3a2      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1a      	ldr	r2, [r3, #32]
 80028fe:	4b82      	ldr	r3, [pc, #520]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d004      	beq.n	8002914 <HAL_RCC_OscConfig+0x7c>
 800290a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002912:	e005      	b.n	8002920 <HAL_RCC_OscConfig+0x88>
 8002914:	4b7c      	ldr	r3, [pc, #496]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002920:	4293      	cmp	r3, r2
 8002922:	d223      	bcs.n	800296c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fd55 	bl	80033d8 <RCC_SetFlashLatencyFromMSIRange>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e383      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002938:	4b73      	ldr	r3, [pc, #460]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a72      	ldr	r2, [pc, #456]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 800293e:	f043 0308 	orr.w	r3, r3, #8
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b70      	ldr	r3, [pc, #448]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	496d      	ldr	r1, [pc, #436]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002956:	4b6c      	ldr	r3, [pc, #432]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	4968      	ldr	r1, [pc, #416]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
 800296a:	e025      	b.n	80029b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296c:	4b66      	ldr	r3, [pc, #408]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a65      	ldr	r2, [pc, #404]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b63      	ldr	r3, [pc, #396]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4960      	ldr	r1, [pc, #384]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	495b      	ldr	r1, [pc, #364]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fd15 	bl	80033d8 <RCC_SetFlashLatencyFromMSIRange>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e343      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b8:	f000 fc4a 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b52      	ldr	r3, [pc, #328]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	4950      	ldr	r1, [pc, #320]	@ (8002b0c <HAL_RCC_OscConfig+0x274>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	fa22 f303 	lsr.w	r3, r2, r3
 80029d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002b10 <HAL_RCC_OscConfig+0x278>)
 80029d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002b14 <HAL_RCC_OscConfig+0x27c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe ff2f 	bl	8001840 <HAL_InitTick>
 80029e2:	4603      	mov	r3, r0
 80029e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d052      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	e327      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d032      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029f8:	4b43      	ldr	r3, [pc, #268]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a42      	ldr	r2, [pc, #264]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a04:	f7fe ff6c 	bl	80018e0 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a0c:	f7fe ff68 	bl	80018e0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e310      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a2a:	4b37      	ldr	r3, [pc, #220]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a36      	ldr	r2, [pc, #216]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a30:	f043 0308 	orr.w	r3, r3, #8
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b34      	ldr	r3, [pc, #208]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4931      	ldr	r1, [pc, #196]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a48:	4b2f      	ldr	r3, [pc, #188]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	492c      	ldr	r1, [pc, #176]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	e01a      	b.n	8002a94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a29      	ldr	r2, [pc, #164]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe ff39 	bl	80018e0 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a72:	f7fe ff35 	bl	80018e0 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e2dd      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a84:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x1da>
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d074      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x21a>
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d10e      	bne.n	8002aca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d10b      	bne.n	8002aca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d064      	beq.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d160      	bne.n	8002b88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e2ba      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x24a>
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	e026      	b.n	8002b30 <HAL_RCC_OscConfig+0x298>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aea:	d115      	bne.n	8002b18 <HAL_RCC_OscConfig+0x280>
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a05      	ldr	r2, [pc, #20]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002af2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b03      	ldr	r3, [pc, #12]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a02      	ldr	r2, [pc, #8]	@ (8002b08 <HAL_RCC_OscConfig+0x270>)
 8002afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	e014      	b.n	8002b30 <HAL_RCC_OscConfig+0x298>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08006ef4 	.word	0x08006ef4
 8002b10:	20000010 	.word	0x20000010
 8002b14:	20000014 	.word	0x20000014
 8002b18:	4ba0      	ldr	r3, [pc, #640]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a9f      	ldr	r2, [pc, #636]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b9d      	ldr	r3, [pc, #628]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a9c      	ldr	r2, [pc, #624]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d013      	beq.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fed2 	bl	80018e0 <HAL_GetTick>
 8002b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe fece 	bl	80018e0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b64      	cmp	r3, #100	@ 0x64
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e276      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b52:	4b92      	ldr	r3, [pc, #584]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f0      	beq.n	8002b40 <HAL_RCC_OscConfig+0x2a8>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe febe 	bl	80018e0 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7fe feba 	bl	80018e0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	@ 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e262      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b7a:	4b88      	ldr	r3, [pc, #544]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2d0>
 8002b86:	e000      	b.n	8002b8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d060      	beq.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x310>
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b0c      	cmp	r3, #12
 8002ba0:	d119      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d116      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba8:	4b7c      	ldr	r3, [pc, #496]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x328>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e23f      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc0:	4b76      	ldr	r3, [pc, #472]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	4973      	ldr	r1, [pc, #460]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd4:	e040      	b.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d023      	beq.n	8002c26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bde:	4b6f      	ldr	r3, [pc, #444]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bea:	f7fe fe79 	bl	80018e0 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7fe fe75 	bl	80018e0 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e21d      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c04:	4b65      	ldr	r3, [pc, #404]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c10:	4b62      	ldr	r3, [pc, #392]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	061b      	lsls	r3, r3, #24
 8002c1e:	495f      	ldr	r1, [pc, #380]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
 8002c24:	e018      	b.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c26:	4b5d      	ldr	r3, [pc, #372]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe fe55 	bl	80018e0 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fe51 	bl	80018e0 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e1f9      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c4c:	4b53      	ldr	r3, [pc, #332]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f0      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d03c      	beq.n	8002cde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c72:	4a4a      	ldr	r2, [pc, #296]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fe30 	bl	80018e0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe fe2c 	bl	80018e0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1d4      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c96:	4b41      	ldr	r3, [pc, #260]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCC_OscConfig+0x3ec>
 8002ca4:	e01b      	b.n	8002cde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cac:	4a3b      	ldr	r2, [pc, #236]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7fe fe13 	bl	80018e0 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cbe:	f7fe fe0f 	bl	80018e0 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1b7      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cd0:	4b32      	ldr	r3, [pc, #200]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ef      	bne.n	8002cbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0304 	and.w	r3, r3, #4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80a6 	beq.w	8002e38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfc:	4b27      	ldr	r3, [pc, #156]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d00:	4a26      	ldr	r2, [pc, #152]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d08:	4b24      	ldr	r3, [pc, #144]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d18:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <HAL_RCC_OscConfig+0x508>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d118      	bne.n	8002d56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d24:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <HAL_RCC_OscConfig+0x508>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1d      	ldr	r2, [pc, #116]	@ (8002da0 <HAL_RCC_OscConfig+0x508>)
 8002d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d30:	f7fe fdd6 	bl	80018e0 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d38:	f7fe fdd2 	bl	80018e0 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e17a      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <HAL_RCC_OscConfig+0x508>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4d8>
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d64:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d6e:	e029      	b.n	8002dc4 <HAL_RCC_OscConfig+0x52c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d115      	bne.n	8002da4 <HAL_RCC_OscConfig+0x50c>
 8002d78:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7e:	4a07      	ldr	r2, [pc, #28]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d88:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8e:	4a03      	ldr	r2, [pc, #12]	@ (8002d9c <HAL_RCC_OscConfig+0x504>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d98:	e014      	b.n	8002dc4 <HAL_RCC_OscConfig+0x52c>
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40007000 	.word	0x40007000
 8002da4:	4b9c      	ldr	r3, [pc, #624]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002daa:	4a9b      	ldr	r2, [pc, #620]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db4:	4b98      	ldr	r3, [pc, #608]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	4a97      	ldr	r2, [pc, #604]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d016      	beq.n	8002dfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fd88 	bl	80018e0 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fd84 	bl	80018e0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e12a      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dea:	4b8b      	ldr	r3, [pc, #556]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ed      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x53c>
 8002df8:	e015      	b.n	8002e26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fe fd71 	bl	80018e0 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fe fd6d 	bl	80018e0 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e113      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e18:	4b7f      	ldr	r3, [pc, #508]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ed      	bne.n	8002e02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	4a79      	ldr	r2, [pc, #484]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80fe 	beq.w	800303e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	f040 80d0 	bne.w	8002fec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e4c:	4b72      	ldr	r3, [pc, #456]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0203 	and.w	r2, r3, #3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d130      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d127      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d11f      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e8c:	2a07      	cmp	r2, #7
 8002e8e:	bf14      	ite	ne
 8002e90:	2201      	movne	r2, #1
 8002e92:	2200      	moveq	r2, #0
 8002e94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d113      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d109      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	085b      	lsrs	r3, r3, #1
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d06e      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d069      	beq.n	8002f9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ec8:	4b53      	ldr	r3, [pc, #332]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ed4:	4b50      	ldr	r3, [pc, #320]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0ad      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002eea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ef0:	f7fe fcf6 	bl	80018e0 <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef6:	e008      	b.n	8002f0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef8:	f7fe fcf2 	bl	80018e0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e09a      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0a:	4b43      	ldr	r3, [pc, #268]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f0      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f16:	4b40      	ldr	r3, [pc, #256]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	4b40      	ldr	r3, [pc, #256]	@ (800301c <HAL_RCC_OscConfig+0x784>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f26:	3a01      	subs	r2, #1
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f30:	0212      	lsls	r2, r2, #8
 8002f32:	4311      	orrs	r1, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f38:	0852      	lsrs	r2, r2, #1
 8002f3a:	3a01      	subs	r2, #1
 8002f3c:	0552      	lsls	r2, r2, #21
 8002f3e:	4311      	orrs	r1, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f44:	0852      	lsrs	r2, r2, #1
 8002f46:	3a01      	subs	r2, #1
 8002f48:	0652      	lsls	r2, r2, #25
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f50:	0912      	lsrs	r2, r2, #4
 8002f52:	0452      	lsls	r2, r2, #17
 8002f54:	430a      	orrs	r2, r1
 8002f56:	4930      	ldr	r1, [pc, #192]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2d      	ldr	r2, [pc, #180]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f68:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f74:	f7fe fcb4 	bl	80018e0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fcb0 	bl	80018e0 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e058      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8e:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f9a:	e050      	b.n	800303e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e04f      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d148      	bne.n	800303e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fac:	4b1a      	ldr	r3, [pc, #104]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a19      	ldr	r2, [pc, #100]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002fb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb8:	4b17      	ldr	r3, [pc, #92]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a16      	ldr	r2, [pc, #88]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fc4:	f7fe fc8c 	bl	80018e0 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe fc88 	bl	80018e0 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e030      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	4b0e      	ldr	r3, [pc, #56]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x734>
 8002fea:	e028      	b.n	800303e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d023      	beq.n	800303a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <HAL_RCC_OscConfig+0x780>)
 8002ff8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fc6f 	bl	80018e0 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003004:	e00c      	b.n	8003020 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003006:	f7fe fc6b 	bl	80018e0 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d905      	bls.n	8003020 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e013      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
 8003018:	40021000 	.word	0x40021000
 800301c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003020:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <HAL_RCC_OscConfig+0x7b0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1ec      	bne.n	8003006 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_OscConfig+0x7b0>)
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	4905      	ldr	r1, [pc, #20]	@ (8003048 <HAL_RCC_OscConfig+0x7b0>)
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_RCC_OscConfig+0x7b4>)
 8003034:	4013      	ands	r3, r2
 8003036:	60cb      	str	r3, [r1, #12]
 8003038:	e001      	b.n	800303e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	feeefffc 	.word	0xfeeefffc

08003050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0e7      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003064:	4b75      	ldr	r3, [pc, #468]	@ (800323c <HAL_RCC_ClockConfig+0x1ec>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d910      	bls.n	8003094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003072:	4b72      	ldr	r3, [pc, #456]	@ (800323c <HAL_RCC_ClockConfig+0x1ec>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 0207 	bic.w	r2, r3, #7
 800307a:	4970      	ldr	r1, [pc, #448]	@ (800323c <HAL_RCC_ClockConfig+0x1ec>)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b6e      	ldr	r3, [pc, #440]	@ (800323c <HAL_RCC_ClockConfig+0x1ec>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e0cf      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d010      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	4b66      	ldr	r3, [pc, #408]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d908      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b63      	ldr	r3, [pc, #396]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4960      	ldr	r1, [pc, #384]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d04c      	beq.n	8003168 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d6:	4b5a      	ldr	r3, [pc, #360]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d121      	bne.n	8003126 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e0a6      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ee:	4b54      	ldr	r3, [pc, #336]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d115      	bne.n	8003126 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e09a      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003106:	4b4e      	ldr	r3, [pc, #312]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e08e      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003116:	4b4a      	ldr	r3, [pc, #296]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e086      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003126:	4b46      	ldr	r3, [pc, #280]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f023 0203 	bic.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4943      	ldr	r1, [pc, #268]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fe fbd2 	bl	80018e0 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	e00a      	b.n	8003156 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003140:	f7fe fbce 	bl	80018e0 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e06e      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	4b3a      	ldr	r3, [pc, #232]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 020c 	and.w	r2, r3, #12
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	429a      	cmp	r2, r3
 8003166:	d1eb      	bne.n	8003140 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	4b31      	ldr	r3, [pc, #196]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003180:	429a      	cmp	r2, r3
 8003182:	d208      	bcs.n	8003196 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003184:	4b2e      	ldr	r3, [pc, #184]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	492b      	ldr	r1, [pc, #172]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003196:	4b29      	ldr	r3, [pc, #164]	@ (800323c <HAL_RCC_ClockConfig+0x1ec>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d210      	bcs.n	80031c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a4:	4b25      	ldr	r3, [pc, #148]	@ (800323c <HAL_RCC_ClockConfig+0x1ec>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 0207 	bic.w	r2, r3, #7
 80031ac:	4923      	ldr	r1, [pc, #140]	@ (800323c <HAL_RCC_ClockConfig+0x1ec>)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b4:	4b21      	ldr	r3, [pc, #132]	@ (800323c <HAL_RCC_ClockConfig+0x1ec>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d001      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e036      	b.n	8003234 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4918      	ldr	r1, [pc, #96]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031f0:	4b13      	ldr	r3, [pc, #76]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4910      	ldr	r1, [pc, #64]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	4313      	orrs	r3, r2
 8003202:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003204:	f000 f824 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	490b      	ldr	r1, [pc, #44]	@ (8003244 <HAL_RCC_ClockConfig+0x1f4>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	4a09      	ldr	r2, [pc, #36]	@ (8003248 <HAL_RCC_ClockConfig+0x1f8>)
 8003222:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_ClockConfig+0x1fc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fe fb09 	bl	8001840 <HAL_InitTick>
 800322e:	4603      	mov	r3, r0
 8003230:	72fb      	strb	r3, [r7, #11]

  return status;
 8003232:	7afb      	ldrb	r3, [r7, #11]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40022000 	.word	0x40022000
 8003240:	40021000 	.word	0x40021000
 8003244:	08006ef4 	.word	0x08006ef4
 8003248:	20000010 	.word	0x20000010
 800324c:	20000014 	.word	0x20000014

08003250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003250:	b480      	push	{r7}
 8003252:	b089      	sub	sp, #36	@ 0x24
 8003254:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325e:	4b3e      	ldr	r3, [pc, #248]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x108>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 030c 	and.w	r3, r3, #12
 8003266:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003268:	4b3b      	ldr	r3, [pc, #236]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x108>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x34>
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d121      	bne.n	80032c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d11e      	bne.n	80032c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003284:	4b34      	ldr	r3, [pc, #208]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x108>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003290:	4b31      	ldr	r3, [pc, #196]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x108>)
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	e005      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x108>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032ac:	4a2b      	ldr	r2, [pc, #172]	@ (800335c <HAL_RCC_GetSysClockFreq+0x10c>)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10d      	bne.n	80032d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d102      	bne.n	80032ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032c8:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	e004      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032d4:	4b23      	ldr	r3, [pc, #140]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x114>)
 80032d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d134      	bne.n	8003348 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032de:	4b1e      	ldr	r3, [pc, #120]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d003      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0xac>
 80032f4:	e005      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x110>)
 80032f8:	617b      	str	r3, [r7, #20]
      break;
 80032fa:	e005      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032fc:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x114>)
 80032fe:	617b      	str	r3, [r7, #20]
      break;
 8003300:	e002      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	617b      	str	r3, [r7, #20]
      break;
 8003306:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003308:	4b13      	ldr	r3, [pc, #76]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x108>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	3301      	adds	r3, #1
 8003314:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003316:	4b10      	ldr	r3, [pc, #64]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x108>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	0a1b      	lsrs	r3, r3, #8
 800331c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	fb03 f202 	mul.w	r2, r3, r2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800332e:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x108>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	0e5b      	lsrs	r3, r3, #25
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	3301      	adds	r3, #1
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003348:	69bb      	ldr	r3, [r7, #24]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3724      	adds	r7, #36	@ 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	08006f0c 	.word	0x08006f0c
 8003360:	00f42400 	.word	0x00f42400
 8003364:	007a1200 	.word	0x007a1200

08003368 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800336c:	4b03      	ldr	r3, [pc, #12]	@ (800337c <HAL_RCC_GetHCLKFreq+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000010 	.word	0x20000010

08003380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003384:	f7ff fff0 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	4904      	ldr	r1, [pc, #16]	@ (80033a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000
 80033a8:	08006f04 	.word	0x08006f04

080033ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033b0:	f7ff ffda 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	4b06      	ldr	r3, [pc, #24]	@ (80033d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	0adb      	lsrs	r3, r3, #11
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	4904      	ldr	r1, [pc, #16]	@ (80033d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033c2:	5ccb      	ldrb	r3, [r1, r3]
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	08006f04 	.word	0x08006f04

080033d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033f0:	f7ff f9ee 	bl	80027d0 <HAL_PWREx_GetVoltageRange>
 80033f4:	6178      	str	r0, [r7, #20]
 80033f6:	e014      	b.n	8003422 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f8:	4b25      	ldr	r3, [pc, #148]	@ (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fc:	4a24      	ldr	r2, [pc, #144]	@ (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003402:	6593      	str	r3, [r2, #88]	@ 0x58
 8003404:	4b22      	ldr	r3, [pc, #136]	@ (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003410:	f7ff f9de 	bl	80027d0 <HAL_PWREx_GetVoltageRange>
 8003414:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003416:	4b1e      	ldr	r3, [pc, #120]	@ (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800341a:	4a1d      	ldr	r2, [pc, #116]	@ (8003490 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003420:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003428:	d10b      	bne.n	8003442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b80      	cmp	r3, #128	@ 0x80
 800342e:	d919      	bls.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2ba0      	cmp	r3, #160	@ 0xa0
 8003434:	d902      	bls.n	800343c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003436:	2302      	movs	r3, #2
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	e013      	b.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800343c:	2301      	movs	r3, #1
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	e010      	b.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b80      	cmp	r3, #128	@ 0x80
 8003446:	d902      	bls.n	800344e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003448:	2303      	movs	r3, #3
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	e00a      	b.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b80      	cmp	r3, #128	@ 0x80
 8003452:	d102      	bne.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003454:	2302      	movs	r3, #2
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	e004      	b.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b70      	cmp	r3, #112	@ 0x70
 800345e:	d101      	bne.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003460:	2301      	movs	r3, #1
 8003462:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f023 0207 	bic.w	r2, r3, #7
 800346c:	4909      	ldr	r1, [pc, #36]	@ (8003494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003474:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	40022000 	.word	0x40022000

08003498 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034a0:	2300      	movs	r3, #0
 80034a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034a4:	2300      	movs	r3, #0
 80034a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d041      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034bc:	d02a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034c2:	d824      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034c8:	d008      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034ce:	d81e      	bhi.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034d8:	d010      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034da:	e018      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034dc:	4b86      	ldr	r3, [pc, #536]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a85      	ldr	r2, [pc, #532]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034e8:	e015      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fabb 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034fa:	e00c      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3320      	adds	r3, #32
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fba6 	bl	8003c54 <RCCEx_PLLSAI2_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800350c:	e003      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	74fb      	strb	r3, [r7, #19]
      break;
 8003512:	e000      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800351c:	4b76      	ldr	r3, [pc, #472]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800352a:	4973      	ldr	r1, [pc, #460]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003532:	e001      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d041      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003548:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800354c:	d02a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800354e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003552:	d824      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003554:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003558:	d008      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800355a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800355e:	d81e      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003568:	d010      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800356a:	e018      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800356c:	4b62      	ldr	r3, [pc, #392]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a61      	ldr	r2, [pc, #388]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003576:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003578:	e015      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fa73 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800358a:	e00c      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3320      	adds	r3, #32
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fb5e 	bl	8003c54 <RCCEx_PLLSAI2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800359c:	e003      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	74fb      	strb	r3, [r7, #19]
      break;
 80035a2:	e000      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ac:	4b52      	ldr	r3, [pc, #328]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035ba:	494f      	ldr	r1, [pc, #316]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035c2:	e001      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80a0 	beq.w	8003716 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d6:	2300      	movs	r3, #0
 80035d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035da:	4b47      	ldr	r3, [pc, #284]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f0:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f4:	4a40      	ldr	r2, [pc, #256]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80035fc:	4b3e      	ldr	r3, [pc, #248]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003608:	2301      	movs	r3, #1
 800360a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800360c:	4b3b      	ldr	r3, [pc, #236]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a3a      	ldr	r2, [pc, #232]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003618:	f7fe f962 	bl	80018e0 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800361e:	e009      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003620:	f7fe f95e 	bl	80018e0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d902      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	74fb      	strb	r3, [r7, #19]
        break;
 8003632:	e005      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003634:	4b31      	ldr	r3, [pc, #196]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363c:	2b00      	cmp	r3, #0
 800363e:	d0ef      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d15c      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003646:	4b2c      	ldr	r3, [pc, #176]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003650:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01f      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	d019      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003664:	4b24      	ldr	r3, [pc, #144]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003670:	4b21      	ldr	r3, [pc, #132]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003676:	4a20      	ldr	r2, [pc, #128]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003680:	4b1d      	ldr	r3, [pc, #116]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003688:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe f91d 	bl	80018e0 <HAL_GetTick>
 80036a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a8:	e00b      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fe f919 	bl	80018e0 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d902      	bls.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	74fb      	strb	r3, [r7, #19]
            break;
 80036c0:	e006      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c2:	4b0d      	ldr	r3, [pc, #52]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ec      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d6:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e6:	4904      	ldr	r1, [pc, #16]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036ee:	e009      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	74bb      	strb	r3, [r7, #18]
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003704:	7c7b      	ldrb	r3, [r7, #17]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d105      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800370a:	4b9e      	ldr	r3, [pc, #632]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	4a9d      	ldr	r2, [pc, #628]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003714:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003722:	4b98      	ldr	r3, [pc, #608]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003728:	f023 0203 	bic.w	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003730:	4994      	ldr	r1, [pc, #592]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003744:	4b8f      	ldr	r3, [pc, #572]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800374a:	f023 020c 	bic.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003752:	498c      	ldr	r1, [pc, #560]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003766:	4b87      	ldr	r3, [pc, #540]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	4983      	ldr	r1, [pc, #524]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003788:	4b7e      	ldr	r3, [pc, #504]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	497b      	ldr	r1, [pc, #492]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037aa:	4b76      	ldr	r3, [pc, #472]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b8:	4972      	ldr	r1, [pc, #456]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037da:	496a      	ldr	r1, [pc, #424]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ee:	4b65      	ldr	r3, [pc, #404]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	4961      	ldr	r1, [pc, #388]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003810:	4b5c      	ldr	r3, [pc, #368]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003816:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381e:	4959      	ldr	r1, [pc, #356]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003832:	4b54      	ldr	r3, [pc, #336]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003838:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003840:	4950      	ldr	r1, [pc, #320]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003854:	4b4b      	ldr	r3, [pc, #300]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003862:	4948      	ldr	r1, [pc, #288]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003876:	4b43      	ldr	r3, [pc, #268]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	493f      	ldr	r1, [pc, #252]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d028      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003898:	4b3a      	ldr	r3, [pc, #232]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038a6:	4937      	ldr	r1, [pc, #220]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038b6:	d106      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b8:	4b32      	ldr	r3, [pc, #200]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4a31      	ldr	r2, [pc, #196]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038c2:	60d3      	str	r3, [r2, #12]
 80038c4:	e011      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038ce:	d10c      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f8c8 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038e6:	7cfb      	ldrb	r3, [r7, #19]
 80038e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d028      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038f6:	4b23      	ldr	r3, [pc, #140]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003904:	491f      	ldr	r1, [pc, #124]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003910:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003914:	d106      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003916:	4b1b      	ldr	r3, [pc, #108]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	4a1a      	ldr	r2, [pc, #104]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003920:	60d3      	str	r3, [r2, #12]
 8003922:	e011      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003928:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800392c:	d10c      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3304      	adds	r3, #4
 8003932:	2101      	movs	r1, #1
 8003934:	4618      	mov	r0, r3
 8003936:	f000 f899 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800393e:	7cfb      	ldrb	r3, [r7, #19]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02b      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003954:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003962:	4908      	ldr	r1, [pc, #32]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003972:	d109      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003974:	4b03      	ldr	r3, [pc, #12]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	4a02      	ldr	r2, [pc, #8]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800397e:	60d3      	str	r3, [r2, #12]
 8003980:	e014      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003990:	d10c      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	2101      	movs	r1, #1
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f867 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039a8:	7cfb      	ldrb	r3, [r7, #19]
 80039aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d02f      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c6:	4928      	ldr	r1, [pc, #160]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039d6:	d10d      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	2102      	movs	r1, #2
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f844 	bl	8003a6c <RCCEx_PLLSAI1_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d014      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	74bb      	strb	r3, [r7, #18]
 80039f2:	e011      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3320      	adds	r3, #32
 8003a02:	2102      	movs	r1, #2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 f925 	bl	8003c54 <RCCEx_PLLSAI2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a14:	7cfb      	ldrb	r3, [r7, #19]
 8003a16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a24:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a32:	490d      	ldr	r1, [pc, #52]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a46:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a56:	4904      	ldr	r1, [pc, #16]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000

08003a6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a7a:	4b75      	ldr	r3, [pc, #468]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a86:	4b72      	ldr	r3, [pc, #456]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0203 	and.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d10d      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
       ||
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
       ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d047      	beq.n	8003b42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	e044      	b.n	8003b42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d018      	beq.n	8003af2 <RCCEx_PLLSAI1_Config+0x86>
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d825      	bhi.n	8003b10 <RCCEx_PLLSAI1_Config+0xa4>
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d002      	beq.n	8003ace <RCCEx_PLLSAI1_Config+0x62>
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d009      	beq.n	8003ae0 <RCCEx_PLLSAI1_Config+0x74>
 8003acc:	e020      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ace:	4b60      	ldr	r3, [pc, #384]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11d      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ade:	e01a      	b.n	8003b16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ae0:	4b5b      	ldr	r3, [pc, #364]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d116      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af0:	e013      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003af2:	4b57      	ldr	r3, [pc, #348]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003afe:	4b54      	ldr	r3, [pc, #336]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b0e:	e006      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e004      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10d      	bne.n	8003b42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b26:	4b4a      	ldr	r3, [pc, #296]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6819      	ldr	r1, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	4944      	ldr	r1, [pc, #272]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d17d      	bne.n	8003c44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b48:	4b41      	ldr	r3, [pc, #260]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a40      	ldr	r2, [pc, #256]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b54:	f7fd fec4 	bl	80018e0 <HAL_GetTick>
 8003b58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b5a:	e009      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b5c:	f7fd fec0 	bl	80018e0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d902      	bls.n	8003b70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6e:	e005      	b.n	8003b7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b70:	4b37      	ldr	r3, [pc, #220]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ef      	bne.n	8003b5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d160      	bne.n	8003c44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d111      	bne.n	8003bac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b88:	4b31      	ldr	r3, [pc, #196]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6892      	ldr	r2, [r2, #8]
 8003b98:	0211      	lsls	r1, r2, #8
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68d2      	ldr	r2, [r2, #12]
 8003b9e:	0912      	lsrs	r2, r2, #4
 8003ba0:	0452      	lsls	r2, r2, #17
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	492a      	ldr	r1, [pc, #168]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	610b      	str	r3, [r1, #16]
 8003baa:	e027      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d112      	bne.n	8003bd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bb2:	4b27      	ldr	r3, [pc, #156]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003bba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6892      	ldr	r2, [r2, #8]
 8003bc2:	0211      	lsls	r1, r2, #8
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6912      	ldr	r2, [r2, #16]
 8003bc8:	0852      	lsrs	r2, r2, #1
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	0552      	lsls	r2, r2, #21
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	491f      	ldr	r1, [pc, #124]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	610b      	str	r3, [r1, #16]
 8003bd6:	e011      	b.n	8003bfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003be0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6892      	ldr	r2, [r2, #8]
 8003be8:	0211      	lsls	r1, r2, #8
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6952      	ldr	r2, [r2, #20]
 8003bee:	0852      	lsrs	r2, r2, #1
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	0652      	lsls	r2, r2, #25
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	4916      	ldr	r1, [pc, #88]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bfc:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a13      	ldr	r2, [pc, #76]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c08:	f7fd fe6a 	bl	80018e0 <HAL_GetTick>
 8003c0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c0e:	e009      	b.n	8003c24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c10:	f7fd fe66 	bl	80018e0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d902      	bls.n	8003c24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	73fb      	strb	r3, [r7, #15]
          break;
 8003c22:	e005      	b.n	8003c30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c24:	4b0a      	ldr	r3, [pc, #40]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ef      	beq.n	8003c10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c36:	4b06      	ldr	r3, [pc, #24]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	4904      	ldr	r1, [pc, #16]	@ (8003c50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000

08003c54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c62:	4b6a      	ldr	r3, [pc, #424]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d018      	beq.n	8003ca0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c6e:	4b67      	ldr	r3, [pc, #412]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0203 	and.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d10d      	bne.n	8003c9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
       ||
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c86:	4b61      	ldr	r3, [pc, #388]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
       ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d047      	beq.n	8003d2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	e044      	b.n	8003d2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d018      	beq.n	8003cda <RCCEx_PLLSAI2_Config+0x86>
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d825      	bhi.n	8003cf8 <RCCEx_PLLSAI2_Config+0xa4>
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d002      	beq.n	8003cb6 <RCCEx_PLLSAI2_Config+0x62>
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d009      	beq.n	8003cc8 <RCCEx_PLLSAI2_Config+0x74>
 8003cb4:	e020      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cb6:	4b55      	ldr	r3, [pc, #340]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d11d      	bne.n	8003cfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc6:	e01a      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cc8:	4b50      	ldr	r3, [pc, #320]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d116      	bne.n	8003d02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd8:	e013      	b.n	8003d02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cda:	4b4c      	ldr	r3, [pc, #304]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ce6:	4b49      	ldr	r3, [pc, #292]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cf6:	e006      	b.n	8003d06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfc:	e004      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10d      	bne.n	8003d2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	430b      	orrs	r3, r1
 8003d24:	4939      	ldr	r1, [pc, #228]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d167      	bne.n	8003e00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d30:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a35      	ldr	r2, [pc, #212]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d3c:	f7fd fdd0 	bl	80018e0 <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d42:	e009      	b.n	8003d58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d44:	f7fd fdcc 	bl	80018e0 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d902      	bls.n	8003d58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	73fb      	strb	r3, [r7, #15]
        break;
 8003d56:	e005      	b.n	8003d64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d58:	4b2c      	ldr	r3, [pc, #176]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ef      	bne.n	8003d44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d14a      	bne.n	8003e00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d111      	bne.n	8003d94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d70:	4b26      	ldr	r3, [pc, #152]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6892      	ldr	r2, [r2, #8]
 8003d80:	0211      	lsls	r1, r2, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68d2      	ldr	r2, [r2, #12]
 8003d86:	0912      	lsrs	r2, r2, #4
 8003d88:	0452      	lsls	r2, r2, #17
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	491f      	ldr	r1, [pc, #124]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	614b      	str	r3, [r1, #20]
 8003d92:	e011      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d94:	4b1d      	ldr	r3, [pc, #116]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6892      	ldr	r2, [r2, #8]
 8003da4:	0211      	lsls	r1, r2, #8
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6912      	ldr	r2, [r2, #16]
 8003daa:	0852      	lsrs	r2, r2, #1
 8003dac:	3a01      	subs	r2, #1
 8003dae:	0652      	lsls	r2, r2, #25
 8003db0:	430a      	orrs	r2, r1
 8003db2:	4916      	ldr	r1, [pc, #88]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003db8:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a13      	ldr	r2, [pc, #76]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fd fd8c 	bl	80018e0 <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dca:	e009      	b.n	8003de0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dcc:	f7fd fd88 	bl	80018e0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d902      	bls.n	8003de0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	73fb      	strb	r3, [r7, #15]
          break;
 8003dde:	e005      	b.n	8003dec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003de0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ef      	beq.n	8003dcc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003df2:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4904      	ldr	r1, [pc, #16]	@ (8003e0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000

08003e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e049      	b.n	8003eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd fa7e 	bl	8001338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f000 fca0 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d001      	beq.n	8003ed8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e047      	b.n	8003f68 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a23      	ldr	r2, [pc, #140]	@ (8003f74 <HAL_TIM_Base_Start+0xb4>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01d      	beq.n	8003f26 <HAL_TIM_Base_Start+0x66>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef2:	d018      	beq.n	8003f26 <HAL_TIM_Base_Start+0x66>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f78 <HAL_TIM_Base_Start+0xb8>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_TIM_Base_Start+0x66>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1e      	ldr	r2, [pc, #120]	@ (8003f7c <HAL_TIM_Base_Start+0xbc>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00e      	beq.n	8003f26 <HAL_TIM_Base_Start+0x66>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f80 <HAL_TIM_Base_Start+0xc0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d009      	beq.n	8003f26 <HAL_TIM_Base_Start+0x66>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1b      	ldr	r2, [pc, #108]	@ (8003f84 <HAL_TIM_Base_Start+0xc4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d004      	beq.n	8003f26 <HAL_TIM_Base_Start+0x66>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a19      	ldr	r2, [pc, #100]	@ (8003f88 <HAL_TIM_Base_Start+0xc8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d115      	bne.n	8003f52 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	4b17      	ldr	r3, [pc, #92]	@ (8003f8c <HAL_TIM_Base_Start+0xcc>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d015      	beq.n	8003f64 <HAL_TIM_Base_Start+0xa4>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f3e:	d011      	beq.n	8003f64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f50:	e008      	b.n	8003f64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0201 	orr.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e000      	b.n	8003f66 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40013400 	.word	0x40013400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	00010007 	.word	0x00010007

08003f90 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a1a      	ldr	r2, [r3, #32]
 8003f9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10f      	bne.n	8003fc8 <HAL_TIM_Base_Stop+0x38>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6a1a      	ldr	r2, [r3, #32]
 8003fae:	f240 4344 	movw	r3, #1092	@ 0x444
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d107      	bne.n	8003fc8 <HAL_TIM_Base_Stop+0x38>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e049      	b.n	8004084 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f841 	bl	800408c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2202      	movs	r2, #2
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f000 fbb9 	bl	8004794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_TIM_PWM_Start+0x24>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e03c      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d109      	bne.n	80040de <HAL_TIM_PWM_Start+0x3e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	bf14      	ite	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	2300      	moveq	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	e02f      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d109      	bne.n	80040f8 <HAL_TIM_PWM_Start+0x58>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e022      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d109      	bne.n	8004112 <HAL_TIM_PWM_Start+0x72>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	bf14      	ite	ne
 800410a:	2301      	movne	r3, #1
 800410c:	2300      	moveq	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e015      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b10      	cmp	r3, #16
 8004116:	d109      	bne.n	800412c <HAL_TIM_PWM_Start+0x8c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e008      	b.n	800413e <HAL_TIM_PWM_Start+0x9e>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	bf14      	ite	ne
 8004138:	2301      	movne	r3, #1
 800413a:	2300      	moveq	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e09c      	b.n	8004280 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <HAL_TIM_PWM_Start+0xb6>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004154:	e023      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d104      	bne.n	8004166 <HAL_TIM_PWM_Start+0xc6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004164:	e01b      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d104      	bne.n	8004176 <HAL_TIM_PWM_Start+0xd6>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004174:	e013      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b0c      	cmp	r3, #12
 800417a:	d104      	bne.n	8004186 <HAL_TIM_PWM_Start+0xe6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004184:	e00b      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b10      	cmp	r3, #16
 800418a:	d104      	bne.n	8004196 <HAL_TIM_PWM_Start+0xf6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004194:	e003      	b.n	800419e <HAL_TIM_PWM_Start+0xfe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2201      	movs	r2, #1
 80041a4:	6839      	ldr	r1, [r7, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 ff0a 	bl	8004fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <HAL_TIM_PWM_Start+0x1e8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <HAL_TIM_PWM_Start+0x13e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a34      	ldr	r2, [pc, #208]	@ (800428c <HAL_TIM_PWM_Start+0x1ec>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00e      	beq.n	80041de <HAL_TIM_PWM_Start+0x13e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a32      	ldr	r2, [pc, #200]	@ (8004290 <HAL_TIM_PWM_Start+0x1f0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d009      	beq.n	80041de <HAL_TIM_PWM_Start+0x13e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a31      	ldr	r2, [pc, #196]	@ (8004294 <HAL_TIM_PWM_Start+0x1f4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d004      	beq.n	80041de <HAL_TIM_PWM_Start+0x13e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004298 <HAL_TIM_PWM_Start+0x1f8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_PWM_Start+0x142>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <HAL_TIM_PWM_Start+0x144>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a22      	ldr	r2, [pc, #136]	@ (8004288 <HAL_TIM_PWM_Start+0x1e8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01d      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420a:	d018      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a22      	ldr	r2, [pc, #136]	@ (800429c <HAL_TIM_PWM_Start+0x1fc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	@ (80042a0 <HAL_TIM_PWM_Start+0x200>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00e      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_TIM_PWM_Start+0x204>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d009      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a17      	ldr	r2, [pc, #92]	@ (800428c <HAL_TIM_PWM_Start+0x1ec>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d004      	beq.n	800423e <HAL_TIM_PWM_Start+0x19e>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a15      	ldr	r2, [pc, #84]	@ (8004290 <HAL_TIM_PWM_Start+0x1f0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d115      	bne.n	800426a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	4b18      	ldr	r3, [pc, #96]	@ (80042a8 <HAL_TIM_PWM_Start+0x208>)
 8004246:	4013      	ands	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b06      	cmp	r3, #6
 800424e:	d015      	beq.n	800427c <HAL_TIM_PWM_Start+0x1dc>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004256:	d011      	beq.n	800427c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	e008      	b.n	800427c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0201 	orr.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e000      	b.n	800427e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40013400 	.word	0x40013400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	00010007 	.word	0x00010007

080042ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	6839      	ldr	r1, [r7, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fe7e 	bl	8004fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a3e      	ldr	r2, [pc, #248]	@ (80043c4 <HAL_TIM_PWM_Stop+0x118>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <HAL_TIM_PWM_Stop+0x4a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3d      	ldr	r2, [pc, #244]	@ (80043c8 <HAL_TIM_PWM_Stop+0x11c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00e      	beq.n	80042f6 <HAL_TIM_PWM_Stop+0x4a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a3b      	ldr	r2, [pc, #236]	@ (80043cc <HAL_TIM_PWM_Stop+0x120>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_TIM_PWM_Stop+0x4a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a3a      	ldr	r2, [pc, #232]	@ (80043d0 <HAL_TIM_PWM_Stop+0x124>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_TIM_PWM_Stop+0x4a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a38      	ldr	r2, [pc, #224]	@ (80043d4 <HAL_TIM_PWM_Stop+0x128>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_PWM_Stop+0x4e>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_TIM_PWM_Stop+0x50>
 80042fa:	2300      	movs	r3, #0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d017      	beq.n	8004330 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a1a      	ldr	r2, [r3, #32]
 8004306:	f241 1311 	movw	r3, #4369	@ 0x1111
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10f      	bne.n	8004330 <HAL_TIM_PWM_Stop+0x84>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	f240 4344 	movw	r3, #1092	@ 0x444
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <HAL_TIM_PWM_Stop+0x84>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800432e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6a1a      	ldr	r2, [r3, #32]
 8004336:	f241 1311 	movw	r3, #4369	@ 0x1111
 800433a:	4013      	ands	r3, r2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10f      	bne.n	8004360 <HAL_TIM_PWM_Stop+0xb4>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	f240 4344 	movw	r3, #1092	@ 0x444
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d107      	bne.n	8004360 <HAL_TIM_PWM_Stop+0xb4>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d104      	bne.n	8004370 <HAL_TIM_PWM_Stop+0xc4>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800436e:	e023      	b.n	80043b8 <HAL_TIM_PWM_Stop+0x10c>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b04      	cmp	r3, #4
 8004374:	d104      	bne.n	8004380 <HAL_TIM_PWM_Stop+0xd4>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800437e:	e01b      	b.n	80043b8 <HAL_TIM_PWM_Stop+0x10c>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2b08      	cmp	r3, #8
 8004384:	d104      	bne.n	8004390 <HAL_TIM_PWM_Stop+0xe4>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800438e:	e013      	b.n	80043b8 <HAL_TIM_PWM_Stop+0x10c>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d104      	bne.n	80043a0 <HAL_TIM_PWM_Stop+0xf4>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800439e:	e00b      	b.n	80043b8 <HAL_TIM_PWM_Stop+0x10c>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d104      	bne.n	80043b0 <HAL_TIM_PWM_Stop+0x104>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043ae:	e003      	b.n	80043b8 <HAL_TIM_PWM_Stop+0x10c>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40012c00 	.word	0x40012c00
 80043c8:	40013400 	.word	0x40013400
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014400 	.word	0x40014400
 80043d4:	40014800 	.word	0x40014800

080043d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e0ff      	b.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b14      	cmp	r3, #20
 8004402:	f200 80f0 	bhi.w	80045e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004406:	a201      	add	r2, pc, #4	@ (adr r2, 800440c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004461 	.word	0x08004461
 8004410:	080045e7 	.word	0x080045e7
 8004414:	080045e7 	.word	0x080045e7
 8004418:	080045e7 	.word	0x080045e7
 800441c:	080044a1 	.word	0x080044a1
 8004420:	080045e7 	.word	0x080045e7
 8004424:	080045e7 	.word	0x080045e7
 8004428:	080045e7 	.word	0x080045e7
 800442c:	080044e3 	.word	0x080044e3
 8004430:	080045e7 	.word	0x080045e7
 8004434:	080045e7 	.word	0x080045e7
 8004438:	080045e7 	.word	0x080045e7
 800443c:	08004523 	.word	0x08004523
 8004440:	080045e7 	.word	0x080045e7
 8004444:	080045e7 	.word	0x080045e7
 8004448:	080045e7 	.word	0x080045e7
 800444c:	08004565 	.word	0x08004565
 8004450:	080045e7 	.word	0x080045e7
 8004454:	080045e7 	.word	0x080045e7
 8004458:	080045e7 	.word	0x080045e7
 800445c:	080045a5 	.word	0x080045a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fa3a 	bl	80048e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0208 	orr.w	r2, r2, #8
 800447a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6999      	ldr	r1, [r3, #24]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	619a      	str	r2, [r3, #24]
      break;
 800449e:	e0a5      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 faaa 	bl	8004a00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6999      	ldr	r1, [r3, #24]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	021a      	lsls	r2, r3, #8
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	619a      	str	r2, [r3, #24]
      break;
 80044e0:	e084      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fb13 	bl	8004b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0208 	orr.w	r2, r2, #8
 80044fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0204 	bic.w	r2, r2, #4
 800450c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69d9      	ldr	r1, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	61da      	str	r2, [r3, #28]
      break;
 8004520:	e064      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 fb7b 	bl	8004c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800453c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800454c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69d9      	ldr	r1, [r3, #28]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	021a      	lsls	r2, r3, #8
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	61da      	str	r2, [r3, #28]
      break;
 8004562:	e043      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fbc4 	bl	8004cf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0208 	orr.w	r2, r2, #8
 800457e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0204 	bic.w	r2, r2, #4
 800458e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80045a2:	e023      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fc08 	bl	8004dc0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	021a      	lsls	r2, r3, #8
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80045e4:	e002      	b.n	80045ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop

08004600 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_TIM_ConfigClockSource+0x1c>
 8004618:	2302      	movs	r3, #2
 800461a:	e0b6      	b.n	800478a <HAL_TIM_ConfigClockSource+0x18a>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800463e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004658:	d03e      	beq.n	80046d8 <HAL_TIM_ConfigClockSource+0xd8>
 800465a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800465e:	f200 8087 	bhi.w	8004770 <HAL_TIM_ConfigClockSource+0x170>
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004666:	f000 8086 	beq.w	8004776 <HAL_TIM_ConfigClockSource+0x176>
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466e:	d87f      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x170>
 8004670:	2b70      	cmp	r3, #112	@ 0x70
 8004672:	d01a      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0xaa>
 8004674:	2b70      	cmp	r3, #112	@ 0x70
 8004676:	d87b      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x170>
 8004678:	2b60      	cmp	r3, #96	@ 0x60
 800467a:	d050      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x11e>
 800467c:	2b60      	cmp	r3, #96	@ 0x60
 800467e:	d877      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x170>
 8004680:	2b50      	cmp	r3, #80	@ 0x50
 8004682:	d03c      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xfe>
 8004684:	2b50      	cmp	r3, #80	@ 0x50
 8004686:	d873      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x170>
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d058      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x13e>
 800468c:	2b40      	cmp	r3, #64	@ 0x40
 800468e:	d86f      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x170>
 8004690:	2b30      	cmp	r3, #48	@ 0x30
 8004692:	d064      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15e>
 8004694:	2b30      	cmp	r3, #48	@ 0x30
 8004696:	d86b      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x170>
 8004698:	2b20      	cmp	r3, #32
 800469a:	d060      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15e>
 800469c:	2b20      	cmp	r3, #32
 800469e:	d867      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x170>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d05c      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15e>
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d05a      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15e>
 80046a8:	e062      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046ba:	f000 fc61 	bl	8004f80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	609a      	str	r2, [r3, #8]
      break;
 80046d6:	e04f      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e8:	f000 fc4a 	bl	8004f80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046fa:	609a      	str	r2, [r3, #8]
      break;
 80046fc:	e03c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800470a:	461a      	mov	r2, r3
 800470c:	f000 fbbe 	bl	8004e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2150      	movs	r1, #80	@ 0x50
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fc17 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800471c:	e02c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800472a:	461a      	mov	r2, r3
 800472c:	f000 fbdd 	bl	8004eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2160      	movs	r1, #96	@ 0x60
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fc07 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800473c:	e01c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800474a:	461a      	mov	r2, r3
 800474c:	f000 fb9e 	bl	8004e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2140      	movs	r1, #64	@ 0x40
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fbf7 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800475c:	e00c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f000 fbee 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800476e:	e003      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      break;
 8004774:	e000      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a46      	ldr	r2, [pc, #280]	@ (80048c0 <TIM_Base_SetConfig+0x12c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b2:	d00f      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a43      	ldr	r2, [pc, #268]	@ (80048c4 <TIM_Base_SetConfig+0x130>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00b      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a42      	ldr	r2, [pc, #264]	@ (80048c8 <TIM_Base_SetConfig+0x134>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d007      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a41      	ldr	r2, [pc, #260]	@ (80048cc <TIM_Base_SetConfig+0x138>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a40      	ldr	r2, [pc, #256]	@ (80048d0 <TIM_Base_SetConfig+0x13c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d108      	bne.n	80047e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a35      	ldr	r2, [pc, #212]	@ (80048c0 <TIM_Base_SetConfig+0x12c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d01f      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f4:	d01b      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a32      	ldr	r2, [pc, #200]	@ (80048c4 <TIM_Base_SetConfig+0x130>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d017      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a31      	ldr	r2, [pc, #196]	@ (80048c8 <TIM_Base_SetConfig+0x134>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d013      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a30      	ldr	r2, [pc, #192]	@ (80048cc <TIM_Base_SetConfig+0x138>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00f      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2f      	ldr	r2, [pc, #188]	@ (80048d0 <TIM_Base_SetConfig+0x13c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00b      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2e      	ldr	r2, [pc, #184]	@ (80048d4 <TIM_Base_SetConfig+0x140>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2d      	ldr	r2, [pc, #180]	@ (80048d8 <TIM_Base_SetConfig+0x144>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_Base_SetConfig+0x9a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2c      	ldr	r2, [pc, #176]	@ (80048dc <TIM_Base_SetConfig+0x148>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a16      	ldr	r2, [pc, #88]	@ (80048c0 <TIM_Base_SetConfig+0x12c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a18      	ldr	r2, [pc, #96]	@ (80048d0 <TIM_Base_SetConfig+0x13c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a17      	ldr	r2, [pc, #92]	@ (80048d4 <TIM_Base_SetConfig+0x140>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a16      	ldr	r2, [pc, #88]	@ (80048d8 <TIM_Base_SetConfig+0x144>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0xf8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a15      	ldr	r2, [pc, #84]	@ (80048dc <TIM_Base_SetConfig+0x148>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f023 0201 	bic.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	611a      	str	r2, [r3, #16]
  }
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40013400 	.word	0x40013400
 80048d4:	40014000 	.word	0x40014000
 80048d8:	40014400 	.word	0x40014400
 80048dc:	40014800 	.word	0x40014800

080048e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 0201 	bic.w	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800490e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0303 	bic.w	r3, r3, #3
 800491a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f023 0302 	bic.w	r3, r3, #2
 800492c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a2c      	ldr	r2, [pc, #176]	@ (80049ec <TIM_OC1_SetConfig+0x10c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00f      	beq.n	8004960 <TIM_OC1_SetConfig+0x80>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a2b      	ldr	r2, [pc, #172]	@ (80049f0 <TIM_OC1_SetConfig+0x110>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d00b      	beq.n	8004960 <TIM_OC1_SetConfig+0x80>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a2a      	ldr	r2, [pc, #168]	@ (80049f4 <TIM_OC1_SetConfig+0x114>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d007      	beq.n	8004960 <TIM_OC1_SetConfig+0x80>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a29      	ldr	r2, [pc, #164]	@ (80049f8 <TIM_OC1_SetConfig+0x118>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_OC1_SetConfig+0x80>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a28      	ldr	r2, [pc, #160]	@ (80049fc <TIM_OC1_SetConfig+0x11c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10c      	bne.n	800497a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0308 	bic.w	r3, r3, #8
 8004966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 0304 	bic.w	r3, r3, #4
 8004978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ec <TIM_OC1_SetConfig+0x10c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00f      	beq.n	80049a2 <TIM_OC1_SetConfig+0xc2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <TIM_OC1_SetConfig+0x110>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00b      	beq.n	80049a2 <TIM_OC1_SetConfig+0xc2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a19      	ldr	r2, [pc, #100]	@ (80049f4 <TIM_OC1_SetConfig+0x114>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <TIM_OC1_SetConfig+0xc2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a18      	ldr	r2, [pc, #96]	@ (80049f8 <TIM_OC1_SetConfig+0x118>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_OC1_SetConfig+0xc2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a17      	ldr	r2, [pc, #92]	@ (80049fc <TIM_OC1_SetConfig+0x11c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d111      	bne.n	80049c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	621a      	str	r2, [r3, #32]
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	40013400 	.word	0x40013400
 80049f4:	40014000 	.word	0x40014000
 80049f8:	40014400 	.word	0x40014400
 80049fc:	40014800 	.word	0x40014800

08004a00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	f023 0210 	bic.w	r2, r3, #16
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0320 	bic.w	r3, r3, #32
 8004a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a28      	ldr	r2, [pc, #160]	@ (8004b00 <TIM_OC2_SetConfig+0x100>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_OC2_SetConfig+0x6c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a27      	ldr	r2, [pc, #156]	@ (8004b04 <TIM_OC2_SetConfig+0x104>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d10d      	bne.n	8004a88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004b00 <TIM_OC2_SetConfig+0x100>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00f      	beq.n	8004ab0 <TIM_OC2_SetConfig+0xb0>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <TIM_OC2_SetConfig+0x104>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00b      	beq.n	8004ab0 <TIM_OC2_SetConfig+0xb0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b08 <TIM_OC2_SetConfig+0x108>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d007      	beq.n	8004ab0 <TIM_OC2_SetConfig+0xb0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8004b0c <TIM_OC2_SetConfig+0x10c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_OC2_SetConfig+0xb0>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a19      	ldr	r2, [pc, #100]	@ (8004b10 <TIM_OC2_SetConfig+0x110>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d113      	bne.n	8004ad8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40014400 	.word	0x40014400
 8004b10:	40014800 	.word	0x40014800

08004b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a27      	ldr	r2, [pc, #156]	@ (8004c10 <TIM_OC3_SetConfig+0xfc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d003      	beq.n	8004b7e <TIM_OC3_SetConfig+0x6a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a26      	ldr	r2, [pc, #152]	@ (8004c14 <TIM_OC3_SetConfig+0x100>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d10d      	bne.n	8004b9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c10 <TIM_OC3_SetConfig+0xfc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00f      	beq.n	8004bc2 <TIM_OC3_SetConfig+0xae>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <TIM_OC3_SetConfig+0x100>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00b      	beq.n	8004bc2 <TIM_OC3_SetConfig+0xae>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a1a      	ldr	r2, [pc, #104]	@ (8004c18 <TIM_OC3_SetConfig+0x104>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <TIM_OC3_SetConfig+0xae>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	@ (8004c1c <TIM_OC3_SetConfig+0x108>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_OC3_SetConfig+0xae>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a18      	ldr	r2, [pc, #96]	@ (8004c20 <TIM_OC3_SetConfig+0x10c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d113      	bne.n	8004bea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	621a      	str	r2, [r3, #32]
}
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40013400 	.word	0x40013400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40014400 	.word	0x40014400
 8004c20:	40014800 	.word	0x40014800

08004c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	031b      	lsls	r3, r3, #12
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a18      	ldr	r2, [pc, #96]	@ (8004ce4 <TIM_OC4_SetConfig+0xc0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00f      	beq.n	8004ca8 <TIM_OC4_SetConfig+0x84>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ce8 <TIM_OC4_SetConfig+0xc4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_OC4_SetConfig+0x84>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a16      	ldr	r2, [pc, #88]	@ (8004cec <TIM_OC4_SetConfig+0xc8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_OC4_SetConfig+0x84>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a15      	ldr	r2, [pc, #84]	@ (8004cf0 <TIM_OC4_SetConfig+0xcc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_OC4_SetConfig+0x84>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a14      	ldr	r2, [pc, #80]	@ (8004cf4 <TIM_OC4_SetConfig+0xd0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d109      	bne.n	8004cbc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40014400 	.word	0x40014400
 8004cf4:	40014800 	.word	0x40014800

08004cf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004d3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a17      	ldr	r2, [pc, #92]	@ (8004dac <TIM_OC5_SetConfig+0xb4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00f      	beq.n	8004d72 <TIM_OC5_SetConfig+0x7a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a16      	ldr	r2, [pc, #88]	@ (8004db0 <TIM_OC5_SetConfig+0xb8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00b      	beq.n	8004d72 <TIM_OC5_SetConfig+0x7a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a15      	ldr	r2, [pc, #84]	@ (8004db4 <TIM_OC5_SetConfig+0xbc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d007      	beq.n	8004d72 <TIM_OC5_SetConfig+0x7a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a14      	ldr	r2, [pc, #80]	@ (8004db8 <TIM_OC5_SetConfig+0xc0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d003      	beq.n	8004d72 <TIM_OC5_SetConfig+0x7a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	@ (8004dbc <TIM_OC5_SetConfig+0xc4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d109      	bne.n	8004d86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	621a      	str	r2, [r3, #32]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40013400 	.word	0x40013400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800

08004dc0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	051b      	lsls	r3, r3, #20
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a18      	ldr	r2, [pc, #96]	@ (8004e78 <TIM_OC6_SetConfig+0xb8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00f      	beq.n	8004e3c <TIM_OC6_SetConfig+0x7c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	@ (8004e7c <TIM_OC6_SetConfig+0xbc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_OC6_SetConfig+0x7c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a16      	ldr	r2, [pc, #88]	@ (8004e80 <TIM_OC6_SetConfig+0xc0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <TIM_OC6_SetConfig+0x7c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a15      	ldr	r2, [pc, #84]	@ (8004e84 <TIM_OC6_SetConfig+0xc4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_OC6_SetConfig+0x7c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a14      	ldr	r2, [pc, #80]	@ (8004e88 <TIM_OC6_SetConfig+0xc8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d109      	bne.n	8004e50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	029b      	lsls	r3, r3, #10
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40013400 	.word	0x40013400
 8004e80:	40014000 	.word	0x40014000
 8004e84:	40014400 	.word	0x40014400
 8004e88:	40014800 	.word	0x40014800

08004e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f023 0201 	bic.w	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f023 030a 	bic.w	r3, r3, #10
 8004ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b087      	sub	sp, #28
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f023 0210 	bic.w	r2, r3, #16
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	031b      	lsls	r3, r3, #12
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f043 0307 	orr.w	r3, r3, #7
 8004f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	021a      	lsls	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1a      	ldr	r2, [r3, #32]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e068      	b.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a2e      	ldr	r2, [pc, #184]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a2d      	ldr	r2, [pc, #180]	@ (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d108      	bne.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800505e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005070:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1e      	ldr	r2, [pc, #120]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01d      	beq.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005096:	d018      	beq.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1b      	ldr	r2, [pc, #108]	@ (800510c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d013      	beq.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00e      	beq.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a18      	ldr	r2, [pc, #96]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d009      	beq.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a13      	ldr	r2, [pc, #76]	@ (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d004      	beq.n	80050ca <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a14      	ldr	r2, [pc, #80]	@ (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d10c      	bne.n	80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40013400 	.word	0x40013400
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40014000 	.word	0x40014000

0800511c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e040      	b.n	80051b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fc f964 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	@ 0x24
 8005148:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0201 	bic.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fc88 	bl	8005a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f9cd 	bl	8005508 <UART_SetConfig>
 800516e:	4603      	mov	r3, r0
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e01b      	b.n	80051b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fd07 	bl	8005bbc <UART_CheckIdleState>
 80051ae:	4603      	mov	r3, r0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e048      	b.n	800525c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fc f916 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	@ 0x24
 80051e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fc3a 	bl	8005a78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f97f 	bl	8005508 <UART_SetConfig>
 800520a:	4603      	mov	r3, r0
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e023      	b.n	800525c <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005232:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0208 	orr.w	r2, r2, #8
 8005242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fcb1 	bl	8005bbc <UART_CheckIdleState>
 800525a:	4603      	mov	r3, r0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	@ 0x28
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005278:	2b20      	cmp	r3, #32
 800527a:	d177      	bne.n	800536c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_UART_Transmit+0x24>
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e070      	b.n	800536e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2221      	movs	r2, #33	@ 0x21
 8005298:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800529a:	f7fc fb21 	bl	80018e0 <HAL_GetTick>
 800529e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	88fa      	ldrh	r2, [r7, #6]
 80052a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052b8:	d108      	bne.n	80052cc <HAL_UART_Transmit+0x68>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d104      	bne.n	80052cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	e003      	b.n	80052d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80052d4:	e02f      	b.n	8005336 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2200      	movs	r2, #0
 80052de:	2180      	movs	r1, #128	@ 0x80
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fd13 	bl	8005d0c <UART_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e03b      	b.n	800536e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	881a      	ldrh	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005308:	b292      	uxth	r2, r2
 800530a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	3302      	adds	r3, #2
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e007      	b.n	8005324 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	781a      	ldrb	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3301      	adds	r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1c9      	bne.n	80052d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2200      	movs	r2, #0
 800534a:	2140      	movs	r1, #64	@ 0x40
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 fcdd 	bl	8005d0c <UART_WaitOnFlagUntilTimeout>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2220      	movs	r2, #32
 800535c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e005      	b.n	800536e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2220      	movs	r2, #32
 8005366:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e000      	b.n	800536e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800536c:	2302      	movs	r3, #2
  }
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b08a      	sub	sp, #40	@ 0x28
 800537a:	af02      	add	r7, sp, #8
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800538c:	2b20      	cmp	r3, #32
 800538e:	f040 80b6 	bne.w	80054fe <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d002      	beq.n	800539e <HAL_UART_Receive+0x28>
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e0ae      	b.n	8005500 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2222      	movs	r2, #34	@ 0x22
 80053ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053b8:	f7fc fa92 	bl	80018e0 <HAL_GetTick>
 80053bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	88fa      	ldrh	r2, [r7, #6]
 80053ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d6:	d10e      	bne.n	80053f6 <HAL_UART_Receive+0x80>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <HAL_UART_Receive+0x76>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80053e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053ea:	e02d      	b.n	8005448 <HAL_UART_Receive+0xd2>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	22ff      	movs	r2, #255	@ 0xff
 80053f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80053f4:	e028      	b.n	8005448 <HAL_UART_Receive+0xd2>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10d      	bne.n	800541a <HAL_UART_Receive+0xa4>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <HAL_UART_Receive+0x9a>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	22ff      	movs	r2, #255	@ 0xff
 800540a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800540e:	e01b      	b.n	8005448 <HAL_UART_Receive+0xd2>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	227f      	movs	r2, #127	@ 0x7f
 8005414:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005418:	e016      	b.n	8005448 <HAL_UART_Receive+0xd2>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005422:	d10d      	bne.n	8005440 <HAL_UART_Receive+0xca>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_UART_Receive+0xc0>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	227f      	movs	r2, #127	@ 0x7f
 8005430:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005434:	e008      	b.n	8005448 <HAL_UART_Receive+0xd2>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	223f      	movs	r2, #63	@ 0x3f
 800543a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800543e:	e003      	b.n	8005448 <HAL_UART_Receive+0xd2>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800544e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005458:	d108      	bne.n	800546c <HAL_UART_Receive+0xf6>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	61bb      	str	r3, [r7, #24]
 800546a:	e003      	b.n	8005474 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005474:	e037      	b.n	80054e6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2200      	movs	r2, #0
 800547e:	2120      	movs	r1, #32
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fc43 	bl	8005d0c <UART_WaitOnFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d005      	beq.n	8005498 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e033      	b.n	8005500 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10c      	bne.n	80054b8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	8a7b      	ldrh	r3, [r7, #18]
 80054a8:	4013      	ands	r3, r2
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	3302      	adds	r3, #2
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	e00d      	b.n	80054d4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80054be:	b29b      	uxth	r3, r3
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	8a7b      	ldrh	r3, [r7, #18]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	4013      	ands	r3, r2
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3301      	adds	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1c1      	bne.n	8005476 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e000      	b.n	8005500 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800550c:	b08a      	sub	sp, #40	@ 0x28
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	431a      	orrs	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	4313      	orrs	r3, r2
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4ba4      	ldr	r3, [pc, #656]	@ (80057c8 <UART_SetConfig+0x2c0>)
 8005538:	4013      	ands	r3, r2
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005540:	430b      	orrs	r3, r1
 8005542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a99      	ldr	r2, [pc, #612]	@ (80057cc <UART_SetConfig+0x2c4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005570:	4313      	orrs	r3, r2
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005584:	430a      	orrs	r2, r1
 8005586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a90      	ldr	r2, [pc, #576]	@ (80057d0 <UART_SetConfig+0x2c8>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d126      	bne.n	80055e0 <UART_SetConfig+0xd8>
 8005592:	4b90      	ldr	r3, [pc, #576]	@ (80057d4 <UART_SetConfig+0x2cc>)
 8005594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	2b03      	cmp	r3, #3
 800559e:	d81b      	bhi.n	80055d8 <UART_SetConfig+0xd0>
 80055a0:	a201      	add	r2, pc, #4	@ (adr r2, 80055a8 <UART_SetConfig+0xa0>)
 80055a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a6:	bf00      	nop
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055c9 	.word	0x080055c9
 80055b0:	080055c1 	.word	0x080055c1
 80055b4:	080055d1 	.word	0x080055d1
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055be:	e116      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055c0:	2302      	movs	r3, #2
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c6:	e112      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055c8:	2304      	movs	r3, #4
 80055ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ce:	e10e      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055d0:	2308      	movs	r3, #8
 80055d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055d6:	e10a      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055d8:	2310      	movs	r3, #16
 80055da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055de:	e106      	b.n	80057ee <UART_SetConfig+0x2e6>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a7c      	ldr	r2, [pc, #496]	@ (80057d8 <UART_SetConfig+0x2d0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d138      	bne.n	800565c <UART_SetConfig+0x154>
 80055ea:	4b7a      	ldr	r3, [pc, #488]	@ (80057d4 <UART_SetConfig+0x2cc>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f0:	f003 030c 	and.w	r3, r3, #12
 80055f4:	2b0c      	cmp	r3, #12
 80055f6:	d82d      	bhi.n	8005654 <UART_SetConfig+0x14c>
 80055f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <UART_SetConfig+0xf8>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005635 	.word	0x08005635
 8005604:	08005655 	.word	0x08005655
 8005608:	08005655 	.word	0x08005655
 800560c:	08005655 	.word	0x08005655
 8005610:	08005645 	.word	0x08005645
 8005614:	08005655 	.word	0x08005655
 8005618:	08005655 	.word	0x08005655
 800561c:	08005655 	.word	0x08005655
 8005620:	0800563d 	.word	0x0800563d
 8005624:	08005655 	.word	0x08005655
 8005628:	08005655 	.word	0x08005655
 800562c:	08005655 	.word	0x08005655
 8005630:	0800564d 	.word	0x0800564d
 8005634:	2300      	movs	r3, #0
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800563a:	e0d8      	b.n	80057ee <UART_SetConfig+0x2e6>
 800563c:	2302      	movs	r3, #2
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005642:	e0d4      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005644:	2304      	movs	r3, #4
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800564a:	e0d0      	b.n	80057ee <UART_SetConfig+0x2e6>
 800564c:	2308      	movs	r3, #8
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005652:	e0cc      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005654:	2310      	movs	r3, #16
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800565a:	e0c8      	b.n	80057ee <UART_SetConfig+0x2e6>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a5e      	ldr	r2, [pc, #376]	@ (80057dc <UART_SetConfig+0x2d4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d125      	bne.n	80056b2 <UART_SetConfig+0x1aa>
 8005666:	4b5b      	ldr	r3, [pc, #364]	@ (80057d4 <UART_SetConfig+0x2cc>)
 8005668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800566c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005670:	2b30      	cmp	r3, #48	@ 0x30
 8005672:	d016      	beq.n	80056a2 <UART_SetConfig+0x19a>
 8005674:	2b30      	cmp	r3, #48	@ 0x30
 8005676:	d818      	bhi.n	80056aa <UART_SetConfig+0x1a2>
 8005678:	2b20      	cmp	r3, #32
 800567a:	d00a      	beq.n	8005692 <UART_SetConfig+0x18a>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d814      	bhi.n	80056aa <UART_SetConfig+0x1a2>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <UART_SetConfig+0x182>
 8005684:	2b10      	cmp	r3, #16
 8005686:	d008      	beq.n	800569a <UART_SetConfig+0x192>
 8005688:	e00f      	b.n	80056aa <UART_SetConfig+0x1a2>
 800568a:	2300      	movs	r3, #0
 800568c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005690:	e0ad      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005692:	2302      	movs	r3, #2
 8005694:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005698:	e0a9      	b.n	80057ee <UART_SetConfig+0x2e6>
 800569a:	2304      	movs	r3, #4
 800569c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056a0:	e0a5      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056a2:	2308      	movs	r3, #8
 80056a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056a8:	e0a1      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056aa:	2310      	movs	r3, #16
 80056ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056b0:	e09d      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a4a      	ldr	r2, [pc, #296]	@ (80057e0 <UART_SetConfig+0x2d8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d125      	bne.n	8005708 <UART_SetConfig+0x200>
 80056bc:	4b45      	ldr	r3, [pc, #276]	@ (80057d4 <UART_SetConfig+0x2cc>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056c8:	d016      	beq.n	80056f8 <UART_SetConfig+0x1f0>
 80056ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80056cc:	d818      	bhi.n	8005700 <UART_SetConfig+0x1f8>
 80056ce:	2b80      	cmp	r3, #128	@ 0x80
 80056d0:	d00a      	beq.n	80056e8 <UART_SetConfig+0x1e0>
 80056d2:	2b80      	cmp	r3, #128	@ 0x80
 80056d4:	d814      	bhi.n	8005700 <UART_SetConfig+0x1f8>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <UART_SetConfig+0x1d8>
 80056da:	2b40      	cmp	r3, #64	@ 0x40
 80056dc:	d008      	beq.n	80056f0 <UART_SetConfig+0x1e8>
 80056de:	e00f      	b.n	8005700 <UART_SetConfig+0x1f8>
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056e6:	e082      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056e8:	2302      	movs	r3, #2
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ee:	e07e      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f6:	e07a      	b.n	80057ee <UART_SetConfig+0x2e6>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fe:	e076      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005700:	2310      	movs	r3, #16
 8005702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005706:	e072      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a35      	ldr	r2, [pc, #212]	@ (80057e4 <UART_SetConfig+0x2dc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d12a      	bne.n	8005768 <UART_SetConfig+0x260>
 8005712:	4b30      	ldr	r3, [pc, #192]	@ (80057d4 <UART_SetConfig+0x2cc>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005718:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800571c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005720:	d01a      	beq.n	8005758 <UART_SetConfig+0x250>
 8005722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005726:	d81b      	bhi.n	8005760 <UART_SetConfig+0x258>
 8005728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800572c:	d00c      	beq.n	8005748 <UART_SetConfig+0x240>
 800572e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005732:	d815      	bhi.n	8005760 <UART_SetConfig+0x258>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <UART_SetConfig+0x238>
 8005738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800573c:	d008      	beq.n	8005750 <UART_SetConfig+0x248>
 800573e:	e00f      	b.n	8005760 <UART_SetConfig+0x258>
 8005740:	2300      	movs	r3, #0
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005746:	e052      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005748:	2302      	movs	r3, #2
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574e:	e04e      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005750:	2304      	movs	r3, #4
 8005752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005756:	e04a      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005758:	2308      	movs	r3, #8
 800575a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575e:	e046      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005760:	2310      	movs	r3, #16
 8005762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005766:	e042      	b.n	80057ee <UART_SetConfig+0x2e6>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a17      	ldr	r2, [pc, #92]	@ (80057cc <UART_SetConfig+0x2c4>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d13a      	bne.n	80057e8 <UART_SetConfig+0x2e0>
 8005772:	4b18      	ldr	r3, [pc, #96]	@ (80057d4 <UART_SetConfig+0x2cc>)
 8005774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005778:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800577c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005780:	d01a      	beq.n	80057b8 <UART_SetConfig+0x2b0>
 8005782:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005786:	d81b      	bhi.n	80057c0 <UART_SetConfig+0x2b8>
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800578c:	d00c      	beq.n	80057a8 <UART_SetConfig+0x2a0>
 800578e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005792:	d815      	bhi.n	80057c0 <UART_SetConfig+0x2b8>
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <UART_SetConfig+0x298>
 8005798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579c:	d008      	beq.n	80057b0 <UART_SetConfig+0x2a8>
 800579e:	e00f      	b.n	80057c0 <UART_SetConfig+0x2b8>
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a6:	e022      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057a8:	2302      	movs	r3, #2
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ae:	e01e      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057b0:	2304      	movs	r3, #4
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b6:	e01a      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057b8:	2308      	movs	r3, #8
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057be:	e016      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057c0:	2310      	movs	r3, #16
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c6:	e012      	b.n	80057ee <UART_SetConfig+0x2e6>
 80057c8:	efff69f3 	.word	0xefff69f3
 80057cc:	40008000 	.word	0x40008000
 80057d0:	40013800 	.word	0x40013800
 80057d4:	40021000 	.word	0x40021000
 80057d8:	40004400 	.word	0x40004400
 80057dc:	40004800 	.word	0x40004800
 80057e0:	40004c00 	.word	0x40004c00
 80057e4:	40005000 	.word	0x40005000
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a9f      	ldr	r2, [pc, #636]	@ (8005a70 <UART_SetConfig+0x568>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d17a      	bne.n	80058ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d824      	bhi.n	800584a <UART_SetConfig+0x342>
 8005800:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <UART_SetConfig+0x300>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800582d 	.word	0x0800582d
 800580c:	0800584b 	.word	0x0800584b
 8005810:	08005835 	.word	0x08005835
 8005814:	0800584b 	.word	0x0800584b
 8005818:	0800583b 	.word	0x0800583b
 800581c:	0800584b 	.word	0x0800584b
 8005820:	0800584b 	.word	0x0800584b
 8005824:	0800584b 	.word	0x0800584b
 8005828:	08005843 	.word	0x08005843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fd fda8 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 8005830:	61f8      	str	r0, [r7, #28]
        break;
 8005832:	e010      	b.n	8005856 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005834:	4b8f      	ldr	r3, [pc, #572]	@ (8005a74 <UART_SetConfig+0x56c>)
 8005836:	61fb      	str	r3, [r7, #28]
        break;
 8005838:	e00d      	b.n	8005856 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583a:	f7fd fd09 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 800583e:	61f8      	str	r0, [r7, #28]
        break;
 8005840:	e009      	b.n	8005856 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005846:	61fb      	str	r3, [r7, #28]
        break;
 8005848:	e005      	b.n	8005856 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80fb 	beq.w	8005a54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4413      	add	r3, r2
 8005868:	69fa      	ldr	r2, [r7, #28]
 800586a:	429a      	cmp	r2, r3
 800586c:	d305      	bcc.n	800587a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005874:	69fa      	ldr	r2, [r7, #28]
 8005876:	429a      	cmp	r2, r3
 8005878:	d903      	bls.n	8005882 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005880:	e0e8      	b.n	8005a54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2200      	movs	r2, #0
 8005886:	461c      	mov	r4, r3
 8005888:	4615      	mov	r5, r2
 800588a:	f04f 0200 	mov.w	r2, #0
 800588e:	f04f 0300 	mov.w	r3, #0
 8005892:	022b      	lsls	r3, r5, #8
 8005894:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005898:	0222      	lsls	r2, r4, #8
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	6849      	ldr	r1, [r1, #4]
 800589e:	0849      	lsrs	r1, r1, #1
 80058a0:	2000      	movs	r0, #0
 80058a2:	4688      	mov	r8, r1
 80058a4:	4681      	mov	r9, r0
 80058a6:	eb12 0a08 	adds.w	sl, r2, r8
 80058aa:	eb43 0b09 	adc.w	fp, r3, r9
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	603b      	str	r3, [r7, #0]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058bc:	4650      	mov	r0, sl
 80058be:	4659      	mov	r1, fp
 80058c0:	f7fa fcd6 	bl	8000270 <__aeabi_uldivmod>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4613      	mov	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058d2:	d308      	bcc.n	80058e6 <UART_SetConfig+0x3de>
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058da:	d204      	bcs.n	80058e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	e0b6      	b.n	8005a54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058ec:	e0b2      	b.n	8005a54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f6:	d15e      	bne.n	80059b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d828      	bhi.n	8005952 <UART_SetConfig+0x44a>
 8005900:	a201      	add	r2, pc, #4	@ (adr r2, 8005908 <UART_SetConfig+0x400>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	0800592d 	.word	0x0800592d
 800590c:	08005935 	.word	0x08005935
 8005910:	0800593d 	.word	0x0800593d
 8005914:	08005953 	.word	0x08005953
 8005918:	08005943 	.word	0x08005943
 800591c:	08005953 	.word	0x08005953
 8005920:	08005953 	.word	0x08005953
 8005924:	08005953 	.word	0x08005953
 8005928:	0800594b 	.word	0x0800594b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800592c:	f7fd fd28 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 8005930:	61f8      	str	r0, [r7, #28]
        break;
 8005932:	e014      	b.n	800595e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005934:	f7fd fd3a 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 8005938:	61f8      	str	r0, [r7, #28]
        break;
 800593a:	e010      	b.n	800595e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800593c:	4b4d      	ldr	r3, [pc, #308]	@ (8005a74 <UART_SetConfig+0x56c>)
 800593e:	61fb      	str	r3, [r7, #28]
        break;
 8005940:	e00d      	b.n	800595e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005942:	f7fd fc85 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 8005946:	61f8      	str	r0, [r7, #28]
        break;
 8005948:	e009      	b.n	800595e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800594a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800594e:	61fb      	str	r3, [r7, #28]
        break;
 8005950:	e005      	b.n	800595e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800595c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d077      	beq.n	8005a54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	005a      	lsls	r2, r3, #1
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b0f      	cmp	r3, #15
 800597e:	d916      	bls.n	80059ae <UART_SetConfig+0x4a6>
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005986:	d212      	bcs.n	80059ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f023 030f 	bic.w	r3, r3, #15
 8005990:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	b29b      	uxth	r3, r3
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	b29a      	uxth	r2, r3
 800599e:	8afb      	ldrh	r3, [r7, #22]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	8afa      	ldrh	r2, [r7, #22]
 80059aa:	60da      	str	r2, [r3, #12]
 80059ac:	e052      	b.n	8005a54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059b4:	e04e      	b.n	8005a54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d827      	bhi.n	8005a0e <UART_SetConfig+0x506>
 80059be:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <UART_SetConfig+0x4bc>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	08005a0f 	.word	0x08005a0f
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	08005a0f 	.word	0x08005a0f
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a0f 	.word	0x08005a0f
 80059e4:	08005a07 	.word	0x08005a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fd fcca 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 80059ec:	61f8      	str	r0, [r7, #28]
        break;
 80059ee:	e014      	b.n	8005a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f0:	f7fd fcdc 	bl	80033ac <HAL_RCC_GetPCLK2Freq>
 80059f4:	61f8      	str	r0, [r7, #28]
        break;
 80059f6:	e010      	b.n	8005a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a74 <UART_SetConfig+0x56c>)
 80059fa:	61fb      	str	r3, [r7, #28]
        break;
 80059fc:	e00d      	b.n	8005a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fe:	f7fd fc27 	bl	8003250 <HAL_RCC_GetSysClockFreq>
 8005a02:	61f8      	str	r0, [r7, #28]
        break;
 8005a04:	e009      	b.n	8005a1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a0a:	61fb      	str	r3, [r7, #28]
        break;
 8005a0c:	e005      	b.n	8005a1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a18:	bf00      	nop
    }

    if (pclk != 0U)
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d019      	beq.n	8005a54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	085a      	lsrs	r2, r3, #1
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	441a      	add	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d909      	bls.n	8005a4e <UART_SetConfig+0x546>
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a40:	d205      	bcs.n	8005a4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	e002      	b.n	8005a54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3728      	adds	r7, #40	@ 0x28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a6e:	bf00      	nop
 8005a70:	40008000 	.word	0x40008000
 8005a74:	00f42400 	.word	0x00f42400

08005a78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00a      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d01a      	beq.n	8005b8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b76:	d10a      	bne.n	8005b8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	605a      	str	r2, [r3, #4]
  }
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b098      	sub	sp, #96	@ 0x60
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bcc:	f7fb fe88 	bl	80018e0 <HAL_GetTick>
 8005bd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d12e      	bne.n	8005c3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005be0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be8:	2200      	movs	r2, #0
 8005bea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f88c 	bl	8005d0c <UART_WaitOnFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d021      	beq.n	8005c3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e6      	bne.n	8005bfa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e062      	b.n	8005d04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d149      	bne.n	8005ce0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c54:	2200      	movs	r2, #0
 8005c56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f856 	bl	8005d0c <UART_WaitOnFlagUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d03c      	beq.n	8005ce0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	e853 3f00 	ldrex	r3, [r3]
 8005c72:	623b      	str	r3, [r7, #32]
   return(result);
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c8c:	e841 2300 	strex	r3, r2, [r1]
 8005c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e6      	bne.n	8005c66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0301 	bic.w	r3, r3, #1
 8005cae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3308      	adds	r3, #8
 8005cb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cb8:	61fa      	str	r2, [r7, #28]
 8005cba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	69b9      	ldr	r1, [r7, #24]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	e841 2300 	strex	r3, r2, [r1]
 8005cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1e5      	bne.n	8005c98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e011      	b.n	8005d04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3758      	adds	r7, #88	@ 0x58
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1c:	e04f      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d04b      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d26:	f7fb fddb 	bl	80018e0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d302      	bcc.n	8005d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e04e      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d037      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b80      	cmp	r3, #128	@ 0x80
 8005d52:	d034      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b40      	cmp	r3, #64	@ 0x40
 8005d58:	d031      	beq.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d110      	bne.n	8005d8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2208      	movs	r2, #8
 8005d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f838 	bl	8005de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2208      	movs	r2, #8
 8005d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e029      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d98:	d111      	bne.n	8005dbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005da2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f81e 	bl	8005de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e00f      	b.n	8005dde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	bf0c      	ite	eq
 8005dce:	2301      	moveq	r3, #1
 8005dd0:	2300      	movne	r3, #0
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d0a0      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b095      	sub	sp, #84	@ 0x54
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e6      	bne.n	8005dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	3308      	adds	r3, #8
 8005e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f023 0301 	bic.w	r3, r3, #1
 8005e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e5      	bne.n	8005e20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d118      	bne.n	8005e8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f023 0310 	bic.w	r3, r3, #16
 8005e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6979      	ldr	r1, [r7, #20]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	613b      	str	r3, [r7, #16]
   return(result);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e6      	bne.n	8005e5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ea2:	bf00      	nop
 8005ea4:	3754      	adds	r7, #84	@ 0x54
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <std>:
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	b510      	push	{r4, lr}
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ebe:	6083      	str	r3, [r0, #8]
 8005ec0:	8181      	strh	r1, [r0, #12]
 8005ec2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ec4:	81c2      	strh	r2, [r0, #14]
 8005ec6:	6183      	str	r3, [r0, #24]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	2208      	movs	r2, #8
 8005ecc:	305c      	adds	r0, #92	@ 0x5c
 8005ece:	f000 f9f9 	bl	80062c4 <memset>
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f08 <std+0x58>)
 8005ed4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f0c <std+0x5c>)
 8005ed8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eda:	4b0d      	ldr	r3, [pc, #52]	@ (8005f10 <std+0x60>)
 8005edc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ede:	4b0d      	ldr	r3, [pc, #52]	@ (8005f14 <std+0x64>)
 8005ee0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f18 <std+0x68>)
 8005ee4:	6224      	str	r4, [r4, #32]
 8005ee6:	429c      	cmp	r4, r3
 8005ee8:	d006      	beq.n	8005ef8 <std+0x48>
 8005eea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005eee:	4294      	cmp	r4, r2
 8005ef0:	d002      	beq.n	8005ef8 <std+0x48>
 8005ef2:	33d0      	adds	r3, #208	@ 0xd0
 8005ef4:	429c      	cmp	r4, r3
 8005ef6:	d105      	bne.n	8005f04 <std+0x54>
 8005ef8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f00:	f000 ba58 	b.w	80063b4 <__retarget_lock_init_recursive>
 8005f04:	bd10      	pop	{r4, pc}
 8005f06:	bf00      	nop
 8005f08:	08006115 	.word	0x08006115
 8005f0c:	08006137 	.word	0x08006137
 8005f10:	0800616f 	.word	0x0800616f
 8005f14:	08006193 	.word	0x08006193
 8005f18:	2000033c 	.word	0x2000033c

08005f1c <stdio_exit_handler>:
 8005f1c:	4a02      	ldr	r2, [pc, #8]	@ (8005f28 <stdio_exit_handler+0xc>)
 8005f1e:	4903      	ldr	r1, [pc, #12]	@ (8005f2c <stdio_exit_handler+0x10>)
 8005f20:	4803      	ldr	r0, [pc, #12]	@ (8005f30 <stdio_exit_handler+0x14>)
 8005f22:	f000 b869 	b.w	8005ff8 <_fwalk_sglue>
 8005f26:	bf00      	nop
 8005f28:	2000001c 	.word	0x2000001c
 8005f2c:	08006c55 	.word	0x08006c55
 8005f30:	2000002c 	.word	0x2000002c

08005f34 <cleanup_stdio>:
 8005f34:	6841      	ldr	r1, [r0, #4]
 8005f36:	4b0c      	ldr	r3, [pc, #48]	@ (8005f68 <cleanup_stdio+0x34>)
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	b510      	push	{r4, lr}
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	d001      	beq.n	8005f44 <cleanup_stdio+0x10>
 8005f40:	f000 fe88 	bl	8006c54 <_fflush_r>
 8005f44:	68a1      	ldr	r1, [r4, #8]
 8005f46:	4b09      	ldr	r3, [pc, #36]	@ (8005f6c <cleanup_stdio+0x38>)
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	d002      	beq.n	8005f52 <cleanup_stdio+0x1e>
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 fe81 	bl	8006c54 <_fflush_r>
 8005f52:	68e1      	ldr	r1, [r4, #12]
 8005f54:	4b06      	ldr	r3, [pc, #24]	@ (8005f70 <cleanup_stdio+0x3c>)
 8005f56:	4299      	cmp	r1, r3
 8005f58:	d004      	beq.n	8005f64 <cleanup_stdio+0x30>
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f60:	f000 be78 	b.w	8006c54 <_fflush_r>
 8005f64:	bd10      	pop	{r4, pc}
 8005f66:	bf00      	nop
 8005f68:	2000033c 	.word	0x2000033c
 8005f6c:	200003a4 	.word	0x200003a4
 8005f70:	2000040c 	.word	0x2000040c

08005f74 <global_stdio_init.part.0>:
 8005f74:	b510      	push	{r4, lr}
 8005f76:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa4 <global_stdio_init.part.0+0x30>)
 8005f78:	4c0b      	ldr	r4, [pc, #44]	@ (8005fa8 <global_stdio_init.part.0+0x34>)
 8005f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005fac <global_stdio_init.part.0+0x38>)
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	4620      	mov	r0, r4
 8005f80:	2200      	movs	r2, #0
 8005f82:	2104      	movs	r1, #4
 8005f84:	f7ff ff94 	bl	8005eb0 <std>
 8005f88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	2109      	movs	r1, #9
 8005f90:	f7ff ff8e 	bl	8005eb0 <std>
 8005f94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f98:	2202      	movs	r2, #2
 8005f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f9e:	2112      	movs	r1, #18
 8005fa0:	f7ff bf86 	b.w	8005eb0 <std>
 8005fa4:	20000474 	.word	0x20000474
 8005fa8:	2000033c 	.word	0x2000033c
 8005fac:	08005f1d 	.word	0x08005f1d

08005fb0 <__sfp_lock_acquire>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	@ (8005fb8 <__sfp_lock_acquire+0x8>)
 8005fb2:	f000 ba00 	b.w	80063b6 <__retarget_lock_acquire_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	2000047d 	.word	0x2000047d

08005fbc <__sfp_lock_release>:
 8005fbc:	4801      	ldr	r0, [pc, #4]	@ (8005fc4 <__sfp_lock_release+0x8>)
 8005fbe:	f000 b9fb 	b.w	80063b8 <__retarget_lock_release_recursive>
 8005fc2:	bf00      	nop
 8005fc4:	2000047d 	.word	0x2000047d

08005fc8 <__sinit>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	4604      	mov	r4, r0
 8005fcc:	f7ff fff0 	bl	8005fb0 <__sfp_lock_acquire>
 8005fd0:	6a23      	ldr	r3, [r4, #32]
 8005fd2:	b11b      	cbz	r3, 8005fdc <__sinit+0x14>
 8005fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fd8:	f7ff bff0 	b.w	8005fbc <__sfp_lock_release>
 8005fdc:	4b04      	ldr	r3, [pc, #16]	@ (8005ff0 <__sinit+0x28>)
 8005fde:	6223      	str	r3, [r4, #32]
 8005fe0:	4b04      	ldr	r3, [pc, #16]	@ (8005ff4 <__sinit+0x2c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1f5      	bne.n	8005fd4 <__sinit+0xc>
 8005fe8:	f7ff ffc4 	bl	8005f74 <global_stdio_init.part.0>
 8005fec:	e7f2      	b.n	8005fd4 <__sinit+0xc>
 8005fee:	bf00      	nop
 8005ff0:	08005f35 	.word	0x08005f35
 8005ff4:	20000474 	.word	0x20000474

08005ff8 <_fwalk_sglue>:
 8005ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ffc:	4607      	mov	r7, r0
 8005ffe:	4688      	mov	r8, r1
 8006000:	4614      	mov	r4, r2
 8006002:	2600      	movs	r6, #0
 8006004:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006008:	f1b9 0901 	subs.w	r9, r9, #1
 800600c:	d505      	bpl.n	800601a <_fwalk_sglue+0x22>
 800600e:	6824      	ldr	r4, [r4, #0]
 8006010:	2c00      	cmp	r4, #0
 8006012:	d1f7      	bne.n	8006004 <_fwalk_sglue+0xc>
 8006014:	4630      	mov	r0, r6
 8006016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601a:	89ab      	ldrh	r3, [r5, #12]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d907      	bls.n	8006030 <_fwalk_sglue+0x38>
 8006020:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006024:	3301      	adds	r3, #1
 8006026:	d003      	beq.n	8006030 <_fwalk_sglue+0x38>
 8006028:	4629      	mov	r1, r5
 800602a:	4638      	mov	r0, r7
 800602c:	47c0      	blx	r8
 800602e:	4306      	orrs	r6, r0
 8006030:	3568      	adds	r5, #104	@ 0x68
 8006032:	e7e9      	b.n	8006008 <_fwalk_sglue+0x10>

08006034 <iprintf>:
 8006034:	b40f      	push	{r0, r1, r2, r3}
 8006036:	b507      	push	{r0, r1, r2, lr}
 8006038:	4906      	ldr	r1, [pc, #24]	@ (8006054 <iprintf+0x20>)
 800603a:	ab04      	add	r3, sp, #16
 800603c:	6808      	ldr	r0, [r1, #0]
 800603e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006042:	6881      	ldr	r1, [r0, #8]
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	f000 fadb 	bl	8006600 <_vfiprintf_r>
 800604a:	b003      	add	sp, #12
 800604c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006050:	b004      	add	sp, #16
 8006052:	4770      	bx	lr
 8006054:	20000028 	.word	0x20000028

08006058 <_puts_r>:
 8006058:	6a03      	ldr	r3, [r0, #32]
 800605a:	b570      	push	{r4, r5, r6, lr}
 800605c:	6884      	ldr	r4, [r0, #8]
 800605e:	4605      	mov	r5, r0
 8006060:	460e      	mov	r6, r1
 8006062:	b90b      	cbnz	r3, 8006068 <_puts_r+0x10>
 8006064:	f7ff ffb0 	bl	8005fc8 <__sinit>
 8006068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800606a:	07db      	lsls	r3, r3, #31
 800606c:	d405      	bmi.n	800607a <_puts_r+0x22>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	0598      	lsls	r0, r3, #22
 8006072:	d402      	bmi.n	800607a <_puts_r+0x22>
 8006074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006076:	f000 f99e 	bl	80063b6 <__retarget_lock_acquire_recursive>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	0719      	lsls	r1, r3, #28
 800607e:	d502      	bpl.n	8006086 <_puts_r+0x2e>
 8006080:	6923      	ldr	r3, [r4, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d135      	bne.n	80060f2 <_puts_r+0x9a>
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f000 f8c5 	bl	8006218 <__swsetup_r>
 800608e:	b380      	cbz	r0, 80060f2 <_puts_r+0x9a>
 8006090:	f04f 35ff 	mov.w	r5, #4294967295
 8006094:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006096:	07da      	lsls	r2, r3, #31
 8006098:	d405      	bmi.n	80060a6 <_puts_r+0x4e>
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	059b      	lsls	r3, r3, #22
 800609e:	d402      	bmi.n	80060a6 <_puts_r+0x4e>
 80060a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060a2:	f000 f989 	bl	80063b8 <__retarget_lock_release_recursive>
 80060a6:	4628      	mov	r0, r5
 80060a8:	bd70      	pop	{r4, r5, r6, pc}
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	da04      	bge.n	80060b8 <_puts_r+0x60>
 80060ae:	69a2      	ldr	r2, [r4, #24]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	dc17      	bgt.n	80060e4 <_puts_r+0x8c>
 80060b4:	290a      	cmp	r1, #10
 80060b6:	d015      	beq.n	80060e4 <_puts_r+0x8c>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	6022      	str	r2, [r4, #0]
 80060be:	7019      	strb	r1, [r3, #0]
 80060c0:	68a3      	ldr	r3, [r4, #8]
 80060c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060c6:	3b01      	subs	r3, #1
 80060c8:	60a3      	str	r3, [r4, #8]
 80060ca:	2900      	cmp	r1, #0
 80060cc:	d1ed      	bne.n	80060aa <_puts_r+0x52>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	da11      	bge.n	80060f6 <_puts_r+0x9e>
 80060d2:	4622      	mov	r2, r4
 80060d4:	210a      	movs	r1, #10
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 f85f 	bl	800619a <__swbuf_r>
 80060dc:	3001      	adds	r0, #1
 80060de:	d0d7      	beq.n	8006090 <_puts_r+0x38>
 80060e0:	250a      	movs	r5, #10
 80060e2:	e7d7      	b.n	8006094 <_puts_r+0x3c>
 80060e4:	4622      	mov	r2, r4
 80060e6:	4628      	mov	r0, r5
 80060e8:	f000 f857 	bl	800619a <__swbuf_r>
 80060ec:	3001      	adds	r0, #1
 80060ee:	d1e7      	bne.n	80060c0 <_puts_r+0x68>
 80060f0:	e7ce      	b.n	8006090 <_puts_r+0x38>
 80060f2:	3e01      	subs	r6, #1
 80060f4:	e7e4      	b.n	80060c0 <_puts_r+0x68>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	6022      	str	r2, [r4, #0]
 80060fc:	220a      	movs	r2, #10
 80060fe:	701a      	strb	r2, [r3, #0]
 8006100:	e7ee      	b.n	80060e0 <_puts_r+0x88>
	...

08006104 <puts>:
 8006104:	4b02      	ldr	r3, [pc, #8]	@ (8006110 <puts+0xc>)
 8006106:	4601      	mov	r1, r0
 8006108:	6818      	ldr	r0, [r3, #0]
 800610a:	f7ff bfa5 	b.w	8006058 <_puts_r>
 800610e:	bf00      	nop
 8006110:	20000028 	.word	0x20000028

08006114 <__sread>:
 8006114:	b510      	push	{r4, lr}
 8006116:	460c      	mov	r4, r1
 8006118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800611c:	f000 f8fc 	bl	8006318 <_read_r>
 8006120:	2800      	cmp	r0, #0
 8006122:	bfab      	itete	ge
 8006124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006126:	89a3      	ldrhlt	r3, [r4, #12]
 8006128:	181b      	addge	r3, r3, r0
 800612a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800612e:	bfac      	ite	ge
 8006130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006132:	81a3      	strhlt	r3, [r4, #12]
 8006134:	bd10      	pop	{r4, pc}

08006136 <__swrite>:
 8006136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800613a:	461f      	mov	r7, r3
 800613c:	898b      	ldrh	r3, [r1, #12]
 800613e:	05db      	lsls	r3, r3, #23
 8006140:	4605      	mov	r5, r0
 8006142:	460c      	mov	r4, r1
 8006144:	4616      	mov	r6, r2
 8006146:	d505      	bpl.n	8006154 <__swrite+0x1e>
 8006148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614c:	2302      	movs	r3, #2
 800614e:	2200      	movs	r2, #0
 8006150:	f000 f8d0 	bl	80062f4 <_lseek_r>
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800615a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800615e:	81a3      	strh	r3, [r4, #12]
 8006160:	4632      	mov	r2, r6
 8006162:	463b      	mov	r3, r7
 8006164:	4628      	mov	r0, r5
 8006166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800616a:	f000 b8e7 	b.w	800633c <_write_r>

0800616e <__sseek>:
 800616e:	b510      	push	{r4, lr}
 8006170:	460c      	mov	r4, r1
 8006172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006176:	f000 f8bd 	bl	80062f4 <_lseek_r>
 800617a:	1c43      	adds	r3, r0, #1
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	bf15      	itete	ne
 8006180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800618a:	81a3      	strheq	r3, [r4, #12]
 800618c:	bf18      	it	ne
 800618e:	81a3      	strhne	r3, [r4, #12]
 8006190:	bd10      	pop	{r4, pc}

08006192 <__sclose>:
 8006192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006196:	f000 b89d 	b.w	80062d4 <_close_r>

0800619a <__swbuf_r>:
 800619a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619c:	460e      	mov	r6, r1
 800619e:	4614      	mov	r4, r2
 80061a0:	4605      	mov	r5, r0
 80061a2:	b118      	cbz	r0, 80061ac <__swbuf_r+0x12>
 80061a4:	6a03      	ldr	r3, [r0, #32]
 80061a6:	b90b      	cbnz	r3, 80061ac <__swbuf_r+0x12>
 80061a8:	f7ff ff0e 	bl	8005fc8 <__sinit>
 80061ac:	69a3      	ldr	r3, [r4, #24]
 80061ae:	60a3      	str	r3, [r4, #8]
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	071a      	lsls	r2, r3, #28
 80061b4:	d501      	bpl.n	80061ba <__swbuf_r+0x20>
 80061b6:	6923      	ldr	r3, [r4, #16]
 80061b8:	b943      	cbnz	r3, 80061cc <__swbuf_r+0x32>
 80061ba:	4621      	mov	r1, r4
 80061bc:	4628      	mov	r0, r5
 80061be:	f000 f82b 	bl	8006218 <__swsetup_r>
 80061c2:	b118      	cbz	r0, 80061cc <__swbuf_r+0x32>
 80061c4:	f04f 37ff 	mov.w	r7, #4294967295
 80061c8:	4638      	mov	r0, r7
 80061ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	6922      	ldr	r2, [r4, #16]
 80061d0:	1a98      	subs	r0, r3, r2
 80061d2:	6963      	ldr	r3, [r4, #20]
 80061d4:	b2f6      	uxtb	r6, r6
 80061d6:	4283      	cmp	r3, r0
 80061d8:	4637      	mov	r7, r6
 80061da:	dc05      	bgt.n	80061e8 <__swbuf_r+0x4e>
 80061dc:	4621      	mov	r1, r4
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fd38 	bl	8006c54 <_fflush_r>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d1ed      	bne.n	80061c4 <__swbuf_r+0x2a>
 80061e8:	68a3      	ldr	r3, [r4, #8]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	60a3      	str	r3, [r4, #8]
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	6022      	str	r2, [r4, #0]
 80061f4:	701e      	strb	r6, [r3, #0]
 80061f6:	6962      	ldr	r2, [r4, #20]
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d004      	beq.n	8006208 <__swbuf_r+0x6e>
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	07db      	lsls	r3, r3, #31
 8006202:	d5e1      	bpl.n	80061c8 <__swbuf_r+0x2e>
 8006204:	2e0a      	cmp	r6, #10
 8006206:	d1df      	bne.n	80061c8 <__swbuf_r+0x2e>
 8006208:	4621      	mov	r1, r4
 800620a:	4628      	mov	r0, r5
 800620c:	f000 fd22 	bl	8006c54 <_fflush_r>
 8006210:	2800      	cmp	r0, #0
 8006212:	d0d9      	beq.n	80061c8 <__swbuf_r+0x2e>
 8006214:	e7d6      	b.n	80061c4 <__swbuf_r+0x2a>
	...

08006218 <__swsetup_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4b29      	ldr	r3, [pc, #164]	@ (80062c0 <__swsetup_r+0xa8>)
 800621c:	4605      	mov	r5, r0
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	460c      	mov	r4, r1
 8006222:	b118      	cbz	r0, 800622c <__swsetup_r+0x14>
 8006224:	6a03      	ldr	r3, [r0, #32]
 8006226:	b90b      	cbnz	r3, 800622c <__swsetup_r+0x14>
 8006228:	f7ff fece 	bl	8005fc8 <__sinit>
 800622c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006230:	0719      	lsls	r1, r3, #28
 8006232:	d422      	bmi.n	800627a <__swsetup_r+0x62>
 8006234:	06da      	lsls	r2, r3, #27
 8006236:	d407      	bmi.n	8006248 <__swsetup_r+0x30>
 8006238:	2209      	movs	r2, #9
 800623a:	602a      	str	r2, [r5, #0]
 800623c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	f04f 30ff 	mov.w	r0, #4294967295
 8006246:	e033      	b.n	80062b0 <__swsetup_r+0x98>
 8006248:	0758      	lsls	r0, r3, #29
 800624a:	d512      	bpl.n	8006272 <__swsetup_r+0x5a>
 800624c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800624e:	b141      	cbz	r1, 8006262 <__swsetup_r+0x4a>
 8006250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006254:	4299      	cmp	r1, r3
 8006256:	d002      	beq.n	800625e <__swsetup_r+0x46>
 8006258:	4628      	mov	r0, r5
 800625a:	f000 f8af 	bl	80063bc <_free_r>
 800625e:	2300      	movs	r3, #0
 8006260:	6363      	str	r3, [r4, #52]	@ 0x34
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006268:	81a3      	strh	r3, [r4, #12]
 800626a:	2300      	movs	r3, #0
 800626c:	6063      	str	r3, [r4, #4]
 800626e:	6923      	ldr	r3, [r4, #16]
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	89a3      	ldrh	r3, [r4, #12]
 8006274:	f043 0308 	orr.w	r3, r3, #8
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	6923      	ldr	r3, [r4, #16]
 800627c:	b94b      	cbnz	r3, 8006292 <__swsetup_r+0x7a>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006288:	d003      	beq.n	8006292 <__swsetup_r+0x7a>
 800628a:	4621      	mov	r1, r4
 800628c:	4628      	mov	r0, r5
 800628e:	f000 fd2f 	bl	8006cf0 <__smakebuf_r>
 8006292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006296:	f013 0201 	ands.w	r2, r3, #1
 800629a:	d00a      	beq.n	80062b2 <__swsetup_r+0x9a>
 800629c:	2200      	movs	r2, #0
 800629e:	60a2      	str	r2, [r4, #8]
 80062a0:	6962      	ldr	r2, [r4, #20]
 80062a2:	4252      	negs	r2, r2
 80062a4:	61a2      	str	r2, [r4, #24]
 80062a6:	6922      	ldr	r2, [r4, #16]
 80062a8:	b942      	cbnz	r2, 80062bc <__swsetup_r+0xa4>
 80062aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062ae:	d1c5      	bne.n	800623c <__swsetup_r+0x24>
 80062b0:	bd38      	pop	{r3, r4, r5, pc}
 80062b2:	0799      	lsls	r1, r3, #30
 80062b4:	bf58      	it	pl
 80062b6:	6962      	ldrpl	r2, [r4, #20]
 80062b8:	60a2      	str	r2, [r4, #8]
 80062ba:	e7f4      	b.n	80062a6 <__swsetup_r+0x8e>
 80062bc:	2000      	movs	r0, #0
 80062be:	e7f7      	b.n	80062b0 <__swsetup_r+0x98>
 80062c0:	20000028 	.word	0x20000028

080062c4 <memset>:
 80062c4:	4402      	add	r2, r0
 80062c6:	4603      	mov	r3, r0
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d100      	bne.n	80062ce <memset+0xa>
 80062cc:	4770      	bx	lr
 80062ce:	f803 1b01 	strb.w	r1, [r3], #1
 80062d2:	e7f9      	b.n	80062c8 <memset+0x4>

080062d4 <_close_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d06      	ldr	r5, [pc, #24]	@ (80062f0 <_close_r+0x1c>)
 80062d8:	2300      	movs	r3, #0
 80062da:	4604      	mov	r4, r0
 80062dc:	4608      	mov	r0, r1
 80062de:	602b      	str	r3, [r5, #0]
 80062e0:	f7fb f9e8 	bl	80016b4 <_close>
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	d102      	bne.n	80062ee <_close_r+0x1a>
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	b103      	cbz	r3, 80062ee <_close_r+0x1a>
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	bd38      	pop	{r3, r4, r5, pc}
 80062f0:	20000478 	.word	0x20000478

080062f4 <_lseek_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4d07      	ldr	r5, [pc, #28]	@ (8006314 <_lseek_r+0x20>)
 80062f8:	4604      	mov	r4, r0
 80062fa:	4608      	mov	r0, r1
 80062fc:	4611      	mov	r1, r2
 80062fe:	2200      	movs	r2, #0
 8006300:	602a      	str	r2, [r5, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	f7fb f9fd 	bl	8001702 <_lseek>
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	d102      	bne.n	8006312 <_lseek_r+0x1e>
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	b103      	cbz	r3, 8006312 <_lseek_r+0x1e>
 8006310:	6023      	str	r3, [r4, #0]
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	20000478 	.word	0x20000478

08006318 <_read_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	4d07      	ldr	r5, [pc, #28]	@ (8006338 <_read_r+0x20>)
 800631c:	4604      	mov	r4, r0
 800631e:	4608      	mov	r0, r1
 8006320:	4611      	mov	r1, r2
 8006322:	2200      	movs	r2, #0
 8006324:	602a      	str	r2, [r5, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	f7fb f9a7 	bl	800167a <_read>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_read_r+0x1e>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b103      	cbz	r3, 8006336 <_read_r+0x1e>
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	20000478 	.word	0x20000478

0800633c <_write_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4d07      	ldr	r5, [pc, #28]	@ (800635c <_write_r+0x20>)
 8006340:	4604      	mov	r4, r0
 8006342:	4608      	mov	r0, r1
 8006344:	4611      	mov	r1, r2
 8006346:	2200      	movs	r2, #0
 8006348:	602a      	str	r2, [r5, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	f7fa f908 	bl	8000560 <_write>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_write_r+0x1e>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_write_r+0x1e>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	20000478 	.word	0x20000478

08006360 <__errno>:
 8006360:	4b01      	ldr	r3, [pc, #4]	@ (8006368 <__errno+0x8>)
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000028 	.word	0x20000028

0800636c <__libc_init_array>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	4d0d      	ldr	r5, [pc, #52]	@ (80063a4 <__libc_init_array+0x38>)
 8006370:	4c0d      	ldr	r4, [pc, #52]	@ (80063a8 <__libc_init_array+0x3c>)
 8006372:	1b64      	subs	r4, r4, r5
 8006374:	10a4      	asrs	r4, r4, #2
 8006376:	2600      	movs	r6, #0
 8006378:	42a6      	cmp	r6, r4
 800637a:	d109      	bne.n	8006390 <__libc_init_array+0x24>
 800637c:	4d0b      	ldr	r5, [pc, #44]	@ (80063ac <__libc_init_array+0x40>)
 800637e:	4c0c      	ldr	r4, [pc, #48]	@ (80063b0 <__libc_init_array+0x44>)
 8006380:	f000 fd24 	bl	8006dcc <_init>
 8006384:	1b64      	subs	r4, r4, r5
 8006386:	10a4      	asrs	r4, r4, #2
 8006388:	2600      	movs	r6, #0
 800638a:	42a6      	cmp	r6, r4
 800638c:	d105      	bne.n	800639a <__libc_init_array+0x2e>
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	f855 3b04 	ldr.w	r3, [r5], #4
 8006394:	4798      	blx	r3
 8006396:	3601      	adds	r6, #1
 8006398:	e7ee      	b.n	8006378 <__libc_init_array+0xc>
 800639a:	f855 3b04 	ldr.w	r3, [r5], #4
 800639e:	4798      	blx	r3
 80063a0:	3601      	adds	r6, #1
 80063a2:	e7f2      	b.n	800638a <__libc_init_array+0x1e>
 80063a4:	08006f78 	.word	0x08006f78
 80063a8:	08006f78 	.word	0x08006f78
 80063ac:	08006f78 	.word	0x08006f78
 80063b0:	08006f7c 	.word	0x08006f7c

080063b4 <__retarget_lock_init_recursive>:
 80063b4:	4770      	bx	lr

080063b6 <__retarget_lock_acquire_recursive>:
 80063b6:	4770      	bx	lr

080063b8 <__retarget_lock_release_recursive>:
 80063b8:	4770      	bx	lr
	...

080063bc <_free_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	4605      	mov	r5, r0
 80063c0:	2900      	cmp	r1, #0
 80063c2:	d041      	beq.n	8006448 <_free_r+0x8c>
 80063c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063c8:	1f0c      	subs	r4, r1, #4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bfb8      	it	lt
 80063ce:	18e4      	addlt	r4, r4, r3
 80063d0:	f000 f8e0 	bl	8006594 <__malloc_lock>
 80063d4:	4a1d      	ldr	r2, [pc, #116]	@ (800644c <_free_r+0x90>)
 80063d6:	6813      	ldr	r3, [r2, #0]
 80063d8:	b933      	cbnz	r3, 80063e8 <_free_r+0x2c>
 80063da:	6063      	str	r3, [r4, #4]
 80063dc:	6014      	str	r4, [r2, #0]
 80063de:	4628      	mov	r0, r5
 80063e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e4:	f000 b8dc 	b.w	80065a0 <__malloc_unlock>
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	d908      	bls.n	80063fe <_free_r+0x42>
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	1821      	adds	r1, r4, r0
 80063f0:	428b      	cmp	r3, r1
 80063f2:	bf01      	itttt	eq
 80063f4:	6819      	ldreq	r1, [r3, #0]
 80063f6:	685b      	ldreq	r3, [r3, #4]
 80063f8:	1809      	addeq	r1, r1, r0
 80063fa:	6021      	streq	r1, [r4, #0]
 80063fc:	e7ed      	b.n	80063da <_free_r+0x1e>
 80063fe:	461a      	mov	r2, r3
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	b10b      	cbz	r3, 8006408 <_free_r+0x4c>
 8006404:	42a3      	cmp	r3, r4
 8006406:	d9fa      	bls.n	80063fe <_free_r+0x42>
 8006408:	6811      	ldr	r1, [r2, #0]
 800640a:	1850      	adds	r0, r2, r1
 800640c:	42a0      	cmp	r0, r4
 800640e:	d10b      	bne.n	8006428 <_free_r+0x6c>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	4401      	add	r1, r0
 8006414:	1850      	adds	r0, r2, r1
 8006416:	4283      	cmp	r3, r0
 8006418:	6011      	str	r1, [r2, #0]
 800641a:	d1e0      	bne.n	80063de <_free_r+0x22>
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	6053      	str	r3, [r2, #4]
 8006422:	4408      	add	r0, r1
 8006424:	6010      	str	r0, [r2, #0]
 8006426:	e7da      	b.n	80063de <_free_r+0x22>
 8006428:	d902      	bls.n	8006430 <_free_r+0x74>
 800642a:	230c      	movs	r3, #12
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	e7d6      	b.n	80063de <_free_r+0x22>
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	1821      	adds	r1, r4, r0
 8006434:	428b      	cmp	r3, r1
 8006436:	bf04      	itt	eq
 8006438:	6819      	ldreq	r1, [r3, #0]
 800643a:	685b      	ldreq	r3, [r3, #4]
 800643c:	6063      	str	r3, [r4, #4]
 800643e:	bf04      	itt	eq
 8006440:	1809      	addeq	r1, r1, r0
 8006442:	6021      	streq	r1, [r4, #0]
 8006444:	6054      	str	r4, [r2, #4]
 8006446:	e7ca      	b.n	80063de <_free_r+0x22>
 8006448:	bd38      	pop	{r3, r4, r5, pc}
 800644a:	bf00      	nop
 800644c:	20000484 	.word	0x20000484

08006450 <sbrk_aligned>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	4e0f      	ldr	r6, [pc, #60]	@ (8006490 <sbrk_aligned+0x40>)
 8006454:	460c      	mov	r4, r1
 8006456:	6831      	ldr	r1, [r6, #0]
 8006458:	4605      	mov	r5, r0
 800645a:	b911      	cbnz	r1, 8006462 <sbrk_aligned+0x12>
 800645c:	f000 fca6 	bl	8006dac <_sbrk_r>
 8006460:	6030      	str	r0, [r6, #0]
 8006462:	4621      	mov	r1, r4
 8006464:	4628      	mov	r0, r5
 8006466:	f000 fca1 	bl	8006dac <_sbrk_r>
 800646a:	1c43      	adds	r3, r0, #1
 800646c:	d103      	bne.n	8006476 <sbrk_aligned+0x26>
 800646e:	f04f 34ff 	mov.w	r4, #4294967295
 8006472:	4620      	mov	r0, r4
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	1cc4      	adds	r4, r0, #3
 8006478:	f024 0403 	bic.w	r4, r4, #3
 800647c:	42a0      	cmp	r0, r4
 800647e:	d0f8      	beq.n	8006472 <sbrk_aligned+0x22>
 8006480:	1a21      	subs	r1, r4, r0
 8006482:	4628      	mov	r0, r5
 8006484:	f000 fc92 	bl	8006dac <_sbrk_r>
 8006488:	3001      	adds	r0, #1
 800648a:	d1f2      	bne.n	8006472 <sbrk_aligned+0x22>
 800648c:	e7ef      	b.n	800646e <sbrk_aligned+0x1e>
 800648e:	bf00      	nop
 8006490:	20000480 	.word	0x20000480

08006494 <_malloc_r>:
 8006494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006498:	1ccd      	adds	r5, r1, #3
 800649a:	f025 0503 	bic.w	r5, r5, #3
 800649e:	3508      	adds	r5, #8
 80064a0:	2d0c      	cmp	r5, #12
 80064a2:	bf38      	it	cc
 80064a4:	250c      	movcc	r5, #12
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	4606      	mov	r6, r0
 80064aa:	db01      	blt.n	80064b0 <_malloc_r+0x1c>
 80064ac:	42a9      	cmp	r1, r5
 80064ae:	d904      	bls.n	80064ba <_malloc_r+0x26>
 80064b0:	230c      	movs	r3, #12
 80064b2:	6033      	str	r3, [r6, #0]
 80064b4:	2000      	movs	r0, #0
 80064b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006590 <_malloc_r+0xfc>
 80064be:	f000 f869 	bl	8006594 <__malloc_lock>
 80064c2:	f8d8 3000 	ldr.w	r3, [r8]
 80064c6:	461c      	mov	r4, r3
 80064c8:	bb44      	cbnz	r4, 800651c <_malloc_r+0x88>
 80064ca:	4629      	mov	r1, r5
 80064cc:	4630      	mov	r0, r6
 80064ce:	f7ff ffbf 	bl	8006450 <sbrk_aligned>
 80064d2:	1c43      	adds	r3, r0, #1
 80064d4:	4604      	mov	r4, r0
 80064d6:	d158      	bne.n	800658a <_malloc_r+0xf6>
 80064d8:	f8d8 4000 	ldr.w	r4, [r8]
 80064dc:	4627      	mov	r7, r4
 80064de:	2f00      	cmp	r7, #0
 80064e0:	d143      	bne.n	800656a <_malloc_r+0xd6>
 80064e2:	2c00      	cmp	r4, #0
 80064e4:	d04b      	beq.n	800657e <_malloc_r+0xea>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	4639      	mov	r1, r7
 80064ea:	4630      	mov	r0, r6
 80064ec:	eb04 0903 	add.w	r9, r4, r3
 80064f0:	f000 fc5c 	bl	8006dac <_sbrk_r>
 80064f4:	4581      	cmp	r9, r0
 80064f6:	d142      	bne.n	800657e <_malloc_r+0xea>
 80064f8:	6821      	ldr	r1, [r4, #0]
 80064fa:	1a6d      	subs	r5, r5, r1
 80064fc:	4629      	mov	r1, r5
 80064fe:	4630      	mov	r0, r6
 8006500:	f7ff ffa6 	bl	8006450 <sbrk_aligned>
 8006504:	3001      	adds	r0, #1
 8006506:	d03a      	beq.n	800657e <_malloc_r+0xea>
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	442b      	add	r3, r5
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	f8d8 3000 	ldr.w	r3, [r8]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	bb62      	cbnz	r2, 8006570 <_malloc_r+0xdc>
 8006516:	f8c8 7000 	str.w	r7, [r8]
 800651a:	e00f      	b.n	800653c <_malloc_r+0xa8>
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	1b52      	subs	r2, r2, r5
 8006520:	d420      	bmi.n	8006564 <_malloc_r+0xd0>
 8006522:	2a0b      	cmp	r2, #11
 8006524:	d917      	bls.n	8006556 <_malloc_r+0xc2>
 8006526:	1961      	adds	r1, r4, r5
 8006528:	42a3      	cmp	r3, r4
 800652a:	6025      	str	r5, [r4, #0]
 800652c:	bf18      	it	ne
 800652e:	6059      	strne	r1, [r3, #4]
 8006530:	6863      	ldr	r3, [r4, #4]
 8006532:	bf08      	it	eq
 8006534:	f8c8 1000 	streq.w	r1, [r8]
 8006538:	5162      	str	r2, [r4, r5]
 800653a:	604b      	str	r3, [r1, #4]
 800653c:	4630      	mov	r0, r6
 800653e:	f000 f82f 	bl	80065a0 <__malloc_unlock>
 8006542:	f104 000b 	add.w	r0, r4, #11
 8006546:	1d23      	adds	r3, r4, #4
 8006548:	f020 0007 	bic.w	r0, r0, #7
 800654c:	1ac2      	subs	r2, r0, r3
 800654e:	bf1c      	itt	ne
 8006550:	1a1b      	subne	r3, r3, r0
 8006552:	50a3      	strne	r3, [r4, r2]
 8006554:	e7af      	b.n	80064b6 <_malloc_r+0x22>
 8006556:	6862      	ldr	r2, [r4, #4]
 8006558:	42a3      	cmp	r3, r4
 800655a:	bf0c      	ite	eq
 800655c:	f8c8 2000 	streq.w	r2, [r8]
 8006560:	605a      	strne	r2, [r3, #4]
 8006562:	e7eb      	b.n	800653c <_malloc_r+0xa8>
 8006564:	4623      	mov	r3, r4
 8006566:	6864      	ldr	r4, [r4, #4]
 8006568:	e7ae      	b.n	80064c8 <_malloc_r+0x34>
 800656a:	463c      	mov	r4, r7
 800656c:	687f      	ldr	r7, [r7, #4]
 800656e:	e7b6      	b.n	80064de <_malloc_r+0x4a>
 8006570:	461a      	mov	r2, r3
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	42a3      	cmp	r3, r4
 8006576:	d1fb      	bne.n	8006570 <_malloc_r+0xdc>
 8006578:	2300      	movs	r3, #0
 800657a:	6053      	str	r3, [r2, #4]
 800657c:	e7de      	b.n	800653c <_malloc_r+0xa8>
 800657e:	230c      	movs	r3, #12
 8006580:	6033      	str	r3, [r6, #0]
 8006582:	4630      	mov	r0, r6
 8006584:	f000 f80c 	bl	80065a0 <__malloc_unlock>
 8006588:	e794      	b.n	80064b4 <_malloc_r+0x20>
 800658a:	6005      	str	r5, [r0, #0]
 800658c:	e7d6      	b.n	800653c <_malloc_r+0xa8>
 800658e:	bf00      	nop
 8006590:	20000484 	.word	0x20000484

08006594 <__malloc_lock>:
 8006594:	4801      	ldr	r0, [pc, #4]	@ (800659c <__malloc_lock+0x8>)
 8006596:	f7ff bf0e 	b.w	80063b6 <__retarget_lock_acquire_recursive>
 800659a:	bf00      	nop
 800659c:	2000047c 	.word	0x2000047c

080065a0 <__malloc_unlock>:
 80065a0:	4801      	ldr	r0, [pc, #4]	@ (80065a8 <__malloc_unlock+0x8>)
 80065a2:	f7ff bf09 	b.w	80063b8 <__retarget_lock_release_recursive>
 80065a6:	bf00      	nop
 80065a8:	2000047c 	.word	0x2000047c

080065ac <__sfputc_r>:
 80065ac:	6893      	ldr	r3, [r2, #8]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	b410      	push	{r4}
 80065b4:	6093      	str	r3, [r2, #8]
 80065b6:	da08      	bge.n	80065ca <__sfputc_r+0x1e>
 80065b8:	6994      	ldr	r4, [r2, #24]
 80065ba:	42a3      	cmp	r3, r4
 80065bc:	db01      	blt.n	80065c2 <__sfputc_r+0x16>
 80065be:	290a      	cmp	r1, #10
 80065c0:	d103      	bne.n	80065ca <__sfputc_r+0x1e>
 80065c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065c6:	f7ff bde8 	b.w	800619a <__swbuf_r>
 80065ca:	6813      	ldr	r3, [r2, #0]
 80065cc:	1c58      	adds	r0, r3, #1
 80065ce:	6010      	str	r0, [r2, #0]
 80065d0:	7019      	strb	r1, [r3, #0]
 80065d2:	4608      	mov	r0, r1
 80065d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065d8:	4770      	bx	lr

080065da <__sfputs_r>:
 80065da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065dc:	4606      	mov	r6, r0
 80065de:	460f      	mov	r7, r1
 80065e0:	4614      	mov	r4, r2
 80065e2:	18d5      	adds	r5, r2, r3
 80065e4:	42ac      	cmp	r4, r5
 80065e6:	d101      	bne.n	80065ec <__sfputs_r+0x12>
 80065e8:	2000      	movs	r0, #0
 80065ea:	e007      	b.n	80065fc <__sfputs_r+0x22>
 80065ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f0:	463a      	mov	r2, r7
 80065f2:	4630      	mov	r0, r6
 80065f4:	f7ff ffda 	bl	80065ac <__sfputc_r>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	d1f3      	bne.n	80065e4 <__sfputs_r+0xa>
 80065fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006600 <_vfiprintf_r>:
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	460d      	mov	r5, r1
 8006606:	b09d      	sub	sp, #116	@ 0x74
 8006608:	4614      	mov	r4, r2
 800660a:	4698      	mov	r8, r3
 800660c:	4606      	mov	r6, r0
 800660e:	b118      	cbz	r0, 8006618 <_vfiprintf_r+0x18>
 8006610:	6a03      	ldr	r3, [r0, #32]
 8006612:	b90b      	cbnz	r3, 8006618 <_vfiprintf_r+0x18>
 8006614:	f7ff fcd8 	bl	8005fc8 <__sinit>
 8006618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800661a:	07d9      	lsls	r1, r3, #31
 800661c:	d405      	bmi.n	800662a <_vfiprintf_r+0x2a>
 800661e:	89ab      	ldrh	r3, [r5, #12]
 8006620:	059a      	lsls	r2, r3, #22
 8006622:	d402      	bmi.n	800662a <_vfiprintf_r+0x2a>
 8006624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006626:	f7ff fec6 	bl	80063b6 <__retarget_lock_acquire_recursive>
 800662a:	89ab      	ldrh	r3, [r5, #12]
 800662c:	071b      	lsls	r3, r3, #28
 800662e:	d501      	bpl.n	8006634 <_vfiprintf_r+0x34>
 8006630:	692b      	ldr	r3, [r5, #16]
 8006632:	b99b      	cbnz	r3, 800665c <_vfiprintf_r+0x5c>
 8006634:	4629      	mov	r1, r5
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff fdee 	bl	8006218 <__swsetup_r>
 800663c:	b170      	cbz	r0, 800665c <_vfiprintf_r+0x5c>
 800663e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006640:	07dc      	lsls	r4, r3, #31
 8006642:	d504      	bpl.n	800664e <_vfiprintf_r+0x4e>
 8006644:	f04f 30ff 	mov.w	r0, #4294967295
 8006648:	b01d      	add	sp, #116	@ 0x74
 800664a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664e:	89ab      	ldrh	r3, [r5, #12]
 8006650:	0598      	lsls	r0, r3, #22
 8006652:	d4f7      	bmi.n	8006644 <_vfiprintf_r+0x44>
 8006654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006656:	f7ff feaf 	bl	80063b8 <__retarget_lock_release_recursive>
 800665a:	e7f3      	b.n	8006644 <_vfiprintf_r+0x44>
 800665c:	2300      	movs	r3, #0
 800665e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006660:	2320      	movs	r3, #32
 8006662:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006666:	f8cd 800c 	str.w	r8, [sp, #12]
 800666a:	2330      	movs	r3, #48	@ 0x30
 800666c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800681c <_vfiprintf_r+0x21c>
 8006670:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006674:	f04f 0901 	mov.w	r9, #1
 8006678:	4623      	mov	r3, r4
 800667a:	469a      	mov	sl, r3
 800667c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006680:	b10a      	cbz	r2, 8006686 <_vfiprintf_r+0x86>
 8006682:	2a25      	cmp	r2, #37	@ 0x25
 8006684:	d1f9      	bne.n	800667a <_vfiprintf_r+0x7a>
 8006686:	ebba 0b04 	subs.w	fp, sl, r4
 800668a:	d00b      	beq.n	80066a4 <_vfiprintf_r+0xa4>
 800668c:	465b      	mov	r3, fp
 800668e:	4622      	mov	r2, r4
 8006690:	4629      	mov	r1, r5
 8006692:	4630      	mov	r0, r6
 8006694:	f7ff ffa1 	bl	80065da <__sfputs_r>
 8006698:	3001      	adds	r0, #1
 800669a:	f000 80a7 	beq.w	80067ec <_vfiprintf_r+0x1ec>
 800669e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066a0:	445a      	add	r2, fp
 80066a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80066a4:	f89a 3000 	ldrb.w	r3, [sl]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 809f 	beq.w	80067ec <_vfiprintf_r+0x1ec>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f04f 32ff 	mov.w	r2, #4294967295
 80066b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066b8:	f10a 0a01 	add.w	sl, sl, #1
 80066bc:	9304      	str	r3, [sp, #16]
 80066be:	9307      	str	r3, [sp, #28]
 80066c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80066c6:	4654      	mov	r4, sl
 80066c8:	2205      	movs	r2, #5
 80066ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ce:	4853      	ldr	r0, [pc, #332]	@ (800681c <_vfiprintf_r+0x21c>)
 80066d0:	f7f9 fd7e 	bl	80001d0 <memchr>
 80066d4:	9a04      	ldr	r2, [sp, #16]
 80066d6:	b9d8      	cbnz	r0, 8006710 <_vfiprintf_r+0x110>
 80066d8:	06d1      	lsls	r1, r2, #27
 80066da:	bf44      	itt	mi
 80066dc:	2320      	movmi	r3, #32
 80066de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066e2:	0713      	lsls	r3, r2, #28
 80066e4:	bf44      	itt	mi
 80066e6:	232b      	movmi	r3, #43	@ 0x2b
 80066e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066ec:	f89a 3000 	ldrb.w	r3, [sl]
 80066f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066f2:	d015      	beq.n	8006720 <_vfiprintf_r+0x120>
 80066f4:	9a07      	ldr	r2, [sp, #28]
 80066f6:	4654      	mov	r4, sl
 80066f8:	2000      	movs	r0, #0
 80066fa:	f04f 0c0a 	mov.w	ip, #10
 80066fe:	4621      	mov	r1, r4
 8006700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006704:	3b30      	subs	r3, #48	@ 0x30
 8006706:	2b09      	cmp	r3, #9
 8006708:	d94b      	bls.n	80067a2 <_vfiprintf_r+0x1a2>
 800670a:	b1b0      	cbz	r0, 800673a <_vfiprintf_r+0x13a>
 800670c:	9207      	str	r2, [sp, #28]
 800670e:	e014      	b.n	800673a <_vfiprintf_r+0x13a>
 8006710:	eba0 0308 	sub.w	r3, r0, r8
 8006714:	fa09 f303 	lsl.w	r3, r9, r3
 8006718:	4313      	orrs	r3, r2
 800671a:	9304      	str	r3, [sp, #16]
 800671c:	46a2      	mov	sl, r4
 800671e:	e7d2      	b.n	80066c6 <_vfiprintf_r+0xc6>
 8006720:	9b03      	ldr	r3, [sp, #12]
 8006722:	1d19      	adds	r1, r3, #4
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	9103      	str	r1, [sp, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	bfbb      	ittet	lt
 800672c:	425b      	neglt	r3, r3
 800672e:	f042 0202 	orrlt.w	r2, r2, #2
 8006732:	9307      	strge	r3, [sp, #28]
 8006734:	9307      	strlt	r3, [sp, #28]
 8006736:	bfb8      	it	lt
 8006738:	9204      	strlt	r2, [sp, #16]
 800673a:	7823      	ldrb	r3, [r4, #0]
 800673c:	2b2e      	cmp	r3, #46	@ 0x2e
 800673e:	d10a      	bne.n	8006756 <_vfiprintf_r+0x156>
 8006740:	7863      	ldrb	r3, [r4, #1]
 8006742:	2b2a      	cmp	r3, #42	@ 0x2a
 8006744:	d132      	bne.n	80067ac <_vfiprintf_r+0x1ac>
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	1d1a      	adds	r2, r3, #4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	9203      	str	r2, [sp, #12]
 800674e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006752:	3402      	adds	r4, #2
 8006754:	9305      	str	r3, [sp, #20]
 8006756:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800682c <_vfiprintf_r+0x22c>
 800675a:	7821      	ldrb	r1, [r4, #0]
 800675c:	2203      	movs	r2, #3
 800675e:	4650      	mov	r0, sl
 8006760:	f7f9 fd36 	bl	80001d0 <memchr>
 8006764:	b138      	cbz	r0, 8006776 <_vfiprintf_r+0x176>
 8006766:	9b04      	ldr	r3, [sp, #16]
 8006768:	eba0 000a 	sub.w	r0, r0, sl
 800676c:	2240      	movs	r2, #64	@ 0x40
 800676e:	4082      	lsls	r2, r0
 8006770:	4313      	orrs	r3, r2
 8006772:	3401      	adds	r4, #1
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800677a:	4829      	ldr	r0, [pc, #164]	@ (8006820 <_vfiprintf_r+0x220>)
 800677c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006780:	2206      	movs	r2, #6
 8006782:	f7f9 fd25 	bl	80001d0 <memchr>
 8006786:	2800      	cmp	r0, #0
 8006788:	d03f      	beq.n	800680a <_vfiprintf_r+0x20a>
 800678a:	4b26      	ldr	r3, [pc, #152]	@ (8006824 <_vfiprintf_r+0x224>)
 800678c:	bb1b      	cbnz	r3, 80067d6 <_vfiprintf_r+0x1d6>
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	3307      	adds	r3, #7
 8006792:	f023 0307 	bic.w	r3, r3, #7
 8006796:	3308      	adds	r3, #8
 8006798:	9303      	str	r3, [sp, #12]
 800679a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800679c:	443b      	add	r3, r7
 800679e:	9309      	str	r3, [sp, #36]	@ 0x24
 80067a0:	e76a      	b.n	8006678 <_vfiprintf_r+0x78>
 80067a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80067a6:	460c      	mov	r4, r1
 80067a8:	2001      	movs	r0, #1
 80067aa:	e7a8      	b.n	80066fe <_vfiprintf_r+0xfe>
 80067ac:	2300      	movs	r3, #0
 80067ae:	3401      	adds	r4, #1
 80067b0:	9305      	str	r3, [sp, #20]
 80067b2:	4619      	mov	r1, r3
 80067b4:	f04f 0c0a 	mov.w	ip, #10
 80067b8:	4620      	mov	r0, r4
 80067ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067be:	3a30      	subs	r2, #48	@ 0x30
 80067c0:	2a09      	cmp	r2, #9
 80067c2:	d903      	bls.n	80067cc <_vfiprintf_r+0x1cc>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0c6      	beq.n	8006756 <_vfiprintf_r+0x156>
 80067c8:	9105      	str	r1, [sp, #20]
 80067ca:	e7c4      	b.n	8006756 <_vfiprintf_r+0x156>
 80067cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80067d0:	4604      	mov	r4, r0
 80067d2:	2301      	movs	r3, #1
 80067d4:	e7f0      	b.n	80067b8 <_vfiprintf_r+0x1b8>
 80067d6:	ab03      	add	r3, sp, #12
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	462a      	mov	r2, r5
 80067dc:	4b12      	ldr	r3, [pc, #72]	@ (8006828 <_vfiprintf_r+0x228>)
 80067de:	a904      	add	r1, sp, #16
 80067e0:	4630      	mov	r0, r6
 80067e2:	f3af 8000 	nop.w
 80067e6:	4607      	mov	r7, r0
 80067e8:	1c78      	adds	r0, r7, #1
 80067ea:	d1d6      	bne.n	800679a <_vfiprintf_r+0x19a>
 80067ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067ee:	07d9      	lsls	r1, r3, #31
 80067f0:	d405      	bmi.n	80067fe <_vfiprintf_r+0x1fe>
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	059a      	lsls	r2, r3, #22
 80067f6:	d402      	bmi.n	80067fe <_vfiprintf_r+0x1fe>
 80067f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067fa:	f7ff fddd 	bl	80063b8 <__retarget_lock_release_recursive>
 80067fe:	89ab      	ldrh	r3, [r5, #12]
 8006800:	065b      	lsls	r3, r3, #25
 8006802:	f53f af1f 	bmi.w	8006644 <_vfiprintf_r+0x44>
 8006806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006808:	e71e      	b.n	8006648 <_vfiprintf_r+0x48>
 800680a:	ab03      	add	r3, sp, #12
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	462a      	mov	r2, r5
 8006810:	4b05      	ldr	r3, [pc, #20]	@ (8006828 <_vfiprintf_r+0x228>)
 8006812:	a904      	add	r1, sp, #16
 8006814:	4630      	mov	r0, r6
 8006816:	f000 f879 	bl	800690c <_printf_i>
 800681a:	e7e4      	b.n	80067e6 <_vfiprintf_r+0x1e6>
 800681c:	08006f3c 	.word	0x08006f3c
 8006820:	08006f46 	.word	0x08006f46
 8006824:	00000000 	.word	0x00000000
 8006828:	080065db 	.word	0x080065db
 800682c:	08006f42 	.word	0x08006f42

08006830 <_printf_common>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	4616      	mov	r6, r2
 8006836:	4698      	mov	r8, r3
 8006838:	688a      	ldr	r2, [r1, #8]
 800683a:	690b      	ldr	r3, [r1, #16]
 800683c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006840:	4293      	cmp	r3, r2
 8006842:	bfb8      	it	lt
 8006844:	4613      	movlt	r3, r2
 8006846:	6033      	str	r3, [r6, #0]
 8006848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800684c:	4607      	mov	r7, r0
 800684e:	460c      	mov	r4, r1
 8006850:	b10a      	cbz	r2, 8006856 <_printf_common+0x26>
 8006852:	3301      	adds	r3, #1
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	0699      	lsls	r1, r3, #26
 800685a:	bf42      	ittt	mi
 800685c:	6833      	ldrmi	r3, [r6, #0]
 800685e:	3302      	addmi	r3, #2
 8006860:	6033      	strmi	r3, [r6, #0]
 8006862:	6825      	ldr	r5, [r4, #0]
 8006864:	f015 0506 	ands.w	r5, r5, #6
 8006868:	d106      	bne.n	8006878 <_printf_common+0x48>
 800686a:	f104 0a19 	add.w	sl, r4, #25
 800686e:	68e3      	ldr	r3, [r4, #12]
 8006870:	6832      	ldr	r2, [r6, #0]
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	42ab      	cmp	r3, r5
 8006876:	dc26      	bgt.n	80068c6 <_printf_common+0x96>
 8006878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800687c:	6822      	ldr	r2, [r4, #0]
 800687e:	3b00      	subs	r3, #0
 8006880:	bf18      	it	ne
 8006882:	2301      	movne	r3, #1
 8006884:	0692      	lsls	r2, r2, #26
 8006886:	d42b      	bmi.n	80068e0 <_printf_common+0xb0>
 8006888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800688c:	4641      	mov	r1, r8
 800688e:	4638      	mov	r0, r7
 8006890:	47c8      	blx	r9
 8006892:	3001      	adds	r0, #1
 8006894:	d01e      	beq.n	80068d4 <_printf_common+0xa4>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	6922      	ldr	r2, [r4, #16]
 800689a:	f003 0306 	and.w	r3, r3, #6
 800689e:	2b04      	cmp	r3, #4
 80068a0:	bf02      	ittt	eq
 80068a2:	68e5      	ldreq	r5, [r4, #12]
 80068a4:	6833      	ldreq	r3, [r6, #0]
 80068a6:	1aed      	subeq	r5, r5, r3
 80068a8:	68a3      	ldr	r3, [r4, #8]
 80068aa:	bf0c      	ite	eq
 80068ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b0:	2500      	movne	r5, #0
 80068b2:	4293      	cmp	r3, r2
 80068b4:	bfc4      	itt	gt
 80068b6:	1a9b      	subgt	r3, r3, r2
 80068b8:	18ed      	addgt	r5, r5, r3
 80068ba:	2600      	movs	r6, #0
 80068bc:	341a      	adds	r4, #26
 80068be:	42b5      	cmp	r5, r6
 80068c0:	d11a      	bne.n	80068f8 <_printf_common+0xc8>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e008      	b.n	80068d8 <_printf_common+0xa8>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4652      	mov	r2, sl
 80068ca:	4641      	mov	r1, r8
 80068cc:	4638      	mov	r0, r7
 80068ce:	47c8      	blx	r9
 80068d0:	3001      	adds	r0, #1
 80068d2:	d103      	bne.n	80068dc <_printf_common+0xac>
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068dc:	3501      	adds	r5, #1
 80068de:	e7c6      	b.n	800686e <_printf_common+0x3e>
 80068e0:	18e1      	adds	r1, r4, r3
 80068e2:	1c5a      	adds	r2, r3, #1
 80068e4:	2030      	movs	r0, #48	@ 0x30
 80068e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068ea:	4422      	add	r2, r4
 80068ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068f4:	3302      	adds	r3, #2
 80068f6:	e7c7      	b.n	8006888 <_printf_common+0x58>
 80068f8:	2301      	movs	r3, #1
 80068fa:	4622      	mov	r2, r4
 80068fc:	4641      	mov	r1, r8
 80068fe:	4638      	mov	r0, r7
 8006900:	47c8      	blx	r9
 8006902:	3001      	adds	r0, #1
 8006904:	d0e6      	beq.n	80068d4 <_printf_common+0xa4>
 8006906:	3601      	adds	r6, #1
 8006908:	e7d9      	b.n	80068be <_printf_common+0x8e>
	...

0800690c <_printf_i>:
 800690c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	7e0f      	ldrb	r7, [r1, #24]
 8006912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006914:	2f78      	cmp	r7, #120	@ 0x78
 8006916:	4691      	mov	r9, r2
 8006918:	4680      	mov	r8, r0
 800691a:	460c      	mov	r4, r1
 800691c:	469a      	mov	sl, r3
 800691e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006922:	d807      	bhi.n	8006934 <_printf_i+0x28>
 8006924:	2f62      	cmp	r7, #98	@ 0x62
 8006926:	d80a      	bhi.n	800693e <_printf_i+0x32>
 8006928:	2f00      	cmp	r7, #0
 800692a:	f000 80d2 	beq.w	8006ad2 <_printf_i+0x1c6>
 800692e:	2f58      	cmp	r7, #88	@ 0x58
 8006930:	f000 80b9 	beq.w	8006aa6 <_printf_i+0x19a>
 8006934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800693c:	e03a      	b.n	80069b4 <_printf_i+0xa8>
 800693e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006942:	2b15      	cmp	r3, #21
 8006944:	d8f6      	bhi.n	8006934 <_printf_i+0x28>
 8006946:	a101      	add	r1, pc, #4	@ (adr r1, 800694c <_printf_i+0x40>)
 8006948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800694c:	080069a5 	.word	0x080069a5
 8006950:	080069b9 	.word	0x080069b9
 8006954:	08006935 	.word	0x08006935
 8006958:	08006935 	.word	0x08006935
 800695c:	08006935 	.word	0x08006935
 8006960:	08006935 	.word	0x08006935
 8006964:	080069b9 	.word	0x080069b9
 8006968:	08006935 	.word	0x08006935
 800696c:	08006935 	.word	0x08006935
 8006970:	08006935 	.word	0x08006935
 8006974:	08006935 	.word	0x08006935
 8006978:	08006ab9 	.word	0x08006ab9
 800697c:	080069e3 	.word	0x080069e3
 8006980:	08006a73 	.word	0x08006a73
 8006984:	08006935 	.word	0x08006935
 8006988:	08006935 	.word	0x08006935
 800698c:	08006adb 	.word	0x08006adb
 8006990:	08006935 	.word	0x08006935
 8006994:	080069e3 	.word	0x080069e3
 8006998:	08006935 	.word	0x08006935
 800699c:	08006935 	.word	0x08006935
 80069a0:	08006a7b 	.word	0x08006a7b
 80069a4:	6833      	ldr	r3, [r6, #0]
 80069a6:	1d1a      	adds	r2, r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6032      	str	r2, [r6, #0]
 80069ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069b4:	2301      	movs	r3, #1
 80069b6:	e09d      	b.n	8006af4 <_printf_i+0x1e8>
 80069b8:	6833      	ldr	r3, [r6, #0]
 80069ba:	6820      	ldr	r0, [r4, #0]
 80069bc:	1d19      	adds	r1, r3, #4
 80069be:	6031      	str	r1, [r6, #0]
 80069c0:	0606      	lsls	r6, r0, #24
 80069c2:	d501      	bpl.n	80069c8 <_printf_i+0xbc>
 80069c4:	681d      	ldr	r5, [r3, #0]
 80069c6:	e003      	b.n	80069d0 <_printf_i+0xc4>
 80069c8:	0645      	lsls	r5, r0, #25
 80069ca:	d5fb      	bpl.n	80069c4 <_printf_i+0xb8>
 80069cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	da03      	bge.n	80069dc <_printf_i+0xd0>
 80069d4:	232d      	movs	r3, #45	@ 0x2d
 80069d6:	426d      	negs	r5, r5
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069dc:	4859      	ldr	r0, [pc, #356]	@ (8006b44 <_printf_i+0x238>)
 80069de:	230a      	movs	r3, #10
 80069e0:	e011      	b.n	8006a06 <_printf_i+0xfa>
 80069e2:	6821      	ldr	r1, [r4, #0]
 80069e4:	6833      	ldr	r3, [r6, #0]
 80069e6:	0608      	lsls	r0, r1, #24
 80069e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80069ec:	d402      	bmi.n	80069f4 <_printf_i+0xe8>
 80069ee:	0649      	lsls	r1, r1, #25
 80069f0:	bf48      	it	mi
 80069f2:	b2ad      	uxthmi	r5, r5
 80069f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80069f6:	4853      	ldr	r0, [pc, #332]	@ (8006b44 <_printf_i+0x238>)
 80069f8:	6033      	str	r3, [r6, #0]
 80069fa:	bf14      	ite	ne
 80069fc:	230a      	movne	r3, #10
 80069fe:	2308      	moveq	r3, #8
 8006a00:	2100      	movs	r1, #0
 8006a02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a06:	6866      	ldr	r6, [r4, #4]
 8006a08:	60a6      	str	r6, [r4, #8]
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	bfa2      	ittt	ge
 8006a0e:	6821      	ldrge	r1, [r4, #0]
 8006a10:	f021 0104 	bicge.w	r1, r1, #4
 8006a14:	6021      	strge	r1, [r4, #0]
 8006a16:	b90d      	cbnz	r5, 8006a1c <_printf_i+0x110>
 8006a18:	2e00      	cmp	r6, #0
 8006a1a:	d04b      	beq.n	8006ab4 <_printf_i+0x1a8>
 8006a1c:	4616      	mov	r6, r2
 8006a1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a22:	fb03 5711 	mls	r7, r3, r1, r5
 8006a26:	5dc7      	ldrb	r7, [r0, r7]
 8006a28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a2c:	462f      	mov	r7, r5
 8006a2e:	42bb      	cmp	r3, r7
 8006a30:	460d      	mov	r5, r1
 8006a32:	d9f4      	bls.n	8006a1e <_printf_i+0x112>
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d10b      	bne.n	8006a50 <_printf_i+0x144>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	07df      	lsls	r7, r3, #31
 8006a3c:	d508      	bpl.n	8006a50 <_printf_i+0x144>
 8006a3e:	6923      	ldr	r3, [r4, #16]
 8006a40:	6861      	ldr	r1, [r4, #4]
 8006a42:	4299      	cmp	r1, r3
 8006a44:	bfde      	ittt	le
 8006a46:	2330      	movle	r3, #48	@ 0x30
 8006a48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a50:	1b92      	subs	r2, r2, r6
 8006a52:	6122      	str	r2, [r4, #16]
 8006a54:	f8cd a000 	str.w	sl, [sp]
 8006a58:	464b      	mov	r3, r9
 8006a5a:	aa03      	add	r2, sp, #12
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4640      	mov	r0, r8
 8006a60:	f7ff fee6 	bl	8006830 <_printf_common>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d14a      	bne.n	8006afe <_printf_i+0x1f2>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	b004      	add	sp, #16
 8006a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	f043 0320 	orr.w	r3, r3, #32
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	4833      	ldr	r0, [pc, #204]	@ (8006b48 <_printf_i+0x23c>)
 8006a7c:	2778      	movs	r7, #120	@ 0x78
 8006a7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	6831      	ldr	r1, [r6, #0]
 8006a86:	061f      	lsls	r7, r3, #24
 8006a88:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a8c:	d402      	bmi.n	8006a94 <_printf_i+0x188>
 8006a8e:	065f      	lsls	r7, r3, #25
 8006a90:	bf48      	it	mi
 8006a92:	b2ad      	uxthmi	r5, r5
 8006a94:	6031      	str	r1, [r6, #0]
 8006a96:	07d9      	lsls	r1, r3, #31
 8006a98:	bf44      	itt	mi
 8006a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a9e:	6023      	strmi	r3, [r4, #0]
 8006aa0:	b11d      	cbz	r5, 8006aaa <_printf_i+0x19e>
 8006aa2:	2310      	movs	r3, #16
 8006aa4:	e7ac      	b.n	8006a00 <_printf_i+0xf4>
 8006aa6:	4827      	ldr	r0, [pc, #156]	@ (8006b44 <_printf_i+0x238>)
 8006aa8:	e7e9      	b.n	8006a7e <_printf_i+0x172>
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	f023 0320 	bic.w	r3, r3, #32
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	e7f6      	b.n	8006aa2 <_printf_i+0x196>
 8006ab4:	4616      	mov	r6, r2
 8006ab6:	e7bd      	b.n	8006a34 <_printf_i+0x128>
 8006ab8:	6833      	ldr	r3, [r6, #0]
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	6961      	ldr	r1, [r4, #20]
 8006abe:	1d18      	adds	r0, r3, #4
 8006ac0:	6030      	str	r0, [r6, #0]
 8006ac2:	062e      	lsls	r6, r5, #24
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	d501      	bpl.n	8006acc <_printf_i+0x1c0>
 8006ac8:	6019      	str	r1, [r3, #0]
 8006aca:	e002      	b.n	8006ad2 <_printf_i+0x1c6>
 8006acc:	0668      	lsls	r0, r5, #25
 8006ace:	d5fb      	bpl.n	8006ac8 <_printf_i+0x1bc>
 8006ad0:	8019      	strh	r1, [r3, #0]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	4616      	mov	r6, r2
 8006ad8:	e7bc      	b.n	8006a54 <_printf_i+0x148>
 8006ada:	6833      	ldr	r3, [r6, #0]
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	6032      	str	r2, [r6, #0]
 8006ae0:	681e      	ldr	r6, [r3, #0]
 8006ae2:	6862      	ldr	r2, [r4, #4]
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7f9 fb72 	bl	80001d0 <memchr>
 8006aec:	b108      	cbz	r0, 8006af2 <_printf_i+0x1e6>
 8006aee:	1b80      	subs	r0, r0, r6
 8006af0:	6060      	str	r0, [r4, #4]
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	2300      	movs	r3, #0
 8006af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006afc:	e7aa      	b.n	8006a54 <_printf_i+0x148>
 8006afe:	6923      	ldr	r3, [r4, #16]
 8006b00:	4632      	mov	r2, r6
 8006b02:	4649      	mov	r1, r9
 8006b04:	4640      	mov	r0, r8
 8006b06:	47d0      	blx	sl
 8006b08:	3001      	adds	r0, #1
 8006b0a:	d0ad      	beq.n	8006a68 <_printf_i+0x15c>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	079b      	lsls	r3, r3, #30
 8006b10:	d413      	bmi.n	8006b3a <_printf_i+0x22e>
 8006b12:	68e0      	ldr	r0, [r4, #12]
 8006b14:	9b03      	ldr	r3, [sp, #12]
 8006b16:	4298      	cmp	r0, r3
 8006b18:	bfb8      	it	lt
 8006b1a:	4618      	movlt	r0, r3
 8006b1c:	e7a6      	b.n	8006a6c <_printf_i+0x160>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	4632      	mov	r2, r6
 8006b22:	4649      	mov	r1, r9
 8006b24:	4640      	mov	r0, r8
 8006b26:	47d0      	blx	sl
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d09d      	beq.n	8006a68 <_printf_i+0x15c>
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	9903      	ldr	r1, [sp, #12]
 8006b32:	1a5b      	subs	r3, r3, r1
 8006b34:	42ab      	cmp	r3, r5
 8006b36:	dcf2      	bgt.n	8006b1e <_printf_i+0x212>
 8006b38:	e7eb      	b.n	8006b12 <_printf_i+0x206>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	f104 0619 	add.w	r6, r4, #25
 8006b40:	e7f5      	b.n	8006b2e <_printf_i+0x222>
 8006b42:	bf00      	nop
 8006b44:	08006f4d 	.word	0x08006f4d
 8006b48:	08006f5e 	.word	0x08006f5e

08006b4c <__sflush_r>:
 8006b4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b54:	0716      	lsls	r6, r2, #28
 8006b56:	4605      	mov	r5, r0
 8006b58:	460c      	mov	r4, r1
 8006b5a:	d454      	bmi.n	8006c06 <__sflush_r+0xba>
 8006b5c:	684b      	ldr	r3, [r1, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dc02      	bgt.n	8006b68 <__sflush_r+0x1c>
 8006b62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dd48      	ble.n	8006bfa <__sflush_r+0xae>
 8006b68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b6a:	2e00      	cmp	r6, #0
 8006b6c:	d045      	beq.n	8006bfa <__sflush_r+0xae>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b74:	682f      	ldr	r7, [r5, #0]
 8006b76:	6a21      	ldr	r1, [r4, #32]
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	d030      	beq.n	8006bde <__sflush_r+0x92>
 8006b7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	0759      	lsls	r1, r3, #29
 8006b82:	d505      	bpl.n	8006b90 <__sflush_r+0x44>
 8006b84:	6863      	ldr	r3, [r4, #4]
 8006b86:	1ad2      	subs	r2, r2, r3
 8006b88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b8a:	b10b      	cbz	r3, 8006b90 <__sflush_r+0x44>
 8006b8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b8e:	1ad2      	subs	r2, r2, r3
 8006b90:	2300      	movs	r3, #0
 8006b92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b94:	6a21      	ldr	r1, [r4, #32]
 8006b96:	4628      	mov	r0, r5
 8006b98:	47b0      	blx	r6
 8006b9a:	1c43      	adds	r3, r0, #1
 8006b9c:	89a3      	ldrh	r3, [r4, #12]
 8006b9e:	d106      	bne.n	8006bae <__sflush_r+0x62>
 8006ba0:	6829      	ldr	r1, [r5, #0]
 8006ba2:	291d      	cmp	r1, #29
 8006ba4:	d82b      	bhi.n	8006bfe <__sflush_r+0xb2>
 8006ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8006c50 <__sflush_r+0x104>)
 8006ba8:	410a      	asrs	r2, r1
 8006baa:	07d6      	lsls	r6, r2, #31
 8006bac:	d427      	bmi.n	8006bfe <__sflush_r+0xb2>
 8006bae:	2200      	movs	r2, #0
 8006bb0:	6062      	str	r2, [r4, #4]
 8006bb2:	04d9      	lsls	r1, r3, #19
 8006bb4:	6922      	ldr	r2, [r4, #16]
 8006bb6:	6022      	str	r2, [r4, #0]
 8006bb8:	d504      	bpl.n	8006bc4 <__sflush_r+0x78>
 8006bba:	1c42      	adds	r2, r0, #1
 8006bbc:	d101      	bne.n	8006bc2 <__sflush_r+0x76>
 8006bbe:	682b      	ldr	r3, [r5, #0]
 8006bc0:	b903      	cbnz	r3, 8006bc4 <__sflush_r+0x78>
 8006bc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bc6:	602f      	str	r7, [r5, #0]
 8006bc8:	b1b9      	cbz	r1, 8006bfa <__sflush_r+0xae>
 8006bca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bce:	4299      	cmp	r1, r3
 8006bd0:	d002      	beq.n	8006bd8 <__sflush_r+0x8c>
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f7ff fbf2 	bl	80063bc <_free_r>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bdc:	e00d      	b.n	8006bfa <__sflush_r+0xae>
 8006bde:	2301      	movs	r3, #1
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b0      	blx	r6
 8006be4:	4602      	mov	r2, r0
 8006be6:	1c50      	adds	r0, r2, #1
 8006be8:	d1c9      	bne.n	8006b7e <__sflush_r+0x32>
 8006bea:	682b      	ldr	r3, [r5, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0c6      	beq.n	8006b7e <__sflush_r+0x32>
 8006bf0:	2b1d      	cmp	r3, #29
 8006bf2:	d001      	beq.n	8006bf8 <__sflush_r+0xac>
 8006bf4:	2b16      	cmp	r3, #22
 8006bf6:	d11e      	bne.n	8006c36 <__sflush_r+0xea>
 8006bf8:	602f      	str	r7, [r5, #0]
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	e022      	b.n	8006c44 <__sflush_r+0xf8>
 8006bfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c02:	b21b      	sxth	r3, r3
 8006c04:	e01b      	b.n	8006c3e <__sflush_r+0xf2>
 8006c06:	690f      	ldr	r7, [r1, #16]
 8006c08:	2f00      	cmp	r7, #0
 8006c0a:	d0f6      	beq.n	8006bfa <__sflush_r+0xae>
 8006c0c:	0793      	lsls	r3, r2, #30
 8006c0e:	680e      	ldr	r6, [r1, #0]
 8006c10:	bf08      	it	eq
 8006c12:	694b      	ldreq	r3, [r1, #20]
 8006c14:	600f      	str	r7, [r1, #0]
 8006c16:	bf18      	it	ne
 8006c18:	2300      	movne	r3, #0
 8006c1a:	eba6 0807 	sub.w	r8, r6, r7
 8006c1e:	608b      	str	r3, [r1, #8]
 8006c20:	f1b8 0f00 	cmp.w	r8, #0
 8006c24:	dde9      	ble.n	8006bfa <__sflush_r+0xae>
 8006c26:	6a21      	ldr	r1, [r4, #32]
 8006c28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c2a:	4643      	mov	r3, r8
 8006c2c:	463a      	mov	r2, r7
 8006c2e:	4628      	mov	r0, r5
 8006c30:	47b0      	blx	r6
 8006c32:	2800      	cmp	r0, #0
 8006c34:	dc08      	bgt.n	8006c48 <__sflush_r+0xfc>
 8006c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c48:	4407      	add	r7, r0
 8006c4a:	eba8 0800 	sub.w	r8, r8, r0
 8006c4e:	e7e7      	b.n	8006c20 <__sflush_r+0xd4>
 8006c50:	dfbffffe 	.word	0xdfbffffe

08006c54 <_fflush_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	690b      	ldr	r3, [r1, #16]
 8006c58:	4605      	mov	r5, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	b913      	cbnz	r3, 8006c64 <_fflush_r+0x10>
 8006c5e:	2500      	movs	r5, #0
 8006c60:	4628      	mov	r0, r5
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	b118      	cbz	r0, 8006c6e <_fflush_r+0x1a>
 8006c66:	6a03      	ldr	r3, [r0, #32]
 8006c68:	b90b      	cbnz	r3, 8006c6e <_fflush_r+0x1a>
 8006c6a:	f7ff f9ad 	bl	8005fc8 <__sinit>
 8006c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f3      	beq.n	8006c5e <_fflush_r+0xa>
 8006c76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c78:	07d0      	lsls	r0, r2, #31
 8006c7a:	d404      	bmi.n	8006c86 <_fflush_r+0x32>
 8006c7c:	0599      	lsls	r1, r3, #22
 8006c7e:	d402      	bmi.n	8006c86 <_fflush_r+0x32>
 8006c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c82:	f7ff fb98 	bl	80063b6 <__retarget_lock_acquire_recursive>
 8006c86:	4628      	mov	r0, r5
 8006c88:	4621      	mov	r1, r4
 8006c8a:	f7ff ff5f 	bl	8006b4c <__sflush_r>
 8006c8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c90:	07da      	lsls	r2, r3, #31
 8006c92:	4605      	mov	r5, r0
 8006c94:	d4e4      	bmi.n	8006c60 <_fflush_r+0xc>
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	059b      	lsls	r3, r3, #22
 8006c9a:	d4e1      	bmi.n	8006c60 <_fflush_r+0xc>
 8006c9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c9e:	f7ff fb8b 	bl	80063b8 <__retarget_lock_release_recursive>
 8006ca2:	e7dd      	b.n	8006c60 <_fflush_r+0xc>

08006ca4 <__swhatbuf_r>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cac:	2900      	cmp	r1, #0
 8006cae:	b096      	sub	sp, #88	@ 0x58
 8006cb0:	4615      	mov	r5, r2
 8006cb2:	461e      	mov	r6, r3
 8006cb4:	da0d      	bge.n	8006cd2 <__swhatbuf_r+0x2e>
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cbc:	f04f 0100 	mov.w	r1, #0
 8006cc0:	bf14      	ite	ne
 8006cc2:	2340      	movne	r3, #64	@ 0x40
 8006cc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cc8:	2000      	movs	r0, #0
 8006cca:	6031      	str	r1, [r6, #0]
 8006ccc:	602b      	str	r3, [r5, #0]
 8006cce:	b016      	add	sp, #88	@ 0x58
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	466a      	mov	r2, sp
 8006cd4:	f000 f848 	bl	8006d68 <_fstat_r>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	dbec      	blt.n	8006cb6 <__swhatbuf_r+0x12>
 8006cdc:	9901      	ldr	r1, [sp, #4]
 8006cde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ce2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ce6:	4259      	negs	r1, r3
 8006ce8:	4159      	adcs	r1, r3
 8006cea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cee:	e7eb      	b.n	8006cc8 <__swhatbuf_r+0x24>

08006cf0 <__smakebuf_r>:
 8006cf0:	898b      	ldrh	r3, [r1, #12]
 8006cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cf4:	079d      	lsls	r5, r3, #30
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	d507      	bpl.n	8006d0c <__smakebuf_r+0x1c>
 8006cfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2301      	movs	r3, #1
 8006d06:	6163      	str	r3, [r4, #20]
 8006d08:	b003      	add	sp, #12
 8006d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0c:	ab01      	add	r3, sp, #4
 8006d0e:	466a      	mov	r2, sp
 8006d10:	f7ff ffc8 	bl	8006ca4 <__swhatbuf_r>
 8006d14:	9f00      	ldr	r7, [sp, #0]
 8006d16:	4605      	mov	r5, r0
 8006d18:	4639      	mov	r1, r7
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7ff fbba 	bl	8006494 <_malloc_r>
 8006d20:	b948      	cbnz	r0, 8006d36 <__smakebuf_r+0x46>
 8006d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d26:	059a      	lsls	r2, r3, #22
 8006d28:	d4ee      	bmi.n	8006d08 <__smakebuf_r+0x18>
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	f043 0302 	orr.w	r3, r3, #2
 8006d32:	81a3      	strh	r3, [r4, #12]
 8006d34:	e7e2      	b.n	8006cfc <__smakebuf_r+0xc>
 8006d36:	89a3      	ldrh	r3, [r4, #12]
 8006d38:	6020      	str	r0, [r4, #0]
 8006d3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d3e:	81a3      	strh	r3, [r4, #12]
 8006d40:	9b01      	ldr	r3, [sp, #4]
 8006d42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d46:	b15b      	cbz	r3, 8006d60 <__smakebuf_r+0x70>
 8006d48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f000 f81d 	bl	8006d8c <_isatty_r>
 8006d52:	b128      	cbz	r0, 8006d60 <__smakebuf_r+0x70>
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	f023 0303 	bic.w	r3, r3, #3
 8006d5a:	f043 0301 	orr.w	r3, r3, #1
 8006d5e:	81a3      	strh	r3, [r4, #12]
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	431d      	orrs	r5, r3
 8006d64:	81a5      	strh	r5, [r4, #12]
 8006d66:	e7cf      	b.n	8006d08 <__smakebuf_r+0x18>

08006d68 <_fstat_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d07      	ldr	r5, [pc, #28]	@ (8006d88 <_fstat_r+0x20>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	4611      	mov	r1, r2
 8006d74:	602b      	str	r3, [r5, #0]
 8006d76:	f7fa fca9 	bl	80016cc <_fstat>
 8006d7a:	1c43      	adds	r3, r0, #1
 8006d7c:	d102      	bne.n	8006d84 <_fstat_r+0x1c>
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	b103      	cbz	r3, 8006d84 <_fstat_r+0x1c>
 8006d82:	6023      	str	r3, [r4, #0]
 8006d84:	bd38      	pop	{r3, r4, r5, pc}
 8006d86:	bf00      	nop
 8006d88:	20000478 	.word	0x20000478

08006d8c <_isatty_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d06      	ldr	r5, [pc, #24]	@ (8006da8 <_isatty_r+0x1c>)
 8006d90:	2300      	movs	r3, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7fa fca8 	bl	80016ec <_isatty>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_isatty_r+0x1a>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_isatty_r+0x1a>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	20000478 	.word	0x20000478

08006dac <_sbrk_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	4d06      	ldr	r5, [pc, #24]	@ (8006dc8 <_sbrk_r+0x1c>)
 8006db0:	2300      	movs	r3, #0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	602b      	str	r3, [r5, #0]
 8006db8:	f7fa fcb0 	bl	800171c <_sbrk>
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d102      	bne.n	8006dc6 <_sbrk_r+0x1a>
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	b103      	cbz	r3, 8006dc6 <_sbrk_r+0x1a>
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	bd38      	pop	{r3, r4, r5, pc}
 8006dc8:	20000478 	.word	0x20000478

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
