
stepper_working2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008270  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08008400  08008400  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085dc  080085dc  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  080085dc  080085dc  000095dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085e4  080085e4  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e4  080085e4  000095e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085e8  080085e8  000095e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080085ec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000078  08008664  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08008664  0000a4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bf5  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317b  00000000  00000000  00020c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  00023e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001005  00000000  00000000  00025298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029036  00000000  00000000  0002629d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198d6  00000000  00000000  0004f2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f868c  00000000  00000000  00068ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161235  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de4  00000000  00000000  00161278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083e8 	.word	0x080083e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080083e8 	.word	0x080083e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <writeRegister>:

#include "ADS1015_ADS1115.h"
#include "main.h"

// Write the register
static void writeRegister(ADS1xx5_I2C *i2c, uint8_t reg, uint16_t value) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
 800056c:	4613      	mov	r3, r2
 800056e:	803b      	strh	r3, [r7, #0]
	uint8_t pData[3] = { reg, (uint8_t) (value >> 8), (uint8_t) (value & 0xFF) };
 8000570:	78fb      	ldrb	r3, [r7, #3]
 8000572:	733b      	strb	r3, [r7, #12]
 8000574:	883b      	ldrh	r3, [r7, #0]
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	b29b      	uxth	r3, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	737b      	strb	r3, [r7, #13]
 800057e:	883b      	ldrh	r3, [r7, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, pData, 3, 10);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	68d8      	ldr	r0, [r3, #12]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	8819      	ldrh	r1, [r3, #0]
 800058c:	f107 020c 	add.w	r2, r7, #12
 8000590:	230a      	movs	r3, #10
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2303      	movs	r3, #3
 8000596:	f001 ffb3 	bl	8002500 <HAL_I2C_Master_Transmit>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <readRegister>:

// Read the register
static uint16_t readRegister(ADS1xx5_I2C *i2c, uint8_t reg) {
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b086      	sub	sp, #24
 80005a6:	af02      	add	r7, sp, #8
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, &reg, 1, 10);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68d8      	ldr	r0, [r3, #12]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	8819      	ldrh	r1, [r3, #0]
 80005b6:	1cfa      	adds	r2, r7, #3
 80005b8:	230a      	movs	r3, #10
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2301      	movs	r3, #1
 80005be:	f001 ff9f 	bl	8002500 <HAL_I2C_Master_Transmit>
	uint8_t pData[2] = { 0, 0 };
 80005c2:	2300      	movs	r3, #0
 80005c4:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Receive(i2c->hi2c, i2c->m_i2cAddress, pData, 2, 10);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68d8      	ldr	r0, [r3, #12]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	8819      	ldrh	r1, [r3, #0]
 80005ce:	f107 020c 	add.w	r2, r7, #12
 80005d2:	230a      	movs	r3, #10
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2302      	movs	r3, #2
 80005d8:	f002 f8aa 	bl	8002730 <HAL_I2C_Master_Receive>
	return ((pData[0] << 8) | pData[1]);
 80005dc:	7b3b      	ldrb	r3, [r7, #12]
 80005de:	021b      	lsls	r3, r3, #8
 80005e0:	b21a      	sxth	r2, r3
 80005e2:	7b7b      	ldrb	r3, [r7, #13]
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b21b      	sxth	r3, r3
 80005ea:	b29b      	uxth	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <ADSbegin>:

// Check if we have correct connection.
static void ADSbegin(ADS1xx5_I2C *i2c) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68d8      	ldr	r0, [r3, #12]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	8819      	ldrh	r1, [r3, #0]
 8000604:	230a      	movs	r3, #10
 8000606:	220a      	movs	r2, #10
 8000608:	f002 f988 	bl	800291c <HAL_I2C_IsDeviceReady>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <ADSbegin+0x2a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERROR I2C - Wrong address
 8000612:	2201      	movs	r2, #1
 8000614:	2120      	movs	r1, #32
 8000616:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800061a:	f001 febd 	bl	8002398 <HAL_GPIO_WritePin>

}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <ADS1115>:
	i2c->m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
	ADSbegin(i2c);
}

// Declare an ADS1115 structure
void ADS1115(ADS1xx5_I2C *i2c, I2C_HandleTypeDef *hi2c, uint8_t i2cAddress) {
 8000626:	b580      	push	{r7, lr}
 8000628:	b084      	sub	sp, #16
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	4613      	mov	r3, r2
 8000632:	71fb      	strb	r3, [r7, #7]
	i2c->hi2c = hi2c;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	60da      	str	r2, [r3, #12]
	i2c->m_i2cAddress = i2cAddress << 1; //  It's Important to shift the address << 1
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	b29b      	uxth	r3, r3
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	b29a      	uxth	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	801a      	strh	r2, [r3, #0]
	i2c->m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2208      	movs	r2, #8
 800064a:	605a      	str	r2, [r3, #4]
	i2c->m_bitShift = 0;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2200      	movs	r2, #0
 8000650:	721a      	strb	r2, [r3, #8]
	i2c->m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2200      	movs	r2, #0
 8000656:	815a      	strh	r2, [r3, #10]
	ADSbegin(i2c);
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f7ff ffcb 	bl	80005f4 <ADSbegin>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <ADSsetGain>:
 // ADSsetGain(GAIN_TWO);        // 2x gain   +/- 2.048V  1 bit = 1mV      0.0625mV
 // ADSsetGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
 // ADSsetGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
 // ADSsetGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
 */
void ADSsetGain(ADS1xx5_I2C *i2c, adsGain_t gain) {
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	807b      	strh	r3, [r7, #2]
	i2c->m_gain = gain;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	887a      	ldrh	r2, [r7, #2]
 8000676:	815a      	strh	r2, [r3, #10]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <ADSreadADC_SingleEnded>:
adsGain_t ADSgetGain(ADS1xx5_I2C *i2c) {
	return i2c->m_gain;
}

// Gets a single-ended ADC reading from the specified channel
uint16_t ADSreadADC_SingleEnded(ADS1xx5_I2C *i2c, uint8_t channel) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
	if (channel > 3) {
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d901      	bls.n	800069a <ADSreadADC_SingleEnded+0x16>
		return 0;
 8000696:	2300      	movs	r3, #0
 8000698:	e046      	b.n	8000728 <ADSreadADC_SingleEnded+0xa4>
	}

	// Start with default values
	uint16_t config =
 800069a:	f240 1383 	movw	r3, #387	@ 0x183
 800069e:	81fb      	strh	r3, [r7, #14]
			ADS1015_REG_CONFIG_CMODE_TRAD 	| 	// Traditional comparator (default val)
			ADS1015_REG_CONFIG_DR_1600SPS 	| 	// 1600 samples per second (default)
			ADS1015_REG_CONFIG_MODE_SINGLE;   	// Single-shot mode (default)

	// Set PGA/voltage range
	config |= i2c->m_gain;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	895a      	ldrh	r2, [r3, #10]
 80006a4:	89fb      	ldrh	r3, [r7, #14]
 80006a6:	4313      	orrs	r3, r2
 80006a8:	81fb      	strh	r3, [r7, #14]

	// Set single-ended input channel
	switch (channel) {
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d81f      	bhi.n	80006f0 <ADSreadADC_SingleEnded+0x6c>
 80006b0:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <ADSreadADC_SingleEnded+0x34>)
 80006b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b6:	bf00      	nop
 80006b8:	080006c9 	.word	0x080006c9
 80006bc:	080006d3 	.word	0x080006d3
 80006c0:	080006dd 	.word	0x080006dd
 80006c4:	080006e7 	.word	0x080006e7
	case (0):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 80006c8:	89fb      	ldrh	r3, [r7, #14]
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ce:	81fb      	strh	r3, [r7, #14]
		break;
 80006d0:	e00e      	b.n	80006f0 <ADSreadADC_SingleEnded+0x6c>
	case (1):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 80006d2:	89fb      	ldrh	r3, [r7, #14]
 80006d4:	f443 43a0 	orr.w	r3, r3, #20480	@ 0x5000
 80006d8:	81fb      	strh	r3, [r7, #14]
		break;
 80006da:	e009      	b.n	80006f0 <ADSreadADC_SingleEnded+0x6c>
	case (2):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 80006dc:	89fb      	ldrh	r3, [r7, #14]
 80006de:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80006e2:	81fb      	strh	r3, [r7, #14]
		break;
 80006e4:	e004      	b.n	80006f0 <ADSreadADC_SingleEnded+0x6c>
	case (3):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80006ec:	81fb      	strh	r3, [r7, #14]
		break;
 80006ee:	bf00      	nop
	}

	// Set 'start single-conversion' bit
	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 80006f0:	89fb      	ldrh	r3, [r7, #14]
 80006f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80006f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80006fa:	81fb      	strh	r3, [r7, #14]

	// Write config register to the ADC
	writeRegister(i2c, ADS1015_REG_POINTER_CONFIG, config);
 80006fc:	89fb      	ldrh	r3, [r7, #14]
 80006fe:	461a      	mov	r2, r3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff ff2c 	bl	8000560 <writeRegister>

	// Wait for the conversion to complete
	HAL_Delay(i2c->m_conversionDelay);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	f001 facd 	bl	8001cac <HAL_Delay>

	// Read the conversion results
	// Shift 12-bit results right 4 bits for the ADS1015
	return readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
 8000712:	2100      	movs	r1, #0
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff44 	bl	80005a2 <readRegister>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	7a1b      	ldrb	r3, [r3, #8]
 8000722:	fa42 f303 	asr.w	r3, r2, r3
 8000726:	b29b      	uxth	r3, r3
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	b29a      	uxth	r2, r3
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	68b9      	ldr	r1, [r7, #8]
 8000746:	4804      	ldr	r0, [pc, #16]	@ (8000758 <_write+0x28>)
 8000748:	f005 fa5c 	bl	8005c04 <HAL_UART_Transmit>
	return len;
 800074c:	687b      	ldr	r3, [r7, #4]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000184 	.word	0x20000184

0800075c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <HAL_UART_RxCpltCallback+0x44>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d113      	bne.n	8000796 <HAL_UART_RxCpltCallback+0x3a>
        uint8_t receivedChar = uartRxBuffer[0];
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <HAL_UART_RxCpltCallback+0x48>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	73fb      	strb	r3, [r7, #15]
        if (receivedChar >= '0' && receivedChar <= '9') {
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2b2f      	cmp	r3, #47	@ 0x2f
 8000778:	d908      	bls.n	800078c <HAL_UART_RxCpltCallback+0x30>
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	2b39      	cmp	r3, #57	@ 0x39
 800077e:	d805      	bhi.n	800078c <HAL_UART_RxCpltCallback+0x30>
            currentState = receivedChar - '0';
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	b29b      	uxth	r3, r3
 8000784:	3b30      	subs	r3, #48	@ 0x30
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <HAL_UART_RxCpltCallback+0x4c>)
 800078a:	801a      	strh	r2, [r3, #0]
        }

        // Restart UART reception
        HAL_UART_Receive_IT(&huart4, uartRxBuffer, 1);
 800078c:	2201      	movs	r2, #1
 800078e:	4905      	ldr	r1, [pc, #20]	@ (80007a4 <HAL_UART_RxCpltCallback+0x48>)
 8000790:	4806      	ldr	r0, [pc, #24]	@ (80007ac <HAL_UART_RxCpltCallback+0x50>)
 8000792:	f005 fb89 	bl	8005ea8 <HAL_UART_Receive_IT>
    }
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40004c00 	.word	0x40004c00
 80007a4:	20000094 	.word	0x20000094
 80007a8:	20000000 	.word	0x20000000
 80007ac:	20000184 	.word	0x20000184

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b6:	f001 f9fd 	bl	8001bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ba:	f000 f8d9 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007be:	f000 fa9f 	bl	8000d00 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c2:	f000 f927 	bl	8000a14 <MX_I2C1_Init>
  MX_TIM3_Init();
 80007c6:	f000 f965 	bl	8000a94 <MX_TIM3_Init>
  MX_UART4_Init();
 80007ca:	f000 fa09 	bl	8000be0 <MX_UART4_Init>
  MX_UART5_Init();
 80007ce:	f000 fa37 	bl	8000c40 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80007d2:	f000 fa65 	bl	8000ca0 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 80007d6:	f000 f9dd 	bl	8000b94 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	setupSensor();
 80007da:	f000 fdf3 	bl	80013c4 <setupSensor>
	setupMotor();
 80007de:	f000 fcc7 	bl	8001170 <setupMotor>

	uint8_t flag = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Receive_IT(&huart4, uartRxBuffer, 1);  // Start UART interrupt
 80007e6:	2201      	movs	r2, #1
 80007e8:	4955      	ldr	r1, [pc, #340]	@ (8000940 <main+0x190>)
 80007ea:	4856      	ldr	r0, [pc, #344]	@ (8000944 <main+0x194>)
 80007ec:	f005 fb5c 	bl	8005ea8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		switch (currentState) {
 80007f0:	4b55      	ldr	r3, [pc, #340]	@ (8000948 <main+0x198>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	dc11      	bgt.n	800081c <main+0x6c>
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	f2c0 8092 	blt.w	8000922 <main+0x172>
 80007fe:	2b03      	cmp	r3, #3
 8000800:	f200 808f 	bhi.w	8000922 <main+0x172>
 8000804:	a201      	add	r2, pc, #4	@ (adr r2, 800080c <main+0x5c>)
 8000806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080a:	bf00      	nop
 800080c:	08000825 	.word	0x08000825
 8000810:	08000843 	.word	0x08000843
 8000814:	08000863 	.word	0x08000863
 8000818:	08000903 	.word	0x08000903
 800081c:	2bff      	cmp	r3, #255	@ 0xff
 800081e:	f000 8089 	beq.w	8000934 <main+0x184>
 8000822:	e07e      	b.n	8000922 <main+0x172>
		        case 0:

		        	lampOff();
 8000824:	f000 fd76 	bl	8001314 <lampOff>
		        	while(currentState == 0){
 8000828:	e001      	b.n	800082e <main+0x7e>

		            homePosition();
 800082a:	f000 fd31 	bl	8001290 <homePosition>
		        	while(currentState == 0){
 800082e:	4b46      	ldr	r3, [pc, #280]	@ (8000948 <main+0x198>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0f9      	beq.n	800082a <main+0x7a>
		        	}

		            currentState = 255;
 8000836:	4b44      	ldr	r3, [pc, #272]	@ (8000948 <main+0x198>)
 8000838:	22ff      	movs	r2, #255	@ 0xff
 800083a:	801a      	strh	r2, [r3, #0]
		            flag = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	70fb      	strb	r3, [r7, #3]
		           // HAL_Delay(1000);
		            break;
 8000840:	e079      	b.n	8000936 <main+0x186>


		        case 1:

		            lampOn();
 8000842:	f000 fd53 	bl	80012ec <lampOn>
		           // while(currentState == 1){
		                rotateMotor(5100, 1);
 8000846:	2101      	movs	r1, #1
 8000848:	f241 30ec 	movw	r0, #5100	@ 0x13ec
 800084c:	f000 fcdc 	bl	8001208 <rotateMotor>
		           // }
		            printf("Scan Initialized\r\n");
 8000850:	483e      	ldr	r0, [pc, #248]	@ (800094c <main+0x19c>)
 8000852:	f006 ff65 	bl	8007720 <puts>
		            currentState = 255;
 8000856:	4b3c      	ldr	r3, [pc, #240]	@ (8000948 <main+0x198>)
 8000858:	22ff      	movs	r2, #255	@ 0xff
 800085a:	801a      	strh	r2, [r3, #0]
		            flag = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	70fb      	strb	r3, [r7, #3]

		            //HAL_Delay(1000);
		            break;
 8000860:	e069      	b.n	8000936 <main+0x186>

		        case 2:

		        	// while(currentState == 2 ){
		            printf("Taking Scan\r\n");
 8000862:	483b      	ldr	r0, [pc, #236]	@ (8000950 <main+0x1a0>)
 8000864:	f006 ff5c 	bl	8007720 <puts>
		            for (int stage = 0; stage < 14; stage++) {
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	e03d      	b.n	80008ea <main+0x13a>
		            	 if (currentState != 2)
 800086e:	4b36      	ldr	r3, [pc, #216]	@ (8000948 <main+0x198>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d003      	beq.n	800087e <main+0xce>
		            	 {
		            		currentState = 255;
 8000876:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <main+0x198>)
 8000878:	22ff      	movs	r2, #255	@ 0xff
 800087a:	801a      	strh	r2, [r3, #0]
							break;
 800087c:	e038      	b.n	80008f0 <main+0x140>
		            	 }
		                rotateMotor(case2step, 1);
 800087e:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <main+0x1a4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2101      	movs	r1, #1
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fcbf 	bl	8001208 <rotateMotor>

		                for (int scan = 0; scan < 3; scan++) {
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	e026      	b.n	80008de <main+0x12e>
		                    printf("Scan %d_%d\r\n", stage + 1, scan + 1);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	1c59      	adds	r1, r3, #1
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	3301      	adds	r3, #1
 8000898:	461a      	mov	r2, r3
 800089a:	482f      	ldr	r0, [pc, #188]	@ (8000958 <main+0x1a8>)
 800089c:	f006 fed8 	bl	8007650 <iprintf>

		                    //wait for 0.5 second
		                    HAL_Delay(500);
 80008a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008a4:	f001 fa02 	bl	8001cac <HAL_Delay>

		                    acquireSpectra();
 80008a8:	f000 fddc 	bl	8001464 <acquireSpectra>
		                    // Read and print spectra data
		                    for (int channel = 0; channel < CHANNELS; channel++) {
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	e00b      	b.n	80008ca <main+0x11a>
		                        printf("Channel %d: %d\r\n", channel, spectra[channel]);
 80008b2:	4a2a      	ldr	r2, [pc, #168]	@ (800095c <main+0x1ac>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ba:	461a      	mov	r2, r3
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	4828      	ldr	r0, [pc, #160]	@ (8000960 <main+0x1b0>)
 80008c0:	f006 fec6 	bl	8007650 <iprintf>
		                    for (int channel = 0; channel < CHANNELS; channel++) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b07      	cmp	r3, #7
 80008ce:	ddf0      	ble.n	80008b2 <main+0x102>

		                    }
		                    // Waits 1 second before allowing the next acquisition
		                    HAL_Delay(1000);
 80008d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d4:	f001 f9ea 	bl	8001cac <HAL_Delay>
		                for (int scan = 0; scan < 3; scan++) {
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	3301      	adds	r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	ddd5      	ble.n	8000890 <main+0xe0>
		            for (int stage = 0; stage < 14; stage++) {
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b0d      	cmp	r3, #13
 80008ee:	ddbe      	ble.n	800086e <main+0xbe>
		                }
		            }
		        	// }
		            printf("Scan Finished\r\n");
 80008f0:	481c      	ldr	r0, [pc, #112]	@ (8000964 <main+0x1b4>)
 80008f2:	f006 ff15 	bl	8007720 <puts>
		            currentState = 255;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <main+0x198>)
 80008f8:	22ff      	movs	r2, #255	@ 0xff
 80008fa:	801a      	strh	r2, [r3, #0]
		            flag = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	70fb      	strb	r3, [r7, #3]


		            break;
 8000900:	e019      	b.n	8000936 <main+0x186>

		        case 3:

		            lampOff();
 8000902:	f000 fd07 	bl	8001314 <lampOff>
		            //while(currentState == 3){
		            rotateMotor(9555, 0);
 8000906:	2100      	movs	r1, #0
 8000908:	f242 5053 	movw	r0, #9555	@ 0x2553
 800090c:	f000 fc7c 	bl	8001208 <rotateMotor>
		            printf("Sample Discarded\r\n");
 8000910:	4815      	ldr	r0, [pc, #84]	@ (8000968 <main+0x1b8>)
 8000912:	f006 ff05 	bl	8007720 <puts>
		            //}
		            currentState = 255;
 8000916:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <main+0x198>)
 8000918:	22ff      	movs	r2, #255	@ 0xff
 800091a:	801a      	strh	r2, [r3, #0]
		            flag = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	70fb      	strb	r3, [r7, #3]

		            break;
 8000920:	e009      	b.n	8000936 <main+0x186>
		        case 255:
		        	break;

		        default:

		        	printf("Invalid input! Please enter 0, 1, 2, or 3\r\n");
 8000922:	4812      	ldr	r0, [pc, #72]	@ (800096c <main+0x1bc>)
 8000924:	f006 fefc 	bl	8007720 <puts>
                    flag =1;
 8000928:	2301      	movs	r3, #1
 800092a:	70fb      	strb	r3, [r7, #3]

		        	currentState = 255;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <main+0x198>)
 800092e:	22ff      	movs	r2, #255	@ 0xff
 8000930:	801a      	strh	r2, [r3, #0]
		            break;
 8000932:	e000      	b.n	8000936 <main+0x186>
		        	break;
 8000934:	bf00      	nop
		    }

		    HAL_Delay(100);
 8000936:	2064      	movs	r0, #100	@ 0x64
 8000938:	f001 f9b8 	bl	8001cac <HAL_Delay>
		switch (currentState) {
 800093c:	e758      	b.n	80007f0 <main+0x40>
 800093e:	bf00      	nop
 8000940:	20000094 	.word	0x20000094
 8000944:	20000184 	.word	0x20000184
 8000948:	20000000 	.word	0x20000000
 800094c:	08008400 	.word	0x08008400
 8000950:	08008414 	.word	0x08008414
 8000954:	20000004 	.word	0x20000004
 8000958:	08008424 	.word	0x08008424
 800095c:	20000338 	.word	0x20000338
 8000960:	08008434 	.word	0x08008434
 8000964:	08008448 	.word	0x08008448
 8000968:	08008458 	.word	0x08008458
 800096c:	0800846c 	.word	0x0800846c

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b096      	sub	sp, #88	@ 0x58
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2244      	movs	r2, #68	@ 0x44
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f006 ffae 	bl	80078e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	463b      	mov	r3, r7
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000992:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000996:	f002 fbf9 	bl	800318c <HAL_PWREx_ControlVoltageScaling>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009a0:	f000 fa68 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ae:	2310      	movs	r3, #16
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b6:	2302      	movs	r3, #2
 80009b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009be:	230a      	movs	r3, #10
 80009c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009c2:	2307      	movs	r3, #7
 80009c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 fc30 	bl	8003238 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009de:	f000 fa49 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2303      	movs	r3, #3
 80009e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	2104      	movs	r1, #4
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 fff8 	bl	80039f0 <HAL_RCC_ClockConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a06:	f000 fa35 	bl	8000e74 <Error_Handler>
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3758      	adds	r7, #88	@ 0x58
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000a8c <MX_I2C1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <MX_I2C1_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4e:	480e      	ldr	r0, [pc, #56]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a50:	f001 fcba 	bl	80023c8 <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a5a:	f000 fa0b 	bl	8000e74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4809      	ldr	r0, [pc, #36]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a62:	f002 faed 	bl	8003040 <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 fa02 	bl	8000e74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_I2C1_Init+0x74>)
 8000a74:	f002 fb2f 	bl	80030d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f9f9 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000098 	.word	0x20000098
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	10d19ce4 	.word	0x10d19ce4

08000a94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa8:	f107 031c 	add.w	r3, r7, #28
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]
 8000ac2:	615a      	str	r2, [r3, #20]
 8000ac4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac6:	4b31      	ldr	r3, [pc, #196]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000ac8:	4a31      	ldr	r2, [pc, #196]	@ (8000b90 <MX_TIM3_Init+0xfc>)
 8000aca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000acc:	4b2f      	ldr	r3, [pc, #188]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000ace:	224f      	movs	r2, #79	@ 0x4f
 8000ad0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000ada:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ade:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b29      	ldr	r3, [pc, #164]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aec:	4827      	ldr	r0, [pc, #156]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000aee:	f003 fe5f 	bl	80047b0 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000af8:	f000 f9bc 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4820      	ldr	r0, [pc, #128]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000b0a:	f004 fa49 	bl	8004fa0 <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b14:	f000 f9ae 	bl	8000e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b18:	481c      	ldr	r0, [pc, #112]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000b1a:	f003 ff30 	bl	800497e <HAL_TIM_PWM_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b24:	f000 f9a6 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4815      	ldr	r0, [pc, #84]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000b38:	f004 ff38 	bl	80059ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b42:	f000 f997 	bl	8000e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b46:	2360      	movs	r3, #96	@ 0x60
 8000b48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8000b4a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000b4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	2204      	movs	r2, #4
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480b      	ldr	r0, [pc, #44]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000b60:	f004 f90a 	bl	8004d78 <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b6a:	f000 f983 	bl	8000e74 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	699a      	ldr	r2, [r3, #24]
 8000b74:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b7c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b7e:	4803      	ldr	r0, [pc, #12]	@ (8000b8c <MX_TIM3_Init+0xf8>)
 8000b80:	f000 fdd4 	bl	800172c <HAL_TIM_MspPostInit>

}
 8000b84:	bf00      	nop
 8000b86:	3738      	adds	r7, #56	@ 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200000ec 	.word	0x200000ec
 8000b90:	40000400 	.word	0x40000400

08000b94 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <MX_TIM16_Init+0x44>)
 8000b9a:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <MX_TIM16_Init+0x48>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <MX_TIM16_Init+0x44>)
 8000ba0:	224f      	movs	r2, #79	@ 0x4f
 8000ba2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <MX_TIM16_Init+0x44>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <MX_TIM16_Init+0x44>)
 8000bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <MX_TIM16_Init+0x44>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <MX_TIM16_Init+0x44>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <MX_TIM16_Init+0x44>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <MX_TIM16_Init+0x44>)
 8000bc6:	f003 fdf3 	bl	80047b0 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000bd0:	f000 f950 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000138 	.word	0x20000138
 8000bdc:	40014400 	.word	0x40014400

08000be0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000be6:	4a15      	ldr	r2, [pc, #84]	@ (8000c3c <MX_UART4_Init+0x5c>)
 8000be8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000bec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bf0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_UART4_Init+0x58>)
 8000c24:	f004 ff4a 	bl	8005abc <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 f921 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000184 	.word	0x20000184
 8000c3c:	40004c00 	.word	0x40004c00

08000c40 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	@ (8000c9c <MX_UART5_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c4c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c50:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart5) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_UART5_Init+0x58>)
 8000c84:	f004 ff68 	bl	8005b58 <HAL_HalfDuplex_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000c8e:	f000 f8f1 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000020c 	.word	0x2000020c
 8000c9c:	40005000 	.word	0x40005000

08000ca0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	@ (8000cfc <MX_USART3_UART_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000cb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_USART3_UART_Init+0x58>)
 8000ce4:	f004 feea 	bl	8005abc <HAL_UART_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cee:	f000 f8c1 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000294 	.word	0x20000294
 8000cfc:	40004800 	.word	0x40004800

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	4b54      	ldr	r3, [pc, #336]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a53      	ldr	r2, [pc, #332]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b51      	ldr	r3, [pc, #324]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a4d      	ldr	r2, [pc, #308]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b48      	ldr	r3, [pc, #288]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a47      	ldr	r2, [pc, #284]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b45      	ldr	r3, [pc, #276]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	4b42      	ldr	r3, [pc, #264]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a41      	ldr	r2, [pc, #260]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <MX_GPIO_Init+0x168>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0308 	and.w	r3, r3, #8
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000d76:	2200      	movs	r2, #0
 8000d78:	f640 7182 	movw	r1, #3970	@ 0xf82
 8000d7c:	483b      	ldr	r0, [pc, #236]	@ (8000e6c <MX_GPIO_Init+0x16c>)
 8000d7e:	f001 fb0b 	bl	8002398 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f001 fb04 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d96:	4836      	ldr	r0, [pc, #216]	@ (8000e70 <MX_GPIO_Init+0x170>)
 8000d98:	f001 fafe 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	482f      	ldr	r0, [pc, #188]	@ (8000e6c <MX_GPIO_Init+0x16c>)
 8000db0:	f001 f930 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000db4:	f640 7382 	movw	r3, #3970	@ 0xf82
 8000db8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4827      	ldr	r0, [pc, #156]	@ (8000e6c <MX_GPIO_Init+0x16c>)
 8000dce:	f001 f921 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8000dd2:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dee:	f001 f911 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000df2:	2320      	movs	r3, #32
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e08:	f001 f904 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4812      	ldr	r0, [pc, #72]	@ (8000e70 <MX_GPIO_Init+0x170>)
 8000e26:	f001 f8f5 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <MX_GPIO_Init+0x170>)
 8000e40:	f001 f8e8 	bl	8002014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0314 	add.w	r3, r7, #20
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5c:	f001 f8da 	bl	8002014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	@ 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48000400 	.word	0x48000400

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <calculateCRC>:
uint8_t writeData[4];
//int step = 1;
uint8_t data[8];


uint8_t calculateCRC(uint8_t *data, uint8_t length) {
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 8000e90:	2300      	movs	r3, #0
 8000e92:	73bb      	strb	r3, [r7, #14]
 8000e94:	e027      	b.n	8000ee6 <calculateCRC+0x66>
        uint8_t currentByte = data[i];
 8000e96:	7bbb      	ldrb	r3, [r7, #14]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	737b      	strb	r3, [r7, #13]
        for (uint8_t j = 0; j < 8; j++) {
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	733b      	strb	r3, [r7, #12]
 8000ea4:	e019      	b.n	8000eda <calculateCRC+0x5a>
            if ((crc >> 7) ^ (currentByte & 0x01)) {
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	09db      	lsrs	r3, r3, #7
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	7b7b      	ldrb	r3, [r7, #13]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d007      	beq.n	8000ec8 <calculateCRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	f083 0307 	eor.w	r3, r3, #7
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e002      	b.n	8000ece <calculateCRC+0x4e>
            } else {
                crc = crc << 1;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
            }
            currentByte = currentByte >> 1;
 8000ece:	7b7b      	ldrb	r3, [r7, #13]
 8000ed0:	085b      	lsrs	r3, r3, #1
 8000ed2:	737b      	strb	r3, [r7, #13]
        for (uint8_t j = 0; j < 8; j++) {
 8000ed4:	7b3b      	ldrb	r3, [r7, #12]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	733b      	strb	r3, [r7, #12]
 8000eda:	7b3b      	ldrb	r3, [r7, #12]
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d9e2      	bls.n	8000ea6 <calculateCRC+0x26>
    for (uint8_t i = 0; i < length; i++) {
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	73bb      	strb	r3, [r7, #14]
 8000ee6:	7bba      	ldrb	r2, [r7, #14]
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3d3      	bcc.n	8000e96 <calculateCRC+0x16>
        }
    }
    return crc;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <TMC2226_WriteRegister>:

void TMC2226_WriteRegister(uint8_t reg, uint32_t value) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]


    // Build the write frame
    data[0] = TMC2226_SYNC_BYTE;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f0a:	2205      	movs	r2, #5
 8000f0c:	701a      	strb	r2, [r3, #0]
    data[1] = TMC2226_SLAVE_ADDR;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	705a      	strb	r2, [r3, #1]
    data[2] = reg | TMC2226_WRITE_FLAG;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f1e:	709a      	strb	r2, [r3, #2]
    data[3] = (value >> 24) & 0xFF;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	0e1b      	lsrs	r3, r3, #24
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f28:	70da      	strb	r2, [r3, #3]
    data[4] = (value >> 16) & 0xFF;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f32:	711a      	strb	r2, [r3, #4]
    data[5] = (value >> 8) & 0xFF;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	0a1b      	lsrs	r3, r3, #8
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f3c:	715a      	strb	r2, [r3, #5]
    data[6] = value & 0xFF;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f44:	719a      	strb	r2, [r3, #6]
    data[7] = calculateCRC(data, 7);
 8000f46:	2107      	movs	r1, #7
 8000f48:	480a      	ldr	r0, [pc, #40]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f4a:	f7ff ff99 	bl	8000e80 <calculateCRC>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f54:	71da      	strb	r2, [r3, #7]

    // Send via UART
    HAL_UART_Transmit(&huart5, data, 8, 500);
 8000f56:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	4905      	ldr	r1, [pc, #20]	@ (8000f74 <TMC2226_WriteRegister+0x78>)
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <TMC2226_WriteRegister+0x7c>)
 8000f60:	f004 fe50 	bl	8005c04 <HAL_UART_Transmit>




    HAL_Delay(10);
 8000f64:	200a      	movs	r0, #10
 8000f66:	f000 fea1 	bl	8001cac <HAL_Delay>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000330 	.word	0x20000330
 8000f78:	2000020c 	.word	0x2000020c

08000f7c <TMC2226_ReadRegister>:
//}
//



uint32_t TMC2226_ReadRegister(uint8_t reg) {
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
   // uint8_t writeData[4];
   // uint8_t readData[8];

    // Send read request
    writeData[0] = TMC2226_SYNC_BYTE;
 8000f86:	4b2e      	ldr	r3, [pc, #184]	@ (8001040 <TMC2226_ReadRegister+0xc4>)
 8000f88:	2205      	movs	r2, #5
 8000f8a:	701a      	strb	r2, [r3, #0]
    writeData[1] = TMC2226_SLAVE_ADDR;
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <TMC2226_ReadRegister+0xc4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	705a      	strb	r2, [r3, #1]
    writeData[2] = reg;
 8000f92:	4a2b      	ldr	r2, [pc, #172]	@ (8001040 <TMC2226_ReadRegister+0xc4>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	7093      	strb	r3, [r2, #2]
    writeData[3] = calculateCRC(writeData, 3);
 8000f98:	2103      	movs	r1, #3
 8000f9a:	4829      	ldr	r0, [pc, #164]	@ (8001040 <TMC2226_ReadRegister+0xc4>)
 8000f9c:	f7ff ff70 	bl	8000e80 <calculateCRC>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <TMC2226_ReadRegister+0xc4>)
 8000fa6:	70da      	strb	r2, [r3, #3]

    HAL_UART_Transmit(&huart5, writeData, 4, 100);
 8000fa8:	2364      	movs	r3, #100	@ 0x64
 8000faa:	2204      	movs	r2, #4
 8000fac:	4924      	ldr	r1, [pc, #144]	@ (8001040 <TMC2226_ReadRegister+0xc4>)
 8000fae:	4825      	ldr	r0, [pc, #148]	@ (8001044 <TMC2226_ReadRegister+0xc8>)
 8000fb0:	f004 fe28 	bl	8005c04 <HAL_UART_Transmit>
    HAL_Delay(10);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 fe79 	bl	8001cac <HAL_Delay>

    // Read response
	uart_status = HAL_UART_Receive(&huart5, readData, 8, 100);
 8000fba:	2364      	movs	r3, #100	@ 0x64
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	4922      	ldr	r1, [pc, #136]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 8000fc0:	4820      	ldr	r0, [pc, #128]	@ (8001044 <TMC2226_ReadRegister+0xc8>)
 8000fc2:	f004 fea8 	bl	8005d16 <HAL_UART_Receive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b20      	ldr	r3, [pc, #128]	@ (800104c <TMC2226_ReadRegister+0xd0>)
 8000fcc:	701a      	strb	r2, [r3, #0]
	if (uart_status != HAL_OK) {
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <TMC2226_ReadRegister+0xd0>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d002      	beq.n	8000fdc <TMC2226_ReadRegister+0x60>

		return -1; // Write failed
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	e02d      	b.n	8001038 <TMC2226_ReadRegister+0xbc>
	}


    // Byte 0: Sync nibble correct?
    if (readData[0] != 0x05) {
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b05      	cmp	r3, #5
 8000fe2:	d001      	beq.n	8000fe8 <TMC2226_ReadRegister+0x6c>
        return 2; // Invalid sync byte
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e027      	b.n	8001038 <TMC2226_ReadRegister+0xbc>
    }

    // Byte 1: Master address correct?
    if (readData[1] != 0xFF) {
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 8000fea:	785b      	ldrb	r3, [r3, #1]
 8000fec:	2bff      	cmp	r3, #255	@ 0xff
 8000fee:	d001      	beq.n	8000ff4 <TMC2226_ReadRegister+0x78>
        return 3; // Invalid master address
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e021      	b.n	8001038 <TMC2226_ReadRegister+0xbc>
    }

    // Byte 2: Address correct?
    if (readData[2] != reg) {
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 8000ff6:	789b      	ldrb	r3, [r3, #2]
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d001      	beq.n	8001002 <TMC2226_ReadRegister+0x86>
        return 4; // Register address mismatch
 8000ffe:	2304      	movs	r3, #4
 8001000:	e01a      	b.n	8001038 <TMC2226_ReadRegister+0xbc>
    }

    // Byte 7: CRC correct?
    if (readData[7] != calculateCRC(readData, 7)) {
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 8001004:	79dc      	ldrb	r4, [r3, #7]
 8001006:	2107      	movs	r1, #7
 8001008:	480f      	ldr	r0, [pc, #60]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 800100a:	f7ff ff39 	bl	8000e80 <calculateCRC>
 800100e:	4603      	mov	r3, r0
 8001010:	429c      	cmp	r4, r3
 8001012:	d001      	beq.n	8001018 <TMC2226_ReadRegister+0x9c>
        return 5; // CRC validation failed
 8001014:	2305      	movs	r3, #5
 8001016:	e00f      	b.n	8001038 <TMC2226_ReadRegister+0xbc>
    }

    // Extract 32-bit value from response (bytes 3-6)
    uint32_t value = ((uint32_t)readData[3] << 24) |
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 800101a:	78db      	ldrb	r3, [r3, #3]
 800101c:	061a      	lsls	r2, r3, #24
                     ((uint32_t)readData[4] << 16) |
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 8001020:	791b      	ldrb	r3, [r3, #4]
 8001022:	041b      	lsls	r3, r3, #16
    uint32_t value = ((uint32_t)readData[3] << 24) |
 8001024:	431a      	orrs	r2, r3
                     ((uint32_t)readData[5] << 8) |
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 8001028:	795b      	ldrb	r3, [r3, #5]
 800102a:	021b      	lsls	r3, r3, #8
                     ((uint32_t)readData[4] << 16) |
 800102c:	4313      	orrs	r3, r2
                     (uint32_t)readData[6];
 800102e:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <TMC2226_ReadRegister+0xcc>)
 8001030:	7992      	ldrb	r2, [r2, #6]
    uint32_t value = ((uint32_t)readData[3] << 24) |
 8001032:	4313      	orrs	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]

    return value;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	2000032c 	.word	0x2000032c
 8001044:	2000020c 	.word	0x2000020c
 8001048:	20000324 	.word	0x20000324
 800104c:	20000320 	.word	0x20000320

08001050 <TMC2226_OTP>:



void TMC2226_OTP(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0


    uint32_t otpProgValue = TMC2226_OTP_MAGIC | (OTP_INTERNAL_RSENSE_BYTE << 4) | OTP_INTERNAL_RSENSE_BIT;
 8001056:	f64b 5306 	movw	r3, #48390	@ 0xbd06
 800105a:	607b      	str	r3, [r7, #4]
    HAL_Delay(40);
 800105c:	2028      	movs	r0, #40	@ 0x28
 800105e:	f000 fe25 	bl	8001cac <HAL_Delay>
    TMC2226_WriteRegister(TMC2226_OTP_PROG, otpProgValue);
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	2004      	movs	r0, #4
 8001066:	f7ff ff49 	bl	8000efc <TMC2226_WriteRegister>
    HAL_Delay(15); // Wait for programming
 800106a:	200f      	movs	r0, #15
 800106c:	f000 fe1e 	bl	8001cac <HAL_Delay>


}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <TMC2226_Init>:

void TMC2226_Init(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
    HAL_Delay(100);  // Wait for driver to be ready
 800107e:	2064      	movs	r0, #100	@ 0x64
 8001080:	f000 fe14 	bl	8001cac <HAL_Delay>

    // Reset and configure GCONF register
    uint32_t gconf = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
    gconf |= (0 << 0);   // I_scale_analog = 1 (use VREF for current setting)
    gconf |= (1 << 1);   // internal_rsense = 1 (use internal sense resistors)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
    gconf |= (0 << 2);   // en_spreadcycle = 0 (StealthChop)
    gconf |= (0 << 3);   // shaft = 0 (normal direction)
    gconf |= (0 << 4);   // index_otpw = 0  INDEX shows the first microstep position of sequencer
    gconf |= (0 << 5);   // index_step = 0
    gconf |= (1 << 6);   // pdn_disable = 1 (UART control)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001096:	60fb      	str	r3, [r7, #12]
    //gconf |= (0 << 7);   // mstep_reg_select = 1 (microsteps via MS1,MS2)
    gconf |= (1 << 7);   // mstep_reg_select = 1 (microsteps via UART)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800109e:	60fb      	str	r3, [r7, #12]
    gconf |= (0 << 8);   // multistep_filt = 0
    gconf |= (0 << 9);   // test_mode = 0
	TMC2226_WriteRegister(TMC2226_GCONF, gconf);
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ff2a 	bl	8000efc <TMC2226_WriteRegister>
	HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f000 fdff 	bl	8001cac <HAL_Delay>
	gconf_readback = TMC2226_ReadRegister(TMC2226_GCONF);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff ff64 	bl	8000f7c <TMC2226_ReadRegister>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a18      	ldr	r2, [pc, #96]	@ (8001118 <TMC2226_Init+0xa0>)
 80010b8:	6013      	str	r3, [r2, #0]

	HAL_Delay(10);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f000 fdf6 	bl	8001cac <HAL_Delay>


	// Configure SENDDELAY in NODECONF (0x03)
	uint32_t nodeconf = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
	nodeconf |= (2 << 8);      // SENDDELAY = 2
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010ca:	60bb      	str	r3, [r7, #8]
	TMC2226_WriteRegister(TMC2226_NODECONF, nodeconf);
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	2003      	movs	r0, #3
 80010d0:	f7ff ff14 	bl	8000efc <TMC2226_WriteRegister>



    // Configure CHOPCONF register for basic StealthChop operation
    uint32_t chopconf = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
    chopconf |= (5 << 0);    // toff = 5 (chopper off time)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f043 0305 	orr.w	r3, r3, #5
 80010de:	607b      	str	r3, [r7, #4]
    chopconf |= (2 << 4);    // hstrt = 2 (hysteresis start)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	607b      	str	r3, [r7, #4]
    chopconf |= (0 << 7);    // hend = 0 (hysteresis end)
    chopconf |= (0 << 15);   // tbl = 0 (blanking time)
    chopconf |= (0 << 17);   // vsense = 0 (high sensitivity)
    chopconf |= (5 << 24);   // mres = 5 (8 microsteps)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 80010ee:	607b      	str	r3, [r7, #4]
    chopconf |= (1 << 28);   // intpol = 1 (interpolation)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	607b      	str	r3, [r7, #4]
    chopconf |= (0 << 29);   // dedge = 0

    chopconf |= (0 << 30);   // diss2g = 0
    chopconf |= (0 << 31);   // diss2vs = 0
    TMC2226_WriteRegister(TMC2226_CHOPCONF, chopconf);
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	206c      	movs	r0, #108	@ 0x6c
 80010fc:	f7ff fefe 	bl	8000efc <TMC2226_WriteRegister>

    //setup hold, run current
    TMC2226_SetCurrent(6,3);
 8001100:	2103      	movs	r1, #3
 8001102:	2006      	movs	r0, #6
 8001104:	f000 f80a 	bl	800111c <TMC2226_SetCurrent>



    HAL_Delay(10);
 8001108:	200a      	movs	r0, #10
 800110a:	f000 fdcf 	bl	8001cac <HAL_Delay>

}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000031c 	.word	0x2000031c

0800111c <TMC2226_SetCurrent>:

void TMC2226_SetCurrent(uint16_t run_current, uint16_t hold_current) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	460a      	mov	r2, r1
 8001126:	80fb      	strh	r3, [r7, #6]
 8001128:	4613      	mov	r3, r2
 800112a:	80bb      	strh	r3, [r7, #4]
    if (run_current > 31) run_current = 31;
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	2b1f      	cmp	r3, #31
 8001130:	d901      	bls.n	8001136 <TMC2226_SetCurrent+0x1a>
 8001132:	231f      	movs	r3, #31
 8001134:	80fb      	strh	r3, [r7, #6]
    if (hold_current > 31) hold_current = 31;
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	2b1f      	cmp	r3, #31
 800113a:	d901      	bls.n	8001140 <TMC2226_SetCurrent+0x24>
 800113c:	231f      	movs	r3, #31
 800113e:	80bb      	strh	r3, [r7, #4]

    uint32_t ihold_irun = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
    ihold_irun |= (hold_current << 0);  // IHOLD
 8001144:	88bb      	ldrh	r3, [r7, #4]
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
    ihold_irun |= (run_current << 8);   // IRUN
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
    ihold_irun |= (5 << 16);            // IHOLDDELAY
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 800115c:	60fb      	str	r3, [r7, #12]

    TMC2226_WriteRegister(TMC2226_IHOLD_IRUN, ihold_irun);
 800115e:	68f9      	ldr	r1, [r7, #12]
 8001160:	2010      	movs	r0, #16
 8001162:	f7ff fecb 	bl	8000efc <TMC2226_WriteRegister>

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <setupMotor>:

void setupMotor(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    // Power-on reset sequence
    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, GPIO_PIN_SET);  // Disable first
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117a:	481b      	ldr	r0, [pc, #108]	@ (80011e8 <setupMotor+0x78>)
 800117c:	f001 f90c 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_Delay(10);  // Wait 10ms
 8001180:	200a      	movs	r0, #10
 8001182:	f000 fd93 	bl	8001cac <HAL_Delay>


    // Configure pins before enabling
    HAL_GPIO_WritePin(PDN_UART_TX_PORT, PDN_UART_TX_PIN, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118c:	4817      	ldr	r0, [pc, #92]	@ (80011ec <setupMotor+0x7c>)
 800118e:	f001 f903 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PDN_UART_RX_PORT, PDN_UART_RX_PIN, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2104      	movs	r1, #4
 8001196:	4814      	ldr	r0, [pc, #80]	@ (80011e8 <setupMotor+0x78>)
 8001198:	f001 f8fe 	bl	8002398 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 800119c:	2064      	movs	r0, #100	@ 0x64
 800119e:	f000 fd85 	bl	8001cac <HAL_Delay>

    // Configure pins before enabling
    HAL_GPIO_WritePin(PDN_UART_TX_PORT, PDN_UART_TX_PIN, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a8:	4810      	ldr	r0, [pc, #64]	@ (80011ec <setupMotor+0x7c>)
 80011aa:	f001 f8f5 	bl	8002398 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PDN_UART_RX_PORT, PDN_UART_RX_PIN, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	2104      	movs	r1, #4
 80011b2:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <setupMotor+0x78>)
 80011b4:	f001 f8f0 	bl	8002398 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 80011b8:	2064      	movs	r0, #100	@ 0x64
 80011ba:	f000 fd77 	bl	8001cac <HAL_Delay>

     TMC2226_Init();
 80011be:	f7ff ff5b 	bl	8001078 <TMC2226_Init>

     TMC2226_OTP();
 80011c2:	f7ff ff45 	bl	8001050 <TMC2226_OTP>

    // Set microstepping without UART via MS1 and MS2 pins
    //setMicrostepping(0, 0);

    enableStealthMode();
 80011c6:	f000 f813 	bl	80011f0 <enableStealthMode>
    //enablespreadcyclemode();

    HAL_Delay(1);  // Short delay before enabling
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 fd6e 	bl	8001cac <HAL_Delay>

    // enable the driver
    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011d6:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <setupMotor+0x78>)
 80011d8:	f001 f8de 	bl	8002398 <HAL_GPIO_WritePin>


    HAL_Delay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f000 fd65 	bl	8001cac <HAL_Delay>


}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	48000800 	.word	0x48000800
 80011ec:	48000c00 	.word	0x48000c00

080011f0 <enableStealthMode>:


}

void enableStealthMode(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(SPREAD_PORT, SPREAD_PIN, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fe:	f001 f8cb 	bl	8002398 <HAL_GPIO_WritePin>

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <rotateMotor>:

}


void rotateMotor(int steps, uint8_t clockwise)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]


    // Set motor direction
    if(clockwise)
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <rotateMotor+0x20>
    {
        HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 800121a:	2201      	movs	r2, #1
 800121c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001220:	4818      	ldr	r0, [pc, #96]	@ (8001284 <rotateMotor+0x7c>)
 8001222:	f001 f8b9 	bl	8002398 <HAL_GPIO_WritePin>
 8001226:	e005      	b.n	8001234 <rotateMotor+0x2c>
    }
    else
    {
        HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800122e:	4815      	ldr	r0, [pc, #84]	@ (8001284 <rotateMotor+0x7c>)
 8001230:	f001 f8b2 	bl	8002398 <HAL_GPIO_WritePin>
    }

    // Step the motor
    for(int i = 0; i < steps; i++)
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e01a      	b.n	8001270 <rotateMotor+0x68>
    {
        HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001240:	4810      	ldr	r0, [pc, #64]	@ (8001284 <rotateMotor+0x7c>)
 8001242:	f001 f8a9 	bl	8002398 <HAL_GPIO_WritePin>

        microsecond_delay(time1);
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <rotateMotor+0x80>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f873 	bl	8001338 <microsecond_delay>
        HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001258:	480a      	ldr	r0, [pc, #40]	@ (8001284 <rotateMotor+0x7c>)
 800125a:	f001 f89d 	bl	8002398 <HAL_GPIO_WritePin>

        microsecond_delay(time2);
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <rotateMotor+0x84>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f000 f867 	bl	8001338 <microsecond_delay>
    for(int i = 0; i < steps; i++)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbe0      	blt.n	800123a <rotateMotor+0x32>
    }

}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	48000800 	.word	0x48000800
 8001288:	20000008 	.word	0x20000008
 800128c:	2000000c 	.word	0x2000000c

08001290 <homePosition>:

void homePosition(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
    GPIO_PinState caseState;
    caseState = HAL_GPIO_ReadPin(CASE_PORT, CASE_PIN);
 8001296:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129a:	4811      	ldr	r0, [pc, #68]	@ (80012e0 <homePosition+0x50>)
 800129c:	f001 f864 	bl	8002368 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]


   if(caseState == GPIO_PIN_SET)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d105      	bne.n	80012b6 <homePosition+0x26>
   {
	   rotateMotor(300, 1);
 80012aa:	2101      	movs	r1, #1
 80012ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012b0:	f7ff ffaa 	bl	8001208 <rotateMotor>
	   printf("Home position reached.\r\n");
       currentState = 255;

   }

}
 80012b4:	e00f      	b.n	80012d6 <homePosition+0x46>
    else if(caseState == GPIO_PIN_RESET)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10c      	bne.n	80012d6 <homePosition+0x46>
	   rotateMotor(0, 1);
 80012bc:	2101      	movs	r1, #1
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff ffa2 	bl	8001208 <rotateMotor>
	   HAL_Delay(50);
 80012c4:	2032      	movs	r0, #50	@ 0x32
 80012c6:	f000 fcf1 	bl	8001cac <HAL_Delay>
	   printf("Home position reached.\r\n");
 80012ca:	4806      	ldr	r0, [pc, #24]	@ (80012e4 <homePosition+0x54>)
 80012cc:	f006 fa28 	bl	8007720 <puts>
       currentState = 255;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <homePosition+0x58>)
 80012d2:	22ff      	movs	r2, #255	@ 0xff
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	48000400 	.word	0x48000400
 80012e4:	08008498 	.word	0x08008498
 80012e8:	20000000 	.word	0x20000000

080012ec <lampOn>:


void lampOn(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

    // ARR = 999, PSC = 79 ,pwm freq = 1KHZ
    //uint32_t value = (duty_cycle * 1000) / 100;
    //TIM3->CCR2 = 999
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012f0:	2104      	movs	r1, #4
 80012f2:	4807      	ldr	r0, [pc, #28]	@ (8001310 <lampOn+0x24>)
 80012f4:	f003 fba4 	bl	8004a40 <HAL_TIM_PWM_Start>
    // Set the PWM duty cycle
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 999);
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <lampOn+0x24>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001300:	639a      	str	r2, [r3, #56]	@ 0x38

    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001302:	2104      	movs	r1, #4
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <lampOn+0x24>)
 8001306:	f003 fca1 	bl	8004c4c <HAL_TIM_PWM_Stop>
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000ec 	.word	0x200000ec

08001314 <lampOff>:

void lampOff(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0


	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001318:	2104      	movs	r1, #4
 800131a:	4806      	ldr	r0, [pc, #24]	@ (8001334 <lampOff+0x20>)
 800131c:	f003 fb90 	bl	8004a40 <HAL_TIM_PWM_Start>
    // Set the PWM duty cycle
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <lampOff+0x20>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2200      	movs	r2, #0
 8001326:	639a      	str	r2, [r3, #56]	@ 0x38

    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001328:	2104      	movs	r1, #4
 800132a:	4802      	ldr	r0, [pc, #8]	@ (8001334 <lampOff+0x20>)
 800132c:	f003 fc8e 	bl	8004c4c <HAL_TIM_PWM_Stop>
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000ec 	.word	0x200000ec

08001338 <microsecond_delay>:

    return 0;
}

void microsecond_delay(uint16_t microseconds)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]


	__HAL_TIM_SET_COUNTER(&htim16, 0);
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <microsecond_delay+0x34>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24
	 HAL_TIM_Base_Start(&htim16);
 800134a:	4808      	ldr	r0, [pc, #32]	@ (800136c <microsecond_delay+0x34>)
 800134c:	f003 fa88 	bl	8004860 <HAL_TIM_Base_Start>

    while (__HAL_TIM_GET_COUNTER(&htim16) < microseconds);
 8001350:	bf00      	nop
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <microsecond_delay+0x34>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	429a      	cmp	r2, r3
 800135c:	d3f9      	bcc.n	8001352 <microsecond_delay+0x1a>
    HAL_TIM_Base_Stop(&htim16);
 800135e:	4803      	ldr	r0, [pc, #12]	@ (800136c <microsecond_delay+0x34>)
 8001360:	f003 fae6 	bl	8004930 <HAL_TIM_Base_Stop>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000138 	.word	0x20000138

08001370 <enableBuffers>:
int millivolt;
char snum[7];


HAL_StatusTypeDef enableBuffers(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    // Enable signal buffer
    HAL_GPIO_WritePin(SIG_BUF_EN_PORT, SIG_BUF_EN_PIN, GPIO_PIN_SET);
 8001374:	2201      	movs	r2, #1
 8001376:	2110      	movs	r1, #16
 8001378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137c:	f001 f80c 	bl	8002398 <HAL_GPIO_WritePin>

    // Enable I2C buffer
    HAL_GPIO_WritePin(I2C_BUF_EN_PORT, I2C_BUF_EN_PIN, GPIO_PIN_SET);
 8001380:	2201      	movs	r2, #1
 8001382:	2140      	movs	r1, #64	@ 0x40
 8001384:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001388:	f001 f806 	bl	8002398 <HAL_GPIO_WritePin>

    // Small delay to allow buffers to stabilize
    HAL_Delay(1);
 800138c:	2001      	movs	r0, #1
 800138e:	f000 fc8d 	bl	8001cac <HAL_Delay>

    return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}

08001398 <checkEOS>:

HAL_StatusTypeDef checkEOS(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
    // Check End of Scan signal
    GPIO_PinState eosState = HAL_GPIO_ReadPin(EOS_PORT, EOS_PIN);
 800139e:	2101      	movs	r1, #1
 80013a0:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <checkEOS+0x28>)
 80013a2:	f000 ffe1 	bl	8002368 <HAL_GPIO_ReadPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
    return (eosState == GPIO_PIN_SET) ? HAL_OK : HAL_ERROR;
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	48000800 	.word	0x48000800

080013c4 <setupSensor>:



void setupSensor(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

    static uint8_t initialized = 0;  // Static flag to track initialization

    if (initialized) {
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <setupSensor+0x44>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d118      	bne.n	8001402 <setupSensor+0x3e>
        return;  // Already initialized, don't print again
    }
    // Enable buffers first
    enableBuffers();
 80013d0:	f7ff ffce 	bl	8001370 <enableBuffers>

    //initialize adc
    initializeADC1115();
 80013d4:	f000 f822 	bl	800141c <initializeADC1115>

    // ST pin as OUTPUT, initially HIGH
    HAL_GPIO_WritePin(ST_PORT, ST_PIN, GPIO_PIN_SET);
 80013d8:	2201      	movs	r2, #1
 80013da:	2102      	movs	r1, #2
 80013dc:	480b      	ldr	r0, [pc, #44]	@ (800140c <setupSensor+0x48>)
 80013de:	f000 ffdb 	bl	8002398 <HAL_GPIO_WritePin>

    // CLK pin as OUTPUT, initially LOW
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013e8:	4809      	ldr	r0, [pc, #36]	@ (8001410 <setupSensor+0x4c>)
 80013ea:	f000 ffd5 	bl	8002398 <HAL_GPIO_WritePin>

    // Initialize data available flag
    dataAvailable = 0;
 80013ee:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <setupSensor+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    packetIndex = 0;
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <setupSensor+0x54>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	801a      	strh	r2, [r3, #0]
    initialized = 1;
 80013fa:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <setupSensor+0x44>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e000      	b.n	8001404 <setupSensor+0x40>
        return;  // Already initialized, don't print again
 8001402:	bf00      	nop

}
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000035c 	.word	0x2000035c
 800140c:	48000800 	.word	0x48000800
 8001410:	48000400 	.word	0x48000400
 8001414:	20000348 	.word	0x20000348
 8001418:	2000034a 	.word	0x2000034a

0800141c <initializeADC1115>:

void initializeADC1115(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

    // Initialize ADS1115 with I2C parameters
    ADS1115(&i2c, &hi2c1, ADS_ADDR_GND);
 8001420:	2248      	movs	r2, #72	@ 0x48
 8001422:	4905      	ldr	r1, [pc, #20]	@ (8001438 <initializeADC1115+0x1c>)
 8001424:	4805      	ldr	r0, [pc, #20]	@ (800143c <initializeADC1115+0x20>)
 8001426:	f7ff f8fe 	bl	8000626 <ADS1115>

    // Set gain
    ADSsetGain(&i2c, GAIN_ONE);
 800142a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800142e:	4803      	ldr	r0, [pc, #12]	@ (800143c <initializeADC1115+0x20>)
 8001430:	f7ff f919 	bl	8000666 <ADSsetGain>

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000098 	.word	0x20000098
 800143c:	2000034c 	.word	0x2000034c

08001440 <readADC1115>:

uint16_t readADC1115(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0


    uint16_t adcValue = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	80fb      	strh	r3, [r7, #6]

    // Read 2 bytes from ADC
    adcValue = ADSreadADC_SingleEnded(&i2c, 1);
 800144a:	2101      	movs	r1, #1
 800144c:	4804      	ldr	r0, [pc, #16]	@ (8001460 <readADC1115+0x20>)
 800144e:	f7ff f919 	bl	8000684 <ADSreadADC_SingleEnded>
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]



    return adcValue;
 8001456:	88fb      	ldrh	r3, [r7, #6]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000034c 	.word	0x2000034c

08001464 <acquireSpectra>:

void acquireSpectra(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
    // delayTime (dt) = 52microseconds, pixelread = 0
    uint32_t dt = 52;
 800146a:	2334      	movs	r3, #52	@ 0x34
 800146c:	607b      	str	r3, [r7, #4]
    int pixelread = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]



    // Main acquisition loop - Discard first loop to avoid noisy acquisition, acquire from second loop
	for (int loop = 0; loop < 2; loop++) {
 8001472:	2300      	movs	r3, #0
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	e083      	b.n	8001580 <acquireSpectra+0x11c>
		// 3 clock cycles
		for (int clk = 0; clk < 3; clk++) {
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e007      	b.n	800148e <acquireSpectra+0x2a>
			microsecond_delay(dt);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	b29b      	uxth	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff58 	bl	8001338 <microsecond_delay>
		for (int clk = 0; clk < 3; clk++) {
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	2b02      	cmp	r3, #2
 8001492:	ddf4      	ble.n	800147e <acquireSpectra+0x1a>
		}

		// CLK, LOW → dt
		HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800149a:	4842      	ldr	r0, [pc, #264]	@ (80015a4 <acquireSpectra+0x140>)
 800149c:	f000 ff7c 	bl	8002398 <HAL_GPIO_WritePin>
		microsecond_delay(dt);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff47 	bl	8001338 <microsecond_delay>

		// ST, LOW
		HAL_GPIO_WritePin(ST_PORT, ST_PIN, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2102      	movs	r1, #2
 80014ae:	483e      	ldr	r0, [pc, #248]	@ (80015a8 <acquireSpectra+0x144>)
 80014b0:	f000 ff72 	bl	8002398 <HAL_GPIO_WritePin>
		// 1 clock cycle
		microsecond_delay(dt);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff3d 	bl	8001338 <microsecond_delay>

		// ST, HIGH
		HAL_GPIO_WritePin(ST_PORT, ST_PIN, GPIO_PIN_SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2102      	movs	r1, #2
 80014c2:	4839      	ldr	r0, [pc, #228]	@ (80015a8 <acquireSpectra+0x144>)
 80014c4:	f000 ff68 	bl	8002398 <HAL_GPIO_WritePin>
		// 1 clock cycle
		microsecond_delay(dt);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff33 	bl	8001338 <microsecond_delay>

		// 1 clock cycle
		microsecond_delay(dt);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff2e 	bl	8001338 <microsecond_delay>

		for (int channel = 0; channel < CHANNELS; channel++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	e02f      	b.n	8001542 <acquireSpectra+0xde>
			// CLK, HIGH
			HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014e8:	482e      	ldr	r0, [pc, #184]	@ (80015a4 <acquireSpectra+0x140>)
 80014ea:	f000 ff55 	bl	8002398 <HAL_GPIO_WritePin>

			// Read Video, store pixel[Channel] (only in second loop to discard first loop)
			if (loop == 1) {
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d10a      	bne.n	800150a <acquireSpectra+0xa6>
				spectra[channel] = readADC1115();
 80014f4:	f7ff ffa4 	bl	8001440 <readADC1115>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4a2b      	ldr	r2, [pc, #172]	@ (80015ac <acquireSpectra+0x148>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pixelread++;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3301      	adds	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
			}

			// CLK, LOW → dt
			HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001510:	4824      	ldr	r0, [pc, #144]	@ (80015a4 <acquireSpectra+0x140>)
 8001512:	f000 ff41 	bl	8002398 <HAL_GPIO_WritePin>
			microsecond_delay(dt);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	b29b      	uxth	r3, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ff0c 	bl	8001338 <microsecond_delay>

			// 2 clock cycles
			for (int clk = 0; clk < 2; clk++) {
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e007      	b.n	8001536 <acquireSpectra+0xd2>
				microsecond_delay(dt);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	b29b      	uxth	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff04 	bl	8001338 <microsecond_delay>
			for (int clk = 0; clk < 2; clk++) {
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	3301      	adds	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b01      	cmp	r3, #1
 800153a:	ddf4      	ble.n	8001526 <acquireSpectra+0xc2>
		for (int channel = 0; channel < CHANNELS; channel++) {
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	3301      	adds	r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2b07      	cmp	r3, #7
 8001546:	ddcc      	ble.n	80014e2 <acquireSpectra+0x7e>
			}
		}

		// 5 clock cycles between loops
		for (int clk = 0; clk < 5; clk++) {
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	e007      	b.n	800155e <acquireSpectra+0xfa>
			microsecond_delay(dt);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fef0 	bl	8001338 <microsecond_delay>
		for (int clk = 0; clk < 5; clk++) {
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3301      	adds	r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b04      	cmp	r3, #4
 8001562:	ddf4      	ble.n	800154e <acquireSpectra+0xea>
		}

		// Check EOS signal after first loop
		if (loop == 0)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d107      	bne.n	800157a <acquireSpectra+0x116>
		{
			if (checkEOS() != HAL_OK)
 800156a:	f7ff ff15 	bl	8001398 <checkEOS>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <acquireSpectra+0x116>
			{
				printf("Warning: EOS signal not detected\r\n");
 8001574:	480e      	ldr	r0, [pc, #56]	@ (80015b0 <acquireSpectra+0x14c>)
 8001576:	f006 f8d3 	bl	8007720 <puts>
	for (int loop = 0; loop < 2; loop++) {
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	3301      	adds	r3, #1
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f77f af78 	ble.w	8001478 <acquireSpectra+0x14>
			}
		}
	}

    // Set data available flag
    dataAvailable = 1;
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <acquireSpectra+0x150>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
    packetIndex = 0;
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <acquireSpectra+0x154>)
 8001590:	2200      	movs	r2, #0
 8001592:	801a      	strh	r2, [r3, #0]

    printf("Spectra acquisition complete - %d pixels read\r\n", pixelread);
 8001594:	69f9      	ldr	r1, [r7, #28]
 8001596:	4809      	ldr	r0, [pc, #36]	@ (80015bc <acquireSpectra+0x158>)
 8001598:	f006 f85a 	bl	8007650 <iprintf>
}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800
 80015ac:	20000338 	.word	0x20000338
 80015b0:	080084b0 	.word	0x080084b0
 80015b4:	20000348 	.word	0x20000348
 80015b8:	2000034a 	.word	0x2000034a
 80015bc:	080084d4 	.word	0x080084d4

080015c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_MspInit+0x44>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <HAL_MspInit+0x44>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <HAL_MspInit+0x44>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_MspInit+0x44>)
 80015e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e2:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <HAL_MspInit+0x44>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_MspInit+0x44>)
 80015ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000

08001608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0ac      	sub	sp, #176	@ 0xb0
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2288      	movs	r2, #136	@ 0x88
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f006 f959 	bl	80078e0 <memset>
  if(hi2c->Instance==I2C1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <HAL_I2C_MspInit+0xb0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d13a      	bne.n	80016ae <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001638:	2340      	movs	r3, #64	@ 0x40
 800163a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800163c:	2300      	movs	r3, #0
 800163e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4618      	mov	r0, r3
 8001646:	f002 fbf7 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001650:	f7ff fc10 	bl	8000e74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_I2C_MspInit+0xb4>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001658:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <HAL_I2C_MspInit+0xb4>)
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_I2C_MspInit+0xb4>)
 8001662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800166c:	23c0      	movs	r3, #192	@ 0xc0
 800166e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001672:	2312      	movs	r3, #18
 8001674:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001684:	2304      	movs	r3, #4
 8001686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800168e:	4619      	mov	r1, r3
 8001690:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <HAL_I2C_MspInit+0xb8>)
 8001692:	f000 fcbf 	bl	8002014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_I2C_MspInit+0xb4>)
 8001698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169a:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <HAL_I2C_MspInit+0xb4>)
 800169c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_I2C_MspInit+0xb4>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016ae:	bf00      	nop
 80016b0:	37b0      	adds	r7, #176	@ 0xb0
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40005400 	.word	0x40005400
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48000400 	.word	0x48000400

080016c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a13      	ldr	r2, [pc, #76]	@ (8001720 <HAL_TIM_Base_MspInit+0x5c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10c      	bne.n	80016f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <HAL_TIM_Base_MspInit+0x60>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016da:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <HAL_TIM_Base_MspInit+0x60>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_TIM_Base_MspInit+0x60>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80016ee:	e010      	b.n	8001712 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001728 <HAL_TIM_Base_MspInit+0x64>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d10b      	bne.n	8001712 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <HAL_TIM_Base_MspInit+0x60>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fe:	4a09      	ldr	r2, [pc, #36]	@ (8001724 <HAL_TIM_Base_MspInit+0x60>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001704:	6613      	str	r3, [r2, #96]	@ 0x60
 8001706:	4b07      	ldr	r3, [pc, #28]	@ (8001724 <HAL_TIM_Base_MspInit+0x60>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40000400 	.word	0x40000400
 8001724:	40021000 	.word	0x40021000
 8001728:	40014400 	.word	0x40014400

0800172c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a11      	ldr	r2, [pc, #68]	@ (8001790 <HAL_TIM_MspPostInit+0x64>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d11c      	bne.n	8001788 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_TIM_MspPostInit+0x68>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <HAL_TIM_MspPostInit+0x68>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_TIM_MspPostInit+0x68>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001766:	2380      	movs	r3, #128	@ 0x80
 8001768:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001776:	2302      	movs	r3, #2
 8001778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001784:	f000 fc46 	bl	8002014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40000400 	.word	0x40000400
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0b0      	sub	sp, #192	@ 0xc0
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b4:	2288      	movs	r2, #136	@ 0x88
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f006 f891 	bl	80078e0 <memset>
  if(huart->Instance==UART4)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a77      	ldr	r2, [pc, #476]	@ (80019a0 <HAL_UART_MspInit+0x208>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d144      	bne.n	8001852 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80017c8:	2308      	movs	r3, #8
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fb2f 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017e0:	f7ff fb48 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017e4:	4b6f      	ldr	r3, [pc, #444]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e8:	4a6e      	ldr	r2, [pc, #440]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 80017ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80017f0:	4b6c      	ldr	r3, [pc, #432]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017f8:	623b      	str	r3, [r7, #32]
 80017fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fc:	4b69      	ldr	r3, [pc, #420]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 80017fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001800:	4a68      	ldr	r2, [pc, #416]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001808:	4b66      	ldr	r3, [pc, #408]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001814:	2303      	movs	r3, #3
 8001816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181a:	2302      	movs	r3, #2
 800181c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800182c:	2308      	movs	r3, #8
 800182e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183c:	f000 fbea 	bl	8002014 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2100      	movs	r1, #0
 8001844:	2034      	movs	r0, #52	@ 0x34
 8001846:	f000 fb30 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800184a:	2034      	movs	r0, #52	@ 0x34
 800184c:	f000 fb49 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001850:	e0a2      	b.n	8001998 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==UART5)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a54      	ldr	r2, [pc, #336]	@ (80019a8 <HAL_UART_MspInit+0x210>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d15d      	bne.n	8001918 <HAL_UART_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800185c:	2310      	movs	r3, #16
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001860:	2300      	movs	r3, #0
 8001862:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001868:	4618      	mov	r0, r3
 800186a:	f002 fae5 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001874:	f7ff fafe 	bl	8000e74 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001878:	4b4a      	ldr	r3, [pc, #296]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187c:	4a49      	ldr	r2, [pc, #292]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 800187e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001882:	6593      	str	r3, [r2, #88]	@ 0x58
 8001884:	4b47      	ldr	r3, [pc, #284]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001890:	4b44      	ldr	r3, [pc, #272]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 8001892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001894:	4a43      	ldr	r2, [pc, #268]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 8001896:	f043 0304 	orr.w	r3, r3, #4
 800189a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189c:	4b41      	ldr	r3, [pc, #260]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a8:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ac:	4a3d      	ldr	r2, [pc, #244]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 80018ae:	f043 0308 	orr.w	r3, r3, #8
 80018b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b4:	4b3b      	ldr	r3, [pc, #236]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c8:	2312      	movs	r3, #18
 80018ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80018da:	2308      	movs	r3, #8
 80018dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80018e4:	4619      	mov	r1, r3
 80018e6:	4831      	ldr	r0, [pc, #196]	@ (80019ac <HAL_UART_MspInit+0x214>)
 80018e8:	f000 fb94 	bl	8002014 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018ec:	2304      	movs	r3, #4
 80018ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001904:	2308      	movs	r3, #8
 8001906:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800190e:	4619      	mov	r1, r3
 8001910:	4827      	ldr	r0, [pc, #156]	@ (80019b0 <HAL_UART_MspInit+0x218>)
 8001912:	f000 fb7f 	bl	8002014 <HAL_GPIO_Init>
}
 8001916:	e03f      	b.n	8001998 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART3)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a25      	ldr	r2, [pc, #148]	@ (80019b4 <HAL_UART_MspInit+0x21c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d13a      	bne.n	8001998 <HAL_UART_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001922:	2304      	movs	r3, #4
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001926:	2300      	movs	r3, #0
 8001928:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fa82 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800193a:	f7ff fa9b 	bl	8000e74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800193e:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	4a18      	ldr	r2, [pc, #96]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001948:	6593      	str	r3, [r2, #88]	@ 0x58
 800194a:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <HAL_UART_MspInit+0x20c>)
 8001964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800196e:	2330      	movs	r3, #48	@ 0x30
 8001970:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001986:	2307      	movs	r3, #7
 8001988:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001990:	4619      	mov	r1, r3
 8001992:	4806      	ldr	r0, [pc, #24]	@ (80019ac <HAL_UART_MspInit+0x214>)
 8001994:	f000 fb3e 	bl	8002014 <HAL_GPIO_Init>
}
 8001998:	bf00      	nop
 800199a:	37c0      	adds	r7, #192	@ 0xc0
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40004c00 	.word	0x40004c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40005000 	.word	0x40005000
 80019ac:	48000800 	.word	0x48000800
 80019b0:	48000c00 	.word	0x48000c00
 80019b4:	40004800 	.word	0x40004800

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <NMI_Handler+0x4>

080019c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <HardFault_Handler+0x4>

080019c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <MemManage_Handler+0x4>

080019d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <UsageFault_Handler+0x4>

080019e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f000 f92d 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a1c:	4802      	ldr	r0, [pc, #8]	@ (8001a28 <UART4_IRQHandler+0x10>)
 8001a1e:	f004 fa8f 	bl	8005f40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000184 	.word	0x20000184

08001a2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3e:	f3af 8000 	nop.w
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
  }

  return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_isatty>:

int _isatty(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ad8:	4a14      	ldr	r2, [pc, #80]	@ (8001b2c <_sbrk+0x5c>)
 8001ada:	4b15      	ldr	r3, [pc, #84]	@ (8001b30 <_sbrk+0x60>)
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <_sbrk+0x64>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	@ (8001b38 <_sbrk+0x68>)
 8001af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d207      	bcs.n	8001b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b00:	f005 ff3c 	bl	800797c <__errno>
 8001b04:	4603      	mov	r3, r0
 8001b06:	220c      	movs	r2, #12
 8001b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e009      	b.n	8001b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <_sbrk+0x64>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <_sbrk+0x64>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20018000 	.word	0x20018000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	20000360 	.word	0x20000360
 8001b38:	200004b8 	.word	0x200004b8

08001b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b40:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <SystemInit+0x20>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <SystemInit+0x20>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b64:	f7ff ffea 	bl	8001b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b68:	480c      	ldr	r0, [pc, #48]	@ (8001b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b6a:	490d      	ldr	r1, [pc, #52]	@ (8001ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba4 <LoopForever+0xe>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b70:	e002      	b.n	8001b78 <LoopCopyDataInit>

08001b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b76:	3304      	adds	r3, #4

08001b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b7c:	d3f9      	bcc.n	8001b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b80:	4c0a      	ldr	r4, [pc, #40]	@ (8001bac <LoopForever+0x16>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b84:	e001      	b.n	8001b8a <LoopFillZerobss>

08001b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b88:	3204      	adds	r2, #4

08001b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b8c:	d3fb      	bcc.n	8001b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f005 fefb 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b92:	f7fe fe0d 	bl	80007b0 <main>

08001b96 <LoopForever>:

LoopForever:
    b LoopForever
 8001b96:	e7fe      	b.n	8001b96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ba4:	080085ec 	.word	0x080085ec
  ldr r2, =_sbss
 8001ba8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bac:	200004b4 	.word	0x200004b4

08001bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>
	...

08001bb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_Init+0x3c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <HAL_Init+0x3c>)
 8001bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bca:	2003      	movs	r0, #3
 8001bcc:	f000 f962 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f000 f80f 	bl	8001bf4 <HAL_InitTick>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	71fb      	strb	r3, [r7, #7]
 8001be0:	e001      	b.n	8001be6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be2:	f7ff fced 	bl	80015c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be6:	79fb      	ldrb	r3, [r7, #7]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40022000 	.word	0x40022000

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c00:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <HAL_InitTick+0x6c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d023      	beq.n	8001c50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c08:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <HAL_InitTick+0x70>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_InitTick+0x6c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f000 f96d 	bl	8001efe <HAL_SYSTICK_Config>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10f      	bne.n	8001c4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d809      	bhi.n	8001c44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f937 	bl	8001eaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c68 <HAL_InitTick+0x74>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e007      	b.n	8001c54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	e004      	b.n	8001c54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	e001      	b.n	8001c54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000018 	.word	0x20000018
 8001c64:	20000010 	.word	0x20000010
 8001c68:	20000014 	.word	0x20000014

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000018 	.word	0x20000018
 8001c90:	20000364 	.word	0x20000364

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000364 	.word	0x20000364

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff ffee 	bl	8001c94 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000018 	.word	0x20000018

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	@ (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	@ (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	@ (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	@ (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	@ 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	@ 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff3e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff8e 	bl	8001de8 <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5d 	bl	8001d94 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff31 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa2 	bl	8001e50 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b085      	sub	sp, #20
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d008      	beq.n	8001f40 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e022      	b.n	8001f86 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 020e 	bic.w	r2, r2, #14
 8001f4e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	f003 021c 	and.w	r2, r3, #28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d005      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2204      	movs	r2, #4
 8001fae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e029      	b.n	800200a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 020e 	bic.w	r2, r2, #14
 8001fc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f003 021c 	and.w	r2, r3, #28
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
    }
  }
  return status;
 800200a:	7bfb      	ldrb	r3, [r7, #15]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002022:	e17f      	b.n	8002324 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8171 	beq.w	800231e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d005      	beq.n	8002054 <HAL_GPIO_Init+0x40>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d130      	bne.n	80020b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	2203      	movs	r2, #3
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	4013      	ands	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800208a:	2201      	movs	r2, #1
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f003 0201 	and.w	r2, r3, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d118      	bne.n	80020f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	08db      	lsrs	r3, r3, #3
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	6939      	ldr	r1, [r7, #16]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4013      	ands	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80ac 	beq.w	800231e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002344 <HAL_GPIO_Init+0x330>)
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002344 <HAL_GPIO_Init+0x330>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002344 <HAL_GPIO_Init+0x330>)
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021de:	4a5a      	ldr	r2, [pc, #360]	@ (8002348 <HAL_GPIO_Init+0x334>)
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	3302      	adds	r3, #2
 80021e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	220f      	movs	r2, #15
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4013      	ands	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002208:	d025      	beq.n	8002256 <HAL_GPIO_Init+0x242>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4f      	ldr	r2, [pc, #316]	@ (800234c <HAL_GPIO_Init+0x338>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01f      	beq.n	8002252 <HAL_GPIO_Init+0x23e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4e      	ldr	r2, [pc, #312]	@ (8002350 <HAL_GPIO_Init+0x33c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d019      	beq.n	800224e <HAL_GPIO_Init+0x23a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4d      	ldr	r2, [pc, #308]	@ (8002354 <HAL_GPIO_Init+0x340>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_GPIO_Init+0x236>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4c      	ldr	r2, [pc, #304]	@ (8002358 <HAL_GPIO_Init+0x344>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00d      	beq.n	8002246 <HAL_GPIO_Init+0x232>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4b      	ldr	r2, [pc, #300]	@ (800235c <HAL_GPIO_Init+0x348>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d007      	beq.n	8002242 <HAL_GPIO_Init+0x22e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4a      	ldr	r2, [pc, #296]	@ (8002360 <HAL_GPIO_Init+0x34c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <HAL_GPIO_Init+0x22a>
 800223a:	2306      	movs	r3, #6
 800223c:	e00c      	b.n	8002258 <HAL_GPIO_Init+0x244>
 800223e:	2307      	movs	r3, #7
 8002240:	e00a      	b.n	8002258 <HAL_GPIO_Init+0x244>
 8002242:	2305      	movs	r3, #5
 8002244:	e008      	b.n	8002258 <HAL_GPIO_Init+0x244>
 8002246:	2304      	movs	r3, #4
 8002248:	e006      	b.n	8002258 <HAL_GPIO_Init+0x244>
 800224a:	2303      	movs	r3, #3
 800224c:	e004      	b.n	8002258 <HAL_GPIO_Init+0x244>
 800224e:	2302      	movs	r3, #2
 8002250:	e002      	b.n	8002258 <HAL_GPIO_Init+0x244>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x244>
 8002256:	2300      	movs	r3, #0
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	f002 0203 	and.w	r2, r2, #3
 800225e:	0092      	lsls	r2, r2, #2
 8002260:	4093      	lsls	r3, r2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002268:	4937      	ldr	r1, [pc, #220]	@ (8002348 <HAL_GPIO_Init+0x334>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002276:	4b3b      	ldr	r3, [pc, #236]	@ (8002364 <HAL_GPIO_Init+0x350>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	43db      	mvns	r3, r3
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800229a:	4a32      	ldr	r2, [pc, #200]	@ (8002364 <HAL_GPIO_Init+0x350>)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022a0:	4b30      	ldr	r3, [pc, #192]	@ (8002364 <HAL_GPIO_Init+0x350>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022c4:	4a27      	ldr	r2, [pc, #156]	@ (8002364 <HAL_GPIO_Init+0x350>)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022ca:	4b26      	ldr	r3, [pc, #152]	@ (8002364 <HAL_GPIO_Init+0x350>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002364 <HAL_GPIO_Init+0x350>)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_GPIO_Init+0x350>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4013      	ands	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002318:	4a12      	ldr	r2, [pc, #72]	@ (8002364 <HAL_GPIO_Init+0x350>)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa22 f303 	lsr.w	r3, r2, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	f47f ae78 	bne.w	8002024 <HAL_GPIO_Init+0x10>
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	48000400 	.word	0x48000400
 8002350:	48000800 	.word	0x48000800
 8002354:	48000c00 	.word	0x48000c00
 8002358:	48001000 	.word	0x48001000
 800235c:	48001400 	.word	0x48001400
 8002360:	48001800 	.word	0x48001800
 8002364:	40010400 	.word	0x40010400

08002368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	887b      	ldrh	r3, [r7, #2]
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
 8002384:	e001      	b.n	800238a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	807b      	strh	r3, [r7, #2]
 80023a4:	4613      	mov	r3, r2
 80023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a8:	787b      	ldrb	r3, [r7, #1]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ae:	887a      	ldrh	r2, [r7, #2]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e08d      	b.n	80024f6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff f90a 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	@ 0x24
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002418:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002428:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	e006      	b.n	8002450 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800244e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d108      	bne.n	800246a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	e007      	b.n	800247a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800248c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800249c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69d9      	ldr	r1, [r3, #28]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1a      	ldr	r2, [r3, #32]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	461a      	mov	r2, r3
 800250c:	460b      	mov	r3, r1
 800250e:	817b      	strh	r3, [r7, #10]
 8002510:	4613      	mov	r3, r2
 8002512:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b20      	cmp	r3, #32
 800251e:	f040 80fd 	bne.w	800271c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_I2C_Master_Transmit+0x30>
 800252c:	2302      	movs	r3, #2
 800252e:	e0f6      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002538:	f7ff fbac 	bl	8001c94 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	2319      	movs	r3, #25
 8002544:	2201      	movs	r2, #1
 8002546:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 faf6 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0e1      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2221      	movs	r2, #33	@ 0x21
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2210      	movs	r2, #16
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	893a      	ldrh	r2, [r7, #8]
 800257a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2bff      	cmp	r3, #255	@ 0xff
 800258a:	d906      	bls.n	800259a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	22ff      	movs	r2, #255	@ 0xff
 8002590:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002592:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e007      	b.n	80025aa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80025a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d024      	beq.n	80025fc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	8979      	ldrh	r1, [r7, #10]
 80025ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002728 <HAL_I2C_Master_Transmit+0x228>)
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fcf1 	bl	8002fdc <I2C_TransferConfig>
 80025fa:	e066      	b.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002600:	b2da      	uxtb	r2, r3
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	4b48      	ldr	r3, [pc, #288]	@ (8002728 <HAL_I2C_Master_Transmit+0x228>)
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fce6 	bl	8002fdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002610:	e05b      	b.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fae9 	bl	8002bee <I2C_WaitOnTXISFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e07b      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d034      	beq.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002664:	2b00      	cmp	r3, #0
 8002666:	d130      	bne.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	2200      	movs	r2, #0
 8002670:	2180      	movs	r1, #128	@ 0x80
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fa62 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e04d      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	2bff      	cmp	r3, #255	@ 0xff
 800268a:	d90e      	bls.n	80026aa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	22ff      	movs	r2, #255	@ 0xff
 8002690:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002696:	b2da      	uxtb	r2, r3
 8002698:	8979      	ldrh	r1, [r7, #10]
 800269a:	2300      	movs	r3, #0
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fc9a 	bl	8002fdc <I2C_TransferConfig>
 80026a8:	e00f      	b.n	80026ca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	8979      	ldrh	r1, [r7, #10]
 80026bc:	2300      	movs	r3, #0
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 fc89 	bl	8002fdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d19e      	bne.n	8002612 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	6a39      	ldr	r1, [r7, #32]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 facf 	bl	8002c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e01a      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2220      	movs	r2, #32
 80026ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <HAL_I2C_Master_Transmit+0x22c>)
 80026fc:	400b      	ands	r3, r1
 80026fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	e000      	b.n	800271e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800271c:	2302      	movs	r3, #2
  }
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	80002000 	.word	0x80002000
 800272c:	fe00e800 	.word	0xfe00e800

08002730 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b088      	sub	sp, #32
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	461a      	mov	r2, r3
 800273c:	460b      	mov	r3, r1
 800273e:	817b      	strh	r3, [r7, #10]
 8002740:	4613      	mov	r3, r2
 8002742:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	f040 80db 	bne.w	8002908 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_I2C_Master_Receive+0x30>
 800275c:	2302      	movs	r3, #2
 800275e:	e0d4      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002768:	f7ff fa94 	bl	8001c94 <HAL_GetTick>
 800276c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2319      	movs	r3, #25
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f9de 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0bf      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2222      	movs	r2, #34	@ 0x22
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2210      	movs	r2, #16
 8002796:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	893a      	ldrh	r2, [r7, #8]
 80027aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2bff      	cmp	r3, #255	@ 0xff
 80027ba:	d90e      	bls.n	80027da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	8979      	ldrh	r1, [r7, #10]
 80027ca:	4b52      	ldr	r3, [pc, #328]	@ (8002914 <HAL_I2C_Master_Receive+0x1e4>)
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fc02 	bl	8002fdc <I2C_TransferConfig>
 80027d8:	e06d      	b.n	80028b6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	8979      	ldrh	r1, [r7, #10]
 80027ec:	4b49      	ldr	r3, [pc, #292]	@ (8002914 <HAL_I2C_Master_Receive+0x1e4>)
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fbf1 	bl	8002fdc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80027fa:	e05c      	b.n	80028b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	6a39      	ldr	r1, [r7, #32]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fa7f 	bl	8002d04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e07c      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29a      	uxth	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d034      	beq.n	80028b6 <HAL_I2C_Master_Receive+0x186>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	d130      	bne.n	80028b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2200      	movs	r2, #0
 800285c:	2180      	movs	r1, #128	@ 0x80
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 f96c 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e04d      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002872:	b29b      	uxth	r3, r3
 8002874:	2bff      	cmp	r3, #255	@ 0xff
 8002876:	d90e      	bls.n	8002896 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	22ff      	movs	r2, #255	@ 0xff
 800287c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002882:	b2da      	uxtb	r2, r3
 8002884:	8979      	ldrh	r1, [r7, #10]
 8002886:	2300      	movs	r3, #0
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fba4 	bl	8002fdc <I2C_TransferConfig>
 8002894:	e00f      	b.n	80028b6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	8979      	ldrh	r1, [r7, #10]
 80028a8:	2300      	movs	r3, #0
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fb93 	bl	8002fdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d19d      	bne.n	80027fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	6a39      	ldr	r1, [r7, #32]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f9d9 	bl	8002c7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e01a      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2220      	movs	r2, #32
 80028da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <HAL_I2C_Master_Receive+0x1e8>)
 80028e8:	400b      	ands	r3, r1
 80028ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	80002400 	.word	0x80002400
 8002918:	fe00e800 	.word	0xfe00e800

0800291c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	@ 0x28
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	460b      	mov	r3, r1
 800292a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b20      	cmp	r3, #32
 800293a:	f040 80d6 	bne.w	8002aea <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800294c:	d101      	bne.n	8002952 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800294e:	2302      	movs	r3, #2
 8002950:	e0cc      	b.n	8002aec <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_I2C_IsDeviceReady+0x44>
 800295c:	2302      	movs	r3, #2
 800295e:	e0c5      	b.n	8002aec <HAL_I2C_IsDeviceReady+0x1d0>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2224      	movs	r2, #36	@ 0x24
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_I2C_IsDeviceReady+0x72>
 800297e:	897b      	ldrh	r3, [r7, #10]
 8002980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002984:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002988:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800298c:	e006      	b.n	800299c <HAL_I2C_IsDeviceReady+0x80>
 800298e:	897b      	ldrh	r3, [r7, #10]
 8002990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002994:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002998:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80029a2:	f7ff f977 	bl	8001c94 <HAL_GetTick>
 80029a6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029d4:	e034      	b.n	8002a40 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d01a      	beq.n	8002a14 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7ff f959 	bl	8001c94 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <HAL_I2C_IsDeviceReady+0xd8>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e06b      	b.n	8002aec <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	bf0c      	ite	eq
 8002a22:	2301      	moveq	r3, #1
 8002a24:	2300      	movne	r3, #0
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_I2C_IsDeviceReady+0x130>
 8002a46:	7fbb      	ldrb	r3, [r7, #30]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0c4      	beq.n	80029d6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d01a      	beq.n	8002a90 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2120      	movs	r1, #32
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f869 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e03b      	b.n	8002aec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	e02d      	b.n	8002aec <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2200      	movs	r2, #0
 8002a98:	2120      	movs	r1, #32
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f84e 	bl	8002b3c <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e020      	b.n	8002aec <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2210      	movs	r2, #16
 8002ab0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f63f af56 	bhi.w	8002976 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d103      	bne.n	8002b12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d007      	beq.n	8002b30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	619a      	str	r2, [r3, #24]
  }
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b4c:	e03b      	b.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	6839      	ldr	r1, [r7, #0]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f962 	bl	8002e1c <I2C_IsErrorOccurred>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e041      	b.n	8002be6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d02d      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7ff f893 	bl	8001c94 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d122      	bne.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d113      	bne.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f043 0220 	orr.w	r2, r3, #32
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00f      	b.n	8002be6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d0b4      	beq.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bfa:	e033      	b.n	8002c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f90b 	bl	8002e1c <I2C_IsErrorOccurred>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e031      	b.n	8002c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d025      	beq.n	8002c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c18:	f7ff f83c 	bl	8001c94 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d302      	bcc.n	8002c2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d11a      	bne.n	8002c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d013      	beq.n	8002c64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c40:	f043 0220 	orr.w	r2, r3, #32
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e007      	b.n	8002c74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d1c4      	bne.n	8002bfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c88:	e02f      	b.n	8002cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f8c4 	bl	8002e1c <I2C_IsErrorOccurred>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e02d      	b.n	8002cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9e:	f7fe fff9 	bl	8001c94 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d302      	bcc.n	8002cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11a      	bne.n	8002cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d013      	beq.n	8002cea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e007      	b.n	8002cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d1c8      	bne.n	8002c8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002d14:	e071      	b.n	8002dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f87e 	bl	8002e1c <I2C_IsErrorOccurred>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d13b      	bne.n	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d138      	bne.n	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d105      	bne.n	8002d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d121      	bne.n	8002daa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2204      	movs	r2, #4
 8002d72:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b24      	ldr	r3, [pc, #144]	@ (8002e18 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002d88:	400b      	ands	r3, r1
 8002d8a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	75fb      	strb	r3, [r7, #23]
 8002da8:	e002      	b.n	8002db0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002db0:	f7fe ff70 	bl	8001c94 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d302      	bcc.n	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d119      	bne.n	8002dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d116      	bne.n	8002dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00f      	beq.n	8002dfa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	f043 0220 	orr.w	r2, r3, #32
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d002      	beq.n	8002e0e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d083      	beq.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	fe00e800 	.word	0xfe00e800

08002e1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	@ 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d068      	beq.n	8002f1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e50:	e049      	b.n	8002ee6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d045      	beq.n	8002ee6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7fe ff1b 	bl	8001c94 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <I2C_IsErrorOccurred+0x54>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d13a      	bne.n	8002ee6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e92:	d121      	bne.n	8002ed8 <I2C_IsErrorOccurred+0xbc>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e9a:	d01d      	beq.n	8002ed8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d01a      	beq.n	8002ed8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002eb2:	f7fe feef 	bl	8001c94 <HAL_GetTick>
 8002eb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eb8:	e00e      	b.n	8002ed8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eba:	f7fe feeb 	bl	8001c94 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b19      	cmp	r3, #25
 8002ec6:	d907      	bls.n	8002ed8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	f043 0320 	orr.w	r3, r3, #32
 8002ece:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002ed6:	e006      	b.n	8002ee6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d1e9      	bne.n	8002eba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d003      	beq.n	8002efc <I2C_IsErrorOccurred+0xe0>
 8002ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0aa      	beq.n	8002e52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00b      	beq.n	8002f44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00b      	beq.n	8002f66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	f043 0308 	orr.w	r3, r3, #8
 8002f54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d01c      	beq.n	8002fca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fdaf 	bl	8002af4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd8 <I2C_IsErrorOccurred+0x1bc>)
 8002fa2:	400b      	ands	r3, r1
 8002fa4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002fca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3728      	adds	r7, #40	@ 0x28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	fe00e800 	.word	0xfe00e800

08002fdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	607b      	str	r3, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	817b      	strh	r3, [r7, #10]
 8002fea:	4613      	mov	r3, r2
 8002fec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ff4:	7a7b      	ldrb	r3, [r7, #9]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ffc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	4313      	orrs	r3, r2
 8003006:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800300a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	0d5b      	lsrs	r3, r3, #21
 8003016:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800301a:	4b08      	ldr	r3, [pc, #32]	@ (800303c <I2C_TransferConfig+0x60>)
 800301c:	430b      	orrs	r3, r1
 800301e:	43db      	mvns	r3, r3
 8003020:	ea02 0103 	and.w	r1, r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800302e:	bf00      	nop
 8003030:	371c      	adds	r7, #28
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	03ff63ff 	.word	0x03ff63ff

08003040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b20      	cmp	r3, #32
 8003054:	d138      	bne.n	80030c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003060:	2302      	movs	r3, #2
 8003062:	e032      	b.n	80030ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2224      	movs	r2, #36	@ 0x24
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003092:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6819      	ldr	r1, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0201 	orr.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	d139      	bne.n	8003160 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e033      	b.n	8003162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2224      	movs	r2, #36	@ 0x24
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003128:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
	...

08003170 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003174:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <HAL_PWREx_GetVoltageRange+0x18>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40007000 	.word	0x40007000

0800318c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800319a:	d130      	bne.n	80031fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800319c:	4b23      	ldr	r3, [pc, #140]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a8:	d038      	beq.n	800321c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031aa:	4b20      	ldr	r3, [pc, #128]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031b2:	4a1e      	ldr	r2, [pc, #120]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003230 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2232      	movs	r2, #50	@ 0x32
 80031c0:	fb02 f303 	mul.w	r3, r2, r3
 80031c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003234 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0c9b      	lsrs	r3, r3, #18
 80031cc:	3301      	adds	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d0:	e002      	b.n	80031d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d8:	4b14      	ldr	r3, [pc, #80]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e4:	d102      	bne.n	80031ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f2      	bne.n	80031d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ec:	4b0f      	ldr	r3, [pc, #60]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f8:	d110      	bne.n	800321c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e00f      	b.n	800321e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031fe:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800320a:	d007      	beq.n	800321c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800320c:	4b07      	ldr	r3, [pc, #28]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003214:	4a05      	ldr	r2, [pc, #20]	@ (800322c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003216:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800321a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40007000 	.word	0x40007000
 8003230:	20000010 	.word	0x20000010
 8003234:	431bde83 	.word	0x431bde83

08003238 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e3ca      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324a:	4b97      	ldr	r3, [pc, #604]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003254:	4b94      	ldr	r3, [pc, #592]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80e4 	beq.w	8003434 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_RCC_OscConfig+0x4a>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	f040 808b 	bne.w	8003390 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 8087 	bne.w	8003390 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003282:	4b89      	ldr	r3, [pc, #548]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_RCC_OscConfig+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e3a2      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1a      	ldr	r2, [r3, #32]
 800329e:	4b82      	ldr	r3, [pc, #520]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d004      	beq.n	80032b4 <HAL_RCC_OscConfig+0x7c>
 80032aa:	4b7f      	ldr	r3, [pc, #508]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_OscConfig+0x88>
 80032b4:	4b7c      	ldr	r3, [pc, #496]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d223      	bcs.n	800330c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fd55 	bl	8003d78 <RCC_SetFlashLatencyFromMSIRange>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e383      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d8:	4b73      	ldr	r3, [pc, #460]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a72      	ldr	r2, [pc, #456]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032de:	f043 0308 	orr.w	r3, r3, #8
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b70      	ldr	r3, [pc, #448]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	496d      	ldr	r1, [pc, #436]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f6:	4b6c      	ldr	r3, [pc, #432]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	4968      	ldr	r1, [pc, #416]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
 800330a:	e025      	b.n	8003358 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330c:	4b66      	ldr	r3, [pc, #408]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a65      	ldr	r2, [pc, #404]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003312:	f043 0308 	orr.w	r3, r3, #8
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	4b63      	ldr	r3, [pc, #396]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	4960      	ldr	r1, [pc, #384]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800332a:	4b5f      	ldr	r3, [pc, #380]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	495b      	ldr	r1, [pc, #364]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fd15 	bl	8003d78 <RCC_SetFlashLatencyFromMSIRange>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e343      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003358:	f000 fc4a 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b52      	ldr	r3, [pc, #328]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	4950      	ldr	r1, [pc, #320]	@ (80034ac <HAL_RCC_OscConfig+0x274>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	4a4e      	ldr	r2, [pc, #312]	@ (80034b0 <HAL_RCC_OscConfig+0x278>)
 8003376:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003378:	4b4e      	ldr	r3, [pc, #312]	@ (80034b4 <HAL_RCC_OscConfig+0x27c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe fc39 	bl	8001bf4 <HAL_InitTick>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d052      	beq.n	8003432 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	e327      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d032      	beq.n	80033fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003398:	4b43      	ldr	r3, [pc, #268]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a42      	ldr	r2, [pc, #264]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fc76 	bl	8001c94 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ac:	f7fe fc72 	bl	8001c94 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e310      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033be:	4b3a      	ldr	r3, [pc, #232]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ca:	4b37      	ldr	r3, [pc, #220]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a36      	ldr	r2, [pc, #216]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033d0:	f043 0308 	orr.w	r3, r3, #8
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b34      	ldr	r3, [pc, #208]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4931      	ldr	r1, [pc, #196]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e8:	4b2f      	ldr	r3, [pc, #188]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	492c      	ldr	r1, [pc, #176]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
 80033fc:	e01a      	b.n	8003434 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033fe:	4b2a      	ldr	r3, [pc, #168]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a29      	ldr	r2, [pc, #164]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800340a:	f7fe fc43 	bl	8001c94 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003412:	f7fe fc3f 	bl	8001c94 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e2dd      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003424:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1f0      	bne.n	8003412 <HAL_RCC_OscConfig+0x1da>
 8003430:	e000      	b.n	8003434 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003432:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d074      	beq.n	800352a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b08      	cmp	r3, #8
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x21a>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b0c      	cmp	r3, #12
 800344a:	d10e      	bne.n	800346a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d10b      	bne.n	800346a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003452:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d064      	beq.n	8003528 <HAL_RCC_OscConfig+0x2f0>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d160      	bne.n	8003528 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e2ba      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x24a>
 8003474:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0b      	ldr	r2, [pc, #44]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800347a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	e026      	b.n	80034d0 <HAL_RCC_OscConfig+0x298>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800348a:	d115      	bne.n	80034b8 <HAL_RCC_OscConfig+0x280>
 800348c:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a05      	ldr	r2, [pc, #20]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 8003492:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b03      	ldr	r3, [pc, #12]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a02      	ldr	r2, [pc, #8]	@ (80034a8 <HAL_RCC_OscConfig+0x270>)
 800349e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	e014      	b.n	80034d0 <HAL_RCC_OscConfig+0x298>
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	08008560 	.word	0x08008560
 80034b0:	20000010 	.word	0x20000010
 80034b4:	20000014 	.word	0x20000014
 80034b8:	4ba0      	ldr	r3, [pc, #640]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a9f      	ldr	r2, [pc, #636]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80034be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b9d      	ldr	r3, [pc, #628]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a9c      	ldr	r2, [pc, #624]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80034ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d013      	beq.n	8003500 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fe fbdc 	bl	8001c94 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fe fbd8 	bl	8001c94 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	@ 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e276      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f2:	4b92      	ldr	r3, [pc, #584]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x2a8>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe fbc8 	bl	8001c94 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003508:	f7fe fbc4 	bl	8001c94 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	@ 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e262      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800351a:	4b88      	ldr	r3, [pc, #544]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x2d0>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d060      	beq.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d005      	beq.n	8003548 <HAL_RCC_OscConfig+0x310>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d119      	bne.n	8003576 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d116      	bne.n	8003576 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003548:	4b7c      	ldr	r3, [pc, #496]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x328>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e23f      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003560:	4b76      	ldr	r3, [pc, #472]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	061b      	lsls	r3, r3, #24
 800356e:	4973      	ldr	r1, [pc, #460]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	e040      	b.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d023      	beq.n	80035c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357e:	4b6f      	ldr	r3, [pc, #444]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6e      	ldr	r2, [pc, #440]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fe fb83 	bl	8001c94 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003592:	f7fe fb7f 	bl	8001c94 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e21d      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a4:	4b65      	ldr	r3, [pc, #404]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b62      	ldr	r3, [pc, #392]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	495f      	ldr	r1, [pc, #380]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
 80035c4:	e018      	b.n	80035f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035c6:	4b5d      	ldr	r3, [pc, #372]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5c      	ldr	r2, [pc, #368]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80035cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fe fb5f 	bl	8001c94 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035da:	f7fe fb5b 	bl	8001c94 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e1f9      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ec:	4b53      	ldr	r3, [pc, #332]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d03c      	beq.n	800367e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01c      	beq.n	8003646 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360c:	4b4b      	ldr	r3, [pc, #300]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003612:	4a4a      	ldr	r2, [pc, #296]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe fb3a 	bl	8001c94 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe fb36 	bl	8001c94 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1d4      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003636:	4b41      	ldr	r3, [pc, #260]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ef      	beq.n	8003624 <HAL_RCC_OscConfig+0x3ec>
 8003644:	e01b      	b.n	800367e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003646:	4b3d      	ldr	r3, [pc, #244]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364c:	4a3b      	ldr	r2, [pc, #236]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fe fb1d 	bl	8001c94 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365e:	f7fe fb19 	bl	8001c94 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1b7      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003670:	4b32      	ldr	r3, [pc, #200]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ef      	bne.n	800365e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80a6 	beq.w	80037d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003690:	4b2a      	ldr	r3, [pc, #168]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b27      	ldr	r3, [pc, #156]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a0:	4a26      	ldr	r2, [pc, #152]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a8:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b8:	4b21      	ldr	r3, [pc, #132]	@ (8003740 <HAL_RCC_OscConfig+0x508>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d118      	bne.n	80036f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003740 <HAL_RCC_OscConfig+0x508>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003740 <HAL_RCC_OscConfig+0x508>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fae0 	bl	8001c94 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fe fadc 	bl	8001c94 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e17a      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ea:	4b15      	ldr	r3, [pc, #84]	@ (8003740 <HAL_RCC_OscConfig+0x508>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d108      	bne.n	8003710 <HAL_RCC_OscConfig+0x4d8>
 80036fe:	4b0f      	ldr	r3, [pc, #60]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003704:	4a0d      	ldr	r2, [pc, #52]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800370e:	e029      	b.n	8003764 <HAL_RCC_OscConfig+0x52c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d115      	bne.n	8003744 <HAL_RCC_OscConfig+0x50c>
 8003718:	4b08      	ldr	r3, [pc, #32]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371e:	4a07      	ldr	r2, [pc, #28]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003728:	4b04      	ldr	r3, [pc, #16]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372e:	4a03      	ldr	r2, [pc, #12]	@ (800373c <HAL_RCC_OscConfig+0x504>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003738:	e014      	b.n	8003764 <HAL_RCC_OscConfig+0x52c>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	40007000 	.word	0x40007000
 8003744:	4b9c      	ldr	r3, [pc, #624]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374a:	4a9b      	ldr	r2, [pc, #620]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003754:	4b98      	ldr	r3, [pc, #608]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375a:	4a97      	ldr	r2, [pc, #604]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800375c:	f023 0304 	bic.w	r3, r3, #4
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d016      	beq.n	800379a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7fe fa92 	bl	8001c94 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003772:	e00a      	b.n	800378a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003774:	f7fe fa8e 	bl	8001c94 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e12a      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800378a:	4b8b      	ldr	r3, [pc, #556]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ed      	beq.n	8003774 <HAL_RCC_OscConfig+0x53c>
 8003798:	e015      	b.n	80037c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379a:	f7fe fa7b 	bl	8001c94 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037a0:	e00a      	b.n	80037b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fe fa77 	bl	8001c94 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e113      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b8:	4b7f      	ldr	r3, [pc, #508]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1ed      	bne.n	80037a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d105      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037cc:	4b7a      	ldr	r3, [pc, #488]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 80037ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d0:	4a79      	ldr	r2, [pc, #484]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 80fe 	beq.w	80039de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	f040 80d0 	bne.w	800398c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037ec:	4b72      	ldr	r3, [pc, #456]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0203 	and.w	r2, r3, #3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d130      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	3b01      	subs	r3, #1
 800380c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d127      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800381c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d11f      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800382c:	2a07      	cmp	r2, #7
 800382e:	bf14      	ite	ne
 8003830:	2201      	movne	r2, #1
 8003832:	2200      	moveq	r2, #0
 8003834:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003836:	4293      	cmp	r3, r2
 8003838:	d113      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d109      	bne.n	8003862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	085b      	lsrs	r3, r3, #1
 800385a:	3b01      	subs	r3, #1
 800385c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d06e      	beq.n	8003940 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d069      	beq.n	800393c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003868:	4b53      	ldr	r3, [pc, #332]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003874:	4b50      	ldr	r3, [pc, #320]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0ad      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003884:	4b4c      	ldr	r3, [pc, #304]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a4b      	ldr	r2, [pc, #300]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003890:	f7fe fa00 	bl	8001c94 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fe f9fc 	bl	8001c94 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e09a      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038aa:	4b43      	ldr	r3, [pc, #268]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b6:	4b40      	ldr	r3, [pc, #256]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	4b40      	ldr	r3, [pc, #256]	@ (80039bc <HAL_RCC_OscConfig+0x784>)
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038c6:	3a01      	subs	r2, #1
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	4311      	orrs	r1, r2
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038d0:	0212      	lsls	r2, r2, #8
 80038d2:	4311      	orrs	r1, r2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038d8:	0852      	lsrs	r2, r2, #1
 80038da:	3a01      	subs	r2, #1
 80038dc:	0552      	lsls	r2, r2, #21
 80038de:	4311      	orrs	r1, r2
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038e4:	0852      	lsrs	r2, r2, #1
 80038e6:	3a01      	subs	r2, #1
 80038e8:	0652      	lsls	r2, r2, #25
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038f0:	0912      	lsrs	r2, r2, #4
 80038f2:	0452      	lsls	r2, r2, #17
 80038f4:	430a      	orrs	r2, r1
 80038f6:	4930      	ldr	r1, [pc, #192]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038fc:	4b2e      	ldr	r3, [pc, #184]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2d      	ldr	r2, [pc, #180]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003906:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003908:	4b2b      	ldr	r3, [pc, #172]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a2a      	ldr	r2, [pc, #168]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800390e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003914:	f7fe f9be 	bl	8001c94 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fe f9ba 	bl	8001c94 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e058      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392e:	4b22      	ldr	r3, [pc, #136]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393a:	e050      	b.n	80039de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e04f      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003940:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d148      	bne.n	80039de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800394c:	4b1a      	ldr	r3, [pc, #104]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a19      	ldr	r2, [pc, #100]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003958:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a16      	ldr	r2, [pc, #88]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 800395e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003964:	f7fe f996 	bl	8001c94 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fe f992 	bl	8001c94 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e030      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397e:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x734>
 800398a:	e028      	b.n	80039de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d023      	beq.n	80039da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a08      	ldr	r2, [pc, #32]	@ (80039b8 <HAL_RCC_OscConfig+0x780>)
 8003998:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800399c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fe f979 	bl	8001c94 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a4:	e00c      	b.n	80039c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe f975 	bl	8001c94 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d905      	bls.n	80039c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e013      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
 80039b8:	40021000 	.word	0x40021000
 80039bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039c0:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <HAL_RCC_OscConfig+0x7b0>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1ec      	bne.n	80039a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039cc:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_RCC_OscConfig+0x7b0>)
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	4905      	ldr	r1, [pc, #20]	@ (80039e8 <HAL_RCC_OscConfig+0x7b0>)
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_RCC_OscConfig+0x7b4>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	60cb      	str	r3, [r1, #12]
 80039d8:	e001      	b.n	80039de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	feeefffc 	.word	0xfeeefffc

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0e7      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b75      	ldr	r3, [pc, #468]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d910      	bls.n	8003a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b72      	ldr	r3, [pc, #456]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	4970      	ldr	r1, [pc, #448]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b6e      	ldr	r3, [pc, #440]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0cf      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d908      	bls.n	8003a62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b63      	ldr	r3, [pc, #396]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4960      	ldr	r1, [pc, #384]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d04c      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a76:	4b5a      	ldr	r3, [pc, #360]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d121      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e0a6      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a8e:	4b54      	ldr	r3, [pc, #336]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d115      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e09a      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e08e      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e086      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b46      	ldr	r3, [pc, #280]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4943      	ldr	r1, [pc, #268]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad8:	f7fe f8dc 	bl	8001c94 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fe f8d8 	bl	8001c94 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e06e      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b3a      	ldr	r3, [pc, #232]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d010      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	4b31      	ldr	r3, [pc, #196]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d208      	bcs.n	8003b36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b24:	4b2e      	ldr	r3, [pc, #184]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	492b      	ldr	r1, [pc, #172]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b36:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d210      	bcs.n	8003b66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b44:	4b25      	ldr	r3, [pc, #148]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 0207 	bic.w	r2, r3, #7
 8003b4c:	4923      	ldr	r1, [pc, #140]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b54:	4b21      	ldr	r3, [pc, #132]	@ (8003bdc <HAL_RCC_ClockConfig+0x1ec>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d001      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e036      	b.n	8003bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b72:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	4918      	ldr	r1, [pc, #96]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4910      	ldr	r1, [pc, #64]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba4:	f000 f824 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <HAL_RCC_ClockConfig+0x1f0>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	490b      	ldr	r1, [pc, #44]	@ (8003be4 <HAL_RCC_ClockConfig+0x1f4>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc0:	4a09      	ldr	r2, [pc, #36]	@ (8003be8 <HAL_RCC_ClockConfig+0x1f8>)
 8003bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bc4:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <HAL_RCC_ClockConfig+0x1fc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe f813 	bl	8001bf4 <HAL_InitTick>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40022000 	.word	0x40022000
 8003be0:	40021000 	.word	0x40021000
 8003be4:	08008560 	.word	0x08008560
 8003be8:	20000010 	.word	0x20000010
 8003bec:	20000014 	.word	0x20000014

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b089      	sub	sp, #36	@ 0x24
 8003bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c08:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x34>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d121      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d11e      	bne.n	8003c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c24:	4b34      	ldr	r3, [pc, #208]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c30:	4b31      	ldr	r3, [pc, #196]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	e005      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c40:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10d      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d102      	bne.n	8003c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c68:	4b25      	ldr	r3, [pc, #148]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	e004      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c74:	4b23      	ldr	r3, [pc, #140]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d134      	bne.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d003      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0xac>
 8003c94:	e005      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c98:	617b      	str	r3, [r7, #20]
      break;
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c9c:	4b19      	ldr	r3, [pc, #100]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c9e:	617b      	str	r3, [r7, #20]
      break;
 8003ca0:	e002      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	617b      	str	r3, [r7, #20]
      break;
 8003ca6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ca8:	4b13      	ldr	r3, [pc, #76]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cb6:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	fb03 f202 	mul.w	r2, r3, r2
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ccc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	0e5b      	lsrs	r3, r3, #25
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ce8:	69bb      	ldr	r3, [r7, #24]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3724      	adds	r7, #36	@ 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	08008578 	.word	0x08008578
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	007a1200 	.word	0x007a1200

08003d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000010 	.word	0x20000010

08003d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d24:	f7ff fff0 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0a1b      	lsrs	r3, r3, #8
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4904      	ldr	r1, [pc, #16]	@ (8003d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	f003 031f 	and.w	r3, r3, #31
 8003d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08008570 	.word	0x08008570

08003d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d50:	f7ff ffda 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0adb      	lsrs	r3, r3, #11
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4904      	ldr	r1, [pc, #16]	@ (8003d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08008570 	.word	0x08008570

08003d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d84:	4b2a      	ldr	r3, [pc, #168]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d90:	f7ff f9ee 	bl	8003170 <HAL_PWREx_GetVoltageRange>
 8003d94:	6178      	str	r0, [r7, #20]
 8003d96:	e014      	b.n	8003dc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	4b25      	ldr	r3, [pc, #148]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9c:	4a24      	ldr	r2, [pc, #144]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da4:	4b22      	ldr	r3, [pc, #136]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003db0:	f7ff f9de 	bl	8003170 <HAL_PWREx_GetVoltageRange>
 8003db4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003db6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dc8:	d10b      	bne.n	8003de2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b80      	cmp	r3, #128	@ 0x80
 8003dce:	d919      	bls.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8003dd4:	d902      	bls.n	8003ddc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	e013      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ddc:	2301      	movs	r3, #1
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	e010      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b80      	cmp	r3, #128	@ 0x80
 8003de6:	d902      	bls.n	8003dee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003de8:	2303      	movs	r3, #3
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	e00a      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b80      	cmp	r3, #128	@ 0x80
 8003df2:	d102      	bne.n	8003dfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003df4:	2302      	movs	r3, #2
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e004      	b.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b70      	cmp	r3, #112	@ 0x70
 8003dfe:	d101      	bne.n	8003e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e00:	2301      	movs	r3, #1
 8003e02:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e04:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f023 0207 	bic.w	r2, r3, #7
 8003e0c:	4909      	ldr	r1, [pc, #36]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e14:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d001      	beq.n	8003e26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40022000 	.word	0x40022000

08003e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e44:	2300      	movs	r3, #0
 8003e46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d041      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e5c:	d02a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e5e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e62:	d824      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e68:	d008      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e6e:	d81e      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e78:	d010      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e7a:	e018      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e7c:	4b86      	ldr	r3, [pc, #536]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a85      	ldr	r2, [pc, #532]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e88:	e015      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fabb 	bl	800440c <RCCEx_PLLSAI1_Config>
 8003e96:	4603      	mov	r3, r0
 8003e98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e9a:	e00c      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3320      	adds	r3, #32
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fba6 	bl	80045f4 <RCCEx_PLLSAI2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	74fb      	strb	r3, [r7, #19]
      break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb6:	7cfb      	ldrb	r3, [r7, #19]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ebc:	4b76      	ldr	r3, [pc, #472]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eca:	4973      	ldr	r1, [pc, #460]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ed2:	e001      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d041      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ee8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003eec:	d02a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ef2:	d824      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ef4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003efa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003efe:	d81e      	bhi.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f08:	d010      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f0a:	e018      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f0c:	4b62      	ldr	r3, [pc, #392]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a61      	ldr	r2, [pc, #388]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f18:	e015      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fa73 	bl	800440c <RCCEx_PLLSAI1_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f2a:	e00c      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3320      	adds	r3, #32
 8003f30:	2100      	movs	r1, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fb5e 	bl	80045f4 <RCCEx_PLLSAI2_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	74fb      	strb	r3, [r7, #19]
      break;
 8003f42:	e000      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f46:	7cfb      	ldrb	r3, [r7, #19]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f4c:	4b52      	ldr	r3, [pc, #328]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f5a:	494f      	ldr	r1, [pc, #316]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7cfb      	ldrb	r3, [r7, #19]
 8003f66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a0 	beq.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f90:	4b41      	ldr	r3, [pc, #260]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f94:	4a40      	ldr	r2, [pc, #256]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fac:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd fe6c 	bl	8001c94 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fbe:	e009      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc0:	f7fd fe68 	bl	8001c94 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d902      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	74fb      	strb	r3, [r7, #19]
        break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fd4:	4b31      	ldr	r3, [pc, #196]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ef      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d15c      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01f      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	429a      	cmp	r2, r3
 8004002:	d019      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004004:	4b24      	ldr	r3, [pc, #144]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004010:	4b21      	ldr	r3, [pc, #132]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	4a20      	ldr	r2, [pc, #128]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004020:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	4a1c      	ldr	r2, [pc, #112]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800402c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004030:	4a19      	ldr	r2, [pc, #100]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fd fe27 	bl	8001c94 <HAL_GetTick>
 8004046:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004048:	e00b      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fd fe23 	bl	8001c94 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d902      	bls.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	74fb      	strb	r3, [r7, #19]
            break;
 8004060:	e006      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004062:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0ec      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004070:	7cfb      	ldrb	r3, [r7, #19]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10c      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004076:	4b08      	ldr	r3, [pc, #32]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004086:	4904      	ldr	r1, [pc, #16]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
 8004094:	e006      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040a4:	7c7b      	ldrb	r3, [r7, #17]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b9e      	ldr	r3, [pc, #632]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	4a9d      	ldr	r2, [pc, #628]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040c2:	4b98      	ldr	r3, [pc, #608]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c8:	f023 0203 	bic.w	r2, r3, #3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d0:	4994      	ldr	r1, [pc, #592]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ea:	f023 020c 	bic.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f2:	498c      	ldr	r1, [pc, #560]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004106:	4b87      	ldr	r3, [pc, #540]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	4983      	ldr	r1, [pc, #524]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004128:	4b7e      	ldr	r3, [pc, #504]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800412e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004136:	497b      	ldr	r1, [pc, #492]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004138:	4313      	orrs	r3, r2
 800413a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800414a:	4b76      	ldr	r3, [pc, #472]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004158:	4972      	ldr	r1, [pc, #456]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800416c:	4b6d      	ldr	r3, [pc, #436]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004172:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417a:	496a      	ldr	r1, [pc, #424]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417c:	4313      	orrs	r3, r2
 800417e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418e:	4b65      	ldr	r3, [pc, #404]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004194:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419c:	4961      	ldr	r1, [pc, #388]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041be:	4959      	ldr	r1, [pc, #356]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041d2:	4b54      	ldr	r3, [pc, #336]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e0:	4950      	ldr	r1, [pc, #320]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041f4:	4b4b      	ldr	r3, [pc, #300]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	4948      	ldr	r1, [pc, #288]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004216:	4b43      	ldr	r3, [pc, #268]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800421c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004224:	493f      	ldr	r1, [pc, #252]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d028      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004238:	4b3a      	ldr	r3, [pc, #232]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004246:	4937      	ldr	r1, [pc, #220]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004256:	d106      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b32      	ldr	r3, [pc, #200]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a31      	ldr	r2, [pc, #196]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004262:	60d3      	str	r3, [r2, #12]
 8004264:	e011      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800426a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800426e:	d10c      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3304      	adds	r3, #4
 8004274:	2101      	movs	r1, #1
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f8c8 	bl	800440c <RCCEx_PLLSAI1_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004280:	7cfb      	ldrb	r3, [r7, #19]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d028      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004296:	4b23      	ldr	r3, [pc, #140]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a4:	491f      	ldr	r1, [pc, #124]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042b4:	d106      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042c0:	60d3      	str	r3, [r2, #12]
 80042c2:	e011      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f899 	bl	800440c <RCCEx_PLLSAI1_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02b      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004302:	4908      	ldr	r1, [pc, #32]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004312:	d109      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004314:	4b03      	ldr	r3, [pc, #12]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a02      	ldr	r2, [pc, #8]	@ (8004324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800431e:	60d3      	str	r3, [r2, #12]
 8004320:	e014      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800432c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004330:	d10c      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f000 f867 	bl	800440c <RCCEx_PLLSAI1_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004358:	4b2b      	ldr	r3, [pc, #172]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004366:	4928      	ldr	r1, [pc, #160]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004376:	d10d      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	2102      	movs	r1, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f844 	bl	800440c <RCCEx_PLLSAI1_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d014      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800438e:	7cfb      	ldrb	r3, [r7, #19]
 8004390:	74bb      	strb	r3, [r7, #18]
 8004392:	e011      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3320      	adds	r3, #32
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f925 	bl	80045f4 <RCCEx_PLLSAI2_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043c4:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043d2:	490d      	ldr	r1, [pc, #52]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043e6:	4b08      	ldr	r3, [pc, #32]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f6:	4904      	ldr	r1, [pc, #16]	@ (8004408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40021000 	.word	0x40021000

0800440c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800441a:	4b75      	ldr	r3, [pc, #468]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d018      	beq.n	8004458 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004426:	4b72      	ldr	r3, [pc, #456]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0203 	and.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d10d      	bne.n	8004452 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
       ||
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800443e:	4b6c      	ldr	r3, [pc, #432]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
       ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d047      	beq.n	80044e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
 8004456:	e044      	b.n	80044e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b03      	cmp	r3, #3
 800445e:	d018      	beq.n	8004492 <RCCEx_PLLSAI1_Config+0x86>
 8004460:	2b03      	cmp	r3, #3
 8004462:	d825      	bhi.n	80044b0 <RCCEx_PLLSAI1_Config+0xa4>
 8004464:	2b01      	cmp	r3, #1
 8004466:	d002      	beq.n	800446e <RCCEx_PLLSAI1_Config+0x62>
 8004468:	2b02      	cmp	r3, #2
 800446a:	d009      	beq.n	8004480 <RCCEx_PLLSAI1_Config+0x74>
 800446c:	e020      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800446e:	4b60      	ldr	r3, [pc, #384]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d11d      	bne.n	80044b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447e:	e01a      	b.n	80044b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004480:	4b5b      	ldr	r3, [pc, #364]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d116      	bne.n	80044ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004490:	e013      	b.n	80044ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004492:	4b57      	ldr	r3, [pc, #348]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10f      	bne.n	80044be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800449e:	4b54      	ldr	r3, [pc, #336]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044ae:	e006      	b.n	80044be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      break;
 80044b4:	e004      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044b6:	bf00      	nop
 80044b8:	e002      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ba:	bf00      	nop
 80044bc:	e000      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044be:	bf00      	nop
    }

    if(status == HAL_OK)
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10d      	bne.n	80044e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044c6:	4b4a      	ldr	r3, [pc, #296]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6819      	ldr	r1, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	430b      	orrs	r3, r1
 80044dc:	4944      	ldr	r1, [pc, #272]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d17d      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044e8:	4b41      	ldr	r3, [pc, #260]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a40      	ldr	r2, [pc, #256]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f4:	f7fd fbce 	bl	8001c94 <HAL_GetTick>
 80044f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044fa:	e009      	b.n	8004510 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fc:	f7fd fbca 	bl	8001c94 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d902      	bls.n	8004510 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	73fb      	strb	r3, [r7, #15]
        break;
 800450e:	e005      	b.n	800451c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004510:	4b37      	ldr	r3, [pc, #220]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ef      	bne.n	80044fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d160      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d111      	bne.n	800454c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004528:	4b31      	ldr	r3, [pc, #196]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6892      	ldr	r2, [r2, #8]
 8004538:	0211      	lsls	r1, r2, #8
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	0912      	lsrs	r2, r2, #4
 8004540:	0452      	lsls	r2, r2, #17
 8004542:	430a      	orrs	r2, r1
 8004544:	492a      	ldr	r1, [pc, #168]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	610b      	str	r3, [r1, #16]
 800454a:	e027      	b.n	800459c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d112      	bne.n	8004578 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004552:	4b27      	ldr	r3, [pc, #156]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800455a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6892      	ldr	r2, [r2, #8]
 8004562:	0211      	lsls	r1, r2, #8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6912      	ldr	r2, [r2, #16]
 8004568:	0852      	lsrs	r2, r2, #1
 800456a:	3a01      	subs	r2, #1
 800456c:	0552      	lsls	r2, r2, #21
 800456e:	430a      	orrs	r2, r1
 8004570:	491f      	ldr	r1, [pc, #124]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	610b      	str	r3, [r1, #16]
 8004576:	e011      	b.n	800459c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004578:	4b1d      	ldr	r3, [pc, #116]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004580:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6892      	ldr	r2, [r2, #8]
 8004588:	0211      	lsls	r1, r2, #8
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6952      	ldr	r2, [r2, #20]
 800458e:	0852      	lsrs	r2, r2, #1
 8004590:	3a01      	subs	r2, #1
 8004592:	0652      	lsls	r2, r2, #25
 8004594:	430a      	orrs	r2, r1
 8004596:	4916      	ldr	r1, [pc, #88]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	4313      	orrs	r3, r2
 800459a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800459c:	4b14      	ldr	r3, [pc, #80]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a13      	ldr	r2, [pc, #76]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd fb74 	bl	8001c94 <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ae:	e009      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045b0:	f7fd fb70 	bl	8001c94 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d902      	bls.n	80045c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
          break;
 80045c2:	e005      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c4:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0ef      	beq.n	80045b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	4904      	ldr	r1, [pc, #16]	@ (80045f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000

080045f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004602:	4b6a      	ldr	r3, [pc, #424]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d018      	beq.n	8004640 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800460e:	4b67      	ldr	r3, [pc, #412]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0203 	and.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d10d      	bne.n	800463a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
       ||
 8004622:	2b00      	cmp	r3, #0
 8004624:	d009      	beq.n	800463a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004626:	4b61      	ldr	r3, [pc, #388]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
       ||
 8004636:	429a      	cmp	r2, r3
 8004638:	d047      	beq.n	80046ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	e044      	b.n	80046ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d018      	beq.n	800467a <RCCEx_PLLSAI2_Config+0x86>
 8004648:	2b03      	cmp	r3, #3
 800464a:	d825      	bhi.n	8004698 <RCCEx_PLLSAI2_Config+0xa4>
 800464c:	2b01      	cmp	r3, #1
 800464e:	d002      	beq.n	8004656 <RCCEx_PLLSAI2_Config+0x62>
 8004650:	2b02      	cmp	r3, #2
 8004652:	d009      	beq.n	8004668 <RCCEx_PLLSAI2_Config+0x74>
 8004654:	e020      	b.n	8004698 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004656:	4b55      	ldr	r3, [pc, #340]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11d      	bne.n	800469e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004666:	e01a      	b.n	800469e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004668:	4b50      	ldr	r3, [pc, #320]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d116      	bne.n	80046a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004678:	e013      	b.n	80046a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800467a:	4b4c      	ldr	r3, [pc, #304]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004686:	4b49      	ldr	r3, [pc, #292]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004696:	e006      	b.n	80046a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      break;
 800469c:	e004      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800469e:	bf00      	nop
 80046a0:	e002      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046a2:	bf00      	nop
 80046a4:	e000      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ae:	4b3f      	ldr	r3, [pc, #252]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6819      	ldr	r1, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	3b01      	subs	r3, #1
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	430b      	orrs	r3, r1
 80046c4:	4939      	ldr	r1, [pc, #228]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d167      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046d0:	4b36      	ldr	r3, [pc, #216]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a35      	ldr	r2, [pc, #212]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046dc:	f7fd fada 	bl	8001c94 <HAL_GetTick>
 80046e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046e2:	e009      	b.n	80046f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046e4:	f7fd fad6 	bl	8001c94 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d902      	bls.n	80046f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	73fb      	strb	r3, [r7, #15]
        break;
 80046f6:	e005      	b.n	8004704 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046f8:	4b2c      	ldr	r3, [pc, #176]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ef      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d14a      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d111      	bne.n	8004734 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004710:	4b26      	ldr	r3, [pc, #152]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
 8004720:	0211      	lsls	r1, r2, #8
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68d2      	ldr	r2, [r2, #12]
 8004726:	0912      	lsrs	r2, r2, #4
 8004728:	0452      	lsls	r2, r2, #17
 800472a:	430a      	orrs	r2, r1
 800472c:	491f      	ldr	r1, [pc, #124]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	614b      	str	r3, [r1, #20]
 8004732:	e011      	b.n	8004758 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004734:	4b1d      	ldr	r3, [pc, #116]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800473c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6892      	ldr	r2, [r2, #8]
 8004744:	0211      	lsls	r1, r2, #8
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6912      	ldr	r2, [r2, #16]
 800474a:	0852      	lsrs	r2, r2, #1
 800474c:	3a01      	subs	r2, #1
 800474e:	0652      	lsls	r2, r2, #25
 8004750:	430a      	orrs	r2, r1
 8004752:	4916      	ldr	r1, [pc, #88]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004754:	4313      	orrs	r3, r2
 8004756:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004758:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a13      	ldr	r2, [pc, #76]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd fa96 	bl	8001c94 <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800476c:	f7fd fa92 	bl	8001c94 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
          break;
 800477e:	e005      	b.n	800478c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004780:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ef      	beq.n	800476c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004792:	4b06      	ldr	r3, [pc, #24]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	4904      	ldr	r1, [pc, #16]	@ (80047ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000

080047b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e049      	b.n	8004856 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fc ff74 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f000 fca0 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d001      	beq.n	8004878 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e047      	b.n	8004908 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a23      	ldr	r2, [pc, #140]	@ (8004914 <HAL_TIM_Base_Start+0xb4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01d      	beq.n	80048c6 <HAL_TIM_Base_Start+0x66>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004892:	d018      	beq.n	80048c6 <HAL_TIM_Base_Start+0x66>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1f      	ldr	r2, [pc, #124]	@ (8004918 <HAL_TIM_Base_Start+0xb8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_TIM_Base_Start+0x66>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1e      	ldr	r2, [pc, #120]	@ (800491c <HAL_TIM_Base_Start+0xbc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIM_Base_Start+0x66>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004920 <HAL_TIM_Base_Start+0xc0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_TIM_Base_Start+0x66>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004924 <HAL_TIM_Base_Start+0xc4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIM_Base_Start+0x66>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a19      	ldr	r2, [pc, #100]	@ (8004928 <HAL_TIM_Base_Start+0xc8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d115      	bne.n	80048f2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b17      	ldr	r3, [pc, #92]	@ (800492c <HAL_TIM_Base_Start+0xcc>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b06      	cmp	r3, #6
 80048d6:	d015      	beq.n	8004904 <HAL_TIM_Base_Start+0xa4>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048de:	d011      	beq.n	8004904 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	e008      	b.n	8004904 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e000      	b.n	8004906 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr
 8004914:	40012c00 	.word	0x40012c00
 8004918:	40000400 	.word	0x40000400
 800491c:	40000800 	.word	0x40000800
 8004920:	40000c00 	.word	0x40000c00
 8004924:	40013400 	.word	0x40013400
 8004928:	40014000 	.word	0x40014000
 800492c:	00010007 	.word	0x00010007

08004930 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10f      	bne.n	8004968 <HAL_TIM_Base_Stop+0x38>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_TIM_Base_Stop+0x38>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e049      	b.n	8004a24 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f841 	bl	8004a2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	4610      	mov	r0, r2
 80049be:	f000 fbb9 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <HAL_TIM_PWM_Start+0x24>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	bf14      	ite	ne
 8004a5c:	2301      	movne	r3, #1
 8004a5e:	2300      	moveq	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	e03c      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d109      	bne.n	8004a7e <HAL_TIM_PWM_Start+0x3e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	e02f      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d109      	bne.n	8004a98 <HAL_TIM_PWM_Start+0x58>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	e022      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	d109      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x72>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	bf14      	ite	ne
 8004aaa:	2301      	movne	r3, #1
 8004aac:	2300      	moveq	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	e015      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d109      	bne.n	8004acc <HAL_TIM_PWM_Start+0x8c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e008      	b.n	8004ade <HAL_TIM_PWM_Start+0x9e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	bf14      	ite	ne
 8004ad8:	2301      	movne	r3, #1
 8004ada:	2300      	moveq	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e09c      	b.n	8004c20 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_PWM_Start+0xb6>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004af4:	e023      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_PWM_Start+0xc6>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b04:	e01b      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_PWM_Start+0xd6>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b14:	e013      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_PWM_Start+0xe6>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b24:	e00b      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_PWM_Start+0xf6>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b34:	e003      	b.n	8004b3e <HAL_TIM_PWM_Start+0xfe>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	6839      	ldr	r1, [r7, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 ff0a 	bl	8005960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a35      	ldr	r2, [pc, #212]	@ (8004c28 <HAL_TIM_PWM_Start+0x1e8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x13e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a34      	ldr	r2, [pc, #208]	@ (8004c2c <HAL_TIM_PWM_Start+0x1ec>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x13e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a32      	ldr	r2, [pc, #200]	@ (8004c30 <HAL_TIM_PWM_Start+0x1f0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d009      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x13e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a31      	ldr	r2, [pc, #196]	@ (8004c34 <HAL_TIM_PWM_Start+0x1f4>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d004      	beq.n	8004b7e <HAL_TIM_PWM_Start+0x13e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a2f      	ldr	r2, [pc, #188]	@ (8004c38 <HAL_TIM_PWM_Start+0x1f8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d101      	bne.n	8004b82 <HAL_TIM_PWM_Start+0x142>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <HAL_TIM_PWM_Start+0x144>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a22      	ldr	r2, [pc, #136]	@ (8004c28 <HAL_TIM_PWM_Start+0x1e8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01d      	beq.n	8004bde <HAL_TIM_PWM_Start+0x19e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004baa:	d018      	beq.n	8004bde <HAL_TIM_PWM_Start+0x19e>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a22      	ldr	r2, [pc, #136]	@ (8004c3c <HAL_TIM_PWM_Start+0x1fc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_TIM_PWM_Start+0x19e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a21      	ldr	r2, [pc, #132]	@ (8004c40 <HAL_TIM_PWM_Start+0x200>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_TIM_PWM_Start+0x19e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c44 <HAL_TIM_PWM_Start+0x204>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d009      	beq.n	8004bde <HAL_TIM_PWM_Start+0x19e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a17      	ldr	r2, [pc, #92]	@ (8004c2c <HAL_TIM_PWM_Start+0x1ec>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_TIM_PWM_Start+0x19e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	@ (8004c30 <HAL_TIM_PWM_Start+0x1f0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d115      	bne.n	8004c0a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	4b18      	ldr	r3, [pc, #96]	@ (8004c48 <HAL_TIM_PWM_Start+0x208>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b06      	cmp	r3, #6
 8004bee:	d015      	beq.n	8004c1c <HAL_TIM_PWM_Start+0x1dc>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf6:	d011      	beq.n	8004c1c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c08:	e008      	b.n	8004c1c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0201 	orr.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e000      	b.n	8004c1e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40013400 	.word	0x40013400
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800
 8004c44:	40000c00 	.word	0x40000c00
 8004c48:	00010007 	.word	0x00010007

08004c4c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fe7e 	bl	8005960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3e      	ldr	r2, [pc, #248]	@ (8004d64 <HAL_TIM_PWM_Stop+0x118>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <HAL_TIM_PWM_Stop+0x4a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a3d      	ldr	r2, [pc, #244]	@ (8004d68 <HAL_TIM_PWM_Stop+0x11c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIM_PWM_Stop+0x4a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3b      	ldr	r2, [pc, #236]	@ (8004d6c <HAL_TIM_PWM_Stop+0x120>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_TIM_PWM_Stop+0x4a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3a      	ldr	r2, [pc, #232]	@ (8004d70 <HAL_TIM_PWM_Stop+0x124>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIM_PWM_Stop+0x4a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a38      	ldr	r2, [pc, #224]	@ (8004d74 <HAL_TIM_PWM_Stop+0x128>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_PWM_Stop+0x4e>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_TIM_PWM_Stop+0x50>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d017      	beq.n	8004cd0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6a1a      	ldr	r2, [r3, #32]
 8004ca6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10f      	bne.n	8004cd0 <HAL_TIM_PWM_Stop+0x84>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_PWM_Stop+0x84>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a1a      	ldr	r2, [r3, #32]
 8004cd6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10f      	bne.n	8004d00 <HAL_TIM_PWM_Stop+0xb4>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004cea:	4013      	ands	r3, r2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_PWM_Stop+0xb4>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d104      	bne.n	8004d10 <HAL_TIM_PWM_Stop+0xc4>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0e:	e023      	b.n	8004d58 <HAL_TIM_PWM_Stop+0x10c>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d104      	bne.n	8004d20 <HAL_TIM_PWM_Stop+0xd4>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d1e:	e01b      	b.n	8004d58 <HAL_TIM_PWM_Stop+0x10c>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d104      	bne.n	8004d30 <HAL_TIM_PWM_Stop+0xe4>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d2e:	e013      	b.n	8004d58 <HAL_TIM_PWM_Stop+0x10c>
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d104      	bne.n	8004d40 <HAL_TIM_PWM_Stop+0xf4>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d3e:	e00b      	b.n	8004d58 <HAL_TIM_PWM_Stop+0x10c>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2b10      	cmp	r3, #16
 8004d44:	d104      	bne.n	8004d50 <HAL_TIM_PWM_Stop+0x104>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d4e:	e003      	b.n	8004d58 <HAL_TIM_PWM_Stop+0x10c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40013400 	.word	0x40013400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40014400 	.word	0x40014400
 8004d74:	40014800 	.word	0x40014800

08004d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e0ff      	b.n	8004f96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b14      	cmp	r3, #20
 8004da2:	f200 80f0 	bhi.w	8004f86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004da6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004e01 	.word	0x08004e01
 8004db0:	08004f87 	.word	0x08004f87
 8004db4:	08004f87 	.word	0x08004f87
 8004db8:	08004f87 	.word	0x08004f87
 8004dbc:	08004e41 	.word	0x08004e41
 8004dc0:	08004f87 	.word	0x08004f87
 8004dc4:	08004f87 	.word	0x08004f87
 8004dc8:	08004f87 	.word	0x08004f87
 8004dcc:	08004e83 	.word	0x08004e83
 8004dd0:	08004f87 	.word	0x08004f87
 8004dd4:	08004f87 	.word	0x08004f87
 8004dd8:	08004f87 	.word	0x08004f87
 8004ddc:	08004ec3 	.word	0x08004ec3
 8004de0:	08004f87 	.word	0x08004f87
 8004de4:	08004f87 	.word	0x08004f87
 8004de8:	08004f87 	.word	0x08004f87
 8004dec:	08004f05 	.word	0x08004f05
 8004df0:	08004f87 	.word	0x08004f87
 8004df4:	08004f87 	.word	0x08004f87
 8004df8:	08004f87 	.word	0x08004f87
 8004dfc:	08004f45 	.word	0x08004f45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68b9      	ldr	r1, [r7, #8]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 fa3a 	bl	8005280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0208 	orr.w	r2, r2, #8
 8004e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699a      	ldr	r2, [r3, #24]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0204 	bic.w	r2, r2, #4
 8004e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6999      	ldr	r1, [r3, #24]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	619a      	str	r2, [r3, #24]
      break;
 8004e3e:	e0a5      	b.n	8004f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 faaa 	bl	80053a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6999      	ldr	r1, [r3, #24]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	021a      	lsls	r2, r3, #8
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	619a      	str	r2, [r3, #24]
      break;
 8004e80:	e084      	b.n	8004f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68b9      	ldr	r1, [r7, #8]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fb13 	bl	80054b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0208 	orr.w	r2, r2, #8
 8004e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69da      	ldr	r2, [r3, #28]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0204 	bic.w	r2, r2, #4
 8004eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69d9      	ldr	r1, [r3, #28]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	61da      	str	r2, [r3, #28]
      break;
 8004ec0:	e064      	b.n	8004f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fb7b 	bl	80055c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69d9      	ldr	r1, [r3, #28]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	021a      	lsls	r2, r3, #8
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	61da      	str	r2, [r3, #28]
      break;
 8004f02:	e043      	b.n	8004f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fbc4 	bl	8005698 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0204 	bic.w	r2, r2, #4
 8004f2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f42:	e023      	b.n	8004f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fc08 	bl	8005760 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	021a      	lsls	r2, r3, #8
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004f84:	e002      	b.n	8004f8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	75fb      	strb	r3, [r7, #23]
      break;
 8004f8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop

08004fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_TIM_ConfigClockSource+0x1c>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	e0b6      	b.n	800512a <HAL_TIM_ConfigClockSource+0x18a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ff8:	d03e      	beq.n	8005078 <HAL_TIM_ConfigClockSource+0xd8>
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ffe:	f200 8087 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x170>
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005006:	f000 8086 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x176>
 800500a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800500e:	d87f      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x170>
 8005010:	2b70      	cmp	r3, #112	@ 0x70
 8005012:	d01a      	beq.n	800504a <HAL_TIM_ConfigClockSource+0xaa>
 8005014:	2b70      	cmp	r3, #112	@ 0x70
 8005016:	d87b      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x170>
 8005018:	2b60      	cmp	r3, #96	@ 0x60
 800501a:	d050      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x11e>
 800501c:	2b60      	cmp	r3, #96	@ 0x60
 800501e:	d877      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x170>
 8005020:	2b50      	cmp	r3, #80	@ 0x50
 8005022:	d03c      	beq.n	800509e <HAL_TIM_ConfigClockSource+0xfe>
 8005024:	2b50      	cmp	r3, #80	@ 0x50
 8005026:	d873      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x170>
 8005028:	2b40      	cmp	r3, #64	@ 0x40
 800502a:	d058      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x13e>
 800502c:	2b40      	cmp	r3, #64	@ 0x40
 800502e:	d86f      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x170>
 8005030:	2b30      	cmp	r3, #48	@ 0x30
 8005032:	d064      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x15e>
 8005034:	2b30      	cmp	r3, #48	@ 0x30
 8005036:	d86b      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x170>
 8005038:	2b20      	cmp	r3, #32
 800503a:	d060      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x15e>
 800503c:	2b20      	cmp	r3, #32
 800503e:	d867      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x170>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05c      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x15e>
 8005044:	2b10      	cmp	r3, #16
 8005046:	d05a      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x15e>
 8005048:	e062      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800505a:	f000 fc61 	bl	8005920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800506c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	609a      	str	r2, [r3, #8]
      break;
 8005076:	e04f      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005088:	f000 fc4a 	bl	8005920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800509a:	609a      	str	r2, [r3, #8]
      break;
 800509c:	e03c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fbbe 	bl	800582c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2150      	movs	r1, #80	@ 0x50
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fc17 	bl	80058ea <TIM_ITRx_SetConfig>
      break;
 80050bc:	e02c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 fbdd 	bl	800588a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2160      	movs	r1, #96	@ 0x60
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fc07 	bl	80058ea <TIM_ITRx_SetConfig>
      break;
 80050dc:	e01c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 fb9e 	bl	800582c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2140      	movs	r1, #64	@ 0x40
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fbf7 	bl	80058ea <TIM_ITRx_SetConfig>
      break;
 80050fc:	e00c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f000 fbee 	bl	80058ea <TIM_ITRx_SetConfig>
      break;
 800510e:	e003      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
      break;
 8005114:	e000      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005128:	7bfb      	ldrb	r3, [r7, #15]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a46      	ldr	r2, [pc, #280]	@ (8005260 <TIM_Base_SetConfig+0x12c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d013      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005152:	d00f      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a43      	ldr	r2, [pc, #268]	@ (8005264 <TIM_Base_SetConfig+0x130>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a42      	ldr	r2, [pc, #264]	@ (8005268 <TIM_Base_SetConfig+0x134>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a41      	ldr	r2, [pc, #260]	@ (800526c <TIM_Base_SetConfig+0x138>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a40      	ldr	r2, [pc, #256]	@ (8005270 <TIM_Base_SetConfig+0x13c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d108      	bne.n	8005186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a35      	ldr	r2, [pc, #212]	@ (8005260 <TIM_Base_SetConfig+0x12c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01f      	beq.n	80051ce <TIM_Base_SetConfig+0x9a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005194:	d01b      	beq.n	80051ce <TIM_Base_SetConfig+0x9a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a32      	ldr	r2, [pc, #200]	@ (8005264 <TIM_Base_SetConfig+0x130>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d017      	beq.n	80051ce <TIM_Base_SetConfig+0x9a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a31      	ldr	r2, [pc, #196]	@ (8005268 <TIM_Base_SetConfig+0x134>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <TIM_Base_SetConfig+0x9a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a30      	ldr	r2, [pc, #192]	@ (800526c <TIM_Base_SetConfig+0x138>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00f      	beq.n	80051ce <TIM_Base_SetConfig+0x9a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005270 <TIM_Base_SetConfig+0x13c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00b      	beq.n	80051ce <TIM_Base_SetConfig+0x9a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005274 <TIM_Base_SetConfig+0x140>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d007      	beq.n	80051ce <TIM_Base_SetConfig+0x9a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005278 <TIM_Base_SetConfig+0x144>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d003      	beq.n	80051ce <TIM_Base_SetConfig+0x9a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a2c      	ldr	r2, [pc, #176]	@ (800527c <TIM_Base_SetConfig+0x148>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d108      	bne.n	80051e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a16      	ldr	r2, [pc, #88]	@ (8005260 <TIM_Base_SetConfig+0x12c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00f      	beq.n	800522c <TIM_Base_SetConfig+0xf8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a18      	ldr	r2, [pc, #96]	@ (8005270 <TIM_Base_SetConfig+0x13c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_Base_SetConfig+0xf8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a17      	ldr	r2, [pc, #92]	@ (8005274 <TIM_Base_SetConfig+0x140>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_Base_SetConfig+0xf8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a16      	ldr	r2, [pc, #88]	@ (8005278 <TIM_Base_SetConfig+0x144>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0xf8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a15      	ldr	r2, [pc, #84]	@ (800527c <TIM_Base_SetConfig+0x148>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d103      	bne.n	8005234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d105      	bne.n	8005252 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f023 0201 	bic.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	611a      	str	r2, [r3, #16]
  }
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40012c00 	.word	0x40012c00
 8005264:	40000400 	.word	0x40000400
 8005268:	40000800 	.word	0x40000800
 800526c:	40000c00 	.word	0x40000c00
 8005270:	40013400 	.word	0x40013400
 8005274:	40014000 	.word	0x40014000
 8005278:	40014400 	.word	0x40014400
 800527c:	40014800 	.word	0x40014800

08005280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	f023 0201 	bic.w	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f023 0302 	bic.w	r3, r3, #2
 80052cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a2c      	ldr	r2, [pc, #176]	@ (800538c <TIM_OC1_SetConfig+0x10c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00f      	beq.n	8005300 <TIM_OC1_SetConfig+0x80>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005390 <TIM_OC1_SetConfig+0x110>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00b      	beq.n	8005300 <TIM_OC1_SetConfig+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005394 <TIM_OC1_SetConfig+0x114>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_OC1_SetConfig+0x80>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a29      	ldr	r2, [pc, #164]	@ (8005398 <TIM_OC1_SetConfig+0x118>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_OC1_SetConfig+0x80>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a28      	ldr	r2, [pc, #160]	@ (800539c <TIM_OC1_SetConfig+0x11c>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10c      	bne.n	800531a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0308 	bic.w	r3, r3, #8
 8005306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 0304 	bic.w	r3, r3, #4
 8005318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1b      	ldr	r2, [pc, #108]	@ (800538c <TIM_OC1_SetConfig+0x10c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00f      	beq.n	8005342 <TIM_OC1_SetConfig+0xc2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1a      	ldr	r2, [pc, #104]	@ (8005390 <TIM_OC1_SetConfig+0x110>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00b      	beq.n	8005342 <TIM_OC1_SetConfig+0xc2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a19      	ldr	r2, [pc, #100]	@ (8005394 <TIM_OC1_SetConfig+0x114>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d007      	beq.n	8005342 <TIM_OC1_SetConfig+0xc2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <TIM_OC1_SetConfig+0x118>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d003      	beq.n	8005342 <TIM_OC1_SetConfig+0xc2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a17      	ldr	r2, [pc, #92]	@ (800539c <TIM_OC1_SetConfig+0x11c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d111      	bne.n	8005366 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	621a      	str	r2, [r3, #32]
}
 8005380:	bf00      	nop
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	40012c00 	.word	0x40012c00
 8005390:	40013400 	.word	0x40013400
 8005394:	40014000 	.word	0x40014000
 8005398:	40014400 	.word	0x40014400
 800539c:	40014800 	.word	0x40014800

080053a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a1b      	ldr	r3, [r3, #32]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f023 0210 	bic.w	r2, r3, #16
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0320 	bic.w	r3, r3, #32
 80053ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a28      	ldr	r2, [pc, #160]	@ (80054a0 <TIM_OC2_SetConfig+0x100>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_OC2_SetConfig+0x6c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a27      	ldr	r2, [pc, #156]	@ (80054a4 <TIM_OC2_SetConfig+0x104>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d10d      	bne.n	8005428 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005426:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a1d      	ldr	r2, [pc, #116]	@ (80054a0 <TIM_OC2_SetConfig+0x100>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00f      	beq.n	8005450 <TIM_OC2_SetConfig+0xb0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a1c      	ldr	r2, [pc, #112]	@ (80054a4 <TIM_OC2_SetConfig+0x104>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_OC2_SetConfig+0xb0>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a1b      	ldr	r2, [pc, #108]	@ (80054a8 <TIM_OC2_SetConfig+0x108>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_OC2_SetConfig+0xb0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1a      	ldr	r2, [pc, #104]	@ (80054ac <TIM_OC2_SetConfig+0x10c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_OC2_SetConfig+0xb0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a19      	ldr	r2, [pc, #100]	@ (80054b0 <TIM_OC2_SetConfig+0x110>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d113      	bne.n	8005478 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800545e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	4313      	orrs	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40012c00 	.word	0x40012c00
 80054a4:	40013400 	.word	0x40013400
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800

080054b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0303 	bic.w	r3, r3, #3
 80054ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	021b      	lsls	r3, r3, #8
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a27      	ldr	r2, [pc, #156]	@ (80055b0 <TIM_OC3_SetConfig+0xfc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_OC3_SetConfig+0x6a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a26      	ldr	r2, [pc, #152]	@ (80055b4 <TIM_OC3_SetConfig+0x100>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d10d      	bne.n	800553a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005524:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1c      	ldr	r2, [pc, #112]	@ (80055b0 <TIM_OC3_SetConfig+0xfc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00f      	beq.n	8005562 <TIM_OC3_SetConfig+0xae>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a1b      	ldr	r2, [pc, #108]	@ (80055b4 <TIM_OC3_SetConfig+0x100>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00b      	beq.n	8005562 <TIM_OC3_SetConfig+0xae>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a1a      	ldr	r2, [pc, #104]	@ (80055b8 <TIM_OC3_SetConfig+0x104>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <TIM_OC3_SetConfig+0xae>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a19      	ldr	r2, [pc, #100]	@ (80055bc <TIM_OC3_SetConfig+0x108>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_OC3_SetConfig+0xae>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a18      	ldr	r2, [pc, #96]	@ (80055c0 <TIM_OC3_SetConfig+0x10c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d113      	bne.n	800558a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	621a      	str	r2, [r3, #32]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40013400 	.word	0x40013400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40014400 	.word	0x40014400
 80055c0:	40014800 	.word	0x40014800

080055c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005612:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	031b      	lsls	r3, r3, #12
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a18      	ldr	r2, [pc, #96]	@ (8005684 <TIM_OC4_SetConfig+0xc0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00f      	beq.n	8005648 <TIM_OC4_SetConfig+0x84>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a17      	ldr	r2, [pc, #92]	@ (8005688 <TIM_OC4_SetConfig+0xc4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00b      	beq.n	8005648 <TIM_OC4_SetConfig+0x84>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a16      	ldr	r2, [pc, #88]	@ (800568c <TIM_OC4_SetConfig+0xc8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d007      	beq.n	8005648 <TIM_OC4_SetConfig+0x84>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a15      	ldr	r2, [pc, #84]	@ (8005690 <TIM_OC4_SetConfig+0xcc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d003      	beq.n	8005648 <TIM_OC4_SetConfig+0x84>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a14      	ldr	r2, [pc, #80]	@ (8005694 <TIM_OC4_SetConfig+0xd0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d109      	bne.n	800565c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800564e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	019b      	lsls	r3, r3, #6
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40013400 	.word	0x40013400
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800

08005698 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80056dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	041b      	lsls	r3, r3, #16
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a17      	ldr	r2, [pc, #92]	@ (800574c <TIM_OC5_SetConfig+0xb4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_OC5_SetConfig+0x7a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a16      	ldr	r2, [pc, #88]	@ (8005750 <TIM_OC5_SetConfig+0xb8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_OC5_SetConfig+0x7a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a15      	ldr	r2, [pc, #84]	@ (8005754 <TIM_OC5_SetConfig+0xbc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_OC5_SetConfig+0x7a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a14      	ldr	r2, [pc, #80]	@ (8005758 <TIM_OC5_SetConfig+0xc0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC5_SetConfig+0x7a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a13      	ldr	r2, [pc, #76]	@ (800575c <TIM_OC5_SetConfig+0xc4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d109      	bne.n	8005726 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005718:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40013400 	.word	0x40013400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800

08005760 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800578e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4313      	orrs	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	051b      	lsls	r3, r3, #20
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a18      	ldr	r2, [pc, #96]	@ (8005818 <TIM_OC6_SetConfig+0xb8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00f      	beq.n	80057dc <TIM_OC6_SetConfig+0x7c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a17      	ldr	r2, [pc, #92]	@ (800581c <TIM_OC6_SetConfig+0xbc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00b      	beq.n	80057dc <TIM_OC6_SetConfig+0x7c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a16      	ldr	r2, [pc, #88]	@ (8005820 <TIM_OC6_SetConfig+0xc0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <TIM_OC6_SetConfig+0x7c>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a15      	ldr	r2, [pc, #84]	@ (8005824 <TIM_OC6_SetConfig+0xc4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC6_SetConfig+0x7c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a14      	ldr	r2, [pc, #80]	@ (8005828 <TIM_OC6_SetConfig+0xc8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d109      	bne.n	80057f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	029b      	lsls	r3, r3, #10
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40013400 	.word	0x40013400
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800

0800582c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f023 0201 	bic.w	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f023 030a 	bic.w	r3, r3, #10
 8005868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800588a:	b480      	push	{r7}
 800588c:	b087      	sub	sp, #28
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a1b      	ldr	r3, [r3, #32]
 80058a0:	f023 0210 	bic.w	r2, r3, #16
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	031b      	lsls	r3, r3, #12
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	f043 0307 	orr.w	r3, r3, #7
 800590c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	609a      	str	r2, [r3, #8]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800593a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	021a      	lsls	r2, r3, #8
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	431a      	orrs	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4313      	orrs	r3, r2
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	609a      	str	r2, [r3, #8]
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2201      	movs	r2, #1
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6a1a      	ldr	r2, [r3, #32]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	43db      	mvns	r3, r3
 8005982:	401a      	ands	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a1a      	ldr	r2, [r3, #32]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	431a      	orrs	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	621a      	str	r2, [r3, #32]
}
 800599e:	bf00      	nop
 80059a0:	371c      	adds	r7, #28
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e068      	b.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d004      	beq.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d108      	bne.n	8005a0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01d      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a36:	d018      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005aac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00e      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a18      	ldr	r2, [pc, #96]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d009      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a13      	ldr	r2, [pc, #76]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a14      	ldr	r2, [pc, #80]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d10c      	bne.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	40013400 	.word	0x40013400
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40014000 	.word	0x40014000

08005abc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e040      	b.n	8005b50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb fe5a 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	@ 0x24
 8005ae8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fffa 	bl	8006afc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fd3f 	bl	800658c <UART_SetConfig>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e01b      	b.n	8005b50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f001 f879 	bl	8006c40 <UART_CheckIdleState>
 8005b4e:	4603      	mov	r3, r0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e048      	b.n	8005bfc <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fb fe0c 	bl	8001798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	@ 0x24
 8005b84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 ffac 	bl	8006afc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 fcf1 	bl	800658c <UART_SetConfig>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e023      	b.n	8005bfc <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005bd2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 f823 	bl	8006c40 <UART_CheckIdleState>
 8005bfa:	4603      	mov	r3, r0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08a      	sub	sp, #40	@ 0x28
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	603b      	str	r3, [r7, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c18:	2b20      	cmp	r3, #32
 8005c1a:	d177      	bne.n	8005d0c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_UART_Transmit+0x24>
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e070      	b.n	8005d0e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2221      	movs	r2, #33	@ 0x21
 8005c38:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c3a:	f7fc f82b 	bl	8001c94 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c58:	d108      	bne.n	8005c6c <HAL_UART_Transmit+0x68>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	e003      	b.n	8005c74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c74:	e02f      	b.n	8005cd6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2180      	movs	r1, #128	@ 0x80
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f001 f885 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e03b      	b.n	8005d0e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	881a      	ldrh	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ca8:	b292      	uxth	r2, r2
 8005caa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	3302      	adds	r3, #2
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	e007      	b.n	8005cc4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1c9      	bne.n	8005c76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2140      	movs	r1, #64	@ 0x40
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f001 f84f 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e005      	b.n	8005d0e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b08a      	sub	sp, #40	@ 0x28
 8005d1a:	af02      	add	r7, sp, #8
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	603b      	str	r3, [r7, #0]
 8005d22:	4613      	mov	r3, r2
 8005d24:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	f040 80b6 	bne.w	8005e9e <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <HAL_UART_Receive+0x28>
 8005d38:	88fb      	ldrh	r3, [r7, #6]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0ae      	b.n	8005ea0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2222      	movs	r2, #34	@ 0x22
 8005d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d58:	f7fb ff9c 	bl	8001c94 <HAL_GetTick>
 8005d5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	88fa      	ldrh	r2, [r7, #6]
 8005d62:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	88fa      	ldrh	r2, [r7, #6]
 8005d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d76:	d10e      	bne.n	8005d96 <HAL_UART_Receive+0x80>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <HAL_UART_Receive+0x76>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005d86:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005d8a:	e02d      	b.n	8005de8 <HAL_UART_Receive+0xd2>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	22ff      	movs	r2, #255	@ 0xff
 8005d90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005d94:	e028      	b.n	8005de8 <HAL_UART_Receive+0xd2>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10d      	bne.n	8005dba <HAL_UART_Receive+0xa4>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <HAL_UART_Receive+0x9a>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	22ff      	movs	r2, #255	@ 0xff
 8005daa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005dae:	e01b      	b.n	8005de8 <HAL_UART_Receive+0xd2>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	227f      	movs	r2, #127	@ 0x7f
 8005db4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005db8:	e016      	b.n	8005de8 <HAL_UART_Receive+0xd2>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dc2:	d10d      	bne.n	8005de0 <HAL_UART_Receive+0xca>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <HAL_UART_Receive+0xc0>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	227f      	movs	r2, #127	@ 0x7f
 8005dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005dd4:	e008      	b.n	8005de8 <HAL_UART_Receive+0xd2>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	223f      	movs	r2, #63	@ 0x3f
 8005dda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005dde:	e003      	b.n	8005de8 <HAL_UART_Receive+0xd2>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005dee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005df8:	d108      	bne.n	8005e0c <HAL_UART_Receive+0xf6>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	e003      	b.n	8005e14 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e14:	e037      	b.n	8005e86 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2120      	movs	r1, #32
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 ffb5 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e033      	b.n	8005ea0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10c      	bne.n	8005e58 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	8a7b      	ldrh	r3, [r7, #18]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	3302      	adds	r3, #2
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	e00d      	b.n	8005e74 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	8a7b      	ldrh	r3, [r7, #18]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	4013      	ands	r3, r2
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	3301      	adds	r3, #1
 8005e72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1c1      	bne.n	8005e16 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e000      	b.n	8005ea0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005e9e:	2302      	movs	r3, #2
  }
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3720      	adds	r7, #32
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	@ 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d137      	bne.n	8005f30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d002      	beq.n	8005ecc <HAL_UART_Receive_IT+0x24>
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e030      	b.n	8005f32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a18      	ldr	r2, [pc, #96]	@ (8005f3c <HAL_UART_Receive_IT+0x94>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d01f      	beq.n	8005f20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d018      	beq.n	8005f20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	613b      	str	r3, [r7, #16]
   return(result);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	623b      	str	r3, [r7, #32]
 8005f0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	69f9      	ldr	r1, [r7, #28]
 8005f12:	6a3a      	ldr	r2, [r7, #32]
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	461a      	mov	r2, r3
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 ffa0 	bl	8006e6c <UART_Start_Receive_IT>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	e000      	b.n	8005f32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3728      	adds	r7, #40	@ 0x28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40008000 	.word	0x40008000

08005f40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b0ba      	sub	sp, #232	@ 0xe8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005f6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005f6e:	4013      	ands	r3, r2
 8005f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005f74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d115      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00f      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d009      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 82ca 	beq.w	8006532 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	4798      	blx	r3
      }
      return;
 8005fa6:	e2c4      	b.n	8006532 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005fa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8117 	beq.w	80061e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005fbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005fc2:	4b85      	ldr	r3, [pc, #532]	@ (80061d8 <HAL_UART_IRQHandler+0x298>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 810a 	beq.w	80061e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d011      	beq.n	8005ffc <HAL_UART_IRQHandler+0xbc>
 8005fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00b      	beq.n	8005ffc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff2:	f043 0201 	orr.w	r2, r3, #1
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d011      	beq.n	800602c <HAL_UART_IRQHandler+0xec>
 8006008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2202      	movs	r2, #2
 800601a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006022:	f043 0204 	orr.w	r2, r3, #4
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800602c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d011      	beq.n	800605c <HAL_UART_IRQHandler+0x11c>
 8006038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00b      	beq.n	800605c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2204      	movs	r2, #4
 800604a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006052:	f043 0202 	orr.w	r2, r3, #2
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800605c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d017      	beq.n	8006098 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d105      	bne.n	8006080 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006078:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00b      	beq.n	8006098 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2208      	movs	r2, #8
 8006086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800608e:	f043 0208 	orr.w	r2, r3, #8
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800609c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d012      	beq.n	80060ca <HAL_UART_IRQHandler+0x18a>
 80060a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8230 	beq.w	8006536 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80060d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00d      	beq.n	80060fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006104:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006112:	2b40      	cmp	r3, #64	@ 0x40
 8006114:	d005      	beq.n	8006122 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800611a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800611e:	2b00      	cmp	r3, #0
 8006120:	d04f      	beq.n	80061c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 ff68 	bl	8006ff8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006132:	2b40      	cmp	r3, #64	@ 0x40
 8006134:	d141      	bne.n	80061ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3308      	adds	r3, #8
 800613c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800614c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006150:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3308      	adds	r3, #8
 800615e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006162:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006166:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800616e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800617a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1d9      	bne.n	8006136 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006186:	2b00      	cmp	r3, #0
 8006188:	d013      	beq.n	80061b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800618e:	4a13      	ldr	r2, [pc, #76]	@ (80061dc <HAL_UART_IRQHandler+0x29c>)
 8006190:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006196:	4618      	mov	r0, r3
 8006198:	f7fb fefb 	bl	8001f92 <HAL_DMA_Abort_IT>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d017      	beq.n	80061d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80061ac:	4610      	mov	r0, r2
 80061ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	e00f      	b.n	80061d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f9d4 	bl	8006560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b8:	e00b      	b.n	80061d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f9d0 	bl	8006560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c0:	e007      	b.n	80061d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f9cc 	bl	8006560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80061d0:	e1b1      	b.n	8006536 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d2:	bf00      	nop
    return;
 80061d4:	e1af      	b.n	8006536 <HAL_UART_IRQHandler+0x5f6>
 80061d6:	bf00      	nop
 80061d8:	04000120 	.word	0x04000120
 80061dc:	080070c1 	.word	0x080070c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	f040 816a 	bne.w	80064be <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8163 	beq.w	80064be <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80061f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 815c 	beq.w	80064be <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2210      	movs	r2, #16
 800620c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006218:	2b40      	cmp	r3, #64	@ 0x40
 800621a:	f040 80d4 	bne.w	80063c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800622a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80ad 	beq.w	800638e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800623a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800623e:	429a      	cmp	r2, r3
 8006240:	f080 80a5 	bcs.w	800638e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800624a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 8086 	bne.w	800636c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800626c:	e853 3f00 	ldrex	r3, [r3]
 8006270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800627c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800628a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800628e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1da      	bne.n	8006260 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3308      	adds	r3, #8
 80062b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062bc:	f023 0301 	bic.w	r3, r3, #1
 80062c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	3308      	adds	r3, #8
 80062ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80062d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80062d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e1      	bne.n	80062aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062f0:	e853 3f00 	ldrex	r3, [r3]
 80062f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3308      	adds	r3, #8
 8006306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800630a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800630c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1e3      	bne.n	80062e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800633a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800633c:	f023 0310 	bic.w	r3, r3, #16
 8006340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800634e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006350:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800635c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e4      	bne.n	800632c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006366:	4618      	mov	r0, r3
 8006368:	f7fb fdd5 	bl	8001f16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800637e:	b29b      	uxth	r3, r3
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	b29b      	uxth	r3, r3
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8f4 	bl	8006574 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800638c:	e0d5      	b.n	800653a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006394:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006398:	429a      	cmp	r2, r3
 800639a:	f040 80ce 	bne.w	800653a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	f040 80c5 	bne.w	800653a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f8d8 	bl	8006574 <HAL_UARTEx_RxEventCallback>
      return;
 80063c4:	e0b9      	b.n	800653a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80ab 	beq.w	800653e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80063e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80a6 	beq.w	800653e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006414:	647b      	str	r3, [r7, #68]	@ 0x44
 8006416:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800641a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e4      	bne.n	80063f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3308      	adds	r3, #8
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	623b      	str	r3, [r7, #32]
   return(result);
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3308      	adds	r3, #8
 8006448:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800644c:	633a      	str	r2, [r7, #48]	@ 0x30
 800644e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006450:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006452:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006454:	e841 2300 	strex	r3, r2, [r1]
 8006458:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800645a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1e3      	bne.n	8006428 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	60fb      	str	r3, [r7, #12]
   return(result);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f023 0310 	bic.w	r3, r3, #16
 8006488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	69b9      	ldr	r1, [r7, #24]
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	617b      	str	r3, [r7, #20]
   return(result);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e4      	bne.n	8006474 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2202      	movs	r2, #2
 80064ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f85c 	bl	8006574 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064bc:	e03f      	b.n	800653e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80064be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00e      	beq.n	80064e8 <HAL_UART_IRQHandler+0x5a8>
 80064ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80064de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 ffe9 	bl	80074b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80064e6:	e02d      	b.n	8006544 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80064e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00e      	beq.n	8006512 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80064f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d008      	beq.n	8006512 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01c      	beq.n	8006542 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
    }
    return;
 8006510:	e017      	b.n	8006542 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d012      	beq.n	8006544 <HAL_UART_IRQHandler+0x604>
 800651e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00c      	beq.n	8006544 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fdde 	bl	80070ec <UART_EndTransmit_IT>
    return;
 8006530:	e008      	b.n	8006544 <HAL_UART_IRQHandler+0x604>
      return;
 8006532:	bf00      	nop
 8006534:	e006      	b.n	8006544 <HAL_UART_IRQHandler+0x604>
    return;
 8006536:	bf00      	nop
 8006538:	e004      	b.n	8006544 <HAL_UART_IRQHandler+0x604>
      return;
 800653a:	bf00      	nop
 800653c:	e002      	b.n	8006544 <HAL_UART_IRQHandler+0x604>
      return;
 800653e:	bf00      	nop
 8006540:	e000      	b.n	8006544 <HAL_UART_IRQHandler+0x604>
    return;
 8006542:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006544:	37e8      	adds	r7, #232	@ 0xe8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop

0800654c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800658c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006590:	b08a      	sub	sp, #40	@ 0x28
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4ba4      	ldr	r3, [pc, #656]	@ (800684c <UART_SetConfig+0x2c0>)
 80065bc:	4013      	ands	r3, r2
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a99      	ldr	r2, [pc, #612]	@ (8006850 <UART_SetConfig+0x2c4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065f4:	4313      	orrs	r3, r2
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006608:	430a      	orrs	r2, r1
 800660a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a90      	ldr	r2, [pc, #576]	@ (8006854 <UART_SetConfig+0x2c8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d126      	bne.n	8006664 <UART_SetConfig+0xd8>
 8006616:	4b90      	ldr	r3, [pc, #576]	@ (8006858 <UART_SetConfig+0x2cc>)
 8006618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	2b03      	cmp	r3, #3
 8006622:	d81b      	bhi.n	800665c <UART_SetConfig+0xd0>
 8006624:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <UART_SetConfig+0xa0>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	0800663d 	.word	0x0800663d
 8006630:	0800664d 	.word	0x0800664d
 8006634:	08006645 	.word	0x08006645
 8006638:	08006655 	.word	0x08006655
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006642:	e116      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006644:	2302      	movs	r3, #2
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664a:	e112      	b.n	8006872 <UART_SetConfig+0x2e6>
 800664c:	2304      	movs	r3, #4
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006652:	e10e      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006654:	2308      	movs	r3, #8
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665a:	e10a      	b.n	8006872 <UART_SetConfig+0x2e6>
 800665c:	2310      	movs	r3, #16
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006662:	e106      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a7c      	ldr	r2, [pc, #496]	@ (800685c <UART_SetConfig+0x2d0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d138      	bne.n	80066e0 <UART_SetConfig+0x154>
 800666e:	4b7a      	ldr	r3, [pc, #488]	@ (8006858 <UART_SetConfig+0x2cc>)
 8006670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b0c      	cmp	r3, #12
 800667a:	d82d      	bhi.n	80066d8 <UART_SetConfig+0x14c>
 800667c:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <UART_SetConfig+0xf8>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080066d9 	.word	0x080066d9
 800668c:	080066d9 	.word	0x080066d9
 8006690:	080066d9 	.word	0x080066d9
 8006694:	080066c9 	.word	0x080066c9
 8006698:	080066d9 	.word	0x080066d9
 800669c:	080066d9 	.word	0x080066d9
 80066a0:	080066d9 	.word	0x080066d9
 80066a4:	080066c1 	.word	0x080066c1
 80066a8:	080066d9 	.word	0x080066d9
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	080066d9 	.word	0x080066d9
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066be:	e0d8      	b.n	8006872 <UART_SetConfig+0x2e6>
 80066c0:	2302      	movs	r3, #2
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c6:	e0d4      	b.n	8006872 <UART_SetConfig+0x2e6>
 80066c8:	2304      	movs	r3, #4
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ce:	e0d0      	b.n	8006872 <UART_SetConfig+0x2e6>
 80066d0:	2308      	movs	r3, #8
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d6:	e0cc      	b.n	8006872 <UART_SetConfig+0x2e6>
 80066d8:	2310      	movs	r3, #16
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066de:	e0c8      	b.n	8006872 <UART_SetConfig+0x2e6>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a5e      	ldr	r2, [pc, #376]	@ (8006860 <UART_SetConfig+0x2d4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d125      	bne.n	8006736 <UART_SetConfig+0x1aa>
 80066ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006858 <UART_SetConfig+0x2cc>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066f4:	2b30      	cmp	r3, #48	@ 0x30
 80066f6:	d016      	beq.n	8006726 <UART_SetConfig+0x19a>
 80066f8:	2b30      	cmp	r3, #48	@ 0x30
 80066fa:	d818      	bhi.n	800672e <UART_SetConfig+0x1a2>
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d00a      	beq.n	8006716 <UART_SetConfig+0x18a>
 8006700:	2b20      	cmp	r3, #32
 8006702:	d814      	bhi.n	800672e <UART_SetConfig+0x1a2>
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <UART_SetConfig+0x182>
 8006708:	2b10      	cmp	r3, #16
 800670a:	d008      	beq.n	800671e <UART_SetConfig+0x192>
 800670c:	e00f      	b.n	800672e <UART_SetConfig+0x1a2>
 800670e:	2300      	movs	r3, #0
 8006710:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006714:	e0ad      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006716:	2302      	movs	r3, #2
 8006718:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800671c:	e0a9      	b.n	8006872 <UART_SetConfig+0x2e6>
 800671e:	2304      	movs	r3, #4
 8006720:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006724:	e0a5      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006726:	2308      	movs	r3, #8
 8006728:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800672c:	e0a1      	b.n	8006872 <UART_SetConfig+0x2e6>
 800672e:	2310      	movs	r3, #16
 8006730:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006734:	e09d      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a4a      	ldr	r2, [pc, #296]	@ (8006864 <UART_SetConfig+0x2d8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d125      	bne.n	800678c <UART_SetConfig+0x200>
 8006740:	4b45      	ldr	r3, [pc, #276]	@ (8006858 <UART_SetConfig+0x2cc>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006746:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800674a:	2bc0      	cmp	r3, #192	@ 0xc0
 800674c:	d016      	beq.n	800677c <UART_SetConfig+0x1f0>
 800674e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006750:	d818      	bhi.n	8006784 <UART_SetConfig+0x1f8>
 8006752:	2b80      	cmp	r3, #128	@ 0x80
 8006754:	d00a      	beq.n	800676c <UART_SetConfig+0x1e0>
 8006756:	2b80      	cmp	r3, #128	@ 0x80
 8006758:	d814      	bhi.n	8006784 <UART_SetConfig+0x1f8>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <UART_SetConfig+0x1d8>
 800675e:	2b40      	cmp	r3, #64	@ 0x40
 8006760:	d008      	beq.n	8006774 <UART_SetConfig+0x1e8>
 8006762:	e00f      	b.n	8006784 <UART_SetConfig+0x1f8>
 8006764:	2300      	movs	r3, #0
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676a:	e082      	b.n	8006872 <UART_SetConfig+0x2e6>
 800676c:	2302      	movs	r3, #2
 800676e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006772:	e07e      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006774:	2304      	movs	r3, #4
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677a:	e07a      	b.n	8006872 <UART_SetConfig+0x2e6>
 800677c:	2308      	movs	r3, #8
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006782:	e076      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006784:	2310      	movs	r3, #16
 8006786:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678a:	e072      	b.n	8006872 <UART_SetConfig+0x2e6>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a35      	ldr	r2, [pc, #212]	@ (8006868 <UART_SetConfig+0x2dc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d12a      	bne.n	80067ec <UART_SetConfig+0x260>
 8006796:	4b30      	ldr	r3, [pc, #192]	@ (8006858 <UART_SetConfig+0x2cc>)
 8006798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800679c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067a4:	d01a      	beq.n	80067dc <UART_SetConfig+0x250>
 80067a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067aa:	d81b      	bhi.n	80067e4 <UART_SetConfig+0x258>
 80067ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067b0:	d00c      	beq.n	80067cc <UART_SetConfig+0x240>
 80067b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067b6:	d815      	bhi.n	80067e4 <UART_SetConfig+0x258>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <UART_SetConfig+0x238>
 80067bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c0:	d008      	beq.n	80067d4 <UART_SetConfig+0x248>
 80067c2:	e00f      	b.n	80067e4 <UART_SetConfig+0x258>
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ca:	e052      	b.n	8006872 <UART_SetConfig+0x2e6>
 80067cc:	2302      	movs	r3, #2
 80067ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d2:	e04e      	b.n	8006872 <UART_SetConfig+0x2e6>
 80067d4:	2304      	movs	r3, #4
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067da:	e04a      	b.n	8006872 <UART_SetConfig+0x2e6>
 80067dc:	2308      	movs	r3, #8
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e2:	e046      	b.n	8006872 <UART_SetConfig+0x2e6>
 80067e4:	2310      	movs	r3, #16
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ea:	e042      	b.n	8006872 <UART_SetConfig+0x2e6>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a17      	ldr	r2, [pc, #92]	@ (8006850 <UART_SetConfig+0x2c4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d13a      	bne.n	800686c <UART_SetConfig+0x2e0>
 80067f6:	4b18      	ldr	r3, [pc, #96]	@ (8006858 <UART_SetConfig+0x2cc>)
 80067f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006800:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006804:	d01a      	beq.n	800683c <UART_SetConfig+0x2b0>
 8006806:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800680a:	d81b      	bhi.n	8006844 <UART_SetConfig+0x2b8>
 800680c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006810:	d00c      	beq.n	800682c <UART_SetConfig+0x2a0>
 8006812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006816:	d815      	bhi.n	8006844 <UART_SetConfig+0x2b8>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <UART_SetConfig+0x298>
 800681c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006820:	d008      	beq.n	8006834 <UART_SetConfig+0x2a8>
 8006822:	e00f      	b.n	8006844 <UART_SetConfig+0x2b8>
 8006824:	2300      	movs	r3, #0
 8006826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682a:	e022      	b.n	8006872 <UART_SetConfig+0x2e6>
 800682c:	2302      	movs	r3, #2
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006832:	e01e      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006834:	2304      	movs	r3, #4
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683a:	e01a      	b.n	8006872 <UART_SetConfig+0x2e6>
 800683c:	2308      	movs	r3, #8
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006842:	e016      	b.n	8006872 <UART_SetConfig+0x2e6>
 8006844:	2310      	movs	r3, #16
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684a:	e012      	b.n	8006872 <UART_SetConfig+0x2e6>
 800684c:	efff69f3 	.word	0xefff69f3
 8006850:	40008000 	.word	0x40008000
 8006854:	40013800 	.word	0x40013800
 8006858:	40021000 	.word	0x40021000
 800685c:	40004400 	.word	0x40004400
 8006860:	40004800 	.word	0x40004800
 8006864:	40004c00 	.word	0x40004c00
 8006868:	40005000 	.word	0x40005000
 800686c:	2310      	movs	r3, #16
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a9f      	ldr	r2, [pc, #636]	@ (8006af4 <UART_SetConfig+0x568>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d17a      	bne.n	8006972 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800687c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006880:	2b08      	cmp	r3, #8
 8006882:	d824      	bhi.n	80068ce <UART_SetConfig+0x342>
 8006884:	a201      	add	r2, pc, #4	@ (adr r2, 800688c <UART_SetConfig+0x300>)
 8006886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688a:	bf00      	nop
 800688c:	080068b1 	.word	0x080068b1
 8006890:	080068cf 	.word	0x080068cf
 8006894:	080068b9 	.word	0x080068b9
 8006898:	080068cf 	.word	0x080068cf
 800689c:	080068bf 	.word	0x080068bf
 80068a0:	080068cf 	.word	0x080068cf
 80068a4:	080068cf 	.word	0x080068cf
 80068a8:	080068cf 	.word	0x080068cf
 80068ac:	080068c7 	.word	0x080068c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068b0:	f7fd fa36 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 80068b4:	61f8      	str	r0, [r7, #28]
        break;
 80068b6:	e010      	b.n	80068da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b8:	4b8f      	ldr	r3, [pc, #572]	@ (8006af8 <UART_SetConfig+0x56c>)
 80068ba:	61fb      	str	r3, [r7, #28]
        break;
 80068bc:	e00d      	b.n	80068da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068be:	f7fd f997 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 80068c2:	61f8      	str	r0, [r7, #28]
        break;
 80068c4:	e009      	b.n	80068da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ca:	61fb      	str	r3, [r7, #28]
        break;
 80068cc:	e005      	b.n	80068da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 80fb 	beq.w	8006ad8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	4413      	add	r3, r2
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d305      	bcc.n	80068fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d903      	bls.n	8006906 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006904:	e0e8      	b.n	8006ad8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	2200      	movs	r2, #0
 800690a:	461c      	mov	r4, r3
 800690c:	4615      	mov	r5, r2
 800690e:	f04f 0200 	mov.w	r2, #0
 8006912:	f04f 0300 	mov.w	r3, #0
 8006916:	022b      	lsls	r3, r5, #8
 8006918:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800691c:	0222      	lsls	r2, r4, #8
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	6849      	ldr	r1, [r1, #4]
 8006922:	0849      	lsrs	r1, r1, #1
 8006924:	2000      	movs	r0, #0
 8006926:	4688      	mov	r8, r1
 8006928:	4681      	mov	r9, r0
 800692a:	eb12 0a08 	adds.w	sl, r2, r8
 800692e:	eb43 0b09 	adc.w	fp, r3, r9
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	603b      	str	r3, [r7, #0]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006940:	4650      	mov	r0, sl
 8006942:	4659      	mov	r1, fp
 8006944:	f7f9 fc94 	bl	8000270 <__aeabi_uldivmod>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4613      	mov	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006956:	d308      	bcc.n	800696a <UART_SetConfig+0x3de>
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800695e:	d204      	bcs.n	800696a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	60da      	str	r2, [r3, #12]
 8006968:	e0b6      	b.n	8006ad8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006970:	e0b2      	b.n	8006ad8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800697a:	d15e      	bne.n	8006a3a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800697c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006980:	2b08      	cmp	r3, #8
 8006982:	d828      	bhi.n	80069d6 <UART_SetConfig+0x44a>
 8006984:	a201      	add	r2, pc, #4	@ (adr r2, 800698c <UART_SetConfig+0x400>)
 8006986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698a:	bf00      	nop
 800698c:	080069b1 	.word	0x080069b1
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069c1 	.word	0x080069c1
 8006998:	080069d7 	.word	0x080069d7
 800699c:	080069c7 	.word	0x080069c7
 80069a0:	080069d7 	.word	0x080069d7
 80069a4:	080069d7 	.word	0x080069d7
 80069a8:	080069d7 	.word	0x080069d7
 80069ac:	080069cf 	.word	0x080069cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b0:	f7fd f9b6 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 80069b4:	61f8      	str	r0, [r7, #28]
        break;
 80069b6:	e014      	b.n	80069e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069b8:	f7fd f9c8 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 80069bc:	61f8      	str	r0, [r7, #28]
        break;
 80069be:	e010      	b.n	80069e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c0:	4b4d      	ldr	r3, [pc, #308]	@ (8006af8 <UART_SetConfig+0x56c>)
 80069c2:	61fb      	str	r3, [r7, #28]
        break;
 80069c4:	e00d      	b.n	80069e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069c6:	f7fd f913 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 80069ca:	61f8      	str	r0, [r7, #28]
        break;
 80069cc:	e009      	b.n	80069e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d2:	61fb      	str	r3, [r7, #28]
        break;
 80069d4:	e005      	b.n	80069e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d077      	beq.n	8006ad8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	005a      	lsls	r2, r3, #1
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	085b      	lsrs	r3, r3, #1
 80069f2:	441a      	add	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b0f      	cmp	r3, #15
 8006a02:	d916      	bls.n	8006a32 <UART_SetConfig+0x4a6>
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a0a:	d212      	bcs.n	8006a32 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f023 030f 	bic.w	r3, r3, #15
 8006a14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	085b      	lsrs	r3, r3, #1
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	8afb      	ldrh	r3, [r7, #22]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	8afa      	ldrh	r2, [r7, #22]
 8006a2e:	60da      	str	r2, [r3, #12]
 8006a30:	e052      	b.n	8006ad8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a38:	e04e      	b.n	8006ad8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d827      	bhi.n	8006a92 <UART_SetConfig+0x506>
 8006a42:	a201      	add	r2, pc, #4	@ (adr r2, 8006a48 <UART_SetConfig+0x4bc>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a75 	.word	0x08006a75
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	08006a93 	.word	0x08006a93
 8006a58:	08006a83 	.word	0x08006a83
 8006a5c:	08006a93 	.word	0x08006a93
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006a93 	.word	0x08006a93
 8006a68:	08006a8b 	.word	0x08006a8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a6c:	f7fd f958 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 8006a70:	61f8      	str	r0, [r7, #28]
        break;
 8006a72:	e014      	b.n	8006a9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a74:	f7fd f96a 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 8006a78:	61f8      	str	r0, [r7, #28]
        break;
 8006a7a:	e010      	b.n	8006a9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8006af8 <UART_SetConfig+0x56c>)
 8006a7e:	61fb      	str	r3, [r7, #28]
        break;
 8006a80:	e00d      	b.n	8006a9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a82:	f7fd f8b5 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8006a86:	61f8      	str	r0, [r7, #28]
        break;
 8006a88:	e009      	b.n	8006a9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a8e:	61fb      	str	r3, [r7, #28]
        break;
 8006a90:	e005      	b.n	8006a9e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a9c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d019      	beq.n	8006ad8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	085a      	lsrs	r2, r3, #1
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	441a      	add	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b0f      	cmp	r3, #15
 8006abc:	d909      	bls.n	8006ad2 <UART_SetConfig+0x546>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac4:	d205      	bcs.n	8006ad2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60da      	str	r2, [r3, #12]
 8006ad0:	e002      	b.n	8006ad8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006ae4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3728      	adds	r7, #40	@ 0x28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006af2:	bf00      	nop
 8006af4:	40008000 	.word	0x40008000
 8006af8:	00f42400 	.word	0x00f42400

08006afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00a      	beq.n	8006b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00a      	beq.n	8006b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00a      	beq.n	8006b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01a      	beq.n	8006c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bfa:	d10a      	bne.n	8006c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	605a      	str	r2, [r3, #4]
  }
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b098      	sub	sp, #96	@ 0x60
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c50:	f7fb f820 	bl	8001c94 <HAL_GetTick>
 8006c54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d12e      	bne.n	8006cc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f88c 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d021      	beq.n	8006cc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e062      	b.n	8006d88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d149      	bne.n	8006d64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f856 	bl	8006d90 <UART_WaitOnFlagUntilTimeout>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d03c      	beq.n	8006d64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e6      	bne.n	8006cea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3308      	adds	r3, #8
 8006d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	e853 3f00 	ldrex	r3, [r3]
 8006d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3308      	adds	r3, #8
 8006d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d3c:	61fa      	str	r2, [r7, #28]
 8006d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d40:	69b9      	ldr	r1, [r7, #24]
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	e841 2300 	strex	r3, r2, [r1]
 8006d48:	617b      	str	r3, [r7, #20]
   return(result);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1e5      	bne.n	8006d1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e011      	b.n	8006d88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3758      	adds	r7, #88	@ 0x58
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da0:	e04f      	b.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da8:	d04b      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006daa:	f7fa ff73 	bl	8001c94 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d302      	bcc.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e04e      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d037      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b80      	cmp	r3, #128	@ 0x80
 8006dd6:	d034      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b40      	cmp	r3, #64	@ 0x40
 8006ddc:	d031      	beq.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69db      	ldr	r3, [r3, #28]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d110      	bne.n	8006e0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2208      	movs	r2, #8
 8006df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f8ff 	bl	8006ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e029      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e1c:	d111      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 f8e5 	bl	8006ff8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e00f      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d0a0      	beq.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b097      	sub	sp, #92	@ 0x5c
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	4613      	mov	r3, r2
 8006e78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e9e:	d10e      	bne.n	8006ebe <UART_Start_Receive_IT+0x52>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <UART_Start_Receive_IT+0x48>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006eae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006eb2:	e02d      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	@ 0xff
 8006eb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ebc:	e028      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d10d      	bne.n	8006ee2 <UART_Start_Receive_IT+0x76>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <UART_Start_Receive_IT+0x6c>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	22ff      	movs	r2, #255	@ 0xff
 8006ed2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ed6:	e01b      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	227f      	movs	r2, #127	@ 0x7f
 8006edc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006ee0:	e016      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eea:	d10d      	bne.n	8006f08 <UART_Start_Receive_IT+0x9c>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d104      	bne.n	8006efe <UART_Start_Receive_IT+0x92>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	227f      	movs	r2, #127	@ 0x7f
 8006ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006efc:	e008      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	223f      	movs	r2, #63	@ 0x3f
 8006f02:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f06:	e003      	b.n	8006f10 <UART_Start_Receive_IT+0xa4>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2222      	movs	r2, #34	@ 0x22
 8006f1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	f043 0301 	orr.w	r3, r3, #1
 8006f36:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f40:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006f42:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e5      	bne.n	8006f20 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f5c:	d107      	bne.n	8006f6e <UART_Start_Receive_IT+0x102>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d103      	bne.n	8006f6e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	4a21      	ldr	r2, [pc, #132]	@ (8006ff0 <UART_Start_Receive_IT+0x184>)
 8006f6a:	669a      	str	r2, [r3, #104]	@ 0x68
 8006f6c:	e002      	b.n	8006f74 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4a20      	ldr	r2, [pc, #128]	@ (8006ff4 <UART_Start_Receive_IT+0x188>)
 8006f72:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d019      	beq.n	8006fb0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006fa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e6      	bne.n	8006f7c <UART_Start_Receive_IT+0x110>
 8006fae:	e018      	b.n	8006fe2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f043 0320 	orr.w	r3, r3, #32
 8006fc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fce:	623b      	str	r3, [r7, #32]
 8006fd0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	69f9      	ldr	r1, [r7, #28]
 8006fd4:	6a3a      	ldr	r2, [r7, #32]
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e6      	bne.n	8006fb0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	375c      	adds	r7, #92	@ 0x5c
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	080072fd 	.word	0x080072fd
 8006ff4:	08007141 	.word	0x08007141

08006ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b095      	sub	sp, #84	@ 0x54
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800700e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800701e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007020:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007022:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007024:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e6      	bne.n	8007000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	61fb      	str	r3, [r7, #28]
   return(result);
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	f023 0301 	bic.w	r3, r3, #1
 8007048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007054:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800705a:	e841 2300 	strex	r3, r2, [r1]
 800705e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e5      	bne.n	8007032 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800706a:	2b01      	cmp	r3, #1
 800706c:	d118      	bne.n	80070a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	60bb      	str	r3, [r7, #8]
   return(result);
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f023 0310 	bic.w	r3, r3, #16
 8007082:	647b      	str	r3, [r7, #68]	@ 0x44
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6979      	ldr	r1, [r7, #20]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	613b      	str	r3, [r7, #16]
   return(result);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e6      	bne.n	800706e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070b4:	bf00      	nop
 80070b6:	3754      	adds	r7, #84	@ 0x54
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f7ff fa3e 	bl	8006560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b088      	sub	sp, #32
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	60bb      	str	r3, [r7, #8]
   return(result);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007108:	61fb      	str	r3, [r7, #28]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6979      	ldr	r1, [r7, #20]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	613b      	str	r3, [r7, #16]
   return(result);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e6      	bne.n	80070f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fa0a 	bl	800654c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007138:	bf00      	nop
 800713a:	3720      	adds	r7, #32
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b09c      	sub	sp, #112	@ 0x70
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800714e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007158:	2b22      	cmp	r3, #34	@ 0x22
 800715a:	f040 80be 	bne.w	80072da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007164:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007168:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800716c:	b2d9      	uxtb	r1, r3
 800716e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007172:	b2da      	uxtb	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007178:	400a      	ands	r2, r1
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f040 80a3 	bne.w	80072ee <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e6      	bne.n	80071a8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3308      	adds	r3, #8
 80071e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ec:	f023 0301 	bic.w	r3, r3, #1
 80071f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3308      	adds	r3, #8
 80071f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80071fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80071fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e5      	bne.n	80071da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2220      	movs	r2, #32
 8007212:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a34      	ldr	r2, [pc, #208]	@ (80072f8 <UART_RxISR_8BIT+0x1b8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d01f      	beq.n	800726c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d018      	beq.n	800726c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	623b      	str	r3, [r7, #32]
   return(result);
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800724e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	461a      	mov	r2, r3
 8007256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007258:	633b      	str	r3, [r7, #48]	@ 0x30
 800725a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800725e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e6      	bne.n	800723a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007270:	2b01      	cmp	r3, #1
 8007272:	d12e      	bne.n	80072d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	60fb      	str	r3, [r7, #12]
   return(result);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0310 	bic.w	r3, r3, #16
 800728e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007298:	61fb      	str	r3, [r7, #28]
 800729a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	69b9      	ldr	r1, [r7, #24]
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	617b      	str	r3, [r7, #20]
   return(result);
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e6      	bne.n	800727a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f003 0310 	and.w	r3, r3, #16
 80072b6:	2b10      	cmp	r3, #16
 80072b8:	d103      	bne.n	80072c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2210      	movs	r2, #16
 80072c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff f952 	bl	8006574 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072d0:	e00d      	b.n	80072ee <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7f9 fa42 	bl	800075c <HAL_UART_RxCpltCallback>
}
 80072d8:	e009      	b.n	80072ee <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	8b1b      	ldrh	r3, [r3, #24]
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0208 	orr.w	r2, r2, #8
 80072ea:	b292      	uxth	r2, r2
 80072ec:	831a      	strh	r2, [r3, #24]
}
 80072ee:	bf00      	nop
 80072f0:	3770      	adds	r7, #112	@ 0x70
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	40008000 	.word	0x40008000

080072fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b09c      	sub	sp, #112	@ 0x70
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800730a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007314:	2b22      	cmp	r3, #34	@ 0x22
 8007316:	f040 80be 	bne.w	8007496 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007320:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007328:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800732a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800732e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007332:	4013      	ands	r3, r2
 8007334:	b29a      	uxth	r2, r3
 8007336:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007338:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733e:	1c9a      	adds	r2, r3, #2
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	f040 80a3 	bne.w	80074aa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007374:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007378:	667b      	str	r3, [r7, #100]	@ 0x64
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	461a      	mov	r2, r3
 8007380:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007382:	657b      	str	r3, [r7, #84]	@ 0x54
 8007384:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007388:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e6      	bne.n	8007364 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3308      	adds	r3, #8
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a8:	f023 0301 	bic.w	r3, r3, #1
 80073ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3308      	adds	r3, #8
 80073b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80073b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e5      	bne.n	8007396 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a34      	ldr	r2, [pc, #208]	@ (80074b4 <UART_RxISR_16BIT+0x1b8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d01f      	beq.n	8007428 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d018      	beq.n	8007428 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	61fb      	str	r3, [r7, #28]
   return(result);
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800740a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007416:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800741a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e6      	bne.n	80073f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800742c:	2b01      	cmp	r3, #1
 800742e:	d12e      	bne.n	800748e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	e853 3f00 	ldrex	r3, [r3]
 8007442:	60bb      	str	r3, [r7, #8]
   return(result);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f023 0310 	bic.w	r3, r3, #16
 800744a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	461a      	mov	r2, r3
 8007452:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007458:	6979      	ldr	r1, [r7, #20]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	e841 2300 	strex	r3, r2, [r1]
 8007460:	613b      	str	r3, [r7, #16]
   return(result);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e6      	bne.n	8007436 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f003 0310 	and.w	r3, r3, #16
 8007472:	2b10      	cmp	r3, #16
 8007474:	d103      	bne.n	800747e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2210      	movs	r2, #16
 800747c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff f874 	bl	8006574 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800748c:	e00d      	b.n	80074aa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7f9 f964 	bl	800075c <HAL_UART_RxCpltCallback>
}
 8007494:	e009      	b.n	80074aa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	8b1b      	ldrh	r3, [r3, #24]
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0208 	orr.w	r2, r2, #8
 80074a6:	b292      	uxth	r2, r2
 80074a8:	831a      	strh	r2, [r3, #24]
}
 80074aa:	bf00      	nop
 80074ac:	3770      	adds	r7, #112	@ 0x70
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	40008000 	.word	0x40008000

080074b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <std>:
 80074cc:	2300      	movs	r3, #0
 80074ce:	b510      	push	{r4, lr}
 80074d0:	4604      	mov	r4, r0
 80074d2:	e9c0 3300 	strd	r3, r3, [r0]
 80074d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074da:	6083      	str	r3, [r0, #8]
 80074dc:	8181      	strh	r1, [r0, #12]
 80074de:	6643      	str	r3, [r0, #100]	@ 0x64
 80074e0:	81c2      	strh	r2, [r0, #14]
 80074e2:	6183      	str	r3, [r0, #24]
 80074e4:	4619      	mov	r1, r3
 80074e6:	2208      	movs	r2, #8
 80074e8:	305c      	adds	r0, #92	@ 0x5c
 80074ea:	f000 f9f9 	bl	80078e0 <memset>
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <std+0x58>)
 80074f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <std+0x5c>)
 80074f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074f6:	4b0d      	ldr	r3, [pc, #52]	@ (800752c <std+0x60>)
 80074f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007530 <std+0x64>)
 80074fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80074fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007534 <std+0x68>)
 8007500:	6224      	str	r4, [r4, #32]
 8007502:	429c      	cmp	r4, r3
 8007504:	d006      	beq.n	8007514 <std+0x48>
 8007506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800750a:	4294      	cmp	r4, r2
 800750c:	d002      	beq.n	8007514 <std+0x48>
 800750e:	33d0      	adds	r3, #208	@ 0xd0
 8007510:	429c      	cmp	r4, r3
 8007512:	d105      	bne.n	8007520 <std+0x54>
 8007514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800751c:	f000 ba58 	b.w	80079d0 <__retarget_lock_init_recursive>
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop
 8007524:	08007731 	.word	0x08007731
 8007528:	08007753 	.word	0x08007753
 800752c:	0800778b 	.word	0x0800778b
 8007530:	080077af 	.word	0x080077af
 8007534:	20000368 	.word	0x20000368

08007538 <stdio_exit_handler>:
 8007538:	4a02      	ldr	r2, [pc, #8]	@ (8007544 <stdio_exit_handler+0xc>)
 800753a:	4903      	ldr	r1, [pc, #12]	@ (8007548 <stdio_exit_handler+0x10>)
 800753c:	4803      	ldr	r0, [pc, #12]	@ (800754c <stdio_exit_handler+0x14>)
 800753e:	f000 b869 	b.w	8007614 <_fwalk_sglue>
 8007542:	bf00      	nop
 8007544:	2000001c 	.word	0x2000001c
 8007548:	08008271 	.word	0x08008271
 800754c:	2000002c 	.word	0x2000002c

08007550 <cleanup_stdio>:
 8007550:	6841      	ldr	r1, [r0, #4]
 8007552:	4b0c      	ldr	r3, [pc, #48]	@ (8007584 <cleanup_stdio+0x34>)
 8007554:	4299      	cmp	r1, r3
 8007556:	b510      	push	{r4, lr}
 8007558:	4604      	mov	r4, r0
 800755a:	d001      	beq.n	8007560 <cleanup_stdio+0x10>
 800755c:	f000 fe88 	bl	8008270 <_fflush_r>
 8007560:	68a1      	ldr	r1, [r4, #8]
 8007562:	4b09      	ldr	r3, [pc, #36]	@ (8007588 <cleanup_stdio+0x38>)
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <cleanup_stdio+0x1e>
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fe81 	bl	8008270 <_fflush_r>
 800756e:	68e1      	ldr	r1, [r4, #12]
 8007570:	4b06      	ldr	r3, [pc, #24]	@ (800758c <cleanup_stdio+0x3c>)
 8007572:	4299      	cmp	r1, r3
 8007574:	d004      	beq.n	8007580 <cleanup_stdio+0x30>
 8007576:	4620      	mov	r0, r4
 8007578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757c:	f000 be78 	b.w	8008270 <_fflush_r>
 8007580:	bd10      	pop	{r4, pc}
 8007582:	bf00      	nop
 8007584:	20000368 	.word	0x20000368
 8007588:	200003d0 	.word	0x200003d0
 800758c:	20000438 	.word	0x20000438

08007590 <global_stdio_init.part.0>:
 8007590:	b510      	push	{r4, lr}
 8007592:	4b0b      	ldr	r3, [pc, #44]	@ (80075c0 <global_stdio_init.part.0+0x30>)
 8007594:	4c0b      	ldr	r4, [pc, #44]	@ (80075c4 <global_stdio_init.part.0+0x34>)
 8007596:	4a0c      	ldr	r2, [pc, #48]	@ (80075c8 <global_stdio_init.part.0+0x38>)
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	4620      	mov	r0, r4
 800759c:	2200      	movs	r2, #0
 800759e:	2104      	movs	r1, #4
 80075a0:	f7ff ff94 	bl	80074cc <std>
 80075a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075a8:	2201      	movs	r2, #1
 80075aa:	2109      	movs	r1, #9
 80075ac:	f7ff ff8e 	bl	80074cc <std>
 80075b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075b4:	2202      	movs	r2, #2
 80075b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ba:	2112      	movs	r1, #18
 80075bc:	f7ff bf86 	b.w	80074cc <std>
 80075c0:	200004a0 	.word	0x200004a0
 80075c4:	20000368 	.word	0x20000368
 80075c8:	08007539 	.word	0x08007539

080075cc <__sfp_lock_acquire>:
 80075cc:	4801      	ldr	r0, [pc, #4]	@ (80075d4 <__sfp_lock_acquire+0x8>)
 80075ce:	f000 ba00 	b.w	80079d2 <__retarget_lock_acquire_recursive>
 80075d2:	bf00      	nop
 80075d4:	200004a9 	.word	0x200004a9

080075d8 <__sfp_lock_release>:
 80075d8:	4801      	ldr	r0, [pc, #4]	@ (80075e0 <__sfp_lock_release+0x8>)
 80075da:	f000 b9fb 	b.w	80079d4 <__retarget_lock_release_recursive>
 80075de:	bf00      	nop
 80075e0:	200004a9 	.word	0x200004a9

080075e4 <__sinit>:
 80075e4:	b510      	push	{r4, lr}
 80075e6:	4604      	mov	r4, r0
 80075e8:	f7ff fff0 	bl	80075cc <__sfp_lock_acquire>
 80075ec:	6a23      	ldr	r3, [r4, #32]
 80075ee:	b11b      	cbz	r3, 80075f8 <__sinit+0x14>
 80075f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f4:	f7ff bff0 	b.w	80075d8 <__sfp_lock_release>
 80075f8:	4b04      	ldr	r3, [pc, #16]	@ (800760c <__sinit+0x28>)
 80075fa:	6223      	str	r3, [r4, #32]
 80075fc:	4b04      	ldr	r3, [pc, #16]	@ (8007610 <__sinit+0x2c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f5      	bne.n	80075f0 <__sinit+0xc>
 8007604:	f7ff ffc4 	bl	8007590 <global_stdio_init.part.0>
 8007608:	e7f2      	b.n	80075f0 <__sinit+0xc>
 800760a:	bf00      	nop
 800760c:	08007551 	.word	0x08007551
 8007610:	200004a0 	.word	0x200004a0

08007614 <_fwalk_sglue>:
 8007614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007618:	4607      	mov	r7, r0
 800761a:	4688      	mov	r8, r1
 800761c:	4614      	mov	r4, r2
 800761e:	2600      	movs	r6, #0
 8007620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007624:	f1b9 0901 	subs.w	r9, r9, #1
 8007628:	d505      	bpl.n	8007636 <_fwalk_sglue+0x22>
 800762a:	6824      	ldr	r4, [r4, #0]
 800762c:	2c00      	cmp	r4, #0
 800762e:	d1f7      	bne.n	8007620 <_fwalk_sglue+0xc>
 8007630:	4630      	mov	r0, r6
 8007632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d907      	bls.n	800764c <_fwalk_sglue+0x38>
 800763c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007640:	3301      	adds	r3, #1
 8007642:	d003      	beq.n	800764c <_fwalk_sglue+0x38>
 8007644:	4629      	mov	r1, r5
 8007646:	4638      	mov	r0, r7
 8007648:	47c0      	blx	r8
 800764a:	4306      	orrs	r6, r0
 800764c:	3568      	adds	r5, #104	@ 0x68
 800764e:	e7e9      	b.n	8007624 <_fwalk_sglue+0x10>

08007650 <iprintf>:
 8007650:	b40f      	push	{r0, r1, r2, r3}
 8007652:	b507      	push	{r0, r1, r2, lr}
 8007654:	4906      	ldr	r1, [pc, #24]	@ (8007670 <iprintf+0x20>)
 8007656:	ab04      	add	r3, sp, #16
 8007658:	6808      	ldr	r0, [r1, #0]
 800765a:	f853 2b04 	ldr.w	r2, [r3], #4
 800765e:	6881      	ldr	r1, [r0, #8]
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	f000 fadb 	bl	8007c1c <_vfiprintf_r>
 8007666:	b003      	add	sp, #12
 8007668:	f85d eb04 	ldr.w	lr, [sp], #4
 800766c:	b004      	add	sp, #16
 800766e:	4770      	bx	lr
 8007670:	20000028 	.word	0x20000028

08007674 <_puts_r>:
 8007674:	6a03      	ldr	r3, [r0, #32]
 8007676:	b570      	push	{r4, r5, r6, lr}
 8007678:	6884      	ldr	r4, [r0, #8]
 800767a:	4605      	mov	r5, r0
 800767c:	460e      	mov	r6, r1
 800767e:	b90b      	cbnz	r3, 8007684 <_puts_r+0x10>
 8007680:	f7ff ffb0 	bl	80075e4 <__sinit>
 8007684:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007686:	07db      	lsls	r3, r3, #31
 8007688:	d405      	bmi.n	8007696 <_puts_r+0x22>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	0598      	lsls	r0, r3, #22
 800768e:	d402      	bmi.n	8007696 <_puts_r+0x22>
 8007690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007692:	f000 f99e 	bl	80079d2 <__retarget_lock_acquire_recursive>
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	0719      	lsls	r1, r3, #28
 800769a:	d502      	bpl.n	80076a2 <_puts_r+0x2e>
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d135      	bne.n	800770e <_puts_r+0x9a>
 80076a2:	4621      	mov	r1, r4
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 f8c5 	bl	8007834 <__swsetup_r>
 80076aa:	b380      	cbz	r0, 800770e <_puts_r+0x9a>
 80076ac:	f04f 35ff 	mov.w	r5, #4294967295
 80076b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076b2:	07da      	lsls	r2, r3, #31
 80076b4:	d405      	bmi.n	80076c2 <_puts_r+0x4e>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	059b      	lsls	r3, r3, #22
 80076ba:	d402      	bmi.n	80076c2 <_puts_r+0x4e>
 80076bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076be:	f000 f989 	bl	80079d4 <__retarget_lock_release_recursive>
 80076c2:	4628      	mov	r0, r5
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	da04      	bge.n	80076d4 <_puts_r+0x60>
 80076ca:	69a2      	ldr	r2, [r4, #24]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	dc17      	bgt.n	8007700 <_puts_r+0x8c>
 80076d0:	290a      	cmp	r1, #10
 80076d2:	d015      	beq.n	8007700 <_puts_r+0x8c>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	6022      	str	r2, [r4, #0]
 80076da:	7019      	strb	r1, [r3, #0]
 80076dc:	68a3      	ldr	r3, [r4, #8]
 80076de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076e2:	3b01      	subs	r3, #1
 80076e4:	60a3      	str	r3, [r4, #8]
 80076e6:	2900      	cmp	r1, #0
 80076e8:	d1ed      	bne.n	80076c6 <_puts_r+0x52>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	da11      	bge.n	8007712 <_puts_r+0x9e>
 80076ee:	4622      	mov	r2, r4
 80076f0:	210a      	movs	r1, #10
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f85f 	bl	80077b6 <__swbuf_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d0d7      	beq.n	80076ac <_puts_r+0x38>
 80076fc:	250a      	movs	r5, #10
 80076fe:	e7d7      	b.n	80076b0 <_puts_r+0x3c>
 8007700:	4622      	mov	r2, r4
 8007702:	4628      	mov	r0, r5
 8007704:	f000 f857 	bl	80077b6 <__swbuf_r>
 8007708:	3001      	adds	r0, #1
 800770a:	d1e7      	bne.n	80076dc <_puts_r+0x68>
 800770c:	e7ce      	b.n	80076ac <_puts_r+0x38>
 800770e:	3e01      	subs	r6, #1
 8007710:	e7e4      	b.n	80076dc <_puts_r+0x68>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	6022      	str	r2, [r4, #0]
 8007718:	220a      	movs	r2, #10
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	e7ee      	b.n	80076fc <_puts_r+0x88>
	...

08007720 <puts>:
 8007720:	4b02      	ldr	r3, [pc, #8]	@ (800772c <puts+0xc>)
 8007722:	4601      	mov	r1, r0
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	f7ff bfa5 	b.w	8007674 <_puts_r>
 800772a:	bf00      	nop
 800772c:	20000028 	.word	0x20000028

08007730 <__sread>:
 8007730:	b510      	push	{r4, lr}
 8007732:	460c      	mov	r4, r1
 8007734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007738:	f000 f8fc 	bl	8007934 <_read_r>
 800773c:	2800      	cmp	r0, #0
 800773e:	bfab      	itete	ge
 8007740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007742:	89a3      	ldrhlt	r3, [r4, #12]
 8007744:	181b      	addge	r3, r3, r0
 8007746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800774a:	bfac      	ite	ge
 800774c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800774e:	81a3      	strhlt	r3, [r4, #12]
 8007750:	bd10      	pop	{r4, pc}

08007752 <__swrite>:
 8007752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007756:	461f      	mov	r7, r3
 8007758:	898b      	ldrh	r3, [r1, #12]
 800775a:	05db      	lsls	r3, r3, #23
 800775c:	4605      	mov	r5, r0
 800775e:	460c      	mov	r4, r1
 8007760:	4616      	mov	r6, r2
 8007762:	d505      	bpl.n	8007770 <__swrite+0x1e>
 8007764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007768:	2302      	movs	r3, #2
 800776a:	2200      	movs	r2, #0
 800776c:	f000 f8d0 	bl	8007910 <_lseek_r>
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	4632      	mov	r2, r6
 800777e:	463b      	mov	r3, r7
 8007780:	4628      	mov	r0, r5
 8007782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007786:	f000 b8e7 	b.w	8007958 <_write_r>

0800778a <__sseek>:
 800778a:	b510      	push	{r4, lr}
 800778c:	460c      	mov	r4, r1
 800778e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007792:	f000 f8bd 	bl	8007910 <_lseek_r>
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	bf15      	itete	ne
 800779c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800779e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077a6:	81a3      	strheq	r3, [r4, #12]
 80077a8:	bf18      	it	ne
 80077aa:	81a3      	strhne	r3, [r4, #12]
 80077ac:	bd10      	pop	{r4, pc}

080077ae <__sclose>:
 80077ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b2:	f000 b89d 	b.w	80078f0 <_close_r>

080077b6 <__swbuf_r>:
 80077b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b8:	460e      	mov	r6, r1
 80077ba:	4614      	mov	r4, r2
 80077bc:	4605      	mov	r5, r0
 80077be:	b118      	cbz	r0, 80077c8 <__swbuf_r+0x12>
 80077c0:	6a03      	ldr	r3, [r0, #32]
 80077c2:	b90b      	cbnz	r3, 80077c8 <__swbuf_r+0x12>
 80077c4:	f7ff ff0e 	bl	80075e4 <__sinit>
 80077c8:	69a3      	ldr	r3, [r4, #24]
 80077ca:	60a3      	str	r3, [r4, #8]
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	071a      	lsls	r2, r3, #28
 80077d0:	d501      	bpl.n	80077d6 <__swbuf_r+0x20>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	b943      	cbnz	r3, 80077e8 <__swbuf_r+0x32>
 80077d6:	4621      	mov	r1, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 f82b 	bl	8007834 <__swsetup_r>
 80077de:	b118      	cbz	r0, 80077e8 <__swbuf_r+0x32>
 80077e0:	f04f 37ff 	mov.w	r7, #4294967295
 80077e4:	4638      	mov	r0, r7
 80077e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	6922      	ldr	r2, [r4, #16]
 80077ec:	1a98      	subs	r0, r3, r2
 80077ee:	6963      	ldr	r3, [r4, #20]
 80077f0:	b2f6      	uxtb	r6, r6
 80077f2:	4283      	cmp	r3, r0
 80077f4:	4637      	mov	r7, r6
 80077f6:	dc05      	bgt.n	8007804 <__swbuf_r+0x4e>
 80077f8:	4621      	mov	r1, r4
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 fd38 	bl	8008270 <_fflush_r>
 8007800:	2800      	cmp	r0, #0
 8007802:	d1ed      	bne.n	80077e0 <__swbuf_r+0x2a>
 8007804:	68a3      	ldr	r3, [r4, #8]
 8007806:	3b01      	subs	r3, #1
 8007808:	60a3      	str	r3, [r4, #8]
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	6022      	str	r2, [r4, #0]
 8007810:	701e      	strb	r6, [r3, #0]
 8007812:	6962      	ldr	r2, [r4, #20]
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	429a      	cmp	r2, r3
 8007818:	d004      	beq.n	8007824 <__swbuf_r+0x6e>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	07db      	lsls	r3, r3, #31
 800781e:	d5e1      	bpl.n	80077e4 <__swbuf_r+0x2e>
 8007820:	2e0a      	cmp	r6, #10
 8007822:	d1df      	bne.n	80077e4 <__swbuf_r+0x2e>
 8007824:	4621      	mov	r1, r4
 8007826:	4628      	mov	r0, r5
 8007828:	f000 fd22 	bl	8008270 <_fflush_r>
 800782c:	2800      	cmp	r0, #0
 800782e:	d0d9      	beq.n	80077e4 <__swbuf_r+0x2e>
 8007830:	e7d6      	b.n	80077e0 <__swbuf_r+0x2a>
	...

08007834 <__swsetup_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4b29      	ldr	r3, [pc, #164]	@ (80078dc <__swsetup_r+0xa8>)
 8007838:	4605      	mov	r5, r0
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	460c      	mov	r4, r1
 800783e:	b118      	cbz	r0, 8007848 <__swsetup_r+0x14>
 8007840:	6a03      	ldr	r3, [r0, #32]
 8007842:	b90b      	cbnz	r3, 8007848 <__swsetup_r+0x14>
 8007844:	f7ff fece 	bl	80075e4 <__sinit>
 8007848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784c:	0719      	lsls	r1, r3, #28
 800784e:	d422      	bmi.n	8007896 <__swsetup_r+0x62>
 8007850:	06da      	lsls	r2, r3, #27
 8007852:	d407      	bmi.n	8007864 <__swsetup_r+0x30>
 8007854:	2209      	movs	r2, #9
 8007856:	602a      	str	r2, [r5, #0]
 8007858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785c:	81a3      	strh	r3, [r4, #12]
 800785e:	f04f 30ff 	mov.w	r0, #4294967295
 8007862:	e033      	b.n	80078cc <__swsetup_r+0x98>
 8007864:	0758      	lsls	r0, r3, #29
 8007866:	d512      	bpl.n	800788e <__swsetup_r+0x5a>
 8007868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800786a:	b141      	cbz	r1, 800787e <__swsetup_r+0x4a>
 800786c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007870:	4299      	cmp	r1, r3
 8007872:	d002      	beq.n	800787a <__swsetup_r+0x46>
 8007874:	4628      	mov	r0, r5
 8007876:	f000 f8af 	bl	80079d8 <_free_r>
 800787a:	2300      	movs	r3, #0
 800787c:	6363      	str	r3, [r4, #52]	@ 0x34
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	2300      	movs	r3, #0
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f043 0308 	orr.w	r3, r3, #8
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	b94b      	cbnz	r3, 80078ae <__swsetup_r+0x7a>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a4:	d003      	beq.n	80078ae <__swsetup_r+0x7a>
 80078a6:	4621      	mov	r1, r4
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 fd2f 	bl	800830c <__smakebuf_r>
 80078ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b2:	f013 0201 	ands.w	r2, r3, #1
 80078b6:	d00a      	beq.n	80078ce <__swsetup_r+0x9a>
 80078b8:	2200      	movs	r2, #0
 80078ba:	60a2      	str	r2, [r4, #8]
 80078bc:	6962      	ldr	r2, [r4, #20]
 80078be:	4252      	negs	r2, r2
 80078c0:	61a2      	str	r2, [r4, #24]
 80078c2:	6922      	ldr	r2, [r4, #16]
 80078c4:	b942      	cbnz	r2, 80078d8 <__swsetup_r+0xa4>
 80078c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078ca:	d1c5      	bne.n	8007858 <__swsetup_r+0x24>
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	0799      	lsls	r1, r3, #30
 80078d0:	bf58      	it	pl
 80078d2:	6962      	ldrpl	r2, [r4, #20]
 80078d4:	60a2      	str	r2, [r4, #8]
 80078d6:	e7f4      	b.n	80078c2 <__swsetup_r+0x8e>
 80078d8:	2000      	movs	r0, #0
 80078da:	e7f7      	b.n	80078cc <__swsetup_r+0x98>
 80078dc:	20000028 	.word	0x20000028

080078e0 <memset>:
 80078e0:	4402      	add	r2, r0
 80078e2:	4603      	mov	r3, r0
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d100      	bne.n	80078ea <memset+0xa>
 80078e8:	4770      	bx	lr
 80078ea:	f803 1b01 	strb.w	r1, [r3], #1
 80078ee:	e7f9      	b.n	80078e4 <memset+0x4>

080078f0 <_close_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d06      	ldr	r5, [pc, #24]	@ (800790c <_close_r+0x1c>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	f7fa f8b3 	bl	8001a66 <_close>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_close_r+0x1a>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_close_r+0x1a>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	200004a4 	.word	0x200004a4

08007910 <_lseek_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4d07      	ldr	r5, [pc, #28]	@ (8007930 <_lseek_r+0x20>)
 8007914:	4604      	mov	r4, r0
 8007916:	4608      	mov	r0, r1
 8007918:	4611      	mov	r1, r2
 800791a:	2200      	movs	r2, #0
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f7fa f8c8 	bl	8001ab4 <_lseek>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_lseek_r+0x1e>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_lseek_r+0x1e>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	200004a4 	.word	0x200004a4

08007934 <_read_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4d07      	ldr	r5, [pc, #28]	@ (8007954 <_read_r+0x20>)
 8007938:	4604      	mov	r4, r0
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	2200      	movs	r2, #0
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f7fa f872 	bl	8001a2c <_read>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_read_r+0x1e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_read_r+0x1e>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	200004a4 	.word	0x200004a4

08007958 <_write_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	@ (8007978 <_write_r+0x20>)
 800795c:	4604      	mov	r4, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	2200      	movs	r2, #0
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f7f8 fee2 	bl	8000730 <_write>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_write_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_write_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	200004a4 	.word	0x200004a4

0800797c <__errno>:
 800797c:	4b01      	ldr	r3, [pc, #4]	@ (8007984 <__errno+0x8>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000028 	.word	0x20000028

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	4d0d      	ldr	r5, [pc, #52]	@ (80079c0 <__libc_init_array+0x38>)
 800798c:	4c0d      	ldr	r4, [pc, #52]	@ (80079c4 <__libc_init_array+0x3c>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	2600      	movs	r6, #0
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	4d0b      	ldr	r5, [pc, #44]	@ (80079c8 <__libc_init_array+0x40>)
 800799a:	4c0c      	ldr	r4, [pc, #48]	@ (80079cc <__libc_init_array+0x44>)
 800799c:	f000 fd24 	bl	80083e8 <_init>
 80079a0:	1b64      	subs	r4, r4, r5
 80079a2:	10a4      	asrs	r4, r4, #2
 80079a4:	2600      	movs	r6, #0
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	080085e4 	.word	0x080085e4
 80079c4:	080085e4 	.word	0x080085e4
 80079c8:	080085e4 	.word	0x080085e4
 80079cc:	080085e8 	.word	0x080085e8

080079d0 <__retarget_lock_init_recursive>:
 80079d0:	4770      	bx	lr

080079d2 <__retarget_lock_acquire_recursive>:
 80079d2:	4770      	bx	lr

080079d4 <__retarget_lock_release_recursive>:
 80079d4:	4770      	bx	lr
	...

080079d8 <_free_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4605      	mov	r5, r0
 80079dc:	2900      	cmp	r1, #0
 80079de:	d041      	beq.n	8007a64 <_free_r+0x8c>
 80079e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e4:	1f0c      	subs	r4, r1, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bfb8      	it	lt
 80079ea:	18e4      	addlt	r4, r4, r3
 80079ec:	f000 f8e0 	bl	8007bb0 <__malloc_lock>
 80079f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a68 <_free_r+0x90>)
 80079f2:	6813      	ldr	r3, [r2, #0]
 80079f4:	b933      	cbnz	r3, 8007a04 <_free_r+0x2c>
 80079f6:	6063      	str	r3, [r4, #4]
 80079f8:	6014      	str	r4, [r2, #0]
 80079fa:	4628      	mov	r0, r5
 80079fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a00:	f000 b8dc 	b.w	8007bbc <__malloc_unlock>
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d908      	bls.n	8007a1a <_free_r+0x42>
 8007a08:	6820      	ldr	r0, [r4, #0]
 8007a0a:	1821      	adds	r1, r4, r0
 8007a0c:	428b      	cmp	r3, r1
 8007a0e:	bf01      	itttt	eq
 8007a10:	6819      	ldreq	r1, [r3, #0]
 8007a12:	685b      	ldreq	r3, [r3, #4]
 8007a14:	1809      	addeq	r1, r1, r0
 8007a16:	6021      	streq	r1, [r4, #0]
 8007a18:	e7ed      	b.n	80079f6 <_free_r+0x1e>
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	b10b      	cbz	r3, 8007a24 <_free_r+0x4c>
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	d9fa      	bls.n	8007a1a <_free_r+0x42>
 8007a24:	6811      	ldr	r1, [r2, #0]
 8007a26:	1850      	adds	r0, r2, r1
 8007a28:	42a0      	cmp	r0, r4
 8007a2a:	d10b      	bne.n	8007a44 <_free_r+0x6c>
 8007a2c:	6820      	ldr	r0, [r4, #0]
 8007a2e:	4401      	add	r1, r0
 8007a30:	1850      	adds	r0, r2, r1
 8007a32:	4283      	cmp	r3, r0
 8007a34:	6011      	str	r1, [r2, #0]
 8007a36:	d1e0      	bne.n	80079fa <_free_r+0x22>
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	6053      	str	r3, [r2, #4]
 8007a3e:	4408      	add	r0, r1
 8007a40:	6010      	str	r0, [r2, #0]
 8007a42:	e7da      	b.n	80079fa <_free_r+0x22>
 8007a44:	d902      	bls.n	8007a4c <_free_r+0x74>
 8007a46:	230c      	movs	r3, #12
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	e7d6      	b.n	80079fa <_free_r+0x22>
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	1821      	adds	r1, r4, r0
 8007a50:	428b      	cmp	r3, r1
 8007a52:	bf04      	itt	eq
 8007a54:	6819      	ldreq	r1, [r3, #0]
 8007a56:	685b      	ldreq	r3, [r3, #4]
 8007a58:	6063      	str	r3, [r4, #4]
 8007a5a:	bf04      	itt	eq
 8007a5c:	1809      	addeq	r1, r1, r0
 8007a5e:	6021      	streq	r1, [r4, #0]
 8007a60:	6054      	str	r4, [r2, #4]
 8007a62:	e7ca      	b.n	80079fa <_free_r+0x22>
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
 8007a66:	bf00      	nop
 8007a68:	200004b0 	.word	0x200004b0

08007a6c <sbrk_aligned>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4e0f      	ldr	r6, [pc, #60]	@ (8007aac <sbrk_aligned+0x40>)
 8007a70:	460c      	mov	r4, r1
 8007a72:	6831      	ldr	r1, [r6, #0]
 8007a74:	4605      	mov	r5, r0
 8007a76:	b911      	cbnz	r1, 8007a7e <sbrk_aligned+0x12>
 8007a78:	f000 fca6 	bl	80083c8 <_sbrk_r>
 8007a7c:	6030      	str	r0, [r6, #0]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 fca1 	bl	80083c8 <_sbrk_r>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d103      	bne.n	8007a92 <sbrk_aligned+0x26>
 8007a8a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a8e:	4620      	mov	r0, r4
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	1cc4      	adds	r4, r0, #3
 8007a94:	f024 0403 	bic.w	r4, r4, #3
 8007a98:	42a0      	cmp	r0, r4
 8007a9a:	d0f8      	beq.n	8007a8e <sbrk_aligned+0x22>
 8007a9c:	1a21      	subs	r1, r4, r0
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fc92 	bl	80083c8 <_sbrk_r>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d1f2      	bne.n	8007a8e <sbrk_aligned+0x22>
 8007aa8:	e7ef      	b.n	8007a8a <sbrk_aligned+0x1e>
 8007aaa:	bf00      	nop
 8007aac:	200004ac 	.word	0x200004ac

08007ab0 <_malloc_r>:
 8007ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab4:	1ccd      	adds	r5, r1, #3
 8007ab6:	f025 0503 	bic.w	r5, r5, #3
 8007aba:	3508      	adds	r5, #8
 8007abc:	2d0c      	cmp	r5, #12
 8007abe:	bf38      	it	cc
 8007ac0:	250c      	movcc	r5, #12
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	db01      	blt.n	8007acc <_malloc_r+0x1c>
 8007ac8:	42a9      	cmp	r1, r5
 8007aca:	d904      	bls.n	8007ad6 <_malloc_r+0x26>
 8007acc:	230c      	movs	r3, #12
 8007ace:	6033      	str	r3, [r6, #0]
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bac <_malloc_r+0xfc>
 8007ada:	f000 f869 	bl	8007bb0 <__malloc_lock>
 8007ade:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae2:	461c      	mov	r4, r3
 8007ae4:	bb44      	cbnz	r4, 8007b38 <_malloc_r+0x88>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f7ff ffbf 	bl	8007a6c <sbrk_aligned>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	4604      	mov	r4, r0
 8007af2:	d158      	bne.n	8007ba6 <_malloc_r+0xf6>
 8007af4:	f8d8 4000 	ldr.w	r4, [r8]
 8007af8:	4627      	mov	r7, r4
 8007afa:	2f00      	cmp	r7, #0
 8007afc:	d143      	bne.n	8007b86 <_malloc_r+0xd6>
 8007afe:	2c00      	cmp	r4, #0
 8007b00:	d04b      	beq.n	8007b9a <_malloc_r+0xea>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	4639      	mov	r1, r7
 8007b06:	4630      	mov	r0, r6
 8007b08:	eb04 0903 	add.w	r9, r4, r3
 8007b0c:	f000 fc5c 	bl	80083c8 <_sbrk_r>
 8007b10:	4581      	cmp	r9, r0
 8007b12:	d142      	bne.n	8007b9a <_malloc_r+0xea>
 8007b14:	6821      	ldr	r1, [r4, #0]
 8007b16:	1a6d      	subs	r5, r5, r1
 8007b18:	4629      	mov	r1, r5
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7ff ffa6 	bl	8007a6c <sbrk_aligned>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d03a      	beq.n	8007b9a <_malloc_r+0xea>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	442b      	add	r3, r5
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	bb62      	cbnz	r2, 8007b8c <_malloc_r+0xdc>
 8007b32:	f8c8 7000 	str.w	r7, [r8]
 8007b36:	e00f      	b.n	8007b58 <_malloc_r+0xa8>
 8007b38:	6822      	ldr	r2, [r4, #0]
 8007b3a:	1b52      	subs	r2, r2, r5
 8007b3c:	d420      	bmi.n	8007b80 <_malloc_r+0xd0>
 8007b3e:	2a0b      	cmp	r2, #11
 8007b40:	d917      	bls.n	8007b72 <_malloc_r+0xc2>
 8007b42:	1961      	adds	r1, r4, r5
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	6025      	str	r5, [r4, #0]
 8007b48:	bf18      	it	ne
 8007b4a:	6059      	strne	r1, [r3, #4]
 8007b4c:	6863      	ldr	r3, [r4, #4]
 8007b4e:	bf08      	it	eq
 8007b50:	f8c8 1000 	streq.w	r1, [r8]
 8007b54:	5162      	str	r2, [r4, r5]
 8007b56:	604b      	str	r3, [r1, #4]
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f000 f82f 	bl	8007bbc <__malloc_unlock>
 8007b5e:	f104 000b 	add.w	r0, r4, #11
 8007b62:	1d23      	adds	r3, r4, #4
 8007b64:	f020 0007 	bic.w	r0, r0, #7
 8007b68:	1ac2      	subs	r2, r0, r3
 8007b6a:	bf1c      	itt	ne
 8007b6c:	1a1b      	subne	r3, r3, r0
 8007b6e:	50a3      	strne	r3, [r4, r2]
 8007b70:	e7af      	b.n	8007ad2 <_malloc_r+0x22>
 8007b72:	6862      	ldr	r2, [r4, #4]
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	bf0c      	ite	eq
 8007b78:	f8c8 2000 	streq.w	r2, [r8]
 8007b7c:	605a      	strne	r2, [r3, #4]
 8007b7e:	e7eb      	b.n	8007b58 <_malloc_r+0xa8>
 8007b80:	4623      	mov	r3, r4
 8007b82:	6864      	ldr	r4, [r4, #4]
 8007b84:	e7ae      	b.n	8007ae4 <_malloc_r+0x34>
 8007b86:	463c      	mov	r4, r7
 8007b88:	687f      	ldr	r7, [r7, #4]
 8007b8a:	e7b6      	b.n	8007afa <_malloc_r+0x4a>
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	d1fb      	bne.n	8007b8c <_malloc_r+0xdc>
 8007b94:	2300      	movs	r3, #0
 8007b96:	6053      	str	r3, [r2, #4]
 8007b98:	e7de      	b.n	8007b58 <_malloc_r+0xa8>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	6033      	str	r3, [r6, #0]
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f000 f80c 	bl	8007bbc <__malloc_unlock>
 8007ba4:	e794      	b.n	8007ad0 <_malloc_r+0x20>
 8007ba6:	6005      	str	r5, [r0, #0]
 8007ba8:	e7d6      	b.n	8007b58 <_malloc_r+0xa8>
 8007baa:	bf00      	nop
 8007bac:	200004b0 	.word	0x200004b0

08007bb0 <__malloc_lock>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	@ (8007bb8 <__malloc_lock+0x8>)
 8007bb2:	f7ff bf0e 	b.w	80079d2 <__retarget_lock_acquire_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	200004a8 	.word	0x200004a8

08007bbc <__malloc_unlock>:
 8007bbc:	4801      	ldr	r0, [pc, #4]	@ (8007bc4 <__malloc_unlock+0x8>)
 8007bbe:	f7ff bf09 	b.w	80079d4 <__retarget_lock_release_recursive>
 8007bc2:	bf00      	nop
 8007bc4:	200004a8 	.word	0x200004a8

08007bc8 <__sfputc_r>:
 8007bc8:	6893      	ldr	r3, [r2, #8]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	b410      	push	{r4}
 8007bd0:	6093      	str	r3, [r2, #8]
 8007bd2:	da08      	bge.n	8007be6 <__sfputc_r+0x1e>
 8007bd4:	6994      	ldr	r4, [r2, #24]
 8007bd6:	42a3      	cmp	r3, r4
 8007bd8:	db01      	blt.n	8007bde <__sfputc_r+0x16>
 8007bda:	290a      	cmp	r1, #10
 8007bdc:	d103      	bne.n	8007be6 <__sfputc_r+0x1e>
 8007bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be2:	f7ff bde8 	b.w	80077b6 <__swbuf_r>
 8007be6:	6813      	ldr	r3, [r2, #0]
 8007be8:	1c58      	adds	r0, r3, #1
 8007bea:	6010      	str	r0, [r2, #0]
 8007bec:	7019      	strb	r1, [r3, #0]
 8007bee:	4608      	mov	r0, r1
 8007bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <__sfputs_r>:
 8007bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	18d5      	adds	r5, r2, r3
 8007c00:	42ac      	cmp	r4, r5
 8007c02:	d101      	bne.n	8007c08 <__sfputs_r+0x12>
 8007c04:	2000      	movs	r0, #0
 8007c06:	e007      	b.n	8007c18 <__sfputs_r+0x22>
 8007c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c0c:	463a      	mov	r2, r7
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7ff ffda 	bl	8007bc8 <__sfputc_r>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d1f3      	bne.n	8007c00 <__sfputs_r+0xa>
 8007c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c1c <_vfiprintf_r>:
 8007c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	460d      	mov	r5, r1
 8007c22:	b09d      	sub	sp, #116	@ 0x74
 8007c24:	4614      	mov	r4, r2
 8007c26:	4698      	mov	r8, r3
 8007c28:	4606      	mov	r6, r0
 8007c2a:	b118      	cbz	r0, 8007c34 <_vfiprintf_r+0x18>
 8007c2c:	6a03      	ldr	r3, [r0, #32]
 8007c2e:	b90b      	cbnz	r3, 8007c34 <_vfiprintf_r+0x18>
 8007c30:	f7ff fcd8 	bl	80075e4 <__sinit>
 8007c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c36:	07d9      	lsls	r1, r3, #31
 8007c38:	d405      	bmi.n	8007c46 <_vfiprintf_r+0x2a>
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	059a      	lsls	r2, r3, #22
 8007c3e:	d402      	bmi.n	8007c46 <_vfiprintf_r+0x2a>
 8007c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c42:	f7ff fec6 	bl	80079d2 <__retarget_lock_acquire_recursive>
 8007c46:	89ab      	ldrh	r3, [r5, #12]
 8007c48:	071b      	lsls	r3, r3, #28
 8007c4a:	d501      	bpl.n	8007c50 <_vfiprintf_r+0x34>
 8007c4c:	692b      	ldr	r3, [r5, #16]
 8007c4e:	b99b      	cbnz	r3, 8007c78 <_vfiprintf_r+0x5c>
 8007c50:	4629      	mov	r1, r5
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7ff fdee 	bl	8007834 <__swsetup_r>
 8007c58:	b170      	cbz	r0, 8007c78 <_vfiprintf_r+0x5c>
 8007c5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c5c:	07dc      	lsls	r4, r3, #31
 8007c5e:	d504      	bpl.n	8007c6a <_vfiprintf_r+0x4e>
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	b01d      	add	sp, #116	@ 0x74
 8007c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6a:	89ab      	ldrh	r3, [r5, #12]
 8007c6c:	0598      	lsls	r0, r3, #22
 8007c6e:	d4f7      	bmi.n	8007c60 <_vfiprintf_r+0x44>
 8007c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c72:	f7ff feaf 	bl	80079d4 <__retarget_lock_release_recursive>
 8007c76:	e7f3      	b.n	8007c60 <_vfiprintf_r+0x44>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7c:	2320      	movs	r3, #32
 8007c7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c86:	2330      	movs	r3, #48	@ 0x30
 8007c88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e38 <_vfiprintf_r+0x21c>
 8007c8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c90:	f04f 0901 	mov.w	r9, #1
 8007c94:	4623      	mov	r3, r4
 8007c96:	469a      	mov	sl, r3
 8007c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c9c:	b10a      	cbz	r2, 8007ca2 <_vfiprintf_r+0x86>
 8007c9e:	2a25      	cmp	r2, #37	@ 0x25
 8007ca0:	d1f9      	bne.n	8007c96 <_vfiprintf_r+0x7a>
 8007ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca6:	d00b      	beq.n	8007cc0 <_vfiprintf_r+0xa4>
 8007ca8:	465b      	mov	r3, fp
 8007caa:	4622      	mov	r2, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f7ff ffa1 	bl	8007bf6 <__sfputs_r>
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f000 80a7 	beq.w	8007e08 <_vfiprintf_r+0x1ec>
 8007cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cbc:	445a      	add	r2, fp
 8007cbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 809f 	beq.w	8007e08 <_vfiprintf_r+0x1ec>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd4:	f10a 0a01 	add.w	sl, sl, #1
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	9307      	str	r3, [sp, #28]
 8007cdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ce0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ce2:	4654      	mov	r4, sl
 8007ce4:	2205      	movs	r2, #5
 8007ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cea:	4853      	ldr	r0, [pc, #332]	@ (8007e38 <_vfiprintf_r+0x21c>)
 8007cec:	f7f8 fa70 	bl	80001d0 <memchr>
 8007cf0:	9a04      	ldr	r2, [sp, #16]
 8007cf2:	b9d8      	cbnz	r0, 8007d2c <_vfiprintf_r+0x110>
 8007cf4:	06d1      	lsls	r1, r2, #27
 8007cf6:	bf44      	itt	mi
 8007cf8:	2320      	movmi	r3, #32
 8007cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cfe:	0713      	lsls	r3, r2, #28
 8007d00:	bf44      	itt	mi
 8007d02:	232b      	movmi	r3, #43	@ 0x2b
 8007d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d08:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d0e:	d015      	beq.n	8007d3c <_vfiprintf_r+0x120>
 8007d10:	9a07      	ldr	r2, [sp, #28]
 8007d12:	4654      	mov	r4, sl
 8007d14:	2000      	movs	r0, #0
 8007d16:	f04f 0c0a 	mov.w	ip, #10
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d20:	3b30      	subs	r3, #48	@ 0x30
 8007d22:	2b09      	cmp	r3, #9
 8007d24:	d94b      	bls.n	8007dbe <_vfiprintf_r+0x1a2>
 8007d26:	b1b0      	cbz	r0, 8007d56 <_vfiprintf_r+0x13a>
 8007d28:	9207      	str	r2, [sp, #28]
 8007d2a:	e014      	b.n	8007d56 <_vfiprintf_r+0x13a>
 8007d2c:	eba0 0308 	sub.w	r3, r0, r8
 8007d30:	fa09 f303 	lsl.w	r3, r9, r3
 8007d34:	4313      	orrs	r3, r2
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	46a2      	mov	sl, r4
 8007d3a:	e7d2      	b.n	8007ce2 <_vfiprintf_r+0xc6>
 8007d3c:	9b03      	ldr	r3, [sp, #12]
 8007d3e:	1d19      	adds	r1, r3, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	9103      	str	r1, [sp, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bfbb      	ittet	lt
 8007d48:	425b      	neglt	r3, r3
 8007d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d4e:	9307      	strge	r3, [sp, #28]
 8007d50:	9307      	strlt	r3, [sp, #28]
 8007d52:	bfb8      	it	lt
 8007d54:	9204      	strlt	r2, [sp, #16]
 8007d56:	7823      	ldrb	r3, [r4, #0]
 8007d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d5a:	d10a      	bne.n	8007d72 <_vfiprintf_r+0x156>
 8007d5c:	7863      	ldrb	r3, [r4, #1]
 8007d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d60:	d132      	bne.n	8007dc8 <_vfiprintf_r+0x1ac>
 8007d62:	9b03      	ldr	r3, [sp, #12]
 8007d64:	1d1a      	adds	r2, r3, #4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	9203      	str	r2, [sp, #12]
 8007d6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d6e:	3402      	adds	r4, #2
 8007d70:	9305      	str	r3, [sp, #20]
 8007d72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e48 <_vfiprintf_r+0x22c>
 8007d76:	7821      	ldrb	r1, [r4, #0]
 8007d78:	2203      	movs	r2, #3
 8007d7a:	4650      	mov	r0, sl
 8007d7c:	f7f8 fa28 	bl	80001d0 <memchr>
 8007d80:	b138      	cbz	r0, 8007d92 <_vfiprintf_r+0x176>
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	eba0 000a 	sub.w	r0, r0, sl
 8007d88:	2240      	movs	r2, #64	@ 0x40
 8007d8a:	4082      	lsls	r2, r0
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	3401      	adds	r4, #1
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d96:	4829      	ldr	r0, [pc, #164]	@ (8007e3c <_vfiprintf_r+0x220>)
 8007d98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d9c:	2206      	movs	r2, #6
 8007d9e:	f7f8 fa17 	bl	80001d0 <memchr>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d03f      	beq.n	8007e26 <_vfiprintf_r+0x20a>
 8007da6:	4b26      	ldr	r3, [pc, #152]	@ (8007e40 <_vfiprintf_r+0x224>)
 8007da8:	bb1b      	cbnz	r3, 8007df2 <_vfiprintf_r+0x1d6>
 8007daa:	9b03      	ldr	r3, [sp, #12]
 8007dac:	3307      	adds	r3, #7
 8007dae:	f023 0307 	bic.w	r3, r3, #7
 8007db2:	3308      	adds	r3, #8
 8007db4:	9303      	str	r3, [sp, #12]
 8007db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db8:	443b      	add	r3, r7
 8007dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dbc:	e76a      	b.n	8007c94 <_vfiprintf_r+0x78>
 8007dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	e7a8      	b.n	8007d1a <_vfiprintf_r+0xfe>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	3401      	adds	r4, #1
 8007dcc:	9305      	str	r3, [sp, #20]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	f04f 0c0a 	mov.w	ip, #10
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dda:	3a30      	subs	r2, #48	@ 0x30
 8007ddc:	2a09      	cmp	r2, #9
 8007dde:	d903      	bls.n	8007de8 <_vfiprintf_r+0x1cc>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0c6      	beq.n	8007d72 <_vfiprintf_r+0x156>
 8007de4:	9105      	str	r1, [sp, #20]
 8007de6:	e7c4      	b.n	8007d72 <_vfiprintf_r+0x156>
 8007de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dec:	4604      	mov	r4, r0
 8007dee:	2301      	movs	r3, #1
 8007df0:	e7f0      	b.n	8007dd4 <_vfiprintf_r+0x1b8>
 8007df2:	ab03      	add	r3, sp, #12
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	462a      	mov	r2, r5
 8007df8:	4b12      	ldr	r3, [pc, #72]	@ (8007e44 <_vfiprintf_r+0x228>)
 8007dfa:	a904      	add	r1, sp, #16
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f3af 8000 	nop.w
 8007e02:	4607      	mov	r7, r0
 8007e04:	1c78      	adds	r0, r7, #1
 8007e06:	d1d6      	bne.n	8007db6 <_vfiprintf_r+0x19a>
 8007e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e0a:	07d9      	lsls	r1, r3, #31
 8007e0c:	d405      	bmi.n	8007e1a <_vfiprintf_r+0x1fe>
 8007e0e:	89ab      	ldrh	r3, [r5, #12]
 8007e10:	059a      	lsls	r2, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_vfiprintf_r+0x1fe>
 8007e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e16:	f7ff fddd 	bl	80079d4 <__retarget_lock_release_recursive>
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	065b      	lsls	r3, r3, #25
 8007e1e:	f53f af1f 	bmi.w	8007c60 <_vfiprintf_r+0x44>
 8007e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e24:	e71e      	b.n	8007c64 <_vfiprintf_r+0x48>
 8007e26:	ab03      	add	r3, sp, #12
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	4b05      	ldr	r3, [pc, #20]	@ (8007e44 <_vfiprintf_r+0x228>)
 8007e2e:	a904      	add	r1, sp, #16
 8007e30:	4630      	mov	r0, r6
 8007e32:	f000 f879 	bl	8007f28 <_printf_i>
 8007e36:	e7e4      	b.n	8007e02 <_vfiprintf_r+0x1e6>
 8007e38:	080085a8 	.word	0x080085a8
 8007e3c:	080085b2 	.word	0x080085b2
 8007e40:	00000000 	.word	0x00000000
 8007e44:	08007bf7 	.word	0x08007bf7
 8007e48:	080085ae 	.word	0x080085ae

08007e4c <_printf_common>:
 8007e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e50:	4616      	mov	r6, r2
 8007e52:	4698      	mov	r8, r3
 8007e54:	688a      	ldr	r2, [r1, #8]
 8007e56:	690b      	ldr	r3, [r1, #16]
 8007e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	bfb8      	it	lt
 8007e60:	4613      	movlt	r3, r2
 8007e62:	6033      	str	r3, [r6, #0]
 8007e64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e68:	4607      	mov	r7, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	b10a      	cbz	r2, 8007e72 <_printf_common+0x26>
 8007e6e:	3301      	adds	r3, #1
 8007e70:	6033      	str	r3, [r6, #0]
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	0699      	lsls	r1, r3, #26
 8007e76:	bf42      	ittt	mi
 8007e78:	6833      	ldrmi	r3, [r6, #0]
 8007e7a:	3302      	addmi	r3, #2
 8007e7c:	6033      	strmi	r3, [r6, #0]
 8007e7e:	6825      	ldr	r5, [r4, #0]
 8007e80:	f015 0506 	ands.w	r5, r5, #6
 8007e84:	d106      	bne.n	8007e94 <_printf_common+0x48>
 8007e86:	f104 0a19 	add.w	sl, r4, #25
 8007e8a:	68e3      	ldr	r3, [r4, #12]
 8007e8c:	6832      	ldr	r2, [r6, #0]
 8007e8e:	1a9b      	subs	r3, r3, r2
 8007e90:	42ab      	cmp	r3, r5
 8007e92:	dc26      	bgt.n	8007ee2 <_printf_common+0x96>
 8007e94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e98:	6822      	ldr	r2, [r4, #0]
 8007e9a:	3b00      	subs	r3, #0
 8007e9c:	bf18      	it	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	0692      	lsls	r2, r2, #26
 8007ea2:	d42b      	bmi.n	8007efc <_printf_common+0xb0>
 8007ea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ea8:	4641      	mov	r1, r8
 8007eaa:	4638      	mov	r0, r7
 8007eac:	47c8      	blx	r9
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d01e      	beq.n	8007ef0 <_printf_common+0xa4>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	6922      	ldr	r2, [r4, #16]
 8007eb6:	f003 0306 	and.w	r3, r3, #6
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	bf02      	ittt	eq
 8007ebe:	68e5      	ldreq	r5, [r4, #12]
 8007ec0:	6833      	ldreq	r3, [r6, #0]
 8007ec2:	1aed      	subeq	r5, r5, r3
 8007ec4:	68a3      	ldr	r3, [r4, #8]
 8007ec6:	bf0c      	ite	eq
 8007ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ecc:	2500      	movne	r5, #0
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	bfc4      	itt	gt
 8007ed2:	1a9b      	subgt	r3, r3, r2
 8007ed4:	18ed      	addgt	r5, r5, r3
 8007ed6:	2600      	movs	r6, #0
 8007ed8:	341a      	adds	r4, #26
 8007eda:	42b5      	cmp	r5, r6
 8007edc:	d11a      	bne.n	8007f14 <_printf_common+0xc8>
 8007ede:	2000      	movs	r0, #0
 8007ee0:	e008      	b.n	8007ef4 <_printf_common+0xa8>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4652      	mov	r2, sl
 8007ee6:	4641      	mov	r1, r8
 8007ee8:	4638      	mov	r0, r7
 8007eea:	47c8      	blx	r9
 8007eec:	3001      	adds	r0, #1
 8007eee:	d103      	bne.n	8007ef8 <_printf_common+0xac>
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef8:	3501      	adds	r5, #1
 8007efa:	e7c6      	b.n	8007e8a <_printf_common+0x3e>
 8007efc:	18e1      	adds	r1, r4, r3
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	2030      	movs	r0, #48	@ 0x30
 8007f02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f06:	4422      	add	r2, r4
 8007f08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f10:	3302      	adds	r3, #2
 8007f12:	e7c7      	b.n	8007ea4 <_printf_common+0x58>
 8007f14:	2301      	movs	r3, #1
 8007f16:	4622      	mov	r2, r4
 8007f18:	4641      	mov	r1, r8
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	47c8      	blx	r9
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d0e6      	beq.n	8007ef0 <_printf_common+0xa4>
 8007f22:	3601      	adds	r6, #1
 8007f24:	e7d9      	b.n	8007eda <_printf_common+0x8e>
	...

08007f28 <_printf_i>:
 8007f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2c:	7e0f      	ldrb	r7, [r1, #24]
 8007f2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f30:	2f78      	cmp	r7, #120	@ 0x78
 8007f32:	4691      	mov	r9, r2
 8007f34:	4680      	mov	r8, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	469a      	mov	sl, r3
 8007f3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f3e:	d807      	bhi.n	8007f50 <_printf_i+0x28>
 8007f40:	2f62      	cmp	r7, #98	@ 0x62
 8007f42:	d80a      	bhi.n	8007f5a <_printf_i+0x32>
 8007f44:	2f00      	cmp	r7, #0
 8007f46:	f000 80d2 	beq.w	80080ee <_printf_i+0x1c6>
 8007f4a:	2f58      	cmp	r7, #88	@ 0x58
 8007f4c:	f000 80b9 	beq.w	80080c2 <_printf_i+0x19a>
 8007f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f58:	e03a      	b.n	8007fd0 <_printf_i+0xa8>
 8007f5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f5e:	2b15      	cmp	r3, #21
 8007f60:	d8f6      	bhi.n	8007f50 <_printf_i+0x28>
 8007f62:	a101      	add	r1, pc, #4	@ (adr r1, 8007f68 <_printf_i+0x40>)
 8007f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f68:	08007fc1 	.word	0x08007fc1
 8007f6c:	08007fd5 	.word	0x08007fd5
 8007f70:	08007f51 	.word	0x08007f51
 8007f74:	08007f51 	.word	0x08007f51
 8007f78:	08007f51 	.word	0x08007f51
 8007f7c:	08007f51 	.word	0x08007f51
 8007f80:	08007fd5 	.word	0x08007fd5
 8007f84:	08007f51 	.word	0x08007f51
 8007f88:	08007f51 	.word	0x08007f51
 8007f8c:	08007f51 	.word	0x08007f51
 8007f90:	08007f51 	.word	0x08007f51
 8007f94:	080080d5 	.word	0x080080d5
 8007f98:	08007fff 	.word	0x08007fff
 8007f9c:	0800808f 	.word	0x0800808f
 8007fa0:	08007f51 	.word	0x08007f51
 8007fa4:	08007f51 	.word	0x08007f51
 8007fa8:	080080f7 	.word	0x080080f7
 8007fac:	08007f51 	.word	0x08007f51
 8007fb0:	08007fff 	.word	0x08007fff
 8007fb4:	08007f51 	.word	0x08007f51
 8007fb8:	08007f51 	.word	0x08007f51
 8007fbc:	08008097 	.word	0x08008097
 8007fc0:	6833      	ldr	r3, [r6, #0]
 8007fc2:	1d1a      	adds	r2, r3, #4
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6032      	str	r2, [r6, #0]
 8007fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e09d      	b.n	8008110 <_printf_i+0x1e8>
 8007fd4:	6833      	ldr	r3, [r6, #0]
 8007fd6:	6820      	ldr	r0, [r4, #0]
 8007fd8:	1d19      	adds	r1, r3, #4
 8007fda:	6031      	str	r1, [r6, #0]
 8007fdc:	0606      	lsls	r6, r0, #24
 8007fde:	d501      	bpl.n	8007fe4 <_printf_i+0xbc>
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	e003      	b.n	8007fec <_printf_i+0xc4>
 8007fe4:	0645      	lsls	r5, r0, #25
 8007fe6:	d5fb      	bpl.n	8007fe0 <_printf_i+0xb8>
 8007fe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fec:	2d00      	cmp	r5, #0
 8007fee:	da03      	bge.n	8007ff8 <_printf_i+0xd0>
 8007ff0:	232d      	movs	r3, #45	@ 0x2d
 8007ff2:	426d      	negs	r5, r5
 8007ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ff8:	4859      	ldr	r0, [pc, #356]	@ (8008160 <_printf_i+0x238>)
 8007ffa:	230a      	movs	r3, #10
 8007ffc:	e011      	b.n	8008022 <_printf_i+0xfa>
 8007ffe:	6821      	ldr	r1, [r4, #0]
 8008000:	6833      	ldr	r3, [r6, #0]
 8008002:	0608      	lsls	r0, r1, #24
 8008004:	f853 5b04 	ldr.w	r5, [r3], #4
 8008008:	d402      	bmi.n	8008010 <_printf_i+0xe8>
 800800a:	0649      	lsls	r1, r1, #25
 800800c:	bf48      	it	mi
 800800e:	b2ad      	uxthmi	r5, r5
 8008010:	2f6f      	cmp	r7, #111	@ 0x6f
 8008012:	4853      	ldr	r0, [pc, #332]	@ (8008160 <_printf_i+0x238>)
 8008014:	6033      	str	r3, [r6, #0]
 8008016:	bf14      	ite	ne
 8008018:	230a      	movne	r3, #10
 800801a:	2308      	moveq	r3, #8
 800801c:	2100      	movs	r1, #0
 800801e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008022:	6866      	ldr	r6, [r4, #4]
 8008024:	60a6      	str	r6, [r4, #8]
 8008026:	2e00      	cmp	r6, #0
 8008028:	bfa2      	ittt	ge
 800802a:	6821      	ldrge	r1, [r4, #0]
 800802c:	f021 0104 	bicge.w	r1, r1, #4
 8008030:	6021      	strge	r1, [r4, #0]
 8008032:	b90d      	cbnz	r5, 8008038 <_printf_i+0x110>
 8008034:	2e00      	cmp	r6, #0
 8008036:	d04b      	beq.n	80080d0 <_printf_i+0x1a8>
 8008038:	4616      	mov	r6, r2
 800803a:	fbb5 f1f3 	udiv	r1, r5, r3
 800803e:	fb03 5711 	mls	r7, r3, r1, r5
 8008042:	5dc7      	ldrb	r7, [r0, r7]
 8008044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008048:	462f      	mov	r7, r5
 800804a:	42bb      	cmp	r3, r7
 800804c:	460d      	mov	r5, r1
 800804e:	d9f4      	bls.n	800803a <_printf_i+0x112>
 8008050:	2b08      	cmp	r3, #8
 8008052:	d10b      	bne.n	800806c <_printf_i+0x144>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	07df      	lsls	r7, r3, #31
 8008058:	d508      	bpl.n	800806c <_printf_i+0x144>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4299      	cmp	r1, r3
 8008060:	bfde      	ittt	le
 8008062:	2330      	movle	r3, #48	@ 0x30
 8008064:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800806c:	1b92      	subs	r2, r2, r6
 800806e:	6122      	str	r2, [r4, #16]
 8008070:	f8cd a000 	str.w	sl, [sp]
 8008074:	464b      	mov	r3, r9
 8008076:	aa03      	add	r2, sp, #12
 8008078:	4621      	mov	r1, r4
 800807a:	4640      	mov	r0, r8
 800807c:	f7ff fee6 	bl	8007e4c <_printf_common>
 8008080:	3001      	adds	r0, #1
 8008082:	d14a      	bne.n	800811a <_printf_i+0x1f2>
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	b004      	add	sp, #16
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f043 0320 	orr.w	r3, r3, #32
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	4833      	ldr	r0, [pc, #204]	@ (8008164 <_printf_i+0x23c>)
 8008098:	2778      	movs	r7, #120	@ 0x78
 800809a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6831      	ldr	r1, [r6, #0]
 80080a2:	061f      	lsls	r7, r3, #24
 80080a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80080a8:	d402      	bmi.n	80080b0 <_printf_i+0x188>
 80080aa:	065f      	lsls	r7, r3, #25
 80080ac:	bf48      	it	mi
 80080ae:	b2ad      	uxthmi	r5, r5
 80080b0:	6031      	str	r1, [r6, #0]
 80080b2:	07d9      	lsls	r1, r3, #31
 80080b4:	bf44      	itt	mi
 80080b6:	f043 0320 	orrmi.w	r3, r3, #32
 80080ba:	6023      	strmi	r3, [r4, #0]
 80080bc:	b11d      	cbz	r5, 80080c6 <_printf_i+0x19e>
 80080be:	2310      	movs	r3, #16
 80080c0:	e7ac      	b.n	800801c <_printf_i+0xf4>
 80080c2:	4827      	ldr	r0, [pc, #156]	@ (8008160 <_printf_i+0x238>)
 80080c4:	e7e9      	b.n	800809a <_printf_i+0x172>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	f023 0320 	bic.w	r3, r3, #32
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	e7f6      	b.n	80080be <_printf_i+0x196>
 80080d0:	4616      	mov	r6, r2
 80080d2:	e7bd      	b.n	8008050 <_printf_i+0x128>
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	6825      	ldr	r5, [r4, #0]
 80080d8:	6961      	ldr	r1, [r4, #20]
 80080da:	1d18      	adds	r0, r3, #4
 80080dc:	6030      	str	r0, [r6, #0]
 80080de:	062e      	lsls	r6, r5, #24
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	d501      	bpl.n	80080e8 <_printf_i+0x1c0>
 80080e4:	6019      	str	r1, [r3, #0]
 80080e6:	e002      	b.n	80080ee <_printf_i+0x1c6>
 80080e8:	0668      	lsls	r0, r5, #25
 80080ea:	d5fb      	bpl.n	80080e4 <_printf_i+0x1bc>
 80080ec:	8019      	strh	r1, [r3, #0]
 80080ee:	2300      	movs	r3, #0
 80080f0:	6123      	str	r3, [r4, #16]
 80080f2:	4616      	mov	r6, r2
 80080f4:	e7bc      	b.n	8008070 <_printf_i+0x148>
 80080f6:	6833      	ldr	r3, [r6, #0]
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	6032      	str	r2, [r6, #0]
 80080fc:	681e      	ldr	r6, [r3, #0]
 80080fe:	6862      	ldr	r2, [r4, #4]
 8008100:	2100      	movs	r1, #0
 8008102:	4630      	mov	r0, r6
 8008104:	f7f8 f864 	bl	80001d0 <memchr>
 8008108:	b108      	cbz	r0, 800810e <_printf_i+0x1e6>
 800810a:	1b80      	subs	r0, r0, r6
 800810c:	6060      	str	r0, [r4, #4]
 800810e:	6863      	ldr	r3, [r4, #4]
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	2300      	movs	r3, #0
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008118:	e7aa      	b.n	8008070 <_printf_i+0x148>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	4632      	mov	r2, r6
 800811e:	4649      	mov	r1, r9
 8008120:	4640      	mov	r0, r8
 8008122:	47d0      	blx	sl
 8008124:	3001      	adds	r0, #1
 8008126:	d0ad      	beq.n	8008084 <_printf_i+0x15c>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	079b      	lsls	r3, r3, #30
 800812c:	d413      	bmi.n	8008156 <_printf_i+0x22e>
 800812e:	68e0      	ldr	r0, [r4, #12]
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	4298      	cmp	r0, r3
 8008134:	bfb8      	it	lt
 8008136:	4618      	movlt	r0, r3
 8008138:	e7a6      	b.n	8008088 <_printf_i+0x160>
 800813a:	2301      	movs	r3, #1
 800813c:	4632      	mov	r2, r6
 800813e:	4649      	mov	r1, r9
 8008140:	4640      	mov	r0, r8
 8008142:	47d0      	blx	sl
 8008144:	3001      	adds	r0, #1
 8008146:	d09d      	beq.n	8008084 <_printf_i+0x15c>
 8008148:	3501      	adds	r5, #1
 800814a:	68e3      	ldr	r3, [r4, #12]
 800814c:	9903      	ldr	r1, [sp, #12]
 800814e:	1a5b      	subs	r3, r3, r1
 8008150:	42ab      	cmp	r3, r5
 8008152:	dcf2      	bgt.n	800813a <_printf_i+0x212>
 8008154:	e7eb      	b.n	800812e <_printf_i+0x206>
 8008156:	2500      	movs	r5, #0
 8008158:	f104 0619 	add.w	r6, r4, #25
 800815c:	e7f5      	b.n	800814a <_printf_i+0x222>
 800815e:	bf00      	nop
 8008160:	080085b9 	.word	0x080085b9
 8008164:	080085ca 	.word	0x080085ca

08008168 <__sflush_r>:
 8008168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008170:	0716      	lsls	r6, r2, #28
 8008172:	4605      	mov	r5, r0
 8008174:	460c      	mov	r4, r1
 8008176:	d454      	bmi.n	8008222 <__sflush_r+0xba>
 8008178:	684b      	ldr	r3, [r1, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	dc02      	bgt.n	8008184 <__sflush_r+0x1c>
 800817e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	dd48      	ble.n	8008216 <__sflush_r+0xae>
 8008184:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008186:	2e00      	cmp	r6, #0
 8008188:	d045      	beq.n	8008216 <__sflush_r+0xae>
 800818a:	2300      	movs	r3, #0
 800818c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008190:	682f      	ldr	r7, [r5, #0]
 8008192:	6a21      	ldr	r1, [r4, #32]
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	d030      	beq.n	80081fa <__sflush_r+0x92>
 8008198:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	0759      	lsls	r1, r3, #29
 800819e:	d505      	bpl.n	80081ac <__sflush_r+0x44>
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081a6:	b10b      	cbz	r3, 80081ac <__sflush_r+0x44>
 80081a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081b0:	6a21      	ldr	r1, [r4, #32]
 80081b2:	4628      	mov	r0, r5
 80081b4:	47b0      	blx	r6
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	d106      	bne.n	80081ca <__sflush_r+0x62>
 80081bc:	6829      	ldr	r1, [r5, #0]
 80081be:	291d      	cmp	r1, #29
 80081c0:	d82b      	bhi.n	800821a <__sflush_r+0xb2>
 80081c2:	4a2a      	ldr	r2, [pc, #168]	@ (800826c <__sflush_r+0x104>)
 80081c4:	410a      	asrs	r2, r1
 80081c6:	07d6      	lsls	r6, r2, #31
 80081c8:	d427      	bmi.n	800821a <__sflush_r+0xb2>
 80081ca:	2200      	movs	r2, #0
 80081cc:	6062      	str	r2, [r4, #4]
 80081ce:	04d9      	lsls	r1, r3, #19
 80081d0:	6922      	ldr	r2, [r4, #16]
 80081d2:	6022      	str	r2, [r4, #0]
 80081d4:	d504      	bpl.n	80081e0 <__sflush_r+0x78>
 80081d6:	1c42      	adds	r2, r0, #1
 80081d8:	d101      	bne.n	80081de <__sflush_r+0x76>
 80081da:	682b      	ldr	r3, [r5, #0]
 80081dc:	b903      	cbnz	r3, 80081e0 <__sflush_r+0x78>
 80081de:	6560      	str	r0, [r4, #84]	@ 0x54
 80081e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081e2:	602f      	str	r7, [r5, #0]
 80081e4:	b1b9      	cbz	r1, 8008216 <__sflush_r+0xae>
 80081e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081ea:	4299      	cmp	r1, r3
 80081ec:	d002      	beq.n	80081f4 <__sflush_r+0x8c>
 80081ee:	4628      	mov	r0, r5
 80081f0:	f7ff fbf2 	bl	80079d8 <_free_r>
 80081f4:	2300      	movs	r3, #0
 80081f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80081f8:	e00d      	b.n	8008216 <__sflush_r+0xae>
 80081fa:	2301      	movs	r3, #1
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b0      	blx	r6
 8008200:	4602      	mov	r2, r0
 8008202:	1c50      	adds	r0, r2, #1
 8008204:	d1c9      	bne.n	800819a <__sflush_r+0x32>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0c6      	beq.n	800819a <__sflush_r+0x32>
 800820c:	2b1d      	cmp	r3, #29
 800820e:	d001      	beq.n	8008214 <__sflush_r+0xac>
 8008210:	2b16      	cmp	r3, #22
 8008212:	d11e      	bne.n	8008252 <__sflush_r+0xea>
 8008214:	602f      	str	r7, [r5, #0]
 8008216:	2000      	movs	r0, #0
 8008218:	e022      	b.n	8008260 <__sflush_r+0xf8>
 800821a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821e:	b21b      	sxth	r3, r3
 8008220:	e01b      	b.n	800825a <__sflush_r+0xf2>
 8008222:	690f      	ldr	r7, [r1, #16]
 8008224:	2f00      	cmp	r7, #0
 8008226:	d0f6      	beq.n	8008216 <__sflush_r+0xae>
 8008228:	0793      	lsls	r3, r2, #30
 800822a:	680e      	ldr	r6, [r1, #0]
 800822c:	bf08      	it	eq
 800822e:	694b      	ldreq	r3, [r1, #20]
 8008230:	600f      	str	r7, [r1, #0]
 8008232:	bf18      	it	ne
 8008234:	2300      	movne	r3, #0
 8008236:	eba6 0807 	sub.w	r8, r6, r7
 800823a:	608b      	str	r3, [r1, #8]
 800823c:	f1b8 0f00 	cmp.w	r8, #0
 8008240:	dde9      	ble.n	8008216 <__sflush_r+0xae>
 8008242:	6a21      	ldr	r1, [r4, #32]
 8008244:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008246:	4643      	mov	r3, r8
 8008248:	463a      	mov	r2, r7
 800824a:	4628      	mov	r0, r5
 800824c:	47b0      	blx	r6
 800824e:	2800      	cmp	r0, #0
 8008250:	dc08      	bgt.n	8008264 <__sflush_r+0xfc>
 8008252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008264:	4407      	add	r7, r0
 8008266:	eba8 0800 	sub.w	r8, r8, r0
 800826a:	e7e7      	b.n	800823c <__sflush_r+0xd4>
 800826c:	dfbffffe 	.word	0xdfbffffe

08008270 <_fflush_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	690b      	ldr	r3, [r1, #16]
 8008274:	4605      	mov	r5, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b913      	cbnz	r3, 8008280 <_fflush_r+0x10>
 800827a:	2500      	movs	r5, #0
 800827c:	4628      	mov	r0, r5
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	b118      	cbz	r0, 800828a <_fflush_r+0x1a>
 8008282:	6a03      	ldr	r3, [r0, #32]
 8008284:	b90b      	cbnz	r3, 800828a <_fflush_r+0x1a>
 8008286:	f7ff f9ad 	bl	80075e4 <__sinit>
 800828a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0f3      	beq.n	800827a <_fflush_r+0xa>
 8008292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008294:	07d0      	lsls	r0, r2, #31
 8008296:	d404      	bmi.n	80082a2 <_fflush_r+0x32>
 8008298:	0599      	lsls	r1, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_fflush_r+0x32>
 800829c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800829e:	f7ff fb98 	bl	80079d2 <__retarget_lock_acquire_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7ff ff5f 	bl	8008168 <__sflush_r>
 80082aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082ac:	07da      	lsls	r2, r3, #31
 80082ae:	4605      	mov	r5, r0
 80082b0:	d4e4      	bmi.n	800827c <_fflush_r+0xc>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	d4e1      	bmi.n	800827c <_fflush_r+0xc>
 80082b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ba:	f7ff fb8b 	bl	80079d4 <__retarget_lock_release_recursive>
 80082be:	e7dd      	b.n	800827c <_fflush_r+0xc>

080082c0 <__swhatbuf_r>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	2900      	cmp	r1, #0
 80082ca:	b096      	sub	sp, #88	@ 0x58
 80082cc:	4615      	mov	r5, r2
 80082ce:	461e      	mov	r6, r3
 80082d0:	da0d      	bge.n	80082ee <__swhatbuf_r+0x2e>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082d8:	f04f 0100 	mov.w	r1, #0
 80082dc:	bf14      	ite	ne
 80082de:	2340      	movne	r3, #64	@ 0x40
 80082e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082e4:	2000      	movs	r0, #0
 80082e6:	6031      	str	r1, [r6, #0]
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	b016      	add	sp, #88	@ 0x58
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
 80082ee:	466a      	mov	r2, sp
 80082f0:	f000 f848 	bl	8008384 <_fstat_r>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	dbec      	blt.n	80082d2 <__swhatbuf_r+0x12>
 80082f8:	9901      	ldr	r1, [sp, #4]
 80082fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008302:	4259      	negs	r1, r3
 8008304:	4159      	adcs	r1, r3
 8008306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800830a:	e7eb      	b.n	80082e4 <__swhatbuf_r+0x24>

0800830c <__smakebuf_r>:
 800830c:	898b      	ldrh	r3, [r1, #12]
 800830e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008310:	079d      	lsls	r5, r3, #30
 8008312:	4606      	mov	r6, r0
 8008314:	460c      	mov	r4, r1
 8008316:	d507      	bpl.n	8008328 <__smakebuf_r+0x1c>
 8008318:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	2301      	movs	r3, #1
 8008322:	6163      	str	r3, [r4, #20]
 8008324:	b003      	add	sp, #12
 8008326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008328:	ab01      	add	r3, sp, #4
 800832a:	466a      	mov	r2, sp
 800832c:	f7ff ffc8 	bl	80082c0 <__swhatbuf_r>
 8008330:	9f00      	ldr	r7, [sp, #0]
 8008332:	4605      	mov	r5, r0
 8008334:	4639      	mov	r1, r7
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff fbba 	bl	8007ab0 <_malloc_r>
 800833c:	b948      	cbnz	r0, 8008352 <__smakebuf_r+0x46>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	059a      	lsls	r2, r3, #22
 8008344:	d4ee      	bmi.n	8008324 <__smakebuf_r+0x18>
 8008346:	f023 0303 	bic.w	r3, r3, #3
 800834a:	f043 0302 	orr.w	r3, r3, #2
 800834e:	81a3      	strh	r3, [r4, #12]
 8008350:	e7e2      	b.n	8008318 <__smakebuf_r+0xc>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	6020      	str	r0, [r4, #0]
 8008356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008362:	b15b      	cbz	r3, 800837c <__smakebuf_r+0x70>
 8008364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f81d 	bl	80083a8 <_isatty_r>
 800836e:	b128      	cbz	r0, 800837c <__smakebuf_r+0x70>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	431d      	orrs	r5, r3
 8008380:	81a5      	strh	r5, [r4, #12]
 8008382:	e7cf      	b.n	8008324 <__smakebuf_r+0x18>

08008384 <_fstat_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d07      	ldr	r5, [pc, #28]	@ (80083a4 <_fstat_r+0x20>)
 8008388:	2300      	movs	r3, #0
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	f7f9 fb74 	bl	8001a7e <_fstat>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d102      	bne.n	80083a0 <_fstat_r+0x1c>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	b103      	cbz	r3, 80083a0 <_fstat_r+0x1c>
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	bf00      	nop
 80083a4:	200004a4 	.word	0x200004a4

080083a8 <_isatty_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	@ (80083c4 <_isatty_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7f9 fb73 	bl	8001a9e <_isatty>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_isatty_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_isatty_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	200004a4 	.word	0x200004a4

080083c8 <_sbrk_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d06      	ldr	r5, [pc, #24]	@ (80083e4 <_sbrk_r+0x1c>)
 80083cc:	2300      	movs	r3, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	f7f9 fb7c 	bl	8001ad0 <_sbrk>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_sbrk_r+0x1a>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_sbrk_r+0x1a>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	200004a4 	.word	0x200004a4

080083e8 <_init>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr

080083f4 <_fini>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr
