
peripheraltest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000672c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080068bc  080068bc  000078bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a48  08006a48  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006a48  08006a48  00007a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a50  08006a50  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a50  08006a50  00007a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a54  08006a54  00007a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006a58  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20000068  08006ac0  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  08006ac0  00008664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a88  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002874  00000000  00000000  0001bb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0001e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ead  00000000  00000000  0001f658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287ee  00000000  00000000  00020505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017211  00000000  00000000  00048cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7493  00000000  00000000  0005ff04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157397  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e0  00000000  00000000  001573dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015cabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068a4 	.word	0x080068a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080068a4 	.word	0x080068a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart5, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	b29a      	uxth	r2, r3
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	68b9      	ldr	r1, [r7, #8]
 8000576:	4804      	ldr	r0, [pc, #16]	@ (8000588 <_write+0x28>)
 8000578:	f004 fbe0 	bl	8004d3c <HAL_UART_Transmit>
    return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200001f8 	.word	0x200001f8

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f001 f81d 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f89f 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 fa5d 	bl	8000a58 <MX_GPIO_Init>
  MX_I2C1_Init();
 800059e:	f000 f8ed 	bl	800077c <MX_I2C1_Init>
  MX_TIM3_Init();
 80005a2:	f000 f92b 	bl	80007fc <MX_TIM3_Init>
  MX_UART4_Init();
 80005a6:	f000 f9c7 	bl	8000938 <MX_UART4_Init>
  MX_UART5_Init();
 80005aa:	f000 f9f5 	bl	8000998 <MX_UART5_Init>
  MX_USART3_UART_Init();
 80005ae:	f000 fa23 	bl	80009f8 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 80005b2:	f000 f99b 	bl	80008ec <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	setupSensor();
 80005b6:	f000 fc25 	bl	8000e04 <setupSensor>
	setupMotor();
 80005ba:	f000 fb0d 	bl	8000bd8 <setupMotor>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		uint8_t receivedChar;
		HAL_UART_Receive(&huart4, &receivedChar, 1, 100);
 80005be:	1cf9      	adds	r1, r7, #3
 80005c0:	2364      	movs	r3, #100	@ 0x64
 80005c2:	2201      	movs	r2, #1
 80005c4:	483a      	ldr	r0, [pc, #232]	@ (80006b0 <main+0x124>)
 80005c6:	f004 fc42 	bl	8004e4e <HAL_UART_Receive>
		userCase = receivedChar - '0';
 80005ca:	78fb      	ldrb	r3, [r7, #3]
 80005cc:	3b30      	subs	r3, #48	@ 0x30
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b38      	ldr	r3, [pc, #224]	@ (80006b4 <main+0x128>)
 80005d2:	701a      	strb	r2, [r3, #0]

		switch (userCase)
 80005d4:	4b37      	ldr	r3, [pc, #220]	@ (80006b4 <main+0x128>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b03      	cmp	r3, #3
 80005dc:	d866      	bhi.n	80006ac <main+0x120>
 80005de:	a201      	add	r2, pc, #4	@ (adr r2, 80005e4 <main+0x58>)
 80005e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e4:	080005f5 	.word	0x080005f5
 80005e8:	08000605 	.word	0x08000605
 80005ec:	0800061b 	.word	0x0800061b
 80005f0:	08000697 	.word	0x08000697
		{
			case 0:
				lampOff();
 80005f4:	f000 fbbb 	bl	8000d6e <lampOff>
				homePosition();
 80005f8:	f000 fb74 	bl	8000ce4 <homePosition>
				printf("Reached Home Position\r\n");
 80005fc:	482e      	ldr	r0, [pc, #184]	@ (80006b8 <main+0x12c>)
 80005fe:	f005 faed 	bl	8005bdc <puts>
				break;
 8000602:	e054      	b.n	80006ae <main+0x122>

			case 1:
				lampOn();
 8000604:	f000 fbac 	bl	8000d60 <lampOn>
				rotateMotor(5100, 1);
 8000608:	2101      	movs	r1, #1
 800060a:	f241 30ec 	movw	r0, #5100	@ 0x13ec
 800060e:	f000 fb2f 	bl	8000c70 <rotateMotor>
				printf("Scan Initialized\r\n");
 8000612:	482a      	ldr	r0, [pc, #168]	@ (80006bc <main+0x130>)
 8000614:	f005 fae2 	bl	8005bdc <puts>
				break;
 8000618:	e049      	b.n	80006ae <main+0x122>
			case 2:
				printf("Taking Scan\r\n");
 800061a:	4829      	ldr	r0, [pc, #164]	@ (80006c0 <main+0x134>)
 800061c:	f005 fade 	bl	8005bdc <puts>

				for (int stage = 0; stage < 14; stage++)
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	e030      	b.n	8000688 <main+0xfc>
				{
					rotateMotor(343, 1);
 8000626:	2101      	movs	r1, #1
 8000628:	f240 1057 	movw	r0, #343	@ 0x157
 800062c:	f000 fb20 	bl	8000c70 <rotateMotor>

					for (int scan = 0; scan < 3; scan++)
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	e022      	b.n	800067c <main+0xf0>
					{
						printf("Scan %d_%d\r\n", stage + 1, scan + 1);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	1c59      	adds	r1, r3, #1
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	3301      	adds	r3, #1
 800063e:	461a      	mov	r2, r3
 8000640:	4820      	ldr	r0, [pc, #128]	@ (80006c4 <main+0x138>)
 8000642:	f005 fa63 	bl	8005b0c <iprintf>

						// Direct spectra acquisition
						acquireSpectra();
 8000646:	f000 fc2f 	bl	8000ea8 <acquireSpectra>

						// Print the acquired spectra
						for (int channel = 0; channel < CHANNELS; channel++)
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	e00b      	b.n	8000668 <main+0xdc>
						{
							printf("Channel %d: %d\r\n", channel, spectra[channel]);
 8000650:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <main+0x13c>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000658:	461a      	mov	r2, r3
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	481b      	ldr	r0, [pc, #108]	@ (80006cc <main+0x140>)
 800065e:	f005 fa55 	bl	8005b0c <iprintf>
						for (int channel = 0; channel < CHANNELS; channel++)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2bff      	cmp	r3, #255	@ 0xff
 800066c:	ddf0      	ble.n	8000650 <main+0xc4>
						}

						HAL_Delay(1000); // 1 sec delay between scans
 800066e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000672:	f001 f829 	bl	80016c8 <HAL_Delay>
					for (int scan = 0; scan < 3; scan++)
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	3301      	adds	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b02      	cmp	r3, #2
 8000680:	ddd9      	ble.n	8000636 <main+0xaa>
				for (int stage = 0; stage < 14; stage++)
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3301      	adds	r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b0d      	cmp	r3, #13
 800068c:	ddcb      	ble.n	8000626 <main+0x9a>
					}
				}
				printf("Scan Finished\r\n");
 800068e:	4810      	ldr	r0, [pc, #64]	@ (80006d0 <main+0x144>)
 8000690:	f005 faa4 	bl	8005bdc <puts>
				break;
 8000694:	e00b      	b.n	80006ae <main+0x122>

			case 3:
				lampOff(); // lamp LOW
 8000696:	f000 fb6a 	bl	8000d6e <lampOff>
				rotateMotor(9555, 1);
 800069a:	2101      	movs	r1, #1
 800069c:	f242 5053 	movw	r0, #9555	@ 0x2553
 80006a0:	f000 fae6 	bl	8000c70 <rotateMotor>
				printf("Sample Discarded\r\n");
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <main+0x148>)
 80006a6:	f005 fa99 	bl	8005bdc <puts>
				break;
 80006aa:	e000      	b.n	80006ae <main+0x122>

			default:
				break;
 80006ac:	bf00      	nop
  {
 80006ae:	e786      	b.n	80005be <main+0x32>
 80006b0:	20000170 	.word	0x20000170
 80006b4:	20000308 	.word	0x20000308
 80006b8:	080068bc 	.word	0x080068bc
 80006bc:	080068d4 	.word	0x080068d4
 80006c0:	080068e8 	.word	0x080068e8
 80006c4:	080068f8 	.word	0x080068f8
 80006c8:	2000030c 	.word	0x2000030c
 80006cc:	08006908 	.word	0x08006908
 80006d0:	0800691c 	.word	0x0800691c
 80006d4:	0800692c 	.word	0x0800692c

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	@ 0x58
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2244      	movs	r2, #68	@ 0x44
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 fb58 	bl	8005d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	463b      	mov	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006fe:	f001 ff5d 	bl	80025bc <HAL_PWREx_ControlVoltageScaling>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000708:	f000 fa60 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000714:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	2310      	movs	r3, #16
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071e:	2302      	movs	r3, #2
 8000720:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000726:	230a      	movs	r3, #10
 8000728:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800072a:	2307      	movs	r3, #7
 800072c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	4618      	mov	r0, r3
 800073c:	f001 ff94 	bl	8002668 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000746:	f000 fa41 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	2104      	movs	r1, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fb5c 	bl	8002e20 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076e:	f000 fa2d 	bl	8000bcc <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3758      	adds	r7, #88	@ 0x58
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_I2C1_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <MX_I2C1_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_I2C1_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	@ (80007f8 <MX_I2C1_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000792:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_I2C1_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b6:	480e      	ldr	r0, [pc, #56]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007b8:	f001 fa6a 	bl	8001c90 <HAL_I2C_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c2:	f000 fa03 	bl	8000bcc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007ca:	f001 fe51 	bl	8002470 <HAL_I2CEx_ConfigAnalogFilter>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d4:	f000 f9fa 	bl	8000bcc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_I2C1_Init+0x74>)
 80007dc:	f001 fe93 	bl	8002506 <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 f9f1 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000084 	.word	0x20000084
 80007f4:	40005400 	.word	0x40005400
 80007f8:	10d19ce4 	.word	0x10d19ce4

080007fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08e      	sub	sp, #56	@ 0x38
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000802:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]
 800082a:	615a      	str	r2, [r3, #20]
 800082c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800082e:	4b2d      	ldr	r3, [pc, #180]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 8000830:	4a2d      	ldr	r2, [pc, #180]	@ (80008e8 <MX_TIM3_Init+0xec>)
 8000832:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000834:	4b2b      	ldr	r3, [pc, #172]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 8000836:	224f      	movs	r2, #79	@ 0x4f
 8000838:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083a:	4b2a      	ldr	r3, [pc, #168]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000840:	4b28      	ldr	r3, [pc, #160]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 8000842:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000846:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	4b25      	ldr	r3, [pc, #148]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000854:	4823      	ldr	r0, [pc, #140]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 8000856:	f003 f9c3 	bl	8003be0 <HAL_TIM_Base_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000860:	f000 f9b4 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800086a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086e:	4619      	mov	r1, r3
 8000870:	481c      	ldr	r0, [pc, #112]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 8000872:	f003 fc87 	bl	8004184 <HAL_TIM_ConfigClockSource>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800087c:	f000 f9a6 	bl	8000bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000880:	4818      	ldr	r0, [pc, #96]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 8000882:	f003 fa04 	bl	8003c8e <HAL_TIM_PWM_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800088c:	f000 f99e 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4811      	ldr	r0, [pc, #68]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 80008a0:	f004 f976 	bl	8004b90 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008aa:	f000 f98f 	bl	8000bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ae:	2360      	movs	r3, #96	@ 0x60
 80008b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	2204      	movs	r2, #4
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 80008c6:	f003 fb49 	bl	8003f5c <HAL_TIM_PWM_ConfigChannel>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80008d0:	f000 f97c 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <MX_TIM3_Init+0xe8>)
 80008d6:	f000 fc4b 	bl	8001170 <HAL_TIM_MspPostInit>

}
 80008da:	bf00      	nop
 80008dc:	3738      	adds	r7, #56	@ 0x38
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000d8 	.word	0x200000d8
 80008e8:	40000400 	.word	0x40000400

080008ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_TIM16_Init+0x44>)
 80008f2:	4a10      	ldr	r2, [pc, #64]	@ (8000934 <MX_TIM16_Init+0x48>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <MX_TIM16_Init+0x44>)
 80008f8:	224f      	movs	r2, #79	@ 0x4f
 80008fa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_TIM16_Init+0x44>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000902:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <MX_TIM16_Init+0x44>)
 8000904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000908:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_TIM16_Init+0x44>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000910:	4b07      	ldr	r3, [pc, #28]	@ (8000930 <MX_TIM16_Init+0x44>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_TIM16_Init+0x44>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_TIM16_Init+0x44>)
 800091e:	f003 f95f 	bl	8003be0 <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000928:	f000 f950 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000124 	.word	0x20000124
 8000934:	40014400 	.word	0x40014400

08000938 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_UART4_Init+0x58>)
 800093e:	4a15      	ldr	r2, [pc, #84]	@ (8000994 <MX_UART4_Init+0x5c>)
 8000940:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_UART4_Init+0x58>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_UART4_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_UART4_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_UART4_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_UART4_Init+0x58>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_UART4_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_UART4_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_UART4_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_UART4_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_UART4_Init+0x58>)
 800097c:	f004 f990 	bl	8004ca0 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 f921 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000170 	.word	0x20000170
 8000994:	40004c00 	.word	0x40004c00

08000998 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_UART5_Init+0x58>)
 800099e:	4a15      	ldr	r2, [pc, #84]	@ (80009f4 <MX_UART5_Init+0x5c>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_UART5_Init+0x58>)
 80009dc:	f004 f960 	bl	8004ca0 <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f8f1 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001f8 	.word	0x200001f8
 80009f4:	40005000 	.word	0x40005000

080009f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 80009fe:	4a15      	ldr	r2, [pc, #84]	@ (8000a54 <MX_USART3_UART_Init+0x5c>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a02:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_USART3_UART_Init+0x58>)
 8000a3c:	f004 f930 	bl	8004ca0 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a46:	f000 f8c1 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000280 	.word	0x20000280
 8000a54:	40004800 	.word	0x40004800

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b54      	ldr	r3, [pc, #336]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	4a53      	ldr	r2, [pc, #332]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7a:	4b51      	ldr	r3, [pc, #324]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	4b4e      	ldr	r3, [pc, #312]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	4a4d      	ldr	r2, [pc, #308]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a92:	4b4b      	ldr	r3, [pc, #300]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b48      	ldr	r3, [pc, #288]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	4a47      	ldr	r2, [pc, #284]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aaa:	4b45      	ldr	r3, [pc, #276]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	4b42      	ldr	r3, [pc, #264]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a41      	ldr	r2, [pc, #260]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc0 <MX_GPIO_Init+0x168>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f640 7182 	movw	r1, #3970	@ 0xf82
 8000ad4:	483b      	ldr	r0, [pc, #236]	@ (8000bc4 <MX_GPIO_Init+0x16c>)
 8000ad6:	f001 f8c3 	bl	8001c60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae4:	f001 f8bc 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000aee:	4836      	ldr	r0, [pc, #216]	@ (8000bc8 <MX_GPIO_Init+0x170>)
 8000af0:	f001 f8b6 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	482f      	ldr	r0, [pc, #188]	@ (8000bc4 <MX_GPIO_Init+0x16c>)
 8000b08:	f000 fee8 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC8 PC9
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000b0c:	f640 7382 	movw	r3, #3970	@ 0xf82
 8000b10:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4827      	ldr	r0, [pc, #156]	@ (8000bc4 <MX_GPIO_Init+0x16c>)
 8000b26:	f000 fed9 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 8000b2a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b46:	f000 fec9 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b60:	f000 febc 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4812      	ldr	r0, [pc, #72]	@ (8000bc8 <MX_GPIO_Init+0x170>)
 8000b7e:	f000 fead 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <MX_GPIO_Init+0x170>)
 8000b98:	f000 fea0 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb4:	f000 fe92 	bl	80018dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	@ 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000800 	.word	0x48000800
 8000bc8:	48000400 	.word	0x48000400

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <Error_Handler+0x8>

08000bd8 <setupMotor>:
#include <stdio.h>



void setupMotor(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    // Enable pin LOW (enable motor)
    HAL_GPIO_WritePin(ENABLE_PORT, ENABLE_PIN, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be2:	4806      	ldr	r0, [pc, #24]	@ (8000bfc <setupMotor+0x24>)
 8000be4:	f001 f83c 	bl	8001c60 <HAL_GPIO_WritePin>

    // Set default microstepping (16 microsteps: MS1=1, MS2=1)
    setMicrostepping(1, 1);
 8000be8:	2101      	movs	r1, #1
 8000bea:	2001      	movs	r0, #1
 8000bec:	f000 f808 	bl	8000c00 <setMicrostepping>

    // Enable stealth mode by default (SPREAD pin LOW)
    enableStealthMode();
 8000bf0:	f000 f832 	bl	8000c58 <enableStealthMode>

    // Setup lamp
    setupLamp();
 8000bf4:	f000 f890 	bl	8000d18 <setupLamp>


}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	48000800 	.word	0x48000800

08000c00 <setMicrostepping>:



void setMicrostepping(uint8_t ms1_state, uint8_t ms2_state)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	460a      	mov	r2, r1
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]
    // Set MS1 pin
    if (ms1_state) {
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <setMicrostepping+0x22>
        HAL_GPIO_WritePin(MS1_PORT, MS1_PIN, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <setMicrostepping+0x54>)
 8000c1c:	f001 f820 	bl	8001c60 <HAL_GPIO_WritePin>
 8000c20:	e004      	b.n	8000c2c <setMicrostepping+0x2c>
    } else {
        HAL_GPIO_WritePin(MS1_PORT, MS1_PIN, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2180      	movs	r1, #128	@ 0x80
 8000c26:	480b      	ldr	r0, [pc, #44]	@ (8000c54 <setMicrostepping+0x54>)
 8000c28:	f001 f81a 	bl	8001c60 <HAL_GPIO_WritePin>
    }

    // Set MS2 pin
    if (ms2_state) {
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d006      	beq.n	8000c40 <setMicrostepping+0x40>
        HAL_GPIO_WritePin(MS2_PORT, MS2_PIN, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c38:	4806      	ldr	r0, [pc, #24]	@ (8000c54 <setMicrostepping+0x54>)
 8000c3a:	f001 f811 	bl	8001c60 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(MS2_PORT, MS2_PIN, GPIO_PIN_RESET);
    }


}
 8000c3e:	e005      	b.n	8000c4c <setMicrostepping+0x4c>
        HAL_GPIO_WritePin(MS2_PORT, MS2_PIN, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <setMicrostepping+0x54>)
 8000c48:	f001 f80a 	bl	8001c60 <HAL_GPIO_WritePin>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	48000800 	.word	0x48000800

08000c58 <enableStealthMode>:

void enableStealthMode(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    // Set SPREAD pin LOW for StealthChop mode
    HAL_GPIO_WritePin(SPREAD_PORT, SPREAD_PIN, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c66:	f000 fffb 	bl	8001c60 <HAL_GPIO_WritePin>

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <rotateMotor>:



void rotateMotor(int steps, uint8_t clockwise)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
    // Set motor direction
    if(clockwise)
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <rotateMotor+0x20>
    {
        HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c88:	4815      	ldr	r0, [pc, #84]	@ (8000ce0 <rotateMotor+0x70>)
 8000c8a:	f000 ffe9 	bl	8001c60 <HAL_GPIO_WritePin>
 8000c8e:	e005      	b.n	8000c9c <rotateMotor+0x2c>
    }
    else
    {
        HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c96:	4812      	ldr	r0, [pc, #72]	@ (8000ce0 <rotateMotor+0x70>)
 8000c98:	f000 ffe2 	bl	8001c60 <HAL_GPIO_WritePin>
    }

    // Step the motor
    for(int i = 0; i < steps; i++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	e014      	b.n	8000ccc <rotateMotor+0x5c>
    {
        HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ca8:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <rotateMotor+0x70>)
 8000caa:	f000 ffd9 	bl	8001c60 <HAL_GPIO_WritePin>
        microsecond_delay(200);
 8000cae:	20c8      	movs	r0, #200	@ 0xc8
 8000cb0:	f000 f864 	bl	8000d7c <microsecond_delay>
        HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <rotateMotor+0x70>)
 8000cbc:	f000 ffd0 	bl	8001c60 <HAL_GPIO_WritePin>
        microsecond_delay(200);
 8000cc0:	20c8      	movs	r0, #200	@ 0xc8
 8000cc2:	f000 f85b 	bl	8000d7c <microsecond_delay>
    for(int i = 0; i < steps; i++)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbe6      	blt.n	8000ca2 <rotateMotor+0x32>
    }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	48000800 	.word	0x48000800

08000ce4 <homePosition>:

void homePosition(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
    GPIO_PinState caseState;

    do
    {
        rotateMotor(300, 1);
 8000cea:	2101      	movs	r1, #1
 8000cec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000cf0:	f7ff ffbe 	bl	8000c70 <rotateMotor>
        caseState = HAL_GPIO_ReadPin(CASE_PORT, CASE_PIN);
 8000cf4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf8:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <homePosition+0x30>)
 8000cfa:	f000 ff99 	bl	8001c30 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
    }
    while(caseState == GPIO_PIN_RESET); // Changed to RESET as proximity sensor is active HIGH
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f0      	beq.n	8000cea <homePosition+0x6>
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	48000400 	.word	0x48000400

08000d18 <setupLamp>:

void setupLamp(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    // Start PWM on TIM3 Channel 2 (PA7)
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <setupLamp+0x14>)
 8000d20:	f003 f816 	bl	8003d50 <HAL_TIM_PWM_Start>


    lampOff();
 8000d24:	f000 f823 	bl	8000d6e <lampOff>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200000d8 	.word	0x200000d8

08000d30 <setLampPWM>:

void setLampPWM(uint8_t duty_cycle)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
    // Calculate CCR value based on duty cycle (0-100%)
    // ARR = 1000, PSC = 79 ,pwm freq = 1KHZ
    uint32_t value = (duty_cycle * 1000) / 100;
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]

    // Set the PWM duty cycle
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, value);
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <setLampPWM+0x2c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	200000d8 	.word	0x200000d8

08000d60 <lampOn>:

void lampOn(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

    setLampPWM(100);
 8000d64:	2064      	movs	r0, #100	@ 0x64
 8000d66:	f7ff ffe3 	bl	8000d30 <setLampPWM>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <lampOff>:

void lampOff(void)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	af00      	add	r7, sp, #0

    setLampPWM(0);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff ffdc 	bl	8000d30 <setLampPWM>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <microsecond_delay>:
/*
 * Microsecond delay using timer
 * Make sure htim16 is properly configured with 1MHz clock
 */
void microsecond_delay(uint16_t microseconds)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim16, 0);  // set the counter value to 0
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <microsecond_delay+0x30>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim16) < microseconds);  // wait for the counter to reach the us input
 8000d8e:	bf00      	nop
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <microsecond_delay+0x30>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d3f9      	bcc.n	8000d90 <microsecond_delay+0x14>
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000124 	.word	0x20000124

08000db0 <enableBuffers>:
volatile uint16_t packetIndex = 0;



HAL_StatusTypeDef enableBuffers(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
    // Enable signal buffer
    HAL_GPIO_WritePin(SIG_BUF_EN_PORT, SIG_BUF_EN_PIN, GPIO_PIN_SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2110      	movs	r1, #16
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbc:	f000 ff50 	bl	8001c60 <HAL_GPIO_WritePin>

    // Enable I2C buffer
    HAL_GPIO_WritePin(I2C_BUF_EN_PORT, I2C_BUF_EN_PIN, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2140      	movs	r1, #64	@ 0x40
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc8:	f000 ff4a 	bl	8001c60 <HAL_GPIO_WritePin>

    // Small delay to allow buffers to stabilize
    HAL_Delay(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 fc7b 	bl	80016c8 <HAL_Delay>

    return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <checkEOS>:

HAL_StatusTypeDef checkEOS(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
    // Check End of Scan signal
    GPIO_PinState eosState = HAL_GPIO_ReadPin(EOS_PORT, EOS_PIN);
 8000dde:	2101      	movs	r1, #1
 8000de0:	4807      	ldr	r0, [pc, #28]	@ (8000e00 <checkEOS+0x28>)
 8000de2:	f000 ff25 	bl	8001c30 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
    return (eosState == GPIO_PIN_SET) ? HAL_OK : HAL_ERROR;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	bf14      	ite	ne
 8000df0:	2301      	movne	r3, #1
 8000df2:	2300      	moveq	r3, #0
 8000df4:	b2db      	uxtb	r3, r3
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	48000800 	.word	0x48000800

08000e04 <setupSensor>:



void setupSensor(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    // Enable buffers first
    enableBuffers();
 8000e08:	f7ff ffd2 	bl	8000db0 <enableBuffers>

    // ST pin as OUTPUT, initially HIGH
    HAL_GPIO_WritePin(ST_PORT, ST_PIN, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2102      	movs	r1, #2
 8000e10:	4809      	ldr	r0, [pc, #36]	@ (8000e38 <setupSensor+0x34>)
 8000e12:	f000 ff25 	bl	8001c60 <HAL_GPIO_WritePin>

    // CLK pin as OUTPUT, initially LOW
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e1c:	4807      	ldr	r0, [pc, #28]	@ (8000e3c <setupSensor+0x38>)
 8000e1e:	f000 ff1f 	bl	8001c60 <HAL_GPIO_WritePin>

    // Initialize data available flag
    dataAvailable = 0;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <setupSensor+0x3c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
    packetIndex = 0;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <setupSensor+0x40>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	801a      	strh	r2, [r3, #0]

    printf("Spectrum sensor initialized\r\n");
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <setupSensor+0x44>)
 8000e30:	f004 fed4 	bl	8005bdc <puts>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	48000800 	.word	0x48000800
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	2000050c 	.word	0x2000050c
 8000e44:	2000050e 	.word	0x2000050e
 8000e48:	08006940 	.word	0x08006940

08000e4c <readExternalADC>:

uint16_t readExternalADC(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af02      	add	r7, sp, #8
    uint8_t adcData[2] = {0};
 8000e52:	2300      	movs	r3, #0
 8000e54:	803b      	strh	r3, [r7, #0]
    uint16_t adcValue = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    // Read 2 bytes from ADC
    status = HAL_I2C_Master_Receive(&hi2c1, (ADC_I2C_ADDRESS << 1), adcData, 2, 100);
 8000e5a:	463a      	mov	r2, r7
 8000e5c:	2364      	movs	r3, #100	@ 0x64
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2302      	movs	r3, #2
 8000e62:	2190      	movs	r1, #144	@ 0x90
 8000e64:	480e      	ldr	r0, [pc, #56]	@ (8000ea0 <readExternalADC+0x54>)
 8000e66:	f000 ffaf 	bl	8001dc8 <HAL_I2C_Master_Receive>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	717b      	strb	r3, [r7, #5]

    if (status == HAL_OK)
 8000e6e:	797b      	ldrb	r3, [r7, #5]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d108      	bne.n	8000e86 <readExternalADC+0x3a>
    {
        // Combine bytes to form 16-bit value (MSB first)
        adcValue = (adcData[0] << 8) | adcData[1];
 8000e74:	783b      	ldrb	r3, [r7, #0]
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	787b      	ldrb	r3, [r7, #1]
 8000e7c:	b21b      	sxth	r3, r3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	80fb      	strh	r3, [r7, #6]
 8000e84:	e006      	b.n	8000e94 <readExternalADC+0x48>
    }
    else
    {
        printf("ADC Read Error: %d\r\n", status);
 8000e86:	797b      	ldrb	r3, [r7, #5]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	@ (8000ea4 <readExternalADC+0x58>)
 8000e8c:	f004 fe3e 	bl	8005b0c <iprintf>
        adcValue = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	80fb      	strh	r3, [r7, #6]
    }

    return adcValue;
 8000e94:	88fb      	ldrh	r3, [r7, #6]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000084 	.word	0x20000084
 8000ea4:	08006960 	.word	0x08006960

08000ea8 <acquireSpectra>:

void acquireSpectra(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
    // delayTime (dt) = 52microseconds, pixelread = 0
    uint32_t dt = 52;
 8000eae:	2334      	movs	r3, #52	@ 0x34
 8000eb0:	607b      	str	r3, [r7, #4]
    int pixelread = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]



    // Main acquisition loop - Discard first loop to avoid noisy acquisition, acquire from second loop
	for (int loop = 0; loop < 2; loop++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	e083      	b.n	8000fc4 <acquireSpectra+0x11c>
		// 3 clock cycles
		for (int clk = 0; clk < 3; clk++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	e007      	b.n	8000ed2 <acquireSpectra+0x2a>
			microsecond_delay(dt);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff58 	bl	8000d7c <microsecond_delay>
		for (int clk = 0; clk < 3; clk++) {
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	ddf4      	ble.n	8000ec2 <acquireSpectra+0x1a>
		}

		// CLK, LOW → dt
		HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ede:	4842      	ldr	r0, [pc, #264]	@ (8000fe8 <acquireSpectra+0x140>)
 8000ee0:	f000 febe 	bl	8001c60 <HAL_GPIO_WritePin>
		microsecond_delay(dt);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff47 	bl	8000d7c <microsecond_delay>

		// ST, LOW
		HAL_GPIO_WritePin(ST_PORT, ST_PIN, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	483e      	ldr	r0, [pc, #248]	@ (8000fec <acquireSpectra+0x144>)
 8000ef4:	f000 feb4 	bl	8001c60 <HAL_GPIO_WritePin>
		// 1 clock cycle
		microsecond_delay(dt);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff3d 	bl	8000d7c <microsecond_delay>

		// ST, HIGH
		HAL_GPIO_WritePin(ST_PORT, ST_PIN, GPIO_PIN_SET);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2102      	movs	r1, #2
 8000f06:	4839      	ldr	r0, [pc, #228]	@ (8000fec <acquireSpectra+0x144>)
 8000f08:	f000 feaa 	bl	8001c60 <HAL_GPIO_WritePin>
		// 1 clock cycle
		microsecond_delay(dt);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff33 	bl	8000d7c <microsecond_delay>

		// 1 clock cycle
		microsecond_delay(dt);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff2e 	bl	8000d7c <microsecond_delay>

		for (int channel = 0; channel < CHANNELS; channel++) {
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	e02f      	b.n	8000f86 <acquireSpectra+0xde>
			// CLK, HIGH
			HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f2c:	482e      	ldr	r0, [pc, #184]	@ (8000fe8 <acquireSpectra+0x140>)
 8000f2e:	f000 fe97 	bl	8001c60 <HAL_GPIO_WritePin>

			// Read Video, store pixel[Channel] (only in second loop to discard first loop)
			if (loop == 1) {
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10a      	bne.n	8000f4e <acquireSpectra+0xa6>
				spectra[channel] = readExternalADC();
 8000f38:	f7ff ff88 	bl	8000e4c <readExternalADC>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4a2b      	ldr	r2, [pc, #172]	@ (8000ff0 <acquireSpectra+0x148>)
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pixelread++;
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
			}

			// CLK, LOW → dt
			HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f54:	4824      	ldr	r0, [pc, #144]	@ (8000fe8 <acquireSpectra+0x140>)
 8000f56:	f000 fe83 	bl	8001c60 <HAL_GPIO_WritePin>
			microsecond_delay(dt);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff0c 	bl	8000d7c <microsecond_delay>

			// 2 clock cycles
			for (int clk = 0; clk < 2; clk++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e007      	b.n	8000f7a <acquireSpectra+0xd2>
				microsecond_delay(dt);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff04 	bl	8000d7c <microsecond_delay>
			for (int clk = 0; clk < 2; clk++) {
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	3301      	adds	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	ddf4      	ble.n	8000f6a <acquireSpectra+0xc2>
		for (int channel = 0; channel < CHANNELS; channel++) {
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	3301      	adds	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2bff      	cmp	r3, #255	@ 0xff
 8000f8a:	ddcc      	ble.n	8000f26 <acquireSpectra+0x7e>
			}
		}

		// 5 clock cycles between loops
		for (int clk = 0; clk < 5; clk++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	e007      	b.n	8000fa2 <acquireSpectra+0xfa>
			microsecond_delay(dt);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fef0 	bl	8000d7c <microsecond_delay>
		for (int clk = 0; clk < 5; clk++) {
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	ddf4      	ble.n	8000f92 <acquireSpectra+0xea>
		}

		// Check EOS signal after first loop
		if (loop == 0)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d107      	bne.n	8000fbe <acquireSpectra+0x116>
		{
			if (checkEOS() != HAL_OK)
 8000fae:	f7ff ff13 	bl	8000dd8 <checkEOS>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <acquireSpectra+0x116>
			{
				printf("Warning: EOS signal not detected\r\n");
 8000fb8:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <acquireSpectra+0x14c>)
 8000fba:	f004 fe0f 	bl	8005bdc <puts>
	for (int loop = 0; loop < 2; loop++) {
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	f77f af78 	ble.w	8000ebc <acquireSpectra+0x14>
			}
		}
	}

    // Set data available flag
    dataAvailable = 1;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <acquireSpectra+0x150>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
    packetIndex = 0;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <acquireSpectra+0x154>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	801a      	strh	r2, [r3, #0]

    printf("Spectra acquisition complete - %d pixels read\r\n", pixelread);
 8000fd8:	69f9      	ldr	r1, [r7, #28]
 8000fda:	4809      	ldr	r0, [pc, #36]	@ (8001000 <acquireSpectra+0x158>)
 8000fdc:	f004 fd96 	bl	8005b0c <iprintf>
}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	48000800 	.word	0x48000800
 8000ff0:	2000030c 	.word	0x2000030c
 8000ff4:	08006978 	.word	0x08006978
 8000ff8:	2000050c 	.word	0x2000050c
 8000ffc:	2000050e 	.word	0x2000050e
 8001000:	0800699c 	.word	0x0800699c

08001004 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <HAL_MspInit+0x44>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	4a0e      	ldr	r2, [pc, #56]	@ (8001048 <HAL_MspInit+0x44>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6613      	str	r3, [r2, #96]	@ 0x60
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_MspInit+0x44>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	4a08      	ldr	r2, [pc, #32]	@ (8001048 <HAL_MspInit+0x44>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	6593      	str	r3, [r2, #88]	@ 0x58
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b0ac      	sub	sp, #176	@ 0xb0
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2288      	movs	r2, #136	@ 0x88
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f004 fe95 	bl	8005d9c <memset>
  if(hi2c->Instance==I2C1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a21      	ldr	r2, [pc, #132]	@ (80010fc <HAL_I2C_MspInit+0xb0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d13a      	bne.n	80010f2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800107c:	2340      	movs	r3, #64	@ 0x40
 800107e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001080:	2300      	movs	r3, #0
 8001082:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f8ed 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001094:	f7ff fd9a 	bl	8000bcc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <HAL_I2C_MspInit+0xb4>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109c:	4a18      	ldr	r2, [pc, #96]	@ (8001100 <HAL_I2C_MspInit+0xb4>)
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <HAL_I2C_MspInit+0xb4>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b0:	23c0      	movs	r3, #192	@ 0xc0
 80010b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b6:	2312      	movs	r3, #18
 80010b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010d2:	4619      	mov	r1, r3
 80010d4:	480b      	ldr	r0, [pc, #44]	@ (8001104 <HAL_I2C_MspInit+0xb8>)
 80010d6:	f000 fc01 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <HAL_I2C_MspInit+0xb4>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010de:	4a08      	ldr	r2, [pc, #32]	@ (8001100 <HAL_I2C_MspInit+0xb4>)
 80010e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_I2C_MspInit+0xb4>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010f2:	bf00      	nop
 80010f4:	37b0      	adds	r7, #176	@ 0xb0
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40005400 	.word	0x40005400
 8001100:	40021000 	.word	0x40021000
 8001104:	48000400 	.word	0x48000400

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a13      	ldr	r2, [pc, #76]	@ (8001164 <HAL_TIM_Base_MspInit+0x5c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10c      	bne.n	8001134 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <HAL_TIM_Base_MspInit+0x60>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111e:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <HAL_TIM_Base_MspInit+0x60>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6593      	str	r3, [r2, #88]	@ 0x58
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_TIM_Base_MspInit+0x60>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001132:	e010      	b.n	8001156 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0c      	ldr	r2, [pc, #48]	@ (800116c <HAL_TIM_Base_MspInit+0x64>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d10b      	bne.n	8001156 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_TIM_Base_MspInit+0x60>)
 8001140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001142:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <HAL_TIM_Base_MspInit+0x60>)
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	6613      	str	r3, [r2, #96]	@ 0x60
 800114a:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <HAL_TIM_Base_MspInit+0x60>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40000400 	.word	0x40000400
 8001168:	40021000 	.word	0x40021000
 800116c:	40014400 	.word	0x40014400

08001170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a11      	ldr	r2, [pc, #68]	@ (80011d4 <HAL_TIM_MspPostInit+0x64>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d11c      	bne.n	80011cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_TIM_MspPostInit+0x68>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_TIM_MspPostInit+0x68>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_TIM_MspPostInit+0x68>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c8:	f000 fb88 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3720      	adds	r7, #32
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40000400 	.word	0x40000400
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0b0      	sub	sp, #192	@ 0xc0
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f8:	2288      	movs	r2, #136	@ 0x88
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 fdcd 	bl	8005d9c <memset>
  if(huart->Instance==UART4)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a73      	ldr	r2, [pc, #460]	@ (80013d4 <HAL_UART_MspInit+0x1f8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d13c      	bne.n	8001286 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800120c:	2308      	movs	r3, #8
 800120e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001210:	2300      	movs	r3, #0
 8001212:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001218:	4618      	mov	r0, r3
 800121a:	f002 f825 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001224:	f7ff fcd2 	bl	8000bcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001228:	4b6b      	ldr	r3, [pc, #428]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 800122a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800122c:	4a6a      	ldr	r2, [pc, #424]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 800122e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001232:	6593      	str	r3, [r2, #88]	@ 0x58
 8001234:	4b68      	ldr	r3, [pc, #416]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 8001236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800123c:	623b      	str	r3, [r7, #32]
 800123e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b65      	ldr	r3, [pc, #404]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001244:	4a64      	ldr	r2, [pc, #400]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124c:	4b62      	ldr	r3, [pc, #392]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 800124e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001258:	2303      	movs	r3, #3
 800125a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001270:	2308      	movs	r3, #8
 8001272:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800127a:	4619      	mov	r1, r3
 800127c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001280:	f000 fb2c 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001284:	e0a2      	b.n	80013cc <HAL_UART_MspInit+0x1f0>
  else if(huart->Instance==UART5)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a54      	ldr	r2, [pc, #336]	@ (80013dc <HAL_UART_MspInit+0x200>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d15d      	bne.n	800134c <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001290:	2310      	movs	r3, #16
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001294:	2300      	movs	r3, #0
 8001296:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129c:	4618      	mov	r0, r3
 800129e:	f001 ffe3 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80012a8:	f7ff fc90 	bl	8000bcc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80012ac:	4b4a      	ldr	r3, [pc, #296]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b0:	4a49      	ldr	r2, [pc, #292]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 80012b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b8:	4b47      	ldr	r3, [pc, #284]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 80012ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	4b44      	ldr	r3, [pc, #272]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	4a43      	ldr	r2, [pc, #268]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d0:	4b41      	ldr	r3, [pc, #260]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	4b3e      	ldr	r3, [pc, #248]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e0:	4a3d      	ldr	r2, [pc, #244]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e8:	4b3b      	ldr	r3, [pc, #236]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800130e:	2308      	movs	r3, #8
 8001310:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001314:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001318:	4619      	mov	r1, r3
 800131a:	4831      	ldr	r0, [pc, #196]	@ (80013e0 <HAL_UART_MspInit+0x204>)
 800131c:	f000 fade 	bl	80018dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001320:	2304      	movs	r3, #4
 8001322:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001338:	2308      	movs	r3, #8
 800133a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001342:	4619      	mov	r1, r3
 8001344:	4827      	ldr	r0, [pc, #156]	@ (80013e4 <HAL_UART_MspInit+0x208>)
 8001346:	f000 fac9 	bl	80018dc <HAL_GPIO_Init>
}
 800134a:	e03f      	b.n	80013cc <HAL_UART_MspInit+0x1f0>
  else if(huart->Instance==USART3)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a25      	ldr	r2, [pc, #148]	@ (80013e8 <HAL_UART_MspInit+0x20c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d13a      	bne.n	80013cc <HAL_UART_MspInit+0x1f0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001356:	2304      	movs	r3, #4
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800135a:	2300      	movs	r3, #0
 800135c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001362:	4618      	mov	r0, r3
 8001364:	f001 ff80 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_UART_MspInit+0x196>
      Error_Handler();
 800136e:	f7ff fc2d 	bl	8000bcc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137c:	6593      	str	r3, [r2, #88]	@ 0x58
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 8001380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_UART_MspInit+0x1fc>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013a2:	2330      	movs	r3, #48	@ 0x30
 80013a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ba:	2307      	movs	r3, #7
 80013bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <HAL_UART_MspInit+0x204>)
 80013c8:	f000 fa88 	bl	80018dc <HAL_GPIO_Init>
}
 80013cc:	bf00      	nop
 80013ce:	37c0      	adds	r7, #192	@ 0xc0
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40004c00 	.word	0x40004c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40005000 	.word	0x40005000
 80013e0:	48000800 	.word	0x48000800
 80013e4:	48000c00 	.word	0x48000c00
 80013e8:	40004800 	.word	0x40004800

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <NMI_Handler+0x4>

080013f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <MemManage_Handler+0x4>

08001404 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <UsageFault_Handler+0x4>

08001414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001442:	f000 f921 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}

0800144a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e00a      	b.n	8001472 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800145c:	f3af 8000 	nop.w
 8001460:	4601      	mov	r1, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1c5a      	adds	r2, r3, #1
 8001466:	60ba      	str	r2, [r7, #8]
 8001468:	b2ca      	uxtb	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	dbf0      	blt.n	800145c <_read+0x12>
  }

  return len;
 800147a:	687b      	ldr	r3, [r7, #4]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ac:	605a      	str	r2, [r3, #4]
  return 0;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_isatty>:

int _isatty(int file)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	@ (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	@ (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f004 fc8c 	bl	8005e38 <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	@ (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20018000 	.word	0x20018000
 800154c:	00000400 	.word	0x00000400
 8001550:	20000510 	.word	0x20000510
 8001554:	20000668 	.word	0x20000668

08001558 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001580:	f7ff ffea 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001584:	480c      	ldr	r0, [pc, #48]	@ (80015b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001586:	490d      	ldr	r1, [pc, #52]	@ (80015bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001588:	4a0d      	ldr	r2, [pc, #52]	@ (80015c0 <LoopForever+0xe>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800158c:	e002      	b.n	8001594 <LoopCopyDataInit>

0800158e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001592:	3304      	adds	r3, #4

08001594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001598:	d3f9      	bcc.n	800158e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159a:	4a0a      	ldr	r2, [pc, #40]	@ (80015c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800159c:	4c0a      	ldr	r4, [pc, #40]	@ (80015c8 <LoopForever+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a0:	e001      	b.n	80015a6 <LoopFillZerobss>

080015a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a4:	3204      	adds	r2, #4

080015a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a8:	d3fb      	bcc.n	80015a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015aa:	f004 fc4b 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ae:	f7fe ffed 	bl	800058c <main>

080015b2 <LoopForever>:

LoopForever:
    b LoopForever
 80015b2:	e7fe      	b.n	80015b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015c0:	08006a58 	.word	0x08006a58
  ldr r2, =_sbss
 80015c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015c8:	20000664 	.word	0x20000664

080015cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC1_2_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <HAL_Init+0x3c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0b      	ldr	r2, [pc, #44]	@ (800160c <HAL_Init+0x3c>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e6:	2003      	movs	r0, #3
 80015e8:	f000 f944 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f80f 	bl	8001610 <HAL_InitTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	e001      	b.n	8001602 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015fe:	f7ff fd01 	bl	8001004 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001602:	79fb      	ldrb	r3, [r7, #7]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40022000 	.word	0x40022000

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <HAL_InitTick+0x6c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d023      	beq.n	800166c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <HAL_InitTick+0x70>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <HAL_InitTick+0x6c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f941 	bl	80018c2 <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10f      	bne.n	8001666 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d809      	bhi.n	8001660 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f000 f919 	bl	800188a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001658:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <HAL_InitTick+0x74>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e007      	b.n	8001670 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e004      	b.n	8001670 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
 800166a:	e001      	b.n	8001670 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000514 	.word	0x20000514

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000514 	.word	0x20000514

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_Delay+0x44>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ee:	bf00      	nop
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	@ (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	@ (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	@ 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f7ff ff8e 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	@ (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff47 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff5c 	bl	8001758 <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff8e 	bl	80017c8 <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffb0 	bl	8001830 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ea:	e17f      	b.n	8001bec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 8171 	beq.w	8001be6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d005      	beq.n	800191c <HAL_GPIO_Init+0x40>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d130      	bne.n	800197e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001952:	2201      	movs	r2, #1
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	091b      	lsrs	r3, r3, #4
 8001968:	f003 0201 	and.w	r2, r3, #1
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b03      	cmp	r3, #3
 8001988:	d118      	bne.n	80019bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001990:	2201      	movs	r2, #1
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f003 0201 	and.w	r2, r3, #1
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d017      	beq.n	80019f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d123      	bne.n	8001a4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	08da      	lsrs	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3208      	adds	r2, #8
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	08da      	lsrs	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3208      	adds	r2, #8
 8001a46:	6939      	ldr	r1, [r7, #16]
 8001a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	2203      	movs	r2, #3
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80ac 	beq.w	8001be6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c0c <HAL_GPIO_Init+0x330>)
 8001a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a92:	4a5e      	ldr	r2, [pc, #376]	@ (8001c0c <HAL_GPIO_Init+0x330>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c0c <HAL_GPIO_Init+0x330>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa6:	4a5a      	ldr	r2, [pc, #360]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ad0:	d025      	beq.n	8001b1e <HAL_GPIO_Init+0x242>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8001c14 <HAL_GPIO_Init+0x338>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <HAL_GPIO_Init+0x23e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4e      	ldr	r2, [pc, #312]	@ (8001c18 <HAL_GPIO_Init+0x33c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x23a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c1c <HAL_GPIO_Init+0x340>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x236>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4c      	ldr	r2, [pc, #304]	@ (8001c20 <HAL_GPIO_Init+0x344>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x232>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4b      	ldr	r2, [pc, #300]	@ (8001c24 <HAL_GPIO_Init+0x348>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x22e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4a      	ldr	r2, [pc, #296]	@ (8001c28 <HAL_GPIO_Init+0x34c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x22a>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00c      	b.n	8001b20 <HAL_GPIO_Init+0x244>
 8001b06:	2307      	movs	r3, #7
 8001b08:	e00a      	b.n	8001b20 <HAL_GPIO_Init+0x244>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e008      	b.n	8001b20 <HAL_GPIO_Init+0x244>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x244>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x244>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x244>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x244>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	f002 0203 	and.w	r2, r2, #3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b30:	4937      	ldr	r1, [pc, #220]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c2c <HAL_GPIO_Init+0x350>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b62:	4a32      	ldr	r2, [pc, #200]	@ (8001c2c <HAL_GPIO_Init+0x350>)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b68:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <HAL_GPIO_Init+0x350>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b8c:	4a27      	ldr	r2, [pc, #156]	@ (8001c2c <HAL_GPIO_Init+0x350>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b92:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <HAL_GPIO_Init+0x350>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c2c <HAL_GPIO_Init+0x350>)
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <HAL_GPIO_Init+0x350>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be0:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HAL_GPIO_Init+0x350>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f47f ae78 	bne.w	80018ec <HAL_GPIO_Init+0x10>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000
 8001c14:	48000400 	.word	0x48000400
 8001c18:	48000800 	.word	0x48000800
 8001c1c:	48000c00 	.word	0x48000c00
 8001c20:	48001000 	.word	0x48001000
 8001c24:	48001400 	.word	0x48001400
 8001c28:	48001800 	.word	0x48001800
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	887b      	ldrh	r3, [r7, #2]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e001      	b.n	8001c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c70:	787b      	ldrb	r3, [r7, #1]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e08d      	b.n	8001dbe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff f9c8 	bl	800104c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2224      	movs	r2, #36	@ 0x24
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ce0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d107      	bne.n	8001d0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	e006      	b.n	8001d18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d108      	bne.n	8001d32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	e007      	b.n	8001d42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69d9      	ldr	r1, [r3, #28]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	817b      	strh	r3, [r7, #10]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	f040 80db 	bne.w	8001fa0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_I2C_Master_Receive+0x30>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e0d4      	b.n	8001fa2 <HAL_I2C_Master_Receive+0x1da>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e00:	f7ff fc56 	bl	80016b0 <HAL_GetTick>
 8001e04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2319      	movs	r3, #25
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f8f2 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0bf      	b.n	8001fa2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2222      	movs	r2, #34	@ 0x22
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	893a      	ldrh	r2, [r7, #8]
 8001e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2200      	movs	r2, #0
 8001e48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2bff      	cmp	r3, #255	@ 0xff
 8001e52:	d90e      	bls.n	8001e72 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	4b52      	ldr	r3, [pc, #328]	@ (8001fac <HAL_I2C_Master_Receive+0x1e4>)
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 face 	bl	800240c <I2C_TransferConfig>
 8001e70:	e06d      	b.n	8001f4e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	8979      	ldrh	r1, [r7, #10]
 8001e84:	4b49      	ldr	r3, [pc, #292]	@ (8001fac <HAL_I2C_Master_Receive+0x1e4>)
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fabd 	bl	800240c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e92:	e05c      	b.n	8001f4e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	6a39      	ldr	r1, [r7, #32]
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 f94b 	bl	8002134 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e07c      	b.n	8001fa2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d034      	beq.n	8001f4e <HAL_I2C_Master_Receive+0x186>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d130      	bne.n	8001f4e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2180      	movs	r1, #128	@ 0x80
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f880 	bl	8001ffc <I2C_WaitOnFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e04d      	b.n	8001fa2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2bff      	cmp	r3, #255	@ 0xff
 8001f0e:	d90e      	bls.n	8001f2e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	22ff      	movs	r2, #255	@ 0xff
 8001f14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 fa70 	bl	800240c <I2C_TransferConfig>
 8001f2c:	e00f      	b.n	8001f4e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	8979      	ldrh	r1, [r7, #10]
 8001f40:	2300      	movs	r3, #0
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fa5f 	bl	800240c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d19d      	bne.n	8001e94 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	6a39      	ldr	r1, [r7, #32]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 f8a6 	bl	80020ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e01a      	b.n	8001fa2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2220      	movs	r2, #32
 8001f72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6859      	ldr	r1, [r3, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <HAL_I2C_Master_Receive+0x1e8>)
 8001f80:	400b      	ands	r3, r1
 8001f82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	80002400 	.word	0x80002400
 8001fb0:	fe00e800 	.word	0xfe00e800

08001fb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d103      	bne.n	8001fd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d007      	beq.n	8001ff0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	619a      	str	r2, [r3, #24]
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800200c:	e03b      	b.n	8002086 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 f91a 	bl	800224c <I2C_IsErrorOccurred>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e041      	b.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d02d      	beq.n	8002086 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7ff fb41 	bl	80016b0 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d302      	bcc.n	8002040 <I2C_WaitOnFlagUntilTimeout+0x44>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d122      	bne.n	8002086 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4013      	ands	r3, r2
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	429a      	cmp	r2, r3
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	429a      	cmp	r2, r3
 800205c:	d113      	bne.n	8002086 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002062:	f043 0220 	orr.w	r2, r3, #32
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4013      	ands	r3, r2
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	429a      	cmp	r2, r3
 8002094:	bf0c      	ite	eq
 8002096:	2301      	moveq	r3, #1
 8002098:	2300      	movne	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d0b4      	beq.n	800200e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ba:	e02f      	b.n	800211c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f8c3 	bl	800224c <I2C_IsErrorOccurred>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e02d      	b.n	800212c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d0:	f7ff faee 	bl	80016b0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d302      	bcc.n	80020e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d11a      	bne.n	800211c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	d013      	beq.n	800211c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e007      	b.n	800212c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b20      	cmp	r3, #32
 8002128:	d1c8      	bne.n	80020bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002144:	e071      	b.n	800222a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f87e 	bl	800224c <I2C_IsErrorOccurred>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b20      	cmp	r3, #32
 8002166:	d13b      	bne.n	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d138      	bne.n	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d105      	bne.n	8002188 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b10      	cmp	r3, #16
 8002194:	d121      	bne.n	80021da <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2210      	movs	r2, #16
 800219c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2204      	movs	r2, #4
 80021a2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2220      	movs	r2, #32
 80021aa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6859      	ldr	r1, [r3, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b24      	ldr	r3, [pc, #144]	@ (8002248 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80021b8:	400b      	ands	r3, r1
 80021ba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	75fb      	strb	r3, [r7, #23]
 80021d8:	e002      	b.n	80021e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80021e0:	f7ff fa66 	bl	80016b0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d302      	bcc.n	80021f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d119      	bne.n	800222a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b04      	cmp	r3, #4
 8002208:	d00f      	beq.n	800222a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f043 0220 	orr.w	r2, r3, #32
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d002      	beq.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d083      	beq.n	8002146 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800223e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	fe00e800 	.word	0xfe00e800

0800224c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d068      	beq.n	800234a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2210      	movs	r2, #16
 800227e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002280:	e049      	b.n	8002316 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d045      	beq.n	8002316 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800228a:	f7ff fa11 	bl	80016b0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	429a      	cmp	r2, r3
 8002298:	d302      	bcc.n	80022a0 <I2C_IsErrorOccurred+0x54>
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d13a      	bne.n	8002316 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022c2:	d121      	bne.n	8002308 <I2C_IsErrorOccurred+0xbc>
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022ca:	d01d      	beq.n	8002308 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d01a      	beq.n	8002308 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022e2:	f7ff f9e5 	bl	80016b0 <HAL_GetTick>
 80022e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e8:	e00e      	b.n	8002308 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022ea:	f7ff f9e1 	bl	80016b0 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b19      	cmp	r3, #25
 80022f6:	d907      	bls.n	8002308 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	f043 0320 	orr.w	r3, r3, #32
 80022fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002306:	e006      	b.n	8002316 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f003 0320 	and.w	r3, r3, #32
 8002312:	2b20      	cmp	r3, #32
 8002314:	d1e9      	bne.n	80022ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b20      	cmp	r3, #32
 8002322:	d003      	beq.n	800232c <I2C_IsErrorOccurred+0xe0>
 8002324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0aa      	beq.n	8002282 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800232c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002330:	2b00      	cmp	r3, #0
 8002332:	d103      	bne.n	800233c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2220      	movs	r2, #32
 800233a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00b      	beq.n	8002374 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800236c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f043 0308 	orr.w	r3, r3, #8
 8002384:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800238e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00b      	beq.n	80023b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	f043 0302 	orr.w	r3, r3, #2
 80023a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80023b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01c      	beq.n	80023fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f7ff fdf7 	bl	8001fb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <I2C_IsErrorOccurred+0x1bc>)
 80023d2:	400b      	ands	r3, r1
 80023d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80023fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3728      	adds	r7, #40	@ 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	fe00e800 	.word	0xfe00e800

0800240c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	817b      	strh	r3, [r7, #10]
 800241a:	4613      	mov	r3, r2
 800241c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800241e:	897b      	ldrh	r3, [r7, #10]
 8002420:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002424:	7a7b      	ldrb	r3, [r7, #9]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800242c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	4313      	orrs	r3, r2
 8002436:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800243a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	0d5b      	lsrs	r3, r3, #21
 8002446:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800244a:	4b08      	ldr	r3, [pc, #32]	@ (800246c <I2C_TransferConfig+0x60>)
 800244c:	430b      	orrs	r3, r1
 800244e:	43db      	mvns	r3, r3
 8002450:	ea02 0103 	and.w	r1, r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800245e:	bf00      	nop
 8002460:	371c      	adds	r7, #28
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	03ff63ff 	.word	0x03ff63ff

08002470 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b20      	cmp	r3, #32
 8002484:	d138      	bne.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002490:	2302      	movs	r3, #2
 8002492:	e032      	b.n	80024fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2224      	movs	r2, #36	@ 0x24
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b20      	cmp	r3, #32
 800251a:	d139      	bne.n	8002590 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002526:	2302      	movs	r3, #2
 8002528:	e033      	b.n	8002592 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2224      	movs	r2, #36	@ 0x24
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0201 	bic.w	r2, r2, #1
 8002548:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002558:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025a4:	4b04      	ldr	r3, [pc, #16]	@ (80025b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40007000 	.word	0x40007000

080025bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025ca:	d130      	bne.n	800262e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025cc:	4b23      	ldr	r3, [pc, #140]	@ (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025d8:	d038      	beq.n	800264c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025da:	4b20      	ldr	r3, [pc, #128]	@ (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025e2:	4a1e      	ldr	r2, [pc, #120]	@ (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2232      	movs	r2, #50	@ 0x32
 80025f0:	fb02 f303 	mul.w	r3, r2, r3
 80025f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002664 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0c9b      	lsrs	r3, r3, #18
 80025fc:	3301      	adds	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002600:	e002      	b.n	8002608 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3b01      	subs	r3, #1
 8002606:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002614:	d102      	bne.n	800261c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f2      	bne.n	8002602 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800261c:	4b0f      	ldr	r3, [pc, #60]	@ (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002628:	d110      	bne.n	800264c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e00f      	b.n	800264e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800262e:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800263a:	d007      	beq.n	800264c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800263c:	4b07      	ldr	r3, [pc, #28]	@ (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002644:	4a05      	ldr	r2, [pc, #20]	@ (800265c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800264a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40007000 	.word	0x40007000
 8002660:	20000000 	.word	0x20000000
 8002664:	431bde83 	.word	0x431bde83

08002668 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e3ca      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267a:	4b97      	ldr	r3, [pc, #604]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002684:	4b94      	ldr	r3, [pc, #592]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0310 	and.w	r3, r3, #16
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80e4 	beq.w	8002864 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4a>
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	f040 808b 	bne.w	80027c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f040 8087 	bne.w	80027c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026b2:	4b89      	ldr	r3, [pc, #548]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x62>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e3a2      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1a      	ldr	r2, [r3, #32]
 80026ce:	4b82      	ldr	r3, [pc, #520]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <HAL_RCC_OscConfig+0x7c>
 80026da:	4b7f      	ldr	r3, [pc, #508]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026e2:	e005      	b.n	80026f0 <HAL_RCC_OscConfig+0x88>
 80026e4:	4b7c      	ldr	r3, [pc, #496]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80026e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d223      	bcs.n	800273c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fd55 	bl	80031a8 <RCC_SetFlashLatencyFromMSIRange>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e383      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002708:	4b73      	ldr	r3, [pc, #460]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a72      	ldr	r2, [pc, #456]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 800270e:	f043 0308 	orr.w	r3, r3, #8
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b70      	ldr	r3, [pc, #448]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	496d      	ldr	r1, [pc, #436]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002726:	4b6c      	ldr	r3, [pc, #432]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	4968      	ldr	r1, [pc, #416]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
 800273a:	e025      	b.n	8002788 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800273c:	4b66      	ldr	r3, [pc, #408]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a65      	ldr	r2, [pc, #404]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002742:	f043 0308 	orr.w	r3, r3, #8
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b63      	ldr	r3, [pc, #396]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4960      	ldr	r1, [pc, #384]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800275a:	4b5f      	ldr	r3, [pc, #380]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	495b      	ldr	r1, [pc, #364]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fd15 	bl	80031a8 <RCC_SetFlashLatencyFromMSIRange>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e343      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002788:	f000 fc4a 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b52      	ldr	r3, [pc, #328]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	4950      	ldr	r1, [pc, #320]	@ (80028dc <HAL_RCC_OscConfig+0x274>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
 80027a4:	4a4e      	ldr	r2, [pc, #312]	@ (80028e0 <HAL_RCC_OscConfig+0x278>)
 80027a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027a8:	4b4e      	ldr	r3, [pc, #312]	@ (80028e4 <HAL_RCC_OscConfig+0x27c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe ff2f 	bl	8001610 <HAL_InitTick>
 80027b2:	4603      	mov	r3, r0
 80027b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d052      	beq.n	8002862 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	e327      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d032      	beq.n	800282e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027c8:	4b43      	ldr	r3, [pc, #268]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a42      	ldr	r2, [pc, #264]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d4:	f7fe ff6c 	bl	80016b0 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027dc:	f7fe ff68 	bl	80016b0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e310      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ee:	4b3a      	ldr	r3, [pc, #232]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027fa:	4b37      	ldr	r3, [pc, #220]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a36      	ldr	r2, [pc, #216]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4931      	ldr	r1, [pc, #196]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002818:	4b2f      	ldr	r3, [pc, #188]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	492c      	ldr	r1, [pc, #176]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	e01a      	b.n	8002864 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800282e:	4b2a      	ldr	r3, [pc, #168]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a29      	ldr	r2, [pc, #164]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800283a:	f7fe ff39 	bl	80016b0 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002842:	f7fe ff35 	bl	80016b0 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e2dd      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002854:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x1da>
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002862:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d074      	beq.n	800295a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x21a>
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b0c      	cmp	r3, #12
 800287a:	d10e      	bne.n	800289a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d10b      	bne.n	800289a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002882:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d064      	beq.n	8002958 <HAL_RCC_OscConfig+0x2f0>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d160      	bne.n	8002958 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e2ba      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x24a>
 80028a4:	4b0c      	ldr	r3, [pc, #48]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0b      	ldr	r2, [pc, #44]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e026      	b.n	8002900 <HAL_RCC_OscConfig+0x298>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028ba:	d115      	bne.n	80028e8 <HAL_RCC_OscConfig+0x280>
 80028bc:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a05      	ldr	r2, [pc, #20]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b03      	ldr	r3, [pc, #12]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a02      	ldr	r2, [pc, #8]	@ (80028d8 <HAL_RCC_OscConfig+0x270>)
 80028ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	e014      	b.n	8002900 <HAL_RCC_OscConfig+0x298>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	080069cc 	.word	0x080069cc
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000004 	.word	0x20000004
 80028e8:	4ba0      	ldr	r3, [pc, #640]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a9f      	ldr	r2, [pc, #636]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b9d      	ldr	r3, [pc, #628]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a9c      	ldr	r2, [pc, #624]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d013      	beq.n	8002930 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fed2 	bl	80016b0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe fece 	bl	80016b0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e276      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002922:	4b92      	ldr	r3, [pc, #584]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x2a8>
 800292e:	e014      	b.n	800295a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe febe 	bl	80016b0 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002938:	f7fe feba 	bl	80016b0 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	@ 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e262      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800294a:	4b88      	ldr	r3, [pc, #544]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x2d0>
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d060      	beq.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b04      	cmp	r3, #4
 800296a:	d005      	beq.n	8002978 <HAL_RCC_OscConfig+0x310>
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d119      	bne.n	80029a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d116      	bne.n	80029a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002978:	4b7c      	ldr	r3, [pc, #496]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_OscConfig+0x328>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e23f      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b76      	ldr	r3, [pc, #472]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	4973      	ldr	r1, [pc, #460]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a4:	e040      	b.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d023      	beq.n	80029f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ae:	4b6f      	ldr	r3, [pc, #444]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6e      	ldr	r2, [pc, #440]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ba:	f7fe fe79 	bl	80016b0 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c2:	f7fe fe75 	bl	80016b0 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e21d      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d4:	4b65      	ldr	r3, [pc, #404]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b62      	ldr	r3, [pc, #392]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	495f      	ldr	r1, [pc, #380]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
 80029f4:	e018      	b.n	8002a28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a5c      	ldr	r2, [pc, #368]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 80029fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fe fe55 	bl	80016b0 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7fe fe51 	bl	80016b0 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1f9      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a1c:	4b53      	ldr	r3, [pc, #332]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d03c      	beq.n	8002aae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a42:	4a4a      	ldr	r2, [pc, #296]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fe30 	bl	80016b0 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a54:	f7fe fe2c 	bl	80016b0 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1d4      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a66:	4b41      	ldr	r3, [pc, #260]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ef      	beq.n	8002a54 <HAL_RCC_OscConfig+0x3ec>
 8002a74:	e01b      	b.n	8002aae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a76:	4b3d      	ldr	r3, [pc, #244]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fe fe13 	bl	80016b0 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7fe fe0f 	bl	80016b0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e1b7      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa0:	4b32      	ldr	r3, [pc, #200]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ef      	bne.n	8002a8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80a6 	beq.w	8002c08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002abc:	2300      	movs	r3, #0
 8002abe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10d      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002acc:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad0:	4a26      	ldr	r2, [pc, #152]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ad8:	4b24      	ldr	r3, [pc, #144]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae8:	4b21      	ldr	r3, [pc, #132]	@ (8002b70 <HAL_RCC_OscConfig+0x508>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d118      	bne.n	8002b26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b70 <HAL_RCC_OscConfig+0x508>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <HAL_RCC_OscConfig+0x508>)
 8002afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b00:	f7fe fdd6 	bl	80016b0 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b08:	f7fe fdd2 	bl	80016b0 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e17a      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <HAL_RCC_OscConfig+0x508>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d108      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4d8>
 8002b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b34:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b3e:	e029      	b.n	8002b94 <HAL_RCC_OscConfig+0x52c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d115      	bne.n	8002b74 <HAL_RCC_OscConfig+0x50c>
 8002b48:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	4a07      	ldr	r2, [pc, #28]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b58:	4b04      	ldr	r3, [pc, #16]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5e:	4a03      	ldr	r2, [pc, #12]	@ (8002b6c <HAL_RCC_OscConfig+0x504>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b68:	e014      	b.n	8002b94 <HAL_RCC_OscConfig+0x52c>
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40007000 	.word	0x40007000
 8002b74:	4b9c      	ldr	r3, [pc, #624]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	4a9b      	ldr	r2, [pc, #620]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b84:	4b98      	ldr	r3, [pc, #608]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8a:	4a97      	ldr	r2, [pc, #604]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d016      	beq.n	8002bca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9c:	f7fe fd88 	bl	80016b0 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba2:	e00a      	b.n	8002bba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fd84 	bl	80016b0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e12a      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bba:	4b8b      	ldr	r3, [pc, #556]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ed      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x53c>
 8002bc8:	e015      	b.n	8002bf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bca:	f7fe fd71 	bl	80016b0 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd2:	f7fe fd6d 	bl	80016b0 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e113      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002be8:	4b7f      	ldr	r3, [pc, #508]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ed      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf6:	7ffb      	ldrb	r3, [r7, #31]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d105      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfc:	4b7a      	ldr	r3, [pc, #488]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	4a79      	ldr	r2, [pc, #484]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 80fe 	beq.w	8002e0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	f040 80d0 	bne.w	8002dbc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c1c:	4b72      	ldr	r3, [pc, #456]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d130      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d127      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d11f      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c5c:	2a07      	cmp	r2, #7
 8002c5e:	bf14      	ite	ne
 8002c60:	2201      	movne	r2, #1
 8002c62:	2200      	moveq	r2, #0
 8002c64:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d113      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d06e      	beq.n	8002d70 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d069      	beq.n	8002d6c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c98:	4b53      	ldr	r3, [pc, #332]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ca4:	4b50      	ldr	r3, [pc, #320]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0ad      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cc0:	f7fe fcf6 	bl	80016b0 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe fcf2 	bl	80016b0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e09a      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cda:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce6:	4b40      	ldr	r3, [pc, #256]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	4b40      	ldr	r3, [pc, #256]	@ (8002dec <HAL_RCC_OscConfig+0x784>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cf6:	3a01      	subs	r2, #1
 8002cf8:	0112      	lsls	r2, r2, #4
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d00:	0212      	lsls	r2, r2, #8
 8002d02:	4311      	orrs	r1, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d08:	0852      	lsrs	r2, r2, #1
 8002d0a:	3a01      	subs	r2, #1
 8002d0c:	0552      	lsls	r2, r2, #21
 8002d0e:	4311      	orrs	r1, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d14:	0852      	lsrs	r2, r2, #1
 8002d16:	3a01      	subs	r2, #1
 8002d18:	0652      	lsls	r2, r2, #25
 8002d1a:	4311      	orrs	r1, r2
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d20:	0912      	lsrs	r2, r2, #4
 8002d22:	0452      	lsls	r2, r2, #17
 8002d24:	430a      	orrs	r2, r1
 8002d26:	4930      	ldr	r1, [pc, #192]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2d      	ldr	r2, [pc, #180]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d38:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d44:	f7fe fcb4 	bl	80016b0 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe fcb0 	bl	80016b0 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e058      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5e:	4b22      	ldr	r3, [pc, #136]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d6a:	e050      	b.n	8002e0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e04f      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d70:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d148      	bne.n	8002e0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a19      	ldr	r2, [pc, #100]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d88:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a16      	ldr	r2, [pc, #88]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d94:	f7fe fc8c 	bl	80016b0 <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7fe fc88 	bl	80016b0 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e030      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x734>
 8002dba:	e028      	b.n	8002e0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b0c      	cmp	r3, #12
 8002dc0:	d023      	beq.n	8002e0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a08      	ldr	r2, [pc, #32]	@ (8002de8 <HAL_RCC_OscConfig+0x780>)
 8002dc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe fc6f 	bl	80016b0 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd4:	e00c      	b.n	8002df0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fc6b 	bl	80016b0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d905      	bls.n	8002df0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e013      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
 8002de8:	40021000 	.word	0x40021000
 8002dec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df0:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <HAL_RCC_OscConfig+0x7b0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ec      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dfc:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_OscConfig+0x7b0>)
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	4905      	ldr	r1, [pc, #20]	@ (8002e18 <HAL_RCC_OscConfig+0x7b0>)
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_RCC_OscConfig+0x7b4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
 8002e08:	e001      	b.n	8002e0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	feeefffc 	.word	0xfeeefffc

08002e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0e7      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b75      	ldr	r3, [pc, #468]	@ (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d910      	bls.n	8002e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b72      	ldr	r3, [pc, #456]	@ (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 0207 	bic.w	r2, r3, #7
 8002e4a:	4970      	ldr	r1, [pc, #448]	@ (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e52:	4b6e      	ldr	r3, [pc, #440]	@ (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0cf      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b66      	ldr	r3, [pc, #408]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d908      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e80:	4b63      	ldr	r3, [pc, #396]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4960      	ldr	r1, [pc, #384]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04c      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d121      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0a6      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ebe:	4b54      	ldr	r3, [pc, #336]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d115      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e09a      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e08e      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e086      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef6:	4b46      	ldr	r3, [pc, #280]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0203 	bic.w	r2, r3, #3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4943      	ldr	r1, [pc, #268]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f08:	f7fe fbd2 	bl	80016b0 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f10:	f7fe fbce 	bl	80016b0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e06e      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f26:	4b3a      	ldr	r3, [pc, #232]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 020c 	and.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d1eb      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	4b31      	ldr	r3, [pc, #196]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d208      	bcs.n	8002f66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f54:	4b2e      	ldr	r3, [pc, #184]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	492b      	ldr	r1, [pc, #172]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f66:	4b29      	ldr	r3, [pc, #164]	@ (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d210      	bcs.n	8002f96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 0207 	bic.w	r2, r3, #7
 8002f7c:	4923      	ldr	r1, [pc, #140]	@ (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f84:	4b21      	ldr	r3, [pc, #132]	@ (800300c <HAL_RCC_ClockConfig+0x1ec>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e036      	b.n	8003004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d008      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	4918      	ldr	r1, [pc, #96]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d009      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fc0:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4910      	ldr	r1, [pc, #64]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fd4:	f000 f824 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	490b      	ldr	r1, [pc, #44]	@ (8003014 <HAL_RCC_ClockConfig+0x1f4>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	4a09      	ldr	r2, [pc, #36]	@ (8003018 <HAL_RCC_ClockConfig+0x1f8>)
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ff4:	4b09      	ldr	r3, [pc, #36]	@ (800301c <HAL_RCC_ClockConfig+0x1fc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe fb09 	bl	8001610 <HAL_InitTick>
 8002ffe:	4603      	mov	r3, r0
 8003000:	72fb      	strb	r3, [r7, #11]

  return status;
 8003002:	7afb      	ldrb	r3, [r7, #11]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40022000 	.word	0x40022000
 8003010:	40021000 	.word	0x40021000
 8003014:	080069cc 	.word	0x080069cc
 8003018:	20000000 	.word	0x20000000
 800301c:	20000004 	.word	0x20000004

08003020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	@ 0x24
 8003024:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302e:	4b3e      	ldr	r3, [pc, #248]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003038:	4b3b      	ldr	r3, [pc, #236]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x34>
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b0c      	cmp	r3, #12
 800304c:	d121      	bne.n	8003092 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d11e      	bne.n	8003092 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003054:	4b34      	ldr	r3, [pc, #208]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d107      	bne.n	8003070 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003060:	4b31      	ldr	r3, [pc, #196]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	e005      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003070:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800307c:	4a2b      	ldr	r2, [pc, #172]	@ (800312c <HAL_RCC_GetSysClockFreq+0x10c>)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003084:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10d      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	2b04      	cmp	r3, #4
 8003096:	d102      	bne.n	800309e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003098:	4b25      	ldr	r3, [pc, #148]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x110>)
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e004      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030a4:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x114>)
 80030a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d134      	bne.n	8003118 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d003      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0xac>
 80030c4:	e005      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x110>)
 80030c8:	617b      	str	r3, [r7, #20]
      break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x114>)
 80030ce:	617b      	str	r3, [r7, #20]
      break;
 80030d0:	e002      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	617b      	str	r3, [r7, #20]
      break;
 80030d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	3301      	adds	r3, #1
 80030e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80030e6:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	fb03 f202 	mul.w	r2, r3, r2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003128 <HAL_RCC_GetSysClockFreq+0x108>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	0e5b      	lsrs	r3, r3, #25
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	3301      	adds	r3, #1
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	fbb2 f3f3 	udiv	r3, r2, r3
 8003116:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003118:	69bb      	ldr	r3, [r7, #24]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3724      	adds	r7, #36	@ 0x24
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	080069e4 	.word	0x080069e4
 8003130:	00f42400 	.word	0x00f42400
 8003134:	007a1200 	.word	0x007a1200

08003138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800313c:	4b03      	ldr	r3, [pc, #12]	@ (800314c <HAL_RCC_GetHCLKFreq+0x14>)
 800313e:	681b      	ldr	r3, [r3, #0]
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000000 	.word	0x20000000

08003150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003154:	f7ff fff0 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4904      	ldr	r1, [pc, #16]	@ (8003178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	080069dc 	.word	0x080069dc

0800317c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003180:	f7ff ffda 	bl	8003138 <HAL_RCC_GetHCLKFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0adb      	lsrs	r3, r3, #11
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4904      	ldr	r1, [pc, #16]	@ (80031a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	080069dc 	.word	0x080069dc

080031a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031c0:	f7ff f9ee 	bl	80025a0 <HAL_PWREx_GetVoltageRange>
 80031c4:	6178      	str	r0, [r7, #20]
 80031c6:	e014      	b.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	4b25      	ldr	r3, [pc, #148]	@ (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031cc:	4a24      	ldr	r2, [pc, #144]	@ (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d4:	4b22      	ldr	r3, [pc, #136]	@ (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031e0:	f7ff f9de 	bl	80025a0 <HAL_PWREx_GetVoltageRange>
 80031e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f8:	d10b      	bne.n	8003212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b80      	cmp	r3, #128	@ 0x80
 80031fe:	d919      	bls.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2ba0      	cmp	r3, #160	@ 0xa0
 8003204:	d902      	bls.n	800320c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003206:	2302      	movs	r3, #2
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	e013      	b.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800320c:	2301      	movs	r3, #1
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	e010      	b.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b80      	cmp	r3, #128	@ 0x80
 8003216:	d902      	bls.n	800321e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003218:	2303      	movs	r3, #3
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e00a      	b.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b80      	cmp	r3, #128	@ 0x80
 8003222:	d102      	bne.n	800322a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003224:	2302      	movs	r3, #2
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e004      	b.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b70      	cmp	r3, #112	@ 0x70
 800322e:	d101      	bne.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003230:	2301      	movs	r3, #1
 8003232:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 0207 	bic.w	r2, r3, #7
 800323c:	4909      	ldr	r1, [pc, #36]	@ (8003264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003244:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	429a      	cmp	r2, r3
 8003250:	d001      	beq.n	8003256 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	40022000 	.word	0x40022000

08003268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003270:	2300      	movs	r3, #0
 8003272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003274:	2300      	movs	r3, #0
 8003276:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003280:	2b00      	cmp	r3, #0
 8003282:	d041      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003288:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800328c:	d02a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800328e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003292:	d824      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003294:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 800329a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800329e:	d81e      	bhi.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80032a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032a8:	d010      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032aa:	e018      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032ac:	4b86      	ldr	r3, [pc, #536]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a85      	ldr	r2, [pc, #532]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032b6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b8:	e015      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3304      	adds	r3, #4
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fabb 	bl	800383c <RCCEx_PLLSAI1_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032ca:	e00c      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3320      	adds	r3, #32
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fba6 	bl	8003a24 <RCCEx_PLLSAI2_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032dc:	e003      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	74fb      	strb	r3, [r7, #19]
      break;
 80032e2:	e000      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ec:	4b76      	ldr	r3, [pc, #472]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032fa:	4973      	ldr	r1, [pc, #460]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003302:	e001      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d041      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003318:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800331c:	d02a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800331e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003322:	d824      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003324:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003328:	d008      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800332a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800332e:	d81e      	bhi.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003338:	d010      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800333a:	e018      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800333c:	4b62      	ldr	r3, [pc, #392]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a61      	ldr	r2, [pc, #388]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003346:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003348:	e015      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3304      	adds	r3, #4
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fa73 	bl	800383c <RCCEx_PLLSAI1_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800335a:	e00c      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3320      	adds	r3, #32
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fb5e 	bl	8003a24 <RCCEx_PLLSAI2_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800336c:	e003      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	74fb      	strb	r3, [r7, #19]
      break;
 8003372:	e000      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800337c:	4b52      	ldr	r3, [pc, #328]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003382:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800338a:	494f      	ldr	r1, [pc, #316]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003392:	e001      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003394:	7cfb      	ldrb	r3, [r7, #19]
 8003396:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a0 	beq.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033aa:	4b47      	ldr	r3, [pc, #284]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00d      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c0:	4b41      	ldr	r3, [pc, #260]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	4a40      	ldr	r2, [pc, #256]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80033cc:	4b3e      	ldr	r3, [pc, #248]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d8:	2301      	movs	r3, #1
 80033da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033dc:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a3a      	ldr	r2, [pc, #232]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e8:	f7fe f962 	bl	80016b0 <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ee:	e009      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7fe f95e 	bl	80016b0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d902      	bls.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	74fb      	strb	r3, [r7, #19]
        break;
 8003402:	e005      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003404:	4b31      	ldr	r3, [pc, #196]	@ (80034cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ef      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d15c      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003416:	4b2c      	ldr	r3, [pc, #176]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003420:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01f      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	429a      	cmp	r2, r3
 8003432:	d019      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003434:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800343e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003440:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	4a20      	ldr	r2, [pc, #128]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003450:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003456:	4a1c      	ldr	r2, [pc, #112]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe f91d 	bl	80016b0 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003478:	e00b      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fe f919 	bl	80016b0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d902      	bls.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	74fb      	strb	r3, [r7, #19]
            break;
 8003490:	e006      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003492:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ec      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a6:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b6:	4904      	ldr	r1, [pc, #16]	@ (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034be:	e009      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034c0:	7cfb      	ldrb	r3, [r7, #19]
 80034c2:	74bb      	strb	r3, [r7, #18]
 80034c4:	e006      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d4:	7c7b      	ldrb	r3, [r7, #17]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034da:	4b9e      	ldr	r3, [pc, #632]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034de:	4a9d      	ldr	r2, [pc, #628]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f2:	4b98      	ldr	r3, [pc, #608]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f8:	f023 0203 	bic.w	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	4994      	ldr	r1, [pc, #592]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003514:	4b8f      	ldr	r3, [pc, #572]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351a:	f023 020c 	bic.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	498c      	ldr	r1, [pc, #560]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003536:	4b87      	ldr	r3, [pc, #540]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	4983      	ldr	r1, [pc, #524]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003558:	4b7e      	ldr	r3, [pc, #504]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003566:	497b      	ldr	r1, [pc, #492]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0310 	and.w	r3, r3, #16
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800357a:	4b76      	ldr	r3, [pc, #472]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003580:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003588:	4972      	ldr	r1, [pc, #456]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800359c:	4b6d      	ldr	r3, [pc, #436]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035aa:	496a      	ldr	r1, [pc, #424]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035be:	4b65      	ldr	r3, [pc, #404]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035cc:	4961      	ldr	r1, [pc, #388]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ee:	4959      	ldr	r1, [pc, #356]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003602:	4b54      	ldr	r3, [pc, #336]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003608:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003610:	4950      	ldr	r1, [pc, #320]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003624:	4b4b      	ldr	r3, [pc, #300]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003632:	4948      	ldr	r1, [pc, #288]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003646:	4b43      	ldr	r3, [pc, #268]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003654:	493f      	ldr	r1, [pc, #252]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d028      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003668:	4b3a      	ldr	r3, [pc, #232]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003676:	4937      	ldr	r1, [pc, #220]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003682:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003686:	d106      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a31      	ldr	r2, [pc, #196]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003692:	60d3      	str	r3, [r2, #12]
 8003694:	e011      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800369a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800369e:	d10c      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3304      	adds	r3, #4
 80036a4:	2101      	movs	r1, #1
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f8c8 	bl	800383c <RCCEx_PLLSAI1_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036b6:	7cfb      	ldrb	r3, [r7, #19]
 80036b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d028      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036c6:	4b23      	ldr	r3, [pc, #140]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	491f      	ldr	r1, [pc, #124]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036e4:	d106      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036f0:	60d3      	str	r3, [r2, #12]
 80036f2:	e011      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036fc:	d10c      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	3304      	adds	r3, #4
 8003702:	2101      	movs	r1, #1
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f899 	bl	800383c <RCCEx_PLLSAI1_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800370e:	7cfb      	ldrb	r3, [r7, #19]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d02b      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003724:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003732:	4908      	ldr	r1, [pc, #32]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003742:	d109      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003744:	4b03      	ldr	r3, [pc, #12]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a02      	ldr	r2, [pc, #8]	@ (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800374e:	60d3      	str	r3, [r2, #12]
 8003750:	e014      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3304      	adds	r3, #4
 8003766:	2101      	movs	r1, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f867 	bl	800383c <RCCEx_PLLSAI1_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d02f      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003788:	4b2b      	ldr	r3, [pc, #172]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003796:	4928      	ldr	r1, [pc, #160]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037a6:	d10d      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	2102      	movs	r1, #2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f844 	bl	800383c <RCCEx_PLLSAI1_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d014      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	74bb      	strb	r3, [r7, #18]
 80037c2:	e011      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3320      	adds	r3, #32
 80037d2:	2102      	movs	r1, #2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f925 	bl	8003a24 <RCCEx_PLLSAI2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037de:	7cfb      	ldrb	r3, [r7, #19]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037f4:	4b10      	ldr	r3, [pc, #64]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003802:	490d      	ldr	r1, [pc, #52]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003816:	4b08      	ldr	r3, [pc, #32]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003826:	4904      	ldr	r1, [pc, #16]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800382e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40021000 	.word	0x40021000

0800383c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800384a:	4b75      	ldr	r3, [pc, #468]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d018      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003856:	4b72      	ldr	r3, [pc, #456]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d10d      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
       ||
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800386e:	4b6c      	ldr	r3, [pc, #432]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	091b      	lsrs	r3, r3, #4
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
       ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d047      	beq.n	8003912 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e044      	b.n	8003912 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d018      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x86>
 8003890:	2b03      	cmp	r3, #3
 8003892:	d825      	bhi.n	80038e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003894:	2b01      	cmp	r3, #1
 8003896:	d002      	beq.n	800389e <RCCEx_PLLSAI1_Config+0x62>
 8003898:	2b02      	cmp	r3, #2
 800389a:	d009      	beq.n	80038b0 <RCCEx_PLLSAI1_Config+0x74>
 800389c:	e020      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800389e:	4b60      	ldr	r3, [pc, #384]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11d      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ae:	e01a      	b.n	80038e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038b0:	4b5b      	ldr	r3, [pc, #364]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d116      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c0:	e013      	b.n	80038ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038c2:	4b57      	ldr	r3, [pc, #348]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10f      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ce:	4b54      	ldr	r3, [pc, #336]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038de:	e006      	b.n	80038ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e004      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10d      	bne.n	8003912 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	430b      	orrs	r3, r1
 800390c:	4944      	ldr	r1, [pc, #272]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d17d      	bne.n	8003a14 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003918:	4b41      	ldr	r3, [pc, #260]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a40      	ldr	r2, [pc, #256]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003924:	f7fd fec4 	bl	80016b0 <HAL_GetTick>
 8003928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800392a:	e009      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800392c:	f7fd fec0 	bl	80016b0 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d902      	bls.n	8003940 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	73fb      	strb	r3, [r7, #15]
        break;
 800393e:	e005      	b.n	800394c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003940:	4b37      	ldr	r3, [pc, #220]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1ef      	bne.n	800392c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800394c:	7bfb      	ldrb	r3, [r7, #15]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d160      	bne.n	8003a14 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d111      	bne.n	800397c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003958:	4b31      	ldr	r3, [pc, #196]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6892      	ldr	r2, [r2, #8]
 8003968:	0211      	lsls	r1, r2, #8
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	0912      	lsrs	r2, r2, #4
 8003970:	0452      	lsls	r2, r2, #17
 8003972:	430a      	orrs	r2, r1
 8003974:	492a      	ldr	r1, [pc, #168]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	610b      	str	r3, [r1, #16]
 800397a:	e027      	b.n	80039cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d112      	bne.n	80039a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003982:	4b27      	ldr	r3, [pc, #156]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800398a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	6892      	ldr	r2, [r2, #8]
 8003992:	0211      	lsls	r1, r2, #8
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6912      	ldr	r2, [r2, #16]
 8003998:	0852      	lsrs	r2, r2, #1
 800399a:	3a01      	subs	r2, #1
 800399c:	0552      	lsls	r2, r2, #21
 800399e:	430a      	orrs	r2, r1
 80039a0:	491f      	ldr	r1, [pc, #124]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	610b      	str	r3, [r1, #16]
 80039a6:	e011      	b.n	80039cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6892      	ldr	r2, [r2, #8]
 80039b8:	0211      	lsls	r1, r2, #8
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6952      	ldr	r2, [r2, #20]
 80039be:	0852      	lsrs	r2, r2, #1
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0652      	lsls	r2, r2, #25
 80039c4:	430a      	orrs	r2, r1
 80039c6:	4916      	ldr	r1, [pc, #88]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039cc:	4b14      	ldr	r3, [pc, #80]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a13      	ldr	r2, [pc, #76]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fd fe6a 	bl	80016b0 <HAL_GetTick>
 80039dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039de:	e009      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e0:	f7fd fe66 	bl	80016b0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d902      	bls.n	80039f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	73fb      	strb	r3, [r7, #15]
          break;
 80039f2:	e005      	b.n	8003a00 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ef      	beq.n	80039e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a06:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	4904      	ldr	r1, [pc, #16]	@ (8003a20 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000

08003a24 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a32:	4b6a      	ldr	r3, [pc, #424]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d018      	beq.n	8003a70 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a3e:	4b67      	ldr	r3, [pc, #412]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0203 	and.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d10d      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
       ||
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a56:	4b61      	ldr	r3, [pc, #388]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
       ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d047      	beq.n	8003afa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
 8003a6e:	e044      	b.n	8003afa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d018      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0x86>
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d825      	bhi.n	8003ac8 <RCCEx_PLLSAI2_Config+0xa4>
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d002      	beq.n	8003a86 <RCCEx_PLLSAI2_Config+0x62>
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d009      	beq.n	8003a98 <RCCEx_PLLSAI2_Config+0x74>
 8003a84:	e020      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a86:	4b55      	ldr	r3, [pc, #340]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11d      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a96:	e01a      	b.n	8003ace <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a98:	4b50      	ldr	r3, [pc, #320]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d116      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa8:	e013      	b.n	8003ad2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ab6:	4b49      	ldr	r3, [pc, #292]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ac6:	e006      	b.n	8003ad6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      break;
 8003acc:	e004      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e002      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10d      	bne.n	8003afa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ade:	4b3f      	ldr	r3, [pc, #252]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6819      	ldr	r1, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	430b      	orrs	r3, r1
 8003af4:	4939      	ldr	r1, [pc, #228]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d167      	bne.n	8003bd0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b00:	4b36      	ldr	r3, [pc, #216]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a35      	ldr	r2, [pc, #212]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0c:	f7fd fdd0 	bl	80016b0 <HAL_GetTick>
 8003b10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b12:	e009      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b14:	f7fd fdcc 	bl	80016b0 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d902      	bls.n	8003b28 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	73fb      	strb	r3, [r7, #15]
        break;
 8003b26:	e005      	b.n	8003b34 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b28:	4b2c      	ldr	r3, [pc, #176]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1ef      	bne.n	8003b14 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d14a      	bne.n	8003bd0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d111      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b40:	4b26      	ldr	r3, [pc, #152]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6892      	ldr	r2, [r2, #8]
 8003b50:	0211      	lsls	r1, r2, #8
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	68d2      	ldr	r2, [r2, #12]
 8003b56:	0912      	lsrs	r2, r2, #4
 8003b58:	0452      	lsls	r2, r2, #17
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	491f      	ldr	r1, [pc, #124]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	614b      	str	r3, [r1, #20]
 8003b62:	e011      	b.n	8003b88 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b64:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6892      	ldr	r2, [r2, #8]
 8003b74:	0211      	lsls	r1, r2, #8
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6912      	ldr	r2, [r2, #16]
 8003b7a:	0852      	lsrs	r2, r2, #1
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	0652      	lsls	r2, r2, #25
 8003b80:	430a      	orrs	r2, r1
 8003b82:	4916      	ldr	r1, [pc, #88]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b88:	4b14      	ldr	r3, [pc, #80]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a13      	ldr	r2, [pc, #76]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fd fd8c 	bl	80016b0 <HAL_GetTick>
 8003b98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b9a:	e009      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b9c:	f7fd fd88 	bl	80016b0 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d902      	bls.n	8003bb0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	73fb      	strb	r3, [r7, #15]
          break;
 8003bae:	e005      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ef      	beq.n	8003b9c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4904      	ldr	r1, [pc, #16]	@ (8003bdc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e049      	b.n	8003c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fd fa7e 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 fb7a 	bl	8004318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e049      	b.n	8003d34 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f841 	bl	8003d3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f000 fb23 	bl	8004318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <HAL_TIM_PWM_Start+0x24>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e03c      	b.n	8003dee <HAL_TIM_PWM_Start+0x9e>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d109      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x3e>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	bf14      	ite	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	2300      	moveq	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	e02f      	b.n	8003dee <HAL_TIM_PWM_Start+0x9e>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d109      	bne.n	8003da8 <HAL_TIM_PWM_Start+0x58>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e022      	b.n	8003dee <HAL_TIM_PWM_Start+0x9e>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b0c      	cmp	r3, #12
 8003dac:	d109      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0x72>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	bf14      	ite	ne
 8003dba:	2301      	movne	r3, #1
 8003dbc:	2300      	moveq	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	e015      	b.n	8003dee <HAL_TIM_PWM_Start+0x9e>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d109      	bne.n	8003ddc <HAL_TIM_PWM_Start+0x8c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e008      	b.n	8003dee <HAL_TIM_PWM_Start+0x9e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e09c      	b.n	8003f30 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIM_PWM_Start+0xb6>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e04:	e023      	b.n	8003e4e <HAL_TIM_PWM_Start+0xfe>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_PWM_Start+0xc6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e14:	e01b      	b.n	8003e4e <HAL_TIM_PWM_Start+0xfe>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIM_PWM_Start+0xd6>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e24:	e013      	b.n	8003e4e <HAL_TIM_PWM_Start+0xfe>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Start+0xe6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e34:	e00b      	b.n	8003e4e <HAL_TIM_PWM_Start+0xfe>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start+0xf6>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e44:	e003      	b.n	8003e4e <HAL_TIM_PWM_Start+0xfe>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2201      	movs	r2, #1
 8003e54:	6839      	ldr	r1, [r7, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fe74 	bl	8004b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a35      	ldr	r2, [pc, #212]	@ (8003f38 <HAL_TIM_PWM_Start+0x1e8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x13e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a34      	ldr	r2, [pc, #208]	@ (8003f3c <HAL_TIM_PWM_Start+0x1ec>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x13e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a32      	ldr	r2, [pc, #200]	@ (8003f40 <HAL_TIM_PWM_Start+0x1f0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x13e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a31      	ldr	r2, [pc, #196]	@ (8003f44 <HAL_TIM_PWM_Start+0x1f4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_TIM_PWM_Start+0x13e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a2f      	ldr	r2, [pc, #188]	@ (8003f48 <HAL_TIM_PWM_Start+0x1f8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_PWM_Start+0x142>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_TIM_PWM_Start+0x144>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a22      	ldr	r2, [pc, #136]	@ (8003f38 <HAL_TIM_PWM_Start+0x1e8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01d      	beq.n	8003eee <HAL_TIM_PWM_Start+0x19e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eba:	d018      	beq.n	8003eee <HAL_TIM_PWM_Start+0x19e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a22      	ldr	r2, [pc, #136]	@ (8003f4c <HAL_TIM_PWM_Start+0x1fc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <HAL_TIM_PWM_Start+0x19e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a21      	ldr	r2, [pc, #132]	@ (8003f50 <HAL_TIM_PWM_Start+0x200>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00e      	beq.n	8003eee <HAL_TIM_PWM_Start+0x19e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f54 <HAL_TIM_PWM_Start+0x204>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d009      	beq.n	8003eee <HAL_TIM_PWM_Start+0x19e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a17      	ldr	r2, [pc, #92]	@ (8003f3c <HAL_TIM_PWM_Start+0x1ec>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIM_PWM_Start+0x19e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a15      	ldr	r2, [pc, #84]	@ (8003f40 <HAL_TIM_PWM_Start+0x1f0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d115      	bne.n	8003f1a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	4b18      	ldr	r3, [pc, #96]	@ (8003f58 <HAL_TIM_PWM_Start+0x208>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d015      	beq.n	8003f2c <HAL_TIM_PWM_Start+0x1dc>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f06:	d011      	beq.n	8003f2c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	e008      	b.n	8003f2c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0201 	orr.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e000      	b.n	8003f2e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40013400 	.word	0x40013400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	00010007 	.word	0x00010007

08003f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e0ff      	b.n	800417a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b14      	cmp	r3, #20
 8003f86:	f200 80f0 	bhi.w	800416a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	0800416b 	.word	0x0800416b
 8003f98:	0800416b 	.word	0x0800416b
 8003f9c:	0800416b 	.word	0x0800416b
 8003fa0:	08004025 	.word	0x08004025
 8003fa4:	0800416b 	.word	0x0800416b
 8003fa8:	0800416b 	.word	0x0800416b
 8003fac:	0800416b 	.word	0x0800416b
 8003fb0:	08004067 	.word	0x08004067
 8003fb4:	0800416b 	.word	0x0800416b
 8003fb8:	0800416b 	.word	0x0800416b
 8003fbc:	0800416b 	.word	0x0800416b
 8003fc0:	080040a7 	.word	0x080040a7
 8003fc4:	0800416b 	.word	0x0800416b
 8003fc8:	0800416b 	.word	0x0800416b
 8003fcc:	0800416b 	.word	0x0800416b
 8003fd0:	080040e9 	.word	0x080040e9
 8003fd4:	0800416b 	.word	0x0800416b
 8003fd8:	0800416b 	.word	0x0800416b
 8003fdc:	0800416b 	.word	0x0800416b
 8003fe0:	08004129 	.word	0x08004129
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fa3a 	bl	8004464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0208 	orr.w	r2, r2, #8
 8003ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0204 	bic.w	r2, r2, #4
 800400e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	619a      	str	r2, [r3, #24]
      break;
 8004022:	e0a5      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 faaa 	bl	8004584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800403e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699a      	ldr	r2, [r3, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800404e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6999      	ldr	r1, [r3, #24]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	021a      	lsls	r2, r3, #8
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	619a      	str	r2, [r3, #24]
      break;
 8004064:	e084      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fb13 	bl	8004698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0208 	orr.w	r2, r2, #8
 8004080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0204 	bic.w	r2, r2, #4
 8004090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	69d9      	ldr	r1, [r3, #28]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	61da      	str	r2, [r3, #28]
      break;
 80040a4:	e064      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fb7b 	bl	80047a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69d9      	ldr	r1, [r3, #28]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	021a      	lsls	r2, r3, #8
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	61da      	str	r2, [r3, #28]
      break;
 80040e6:	e043      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fbc4 	bl	800487c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0208 	orr.w	r2, r2, #8
 8004102:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0204 	bic.w	r2, r2, #4
 8004112:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004126:	e023      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fc08 	bl	8004944 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004142:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004152:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	021a      	lsls	r2, r3, #8
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004168:	e002      	b.n	8004170 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	75fb      	strb	r3, [r7, #23]
      break;
 800416e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004178:	7dfb      	ldrb	r3, [r7, #23]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop

08004184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_ConfigClockSource+0x1c>
 800419c:	2302      	movs	r3, #2
 800419e:	e0b6      	b.n	800430e <HAL_TIM_ConfigClockSource+0x18a>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041dc:	d03e      	beq.n	800425c <HAL_TIM_ConfigClockSource+0xd8>
 80041de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e2:	f200 8087 	bhi.w	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ea:	f000 8086 	beq.w	80042fa <HAL_TIM_ConfigClockSource+0x176>
 80041ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f2:	d87f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 80041f4:	2b70      	cmp	r3, #112	@ 0x70
 80041f6:	d01a      	beq.n	800422e <HAL_TIM_ConfigClockSource+0xaa>
 80041f8:	2b70      	cmp	r3, #112	@ 0x70
 80041fa:	d87b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 80041fc:	2b60      	cmp	r3, #96	@ 0x60
 80041fe:	d050      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x11e>
 8004200:	2b60      	cmp	r3, #96	@ 0x60
 8004202:	d877      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 8004204:	2b50      	cmp	r3, #80	@ 0x50
 8004206:	d03c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0xfe>
 8004208:	2b50      	cmp	r3, #80	@ 0x50
 800420a:	d873      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	d058      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x13e>
 8004210:	2b40      	cmp	r3, #64	@ 0x40
 8004212:	d86f      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 8004214:	2b30      	cmp	r3, #48	@ 0x30
 8004216:	d064      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004218:	2b30      	cmp	r3, #48	@ 0x30
 800421a:	d86b      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d060      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d867      	bhi.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05c      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15e>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d05a      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x15e>
 800422c:	e062      	b.n	80042f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800423e:	f000 fc61 	bl	8004b04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004250:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	609a      	str	r2, [r3, #8]
      break;
 800425a:	e04f      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800426c:	f000 fc4a 	bl	8004b04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800427e:	609a      	str	r2, [r3, #8]
      break;
 8004280:	e03c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	461a      	mov	r2, r3
 8004290:	f000 fbbe 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2150      	movs	r1, #80	@ 0x50
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fc17 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 80042a0:	e02c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ae:	461a      	mov	r2, r3
 80042b0:	f000 fbdd 	bl	8004a6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2160      	movs	r1, #96	@ 0x60
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fc07 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 80042c0:	e01c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	461a      	mov	r2, r3
 80042d0:	f000 fb9e 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2140      	movs	r1, #64	@ 0x40
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fbf7 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 80042e0:	e00c      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4619      	mov	r1, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	f000 fbee 	bl	8004ace <TIM_ITRx_SetConfig>
      break;
 80042f2:	e003      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
      break;
 80042f8:	e000      	b.n	80042fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80042fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800430c:	7bfb      	ldrb	r3, [r7, #15]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a46      	ldr	r2, [pc, #280]	@ (8004444 <TIM_Base_SetConfig+0x12c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d013      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004336:	d00f      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a43      	ldr	r2, [pc, #268]	@ (8004448 <TIM_Base_SetConfig+0x130>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00b      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a42      	ldr	r2, [pc, #264]	@ (800444c <TIM_Base_SetConfig+0x134>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a41      	ldr	r2, [pc, #260]	@ (8004450 <TIM_Base_SetConfig+0x138>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a40      	ldr	r2, [pc, #256]	@ (8004454 <TIM_Base_SetConfig+0x13c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d108      	bne.n	800436a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a35      	ldr	r2, [pc, #212]	@ (8004444 <TIM_Base_SetConfig+0x12c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d01f      	beq.n	80043b2 <TIM_Base_SetConfig+0x9a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004378:	d01b      	beq.n	80043b2 <TIM_Base_SetConfig+0x9a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a32      	ldr	r2, [pc, #200]	@ (8004448 <TIM_Base_SetConfig+0x130>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d017      	beq.n	80043b2 <TIM_Base_SetConfig+0x9a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a31      	ldr	r2, [pc, #196]	@ (800444c <TIM_Base_SetConfig+0x134>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d013      	beq.n	80043b2 <TIM_Base_SetConfig+0x9a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a30      	ldr	r2, [pc, #192]	@ (8004450 <TIM_Base_SetConfig+0x138>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00f      	beq.n	80043b2 <TIM_Base_SetConfig+0x9a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2f      	ldr	r2, [pc, #188]	@ (8004454 <TIM_Base_SetConfig+0x13c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00b      	beq.n	80043b2 <TIM_Base_SetConfig+0x9a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2e      	ldr	r2, [pc, #184]	@ (8004458 <TIM_Base_SetConfig+0x140>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <TIM_Base_SetConfig+0x9a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2d      	ldr	r2, [pc, #180]	@ (800445c <TIM_Base_SetConfig+0x144>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d003      	beq.n	80043b2 <TIM_Base_SetConfig+0x9a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004460 <TIM_Base_SetConfig+0x148>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d108      	bne.n	80043c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a16      	ldr	r2, [pc, #88]	@ (8004444 <TIM_Base_SetConfig+0x12c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00f      	beq.n	8004410 <TIM_Base_SetConfig+0xf8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a18      	ldr	r2, [pc, #96]	@ (8004454 <TIM_Base_SetConfig+0x13c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00b      	beq.n	8004410 <TIM_Base_SetConfig+0xf8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a17      	ldr	r2, [pc, #92]	@ (8004458 <TIM_Base_SetConfig+0x140>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d007      	beq.n	8004410 <TIM_Base_SetConfig+0xf8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a16      	ldr	r2, [pc, #88]	@ (800445c <TIM_Base_SetConfig+0x144>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d003      	beq.n	8004410 <TIM_Base_SetConfig+0xf8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a15      	ldr	r2, [pc, #84]	@ (8004460 <TIM_Base_SetConfig+0x148>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f023 0201 	bic.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	611a      	str	r2, [r3, #16]
  }
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40013400 	.word	0x40013400
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800

08004464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f023 0201 	bic.w	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0302 	bic.w	r3, r3, #2
 80044b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a2c      	ldr	r2, [pc, #176]	@ (8004570 <TIM_OC1_SetConfig+0x10c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d00f      	beq.n	80044e4 <TIM_OC1_SetConfig+0x80>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004574 <TIM_OC1_SetConfig+0x110>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00b      	beq.n	80044e4 <TIM_OC1_SetConfig+0x80>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004578 <TIM_OC1_SetConfig+0x114>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d007      	beq.n	80044e4 <TIM_OC1_SetConfig+0x80>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a29      	ldr	r2, [pc, #164]	@ (800457c <TIM_OC1_SetConfig+0x118>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_OC1_SetConfig+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a28      	ldr	r2, [pc, #160]	@ (8004580 <TIM_OC1_SetConfig+0x11c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10c      	bne.n	80044fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0308 	bic.w	r3, r3, #8
 80044ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 0304 	bic.w	r3, r3, #4
 80044fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a1b      	ldr	r2, [pc, #108]	@ (8004570 <TIM_OC1_SetConfig+0x10c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00f      	beq.n	8004526 <TIM_OC1_SetConfig+0xc2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1a      	ldr	r2, [pc, #104]	@ (8004574 <TIM_OC1_SetConfig+0x110>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00b      	beq.n	8004526 <TIM_OC1_SetConfig+0xc2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <TIM_OC1_SetConfig+0x114>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <TIM_OC1_SetConfig+0xc2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a18      	ldr	r2, [pc, #96]	@ (800457c <TIM_OC1_SetConfig+0x118>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_OC1_SetConfig+0xc2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a17      	ldr	r2, [pc, #92]	@ (8004580 <TIM_OC1_SetConfig+0x11c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d111      	bne.n	800454a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800452c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4313      	orrs	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	621a      	str	r2, [r3, #32]
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40013400 	.word	0x40013400
 8004578:	40014000 	.word	0x40014000
 800457c:	40014400 	.word	0x40014400
 8004580:	40014800 	.word	0x40014800

08004584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f023 0210 	bic.w	r2, r3, #16
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0320 	bic.w	r3, r3, #32
 80045d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a28      	ldr	r2, [pc, #160]	@ (8004684 <TIM_OC2_SetConfig+0x100>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_OC2_SetConfig+0x6c>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a27      	ldr	r2, [pc, #156]	@ (8004688 <TIM_OC2_SetConfig+0x104>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10d      	bne.n	800460c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800460a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a1d      	ldr	r2, [pc, #116]	@ (8004684 <TIM_OC2_SetConfig+0x100>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00f      	beq.n	8004634 <TIM_OC2_SetConfig+0xb0>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a1c      	ldr	r2, [pc, #112]	@ (8004688 <TIM_OC2_SetConfig+0x104>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_OC2_SetConfig+0xb0>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a1b      	ldr	r2, [pc, #108]	@ (800468c <TIM_OC2_SetConfig+0x108>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_OC2_SetConfig+0xb0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a1a      	ldr	r2, [pc, #104]	@ (8004690 <TIM_OC2_SetConfig+0x10c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_OC2_SetConfig+0xb0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a19      	ldr	r2, [pc, #100]	@ (8004694 <TIM_OC2_SetConfig+0x110>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d113      	bne.n	800465c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800463a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40013400 	.word	0x40013400
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800

08004698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a27      	ldr	r2, [pc, #156]	@ (8004794 <TIM_OC3_SetConfig+0xfc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_OC3_SetConfig+0x6a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a26      	ldr	r2, [pc, #152]	@ (8004798 <TIM_OC3_SetConfig+0x100>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10d      	bne.n	800471e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800471c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <TIM_OC3_SetConfig+0xfc>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00f      	beq.n	8004746 <TIM_OC3_SetConfig+0xae>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1b      	ldr	r2, [pc, #108]	@ (8004798 <TIM_OC3_SetConfig+0x100>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00b      	beq.n	8004746 <TIM_OC3_SetConfig+0xae>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1a      	ldr	r2, [pc, #104]	@ (800479c <TIM_OC3_SetConfig+0x104>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <TIM_OC3_SetConfig+0xae>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a19      	ldr	r2, [pc, #100]	@ (80047a0 <TIM_OC3_SetConfig+0x108>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_OC3_SetConfig+0xae>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a18      	ldr	r2, [pc, #96]	@ (80047a4 <TIM_OC3_SetConfig+0x10c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d113      	bne.n	800476e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800474c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	621a      	str	r2, [r3, #32]
}
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40012c00 	.word	0x40012c00
 8004798:	40013400 	.word	0x40013400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800

080047a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	031b      	lsls	r3, r3, #12
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a18      	ldr	r2, [pc, #96]	@ (8004868 <TIM_OC4_SetConfig+0xc0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00f      	beq.n	800482c <TIM_OC4_SetConfig+0x84>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a17      	ldr	r2, [pc, #92]	@ (800486c <TIM_OC4_SetConfig+0xc4>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00b      	beq.n	800482c <TIM_OC4_SetConfig+0x84>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <TIM_OC4_SetConfig+0xc8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_OC4_SetConfig+0x84>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a15      	ldr	r2, [pc, #84]	@ (8004874 <TIM_OC4_SetConfig+0xcc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_OC4_SetConfig+0x84>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a14      	ldr	r2, [pc, #80]	@ (8004878 <TIM_OC4_SetConfig+0xd0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d109      	bne.n	8004840 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40013400 	.word	0x40013400
 8004870:	40014000 	.word	0x40014000
 8004874:	40014400 	.word	0x40014400
 8004878:	40014800 	.word	0x40014800

0800487c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80048c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a17      	ldr	r2, [pc, #92]	@ (8004930 <TIM_OC5_SetConfig+0xb4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00f      	beq.n	80048f6 <TIM_OC5_SetConfig+0x7a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a16      	ldr	r2, [pc, #88]	@ (8004934 <TIM_OC5_SetConfig+0xb8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00b      	beq.n	80048f6 <TIM_OC5_SetConfig+0x7a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a15      	ldr	r2, [pc, #84]	@ (8004938 <TIM_OC5_SetConfig+0xbc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d007      	beq.n	80048f6 <TIM_OC5_SetConfig+0x7a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a14      	ldr	r2, [pc, #80]	@ (800493c <TIM_OC5_SetConfig+0xc0>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d003      	beq.n	80048f6 <TIM_OC5_SetConfig+0x7a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a13      	ldr	r2, [pc, #76]	@ (8004940 <TIM_OC5_SetConfig+0xc4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d109      	bne.n	800490a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	621a      	str	r2, [r3, #32]
}
 8004924:	bf00      	nop
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	40012c00 	.word	0x40012c00
 8004934:	40013400 	.word	0x40013400
 8004938:	40014000 	.word	0x40014000
 800493c:	40014400 	.word	0x40014400
 8004940:	40014800 	.word	0x40014800

08004944 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	021b      	lsls	r3, r3, #8
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4313      	orrs	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800498a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	051b      	lsls	r3, r3, #20
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a18      	ldr	r2, [pc, #96]	@ (80049fc <TIM_OC6_SetConfig+0xb8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d00f      	beq.n	80049c0 <TIM_OC6_SetConfig+0x7c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a17      	ldr	r2, [pc, #92]	@ (8004a00 <TIM_OC6_SetConfig+0xbc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00b      	beq.n	80049c0 <TIM_OC6_SetConfig+0x7c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a16      	ldr	r2, [pc, #88]	@ (8004a04 <TIM_OC6_SetConfig+0xc0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d007      	beq.n	80049c0 <TIM_OC6_SetConfig+0x7c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <TIM_OC6_SetConfig+0xc4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d003      	beq.n	80049c0 <TIM_OC6_SetConfig+0x7c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a14      	ldr	r2, [pc, #80]	@ (8004a0c <TIM_OC6_SetConfig+0xc8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d109      	bne.n	80049d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	029b      	lsls	r3, r3, #10
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	621a      	str	r2, [r3, #32]
}
 80049ee:	bf00      	nop
 80049f0:	371c      	adds	r7, #28
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40013400 	.word	0x40013400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40014400 	.word	0x40014400
 8004a0c:	40014800 	.word	0x40014800

08004a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f023 030a 	bic.w	r3, r3, #10
 8004a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f023 0210 	bic.w	r2, r3, #16
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	031b      	lsls	r3, r3, #12
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004aaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f043 0307 	orr.w	r3, r3, #7
 8004af0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	609a      	str	r2, [r3, #8]
}
 8004af8:	bf00      	nop
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	021a      	lsls	r2, r3, #8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	609a      	str	r2, [r3, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	371c      	adds	r7, #28
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2201      	movs	r2, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a1a      	ldr	r2, [r3, #32]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
}
 8004b82:	bf00      	nop
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e068      	b.n	8004c7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d108      	bne.n	8004bee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004be2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c1a:	d018      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1b      	ldr	r2, [pc, #108]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a18      	ldr	r2, [pc, #96]	@ (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a13      	ldr	r2, [pc, #76]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a14      	ldr	r2, [pc, #80]	@ (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d10c      	bne.n	8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40013400 	.word	0x40013400
 8004c90:	40000400 	.word	0x40000400
 8004c94:	40000800 	.word	0x40000800
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	40014000 	.word	0x40014000

08004ca0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e040      	b.n	8004d34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fc fa8a 	bl	80011dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2224      	movs	r2, #36	@ 0x24
 8004ccc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0201 	bic.w	r2, r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fc32 	bl	8005550 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f977 	bl	8004fe0 <UART_SetConfig>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e01b      	b.n	8004d34 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fcb1 	bl	8005694 <UART_CheckIdleState>
 8004d32:	4603      	mov	r3, r0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	@ 0x28
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d177      	bne.n	8004e44 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_UART_Transmit+0x24>
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e070      	b.n	8004e46 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2221      	movs	r2, #33	@ 0x21
 8004d70:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d72:	f7fc fc9d 	bl	80016b0 <HAL_GetTick>
 8004d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	88fa      	ldrh	r2, [r7, #6]
 8004d7c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d90:	d108      	bne.n	8004da4 <HAL_UART_Transmit+0x68>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d104      	bne.n	8004da4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	e003      	b.n	8004dac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dac:	e02f      	b.n	8004e0e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2200      	movs	r2, #0
 8004db6:	2180      	movs	r1, #128	@ 0x80
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 fd13 	bl	80057e4 <UART_WaitOnFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e03b      	b.n	8004e46 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	881a      	ldrh	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de0:	b292      	uxth	r2, r2
 8004de2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	3302      	adds	r3, #2
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	e007      	b.n	8004dfc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	781a      	ldrb	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1c9      	bne.n	8004dae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2140      	movs	r1, #64	@ 0x40
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fcdd 	bl	80057e4 <UART_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d004      	beq.n	8004e3a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e005      	b.n	8004e46 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b08a      	sub	sp, #40	@ 0x28
 8004e52:	af02      	add	r7, sp, #8
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	f040 80b6 	bne.w	8004fd6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <HAL_UART_Receive+0x28>
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e0ae      	b.n	8004fd8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2222      	movs	r2, #34	@ 0x22
 8004e86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e90:	f7fc fc0e 	bl	80016b0 <HAL_GetTick>
 8004e94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	88fa      	ldrh	r2, [r7, #6]
 8004e9a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	88fa      	ldrh	r2, [r7, #6]
 8004ea2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eae:	d10e      	bne.n	8004ece <HAL_UART_Receive+0x80>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d105      	bne.n	8004ec4 <HAL_UART_Receive+0x76>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004ebe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ec2:	e02d      	b.n	8004f20 <HAL_UART_Receive+0xd2>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	22ff      	movs	r2, #255	@ 0xff
 8004ec8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ecc:	e028      	b.n	8004f20 <HAL_UART_Receive+0xd2>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10d      	bne.n	8004ef2 <HAL_UART_Receive+0xa4>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d104      	bne.n	8004ee8 <HAL_UART_Receive+0x9a>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	22ff      	movs	r2, #255	@ 0xff
 8004ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ee6:	e01b      	b.n	8004f20 <HAL_UART_Receive+0xd2>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	227f      	movs	r2, #127	@ 0x7f
 8004eec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ef0:	e016      	b.n	8004f20 <HAL_UART_Receive+0xd2>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004efa:	d10d      	bne.n	8004f18 <HAL_UART_Receive+0xca>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <HAL_UART_Receive+0xc0>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	227f      	movs	r2, #127	@ 0x7f
 8004f08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f0c:	e008      	b.n	8004f20 <HAL_UART_Receive+0xd2>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	223f      	movs	r2, #63	@ 0x3f
 8004f12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004f16:	e003      	b.n	8004f20 <HAL_UART_Receive+0xd2>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f26:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f30:	d108      	bne.n	8004f44 <HAL_UART_Receive+0xf6>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d104      	bne.n	8004f44 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e003      	b.n	8004f4c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004f4c:	e037      	b.n	8004fbe <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2200      	movs	r2, #0
 8004f56:	2120      	movs	r1, #32
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fc43 	bl	80057e4 <UART_WaitOnFlagUntilTimeout>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e033      	b.n	8004fd8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10c      	bne.n	8004f90 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	8a7b      	ldrh	r3, [r7, #18]
 8004f80:	4013      	ands	r3, r2
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e00d      	b.n	8004fac <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	8a7b      	ldrh	r3, [r7, #18]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1c1      	bne.n	8004f4e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e000      	b.n	8004fd8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8004fd6:	2302      	movs	r3, #2
  }
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fe4:	b08a      	sub	sp, #40	@ 0x28
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	4313      	orrs	r3, r2
 8005006:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4ba4      	ldr	r3, [pc, #656]	@ (80052a0 <UART_SetConfig+0x2c0>)
 8005010:	4013      	ands	r3, r2
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005018:	430b      	orrs	r3, r1
 800501a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a99      	ldr	r2, [pc, #612]	@ (80052a4 <UART_SetConfig+0x2c4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d004      	beq.n	800504c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005048:	4313      	orrs	r3, r2
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a90      	ldr	r2, [pc, #576]	@ (80052a8 <UART_SetConfig+0x2c8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d126      	bne.n	80050b8 <UART_SetConfig+0xd8>
 800506a:	4b90      	ldr	r3, [pc, #576]	@ (80052ac <UART_SetConfig+0x2cc>)
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f003 0303 	and.w	r3, r3, #3
 8005074:	2b03      	cmp	r3, #3
 8005076:	d81b      	bhi.n	80050b0 <UART_SetConfig+0xd0>
 8005078:	a201      	add	r2, pc, #4	@ (adr r2, 8005080 <UART_SetConfig+0xa0>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	08005091 	.word	0x08005091
 8005084:	080050a1 	.word	0x080050a1
 8005088:	08005099 	.word	0x08005099
 800508c:	080050a9 	.word	0x080050a9
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005096:	e116      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005098:	2302      	movs	r3, #2
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509e:	e112      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80050a0:	2304      	movs	r3, #4
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e10e      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80050a8:	2308      	movs	r3, #8
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e10a      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80050b0:	2310      	movs	r3, #16
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e106      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a7c      	ldr	r2, [pc, #496]	@ (80052b0 <UART_SetConfig+0x2d0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d138      	bne.n	8005134 <UART_SetConfig+0x154>
 80050c2:	4b7a      	ldr	r3, [pc, #488]	@ (80052ac <UART_SetConfig+0x2cc>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c8:	f003 030c 	and.w	r3, r3, #12
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	d82d      	bhi.n	800512c <UART_SetConfig+0x14c>
 80050d0:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <UART_SetConfig+0xf8>)
 80050d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d6:	bf00      	nop
 80050d8:	0800510d 	.word	0x0800510d
 80050dc:	0800512d 	.word	0x0800512d
 80050e0:	0800512d 	.word	0x0800512d
 80050e4:	0800512d 	.word	0x0800512d
 80050e8:	0800511d 	.word	0x0800511d
 80050ec:	0800512d 	.word	0x0800512d
 80050f0:	0800512d 	.word	0x0800512d
 80050f4:	0800512d 	.word	0x0800512d
 80050f8:	08005115 	.word	0x08005115
 80050fc:	0800512d 	.word	0x0800512d
 8005100:	0800512d 	.word	0x0800512d
 8005104:	0800512d 	.word	0x0800512d
 8005108:	08005125 	.word	0x08005125
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005112:	e0d8      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005114:	2302      	movs	r3, #2
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511a:	e0d4      	b.n	80052c6 <UART_SetConfig+0x2e6>
 800511c:	2304      	movs	r3, #4
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005122:	e0d0      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005124:	2308      	movs	r3, #8
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512a:	e0cc      	b.n	80052c6 <UART_SetConfig+0x2e6>
 800512c:	2310      	movs	r3, #16
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005132:	e0c8      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a5e      	ldr	r2, [pc, #376]	@ (80052b4 <UART_SetConfig+0x2d4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d125      	bne.n	800518a <UART_SetConfig+0x1aa>
 800513e:	4b5b      	ldr	r3, [pc, #364]	@ (80052ac <UART_SetConfig+0x2cc>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005144:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005148:	2b30      	cmp	r3, #48	@ 0x30
 800514a:	d016      	beq.n	800517a <UART_SetConfig+0x19a>
 800514c:	2b30      	cmp	r3, #48	@ 0x30
 800514e:	d818      	bhi.n	8005182 <UART_SetConfig+0x1a2>
 8005150:	2b20      	cmp	r3, #32
 8005152:	d00a      	beq.n	800516a <UART_SetConfig+0x18a>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d814      	bhi.n	8005182 <UART_SetConfig+0x1a2>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <UART_SetConfig+0x182>
 800515c:	2b10      	cmp	r3, #16
 800515e:	d008      	beq.n	8005172 <UART_SetConfig+0x192>
 8005160:	e00f      	b.n	8005182 <UART_SetConfig+0x1a2>
 8005162:	2300      	movs	r3, #0
 8005164:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005168:	e0ad      	b.n	80052c6 <UART_SetConfig+0x2e6>
 800516a:	2302      	movs	r3, #2
 800516c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005170:	e0a9      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005172:	2304      	movs	r3, #4
 8005174:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005178:	e0a5      	b.n	80052c6 <UART_SetConfig+0x2e6>
 800517a:	2308      	movs	r3, #8
 800517c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005180:	e0a1      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005182:	2310      	movs	r3, #16
 8005184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005188:	e09d      	b.n	80052c6 <UART_SetConfig+0x2e6>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a4a      	ldr	r2, [pc, #296]	@ (80052b8 <UART_SetConfig+0x2d8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d125      	bne.n	80051e0 <UART_SetConfig+0x200>
 8005194:	4b45      	ldr	r3, [pc, #276]	@ (80052ac <UART_SetConfig+0x2cc>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800519e:	2bc0      	cmp	r3, #192	@ 0xc0
 80051a0:	d016      	beq.n	80051d0 <UART_SetConfig+0x1f0>
 80051a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051a4:	d818      	bhi.n	80051d8 <UART_SetConfig+0x1f8>
 80051a6:	2b80      	cmp	r3, #128	@ 0x80
 80051a8:	d00a      	beq.n	80051c0 <UART_SetConfig+0x1e0>
 80051aa:	2b80      	cmp	r3, #128	@ 0x80
 80051ac:	d814      	bhi.n	80051d8 <UART_SetConfig+0x1f8>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <UART_SetConfig+0x1d8>
 80051b2:	2b40      	cmp	r3, #64	@ 0x40
 80051b4:	d008      	beq.n	80051c8 <UART_SetConfig+0x1e8>
 80051b6:	e00f      	b.n	80051d8 <UART_SetConfig+0x1f8>
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051be:	e082      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80051c0:	2302      	movs	r3, #2
 80051c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c6:	e07e      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80051c8:	2304      	movs	r3, #4
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ce:	e07a      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80051d0:	2308      	movs	r3, #8
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d6:	e076      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80051d8:	2310      	movs	r3, #16
 80051da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051de:	e072      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a35      	ldr	r2, [pc, #212]	@ (80052bc <UART_SetConfig+0x2dc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d12a      	bne.n	8005240 <UART_SetConfig+0x260>
 80051ea:	4b30      	ldr	r3, [pc, #192]	@ (80052ac <UART_SetConfig+0x2cc>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051f8:	d01a      	beq.n	8005230 <UART_SetConfig+0x250>
 80051fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051fe:	d81b      	bhi.n	8005238 <UART_SetConfig+0x258>
 8005200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005204:	d00c      	beq.n	8005220 <UART_SetConfig+0x240>
 8005206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520a:	d815      	bhi.n	8005238 <UART_SetConfig+0x258>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <UART_SetConfig+0x238>
 8005210:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005214:	d008      	beq.n	8005228 <UART_SetConfig+0x248>
 8005216:	e00f      	b.n	8005238 <UART_SetConfig+0x258>
 8005218:	2300      	movs	r3, #0
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800521e:	e052      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005220:	2302      	movs	r3, #2
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005226:	e04e      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005228:	2304      	movs	r3, #4
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522e:	e04a      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005230:	2308      	movs	r3, #8
 8005232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005236:	e046      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005238:	2310      	movs	r3, #16
 800523a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800523e:	e042      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a17      	ldr	r2, [pc, #92]	@ (80052a4 <UART_SetConfig+0x2c4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d13a      	bne.n	80052c0 <UART_SetConfig+0x2e0>
 800524a:	4b18      	ldr	r3, [pc, #96]	@ (80052ac <UART_SetConfig+0x2cc>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005250:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005254:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005258:	d01a      	beq.n	8005290 <UART_SetConfig+0x2b0>
 800525a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800525e:	d81b      	bhi.n	8005298 <UART_SetConfig+0x2b8>
 8005260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005264:	d00c      	beq.n	8005280 <UART_SetConfig+0x2a0>
 8005266:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800526a:	d815      	bhi.n	8005298 <UART_SetConfig+0x2b8>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <UART_SetConfig+0x298>
 8005270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005274:	d008      	beq.n	8005288 <UART_SetConfig+0x2a8>
 8005276:	e00f      	b.n	8005298 <UART_SetConfig+0x2b8>
 8005278:	2300      	movs	r3, #0
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527e:	e022      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005280:	2302      	movs	r3, #2
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005286:	e01e      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005288:	2304      	movs	r3, #4
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528e:	e01a      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005290:	2308      	movs	r3, #8
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005296:	e016      	b.n	80052c6 <UART_SetConfig+0x2e6>
 8005298:	2310      	movs	r3, #16
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529e:	e012      	b.n	80052c6 <UART_SetConfig+0x2e6>
 80052a0:	efff69f3 	.word	0xefff69f3
 80052a4:	40008000 	.word	0x40008000
 80052a8:	40013800 	.word	0x40013800
 80052ac:	40021000 	.word	0x40021000
 80052b0:	40004400 	.word	0x40004400
 80052b4:	40004800 	.word	0x40004800
 80052b8:	40004c00 	.word	0x40004c00
 80052bc:	40005000 	.word	0x40005000
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a9f      	ldr	r2, [pc, #636]	@ (8005548 <UART_SetConfig+0x568>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d17a      	bne.n	80053c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d824      	bhi.n	8005322 <UART_SetConfig+0x342>
 80052d8:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <UART_SetConfig+0x300>)
 80052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052de:	bf00      	nop
 80052e0:	08005305 	.word	0x08005305
 80052e4:	08005323 	.word	0x08005323
 80052e8:	0800530d 	.word	0x0800530d
 80052ec:	08005323 	.word	0x08005323
 80052f0:	08005313 	.word	0x08005313
 80052f4:	08005323 	.word	0x08005323
 80052f8:	08005323 	.word	0x08005323
 80052fc:	08005323 	.word	0x08005323
 8005300:	0800531b 	.word	0x0800531b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005304:	f7fd ff24 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8005308:	61f8      	str	r0, [r7, #28]
        break;
 800530a:	e010      	b.n	800532e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800530c:	4b8f      	ldr	r3, [pc, #572]	@ (800554c <UART_SetConfig+0x56c>)
 800530e:	61fb      	str	r3, [r7, #28]
        break;
 8005310:	e00d      	b.n	800532e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005312:	f7fd fe85 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8005316:	61f8      	str	r0, [r7, #28]
        break;
 8005318:	e009      	b.n	800532e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800531a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800531e:	61fb      	str	r3, [r7, #28]
        break;
 8005320:	e005      	b.n	800532e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800532c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80fb 	beq.w	800552c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	429a      	cmp	r2, r3
 8005344:	d305      	bcc.n	8005352 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	429a      	cmp	r2, r3
 8005350:	d903      	bls.n	800535a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005358:	e0e8      	b.n	800552c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2200      	movs	r2, #0
 800535e:	461c      	mov	r4, r3
 8005360:	4615      	mov	r5, r2
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	022b      	lsls	r3, r5, #8
 800536c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005370:	0222      	lsls	r2, r4, #8
 8005372:	68f9      	ldr	r1, [r7, #12]
 8005374:	6849      	ldr	r1, [r1, #4]
 8005376:	0849      	lsrs	r1, r1, #1
 8005378:	2000      	movs	r0, #0
 800537a:	4688      	mov	r8, r1
 800537c:	4681      	mov	r9, r0
 800537e:	eb12 0a08 	adds.w	sl, r2, r8
 8005382:	eb43 0b09 	adc.w	fp, r3, r9
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005394:	4650      	mov	r0, sl
 8005396:	4659      	mov	r1, fp
 8005398:	f7fa ff6a 	bl	8000270 <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4613      	mov	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053aa:	d308      	bcc.n	80053be <UART_SetConfig+0x3de>
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053b2:	d204      	bcs.n	80053be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	60da      	str	r2, [r3, #12]
 80053bc:	e0b6      	b.n	800552c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053c4:	e0b2      	b.n	800552c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053ce:	d15e      	bne.n	800548e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d828      	bhi.n	800542a <UART_SetConfig+0x44a>
 80053d8:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <UART_SetConfig+0x400>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	08005405 	.word	0x08005405
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	08005415 	.word	0x08005415
 80053ec:	0800542b 	.word	0x0800542b
 80053f0:	0800541b 	.word	0x0800541b
 80053f4:	0800542b 	.word	0x0800542b
 80053f8:	0800542b 	.word	0x0800542b
 80053fc:	0800542b 	.word	0x0800542b
 8005400:	08005423 	.word	0x08005423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005404:	f7fd fea4 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8005408:	61f8      	str	r0, [r7, #28]
        break;
 800540a:	e014      	b.n	8005436 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800540c:	f7fd feb6 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 8005410:	61f8      	str	r0, [r7, #28]
        break;
 8005412:	e010      	b.n	8005436 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005414:	4b4d      	ldr	r3, [pc, #308]	@ (800554c <UART_SetConfig+0x56c>)
 8005416:	61fb      	str	r3, [r7, #28]
        break;
 8005418:	e00d      	b.n	8005436 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800541a:	f7fd fe01 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 800541e:	61f8      	str	r0, [r7, #28]
        break;
 8005420:	e009      	b.n	8005436 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005426:	61fb      	str	r3, [r7, #28]
        break;
 8005428:	e005      	b.n	8005436 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d077      	beq.n	800552c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	005a      	lsls	r2, r3, #1
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2b0f      	cmp	r3, #15
 8005456:	d916      	bls.n	8005486 <UART_SetConfig+0x4a6>
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545e:	d212      	bcs.n	8005486 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	b29b      	uxth	r3, r3
 8005464:	f023 030f 	bic.w	r3, r3, #15
 8005468:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	b29b      	uxth	r3, r3
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	b29a      	uxth	r2, r3
 8005476:	8afb      	ldrh	r3, [r7, #22]
 8005478:	4313      	orrs	r3, r2
 800547a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	8afa      	ldrh	r2, [r7, #22]
 8005482:	60da      	str	r2, [r3, #12]
 8005484:	e052      	b.n	800552c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800548c:	e04e      	b.n	800552c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800548e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005492:	2b08      	cmp	r3, #8
 8005494:	d827      	bhi.n	80054e6 <UART_SetConfig+0x506>
 8005496:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <UART_SetConfig+0x4bc>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054c9 	.word	0x080054c9
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	080054e7 	.word	0x080054e7
 80054ac:	080054d7 	.word	0x080054d7
 80054b0:	080054e7 	.word	0x080054e7
 80054b4:	080054e7 	.word	0x080054e7
 80054b8:	080054e7 	.word	0x080054e7
 80054bc:	080054df 	.word	0x080054df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c0:	f7fd fe46 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 80054c4:	61f8      	str	r0, [r7, #28]
        break;
 80054c6:	e014      	b.n	80054f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054c8:	f7fd fe58 	bl	800317c <HAL_RCC_GetPCLK2Freq>
 80054cc:	61f8      	str	r0, [r7, #28]
        break;
 80054ce:	e010      	b.n	80054f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d0:	4b1e      	ldr	r3, [pc, #120]	@ (800554c <UART_SetConfig+0x56c>)
 80054d2:	61fb      	str	r3, [r7, #28]
        break;
 80054d4:	e00d      	b.n	80054f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054d6:	f7fd fda3 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 80054da:	61f8      	str	r0, [r7, #28]
        break;
 80054dc:	e009      	b.n	80054f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054e2:	61fb      	str	r3, [r7, #28]
        break;
 80054e4:	e005      	b.n	80054f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054f0:	bf00      	nop
    }

    if (pclk != 0U)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d019      	beq.n	800552c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	085a      	lsrs	r2, r3, #1
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	441a      	add	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	fbb2 f3f3 	udiv	r3, r2, r3
 800550a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b0f      	cmp	r3, #15
 8005510:	d909      	bls.n	8005526 <UART_SetConfig+0x546>
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005518:	d205      	bcs.n	8005526 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	e002      	b.n	800552c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005538:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800553c:	4618      	mov	r0, r3
 800553e:	3728      	adds	r7, #40	@ 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005546:	bf00      	nop
 8005548:	40008000 	.word	0x40008000
 800554c:	00f42400 	.word	0x00f42400

08005550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01a      	beq.n	8005666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800564e:	d10a      	bne.n	8005666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	605a      	str	r2, [r3, #4]
  }
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b098      	sub	sp, #96	@ 0x60
 8005698:	af02      	add	r7, sp, #8
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056a4:	f7fc f804 	bl	80016b0 <HAL_GetTick>
 80056a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d12e      	bne.n	8005716 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c0:	2200      	movs	r2, #0
 80056c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f88c 	bl	80057e4 <UART_WaitOnFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d021      	beq.n	8005716 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056da:	e853 3f00 	ldrex	r3, [r3]
 80056de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056f8:	e841 2300 	strex	r3, r2, [r1]
 80056fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1e6      	bne.n	80056d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e062      	b.n	80057dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b04      	cmp	r3, #4
 8005722:	d149      	bne.n	80057b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005724:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800572c:	2200      	movs	r2, #0
 800572e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f856 	bl	80057e4 <UART_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d03c      	beq.n	80057b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	623b      	str	r3, [r7, #32]
   return(result);
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005752:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800575c:	633b      	str	r3, [r7, #48]	@ 0x30
 800575e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e6      	bne.n	800573e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3308      	adds	r3, #8
 8005776:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3308      	adds	r3, #8
 800578e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005790:	61fa      	str	r2, [r7, #28]
 8005792:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	69b9      	ldr	r1, [r7, #24]
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	617b      	str	r3, [r7, #20]
   return(result);
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e5      	bne.n	8005770 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e011      	b.n	80057dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3758      	adds	r7, #88	@ 0x58
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	4613      	mov	r3, r2
 80057f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f4:	e04f      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057fc:	d04b      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fe:	f7fb ff57 	bl	80016b0 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	429a      	cmp	r2, r3
 800580c:	d302      	bcc.n	8005814 <UART_WaitOnFlagUntilTimeout+0x30>
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e04e      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b00      	cmp	r3, #0
 8005824:	d037      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b80      	cmp	r3, #128	@ 0x80
 800582a:	d034      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb2>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b40      	cmp	r3, #64	@ 0x40
 8005830:	d031      	beq.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b08      	cmp	r3, #8
 800583e:	d110      	bne.n	8005862 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2208      	movs	r2, #8
 8005846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f838 	bl	80058be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2208      	movs	r2, #8
 8005852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e029      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800586c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005870:	d111      	bne.n	8005896 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800587a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f81e 	bl	80058be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2220      	movs	r2, #32
 8005886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e00f      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	bf0c      	ite	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	2300      	movne	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d0a0      	beq.n	80057f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058be:	b480      	push	{r7}
 80058c0:	b095      	sub	sp, #84	@ 0x54
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80058e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e6      	bne.n	80058c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	61fb      	str	r3, [r7, #28]
   return(result);
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005918:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800591a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800591e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e5      	bne.n	80058f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005930:	2b01      	cmp	r3, #1
 8005932:	d118      	bne.n	8005966 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	60bb      	str	r3, [r7, #8]
   return(result);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 0310 	bic.w	r3, r3, #16
 8005948:	647b      	str	r3, [r7, #68]	@ 0x44
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e6      	bne.n	8005934 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800597a:	bf00      	nop
 800597c:	3754      	adds	r7, #84	@ 0x54
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
	...

08005988 <std>:
 8005988:	2300      	movs	r3, #0
 800598a:	b510      	push	{r4, lr}
 800598c:	4604      	mov	r4, r0
 800598e:	e9c0 3300 	strd	r3, r3, [r0]
 8005992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005996:	6083      	str	r3, [r0, #8]
 8005998:	8181      	strh	r1, [r0, #12]
 800599a:	6643      	str	r3, [r0, #100]	@ 0x64
 800599c:	81c2      	strh	r2, [r0, #14]
 800599e:	6183      	str	r3, [r0, #24]
 80059a0:	4619      	mov	r1, r3
 80059a2:	2208      	movs	r2, #8
 80059a4:	305c      	adds	r0, #92	@ 0x5c
 80059a6:	f000 f9f9 	bl	8005d9c <memset>
 80059aa:	4b0d      	ldr	r3, [pc, #52]	@ (80059e0 <std+0x58>)
 80059ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80059ae:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <std+0x5c>)
 80059b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059b2:	4b0d      	ldr	r3, [pc, #52]	@ (80059e8 <std+0x60>)
 80059b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <std+0x64>)
 80059b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <std+0x68>)
 80059bc:	6224      	str	r4, [r4, #32]
 80059be:	429c      	cmp	r4, r3
 80059c0:	d006      	beq.n	80059d0 <std+0x48>
 80059c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059c6:	4294      	cmp	r4, r2
 80059c8:	d002      	beq.n	80059d0 <std+0x48>
 80059ca:	33d0      	adds	r3, #208	@ 0xd0
 80059cc:	429c      	cmp	r4, r3
 80059ce:	d105      	bne.n	80059dc <std+0x54>
 80059d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d8:	f000 ba58 	b.w	8005e8c <__retarget_lock_init_recursive>
 80059dc:	bd10      	pop	{r4, pc}
 80059de:	bf00      	nop
 80059e0:	08005bed 	.word	0x08005bed
 80059e4:	08005c0f 	.word	0x08005c0f
 80059e8:	08005c47 	.word	0x08005c47
 80059ec:	08005c6b 	.word	0x08005c6b
 80059f0:	20000518 	.word	0x20000518

080059f4 <stdio_exit_handler>:
 80059f4:	4a02      	ldr	r2, [pc, #8]	@ (8005a00 <stdio_exit_handler+0xc>)
 80059f6:	4903      	ldr	r1, [pc, #12]	@ (8005a04 <stdio_exit_handler+0x10>)
 80059f8:	4803      	ldr	r0, [pc, #12]	@ (8005a08 <stdio_exit_handler+0x14>)
 80059fa:	f000 b869 	b.w	8005ad0 <_fwalk_sglue>
 80059fe:	bf00      	nop
 8005a00:	2000000c 	.word	0x2000000c
 8005a04:	0800672d 	.word	0x0800672d
 8005a08:	2000001c 	.word	0x2000001c

08005a0c <cleanup_stdio>:
 8005a0c:	6841      	ldr	r1, [r0, #4]
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <cleanup_stdio+0x34>)
 8005a10:	4299      	cmp	r1, r3
 8005a12:	b510      	push	{r4, lr}
 8005a14:	4604      	mov	r4, r0
 8005a16:	d001      	beq.n	8005a1c <cleanup_stdio+0x10>
 8005a18:	f000 fe88 	bl	800672c <_fflush_r>
 8005a1c:	68a1      	ldr	r1, [r4, #8]
 8005a1e:	4b09      	ldr	r3, [pc, #36]	@ (8005a44 <cleanup_stdio+0x38>)
 8005a20:	4299      	cmp	r1, r3
 8005a22:	d002      	beq.n	8005a2a <cleanup_stdio+0x1e>
 8005a24:	4620      	mov	r0, r4
 8005a26:	f000 fe81 	bl	800672c <_fflush_r>
 8005a2a:	68e1      	ldr	r1, [r4, #12]
 8005a2c:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <cleanup_stdio+0x3c>)
 8005a2e:	4299      	cmp	r1, r3
 8005a30:	d004      	beq.n	8005a3c <cleanup_stdio+0x30>
 8005a32:	4620      	mov	r0, r4
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a38:	f000 be78 	b.w	800672c <_fflush_r>
 8005a3c:	bd10      	pop	{r4, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000518 	.word	0x20000518
 8005a44:	20000580 	.word	0x20000580
 8005a48:	200005e8 	.word	0x200005e8

08005a4c <global_stdio_init.part.0>:
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <global_stdio_init.part.0+0x30>)
 8005a50:	4c0b      	ldr	r4, [pc, #44]	@ (8005a80 <global_stdio_init.part.0+0x34>)
 8005a52:	4a0c      	ldr	r2, [pc, #48]	@ (8005a84 <global_stdio_init.part.0+0x38>)
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	4620      	mov	r0, r4
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	f7ff ff94 	bl	8005988 <std>
 8005a60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a64:	2201      	movs	r2, #1
 8005a66:	2109      	movs	r1, #9
 8005a68:	f7ff ff8e 	bl	8005988 <std>
 8005a6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a70:	2202      	movs	r2, #2
 8005a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a76:	2112      	movs	r1, #18
 8005a78:	f7ff bf86 	b.w	8005988 <std>
 8005a7c:	20000650 	.word	0x20000650
 8005a80:	20000518 	.word	0x20000518
 8005a84:	080059f5 	.word	0x080059f5

08005a88 <__sfp_lock_acquire>:
 8005a88:	4801      	ldr	r0, [pc, #4]	@ (8005a90 <__sfp_lock_acquire+0x8>)
 8005a8a:	f000 ba00 	b.w	8005e8e <__retarget_lock_acquire_recursive>
 8005a8e:	bf00      	nop
 8005a90:	20000659 	.word	0x20000659

08005a94 <__sfp_lock_release>:
 8005a94:	4801      	ldr	r0, [pc, #4]	@ (8005a9c <__sfp_lock_release+0x8>)
 8005a96:	f000 b9fb 	b.w	8005e90 <__retarget_lock_release_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	20000659 	.word	0x20000659

08005aa0 <__sinit>:
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	f7ff fff0 	bl	8005a88 <__sfp_lock_acquire>
 8005aa8:	6a23      	ldr	r3, [r4, #32]
 8005aaa:	b11b      	cbz	r3, 8005ab4 <__sinit+0x14>
 8005aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab0:	f7ff bff0 	b.w	8005a94 <__sfp_lock_release>
 8005ab4:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <__sinit+0x28>)
 8005ab6:	6223      	str	r3, [r4, #32]
 8005ab8:	4b04      	ldr	r3, [pc, #16]	@ (8005acc <__sinit+0x2c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1f5      	bne.n	8005aac <__sinit+0xc>
 8005ac0:	f7ff ffc4 	bl	8005a4c <global_stdio_init.part.0>
 8005ac4:	e7f2      	b.n	8005aac <__sinit+0xc>
 8005ac6:	bf00      	nop
 8005ac8:	08005a0d 	.word	0x08005a0d
 8005acc:	20000650 	.word	0x20000650

08005ad0 <_fwalk_sglue>:
 8005ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad4:	4607      	mov	r7, r0
 8005ad6:	4688      	mov	r8, r1
 8005ad8:	4614      	mov	r4, r2
 8005ada:	2600      	movs	r6, #0
 8005adc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ae0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ae4:	d505      	bpl.n	8005af2 <_fwalk_sglue+0x22>
 8005ae6:	6824      	ldr	r4, [r4, #0]
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d1f7      	bne.n	8005adc <_fwalk_sglue+0xc>
 8005aec:	4630      	mov	r0, r6
 8005aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d907      	bls.n	8005b08 <_fwalk_sglue+0x38>
 8005af8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005afc:	3301      	adds	r3, #1
 8005afe:	d003      	beq.n	8005b08 <_fwalk_sglue+0x38>
 8005b00:	4629      	mov	r1, r5
 8005b02:	4638      	mov	r0, r7
 8005b04:	47c0      	blx	r8
 8005b06:	4306      	orrs	r6, r0
 8005b08:	3568      	adds	r5, #104	@ 0x68
 8005b0a:	e7e9      	b.n	8005ae0 <_fwalk_sglue+0x10>

08005b0c <iprintf>:
 8005b0c:	b40f      	push	{r0, r1, r2, r3}
 8005b0e:	b507      	push	{r0, r1, r2, lr}
 8005b10:	4906      	ldr	r1, [pc, #24]	@ (8005b2c <iprintf+0x20>)
 8005b12:	ab04      	add	r3, sp, #16
 8005b14:	6808      	ldr	r0, [r1, #0]
 8005b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b1a:	6881      	ldr	r1, [r0, #8]
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	f000 fadb 	bl	80060d8 <_vfiprintf_r>
 8005b22:	b003      	add	sp, #12
 8005b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b28:	b004      	add	sp, #16
 8005b2a:	4770      	bx	lr
 8005b2c:	20000018 	.word	0x20000018

08005b30 <_puts_r>:
 8005b30:	6a03      	ldr	r3, [r0, #32]
 8005b32:	b570      	push	{r4, r5, r6, lr}
 8005b34:	6884      	ldr	r4, [r0, #8]
 8005b36:	4605      	mov	r5, r0
 8005b38:	460e      	mov	r6, r1
 8005b3a:	b90b      	cbnz	r3, 8005b40 <_puts_r+0x10>
 8005b3c:	f7ff ffb0 	bl	8005aa0 <__sinit>
 8005b40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b42:	07db      	lsls	r3, r3, #31
 8005b44:	d405      	bmi.n	8005b52 <_puts_r+0x22>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	0598      	lsls	r0, r3, #22
 8005b4a:	d402      	bmi.n	8005b52 <_puts_r+0x22>
 8005b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b4e:	f000 f99e 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	0719      	lsls	r1, r3, #28
 8005b56:	d502      	bpl.n	8005b5e <_puts_r+0x2e>
 8005b58:	6923      	ldr	r3, [r4, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d135      	bne.n	8005bca <_puts_r+0x9a>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	f000 f8c5 	bl	8005cf0 <__swsetup_r>
 8005b66:	b380      	cbz	r0, 8005bca <_puts_r+0x9a>
 8005b68:	f04f 35ff 	mov.w	r5, #4294967295
 8005b6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b6e:	07da      	lsls	r2, r3, #31
 8005b70:	d405      	bmi.n	8005b7e <_puts_r+0x4e>
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	059b      	lsls	r3, r3, #22
 8005b76:	d402      	bmi.n	8005b7e <_puts_r+0x4e>
 8005b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b7a:	f000 f989 	bl	8005e90 <__retarget_lock_release_recursive>
 8005b7e:	4628      	mov	r0, r5
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	da04      	bge.n	8005b90 <_puts_r+0x60>
 8005b86:	69a2      	ldr	r2, [r4, #24]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	dc17      	bgt.n	8005bbc <_puts_r+0x8c>
 8005b8c:	290a      	cmp	r1, #10
 8005b8e:	d015      	beq.n	8005bbc <_puts_r+0x8c>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	7019      	strb	r1, [r3, #0]
 8005b98:	68a3      	ldr	r3, [r4, #8]
 8005b9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	60a3      	str	r3, [r4, #8]
 8005ba2:	2900      	cmp	r1, #0
 8005ba4:	d1ed      	bne.n	8005b82 <_puts_r+0x52>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	da11      	bge.n	8005bce <_puts_r+0x9e>
 8005baa:	4622      	mov	r2, r4
 8005bac:	210a      	movs	r1, #10
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 f85f 	bl	8005c72 <__swbuf_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d0d7      	beq.n	8005b68 <_puts_r+0x38>
 8005bb8:	250a      	movs	r5, #10
 8005bba:	e7d7      	b.n	8005b6c <_puts_r+0x3c>
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f000 f857 	bl	8005c72 <__swbuf_r>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d1e7      	bne.n	8005b98 <_puts_r+0x68>
 8005bc8:	e7ce      	b.n	8005b68 <_puts_r+0x38>
 8005bca:	3e01      	subs	r6, #1
 8005bcc:	e7e4      	b.n	8005b98 <_puts_r+0x68>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	220a      	movs	r2, #10
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	e7ee      	b.n	8005bb8 <_puts_r+0x88>
	...

08005bdc <puts>:
 8005bdc:	4b02      	ldr	r3, [pc, #8]	@ (8005be8 <puts+0xc>)
 8005bde:	4601      	mov	r1, r0
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	f7ff bfa5 	b.w	8005b30 <_puts_r>
 8005be6:	bf00      	nop
 8005be8:	20000018 	.word	0x20000018

08005bec <__sread>:
 8005bec:	b510      	push	{r4, lr}
 8005bee:	460c      	mov	r4, r1
 8005bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf4:	f000 f8fc 	bl	8005df0 <_read_r>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	bfab      	itete	ge
 8005bfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8005c00:	181b      	addge	r3, r3, r0
 8005c02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c06:	bfac      	ite	ge
 8005c08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c0a:	81a3      	strhlt	r3, [r4, #12]
 8005c0c:	bd10      	pop	{r4, pc}

08005c0e <__swrite>:
 8005c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c12:	461f      	mov	r7, r3
 8005c14:	898b      	ldrh	r3, [r1, #12]
 8005c16:	05db      	lsls	r3, r3, #23
 8005c18:	4605      	mov	r5, r0
 8005c1a:	460c      	mov	r4, r1
 8005c1c:	4616      	mov	r6, r2
 8005c1e:	d505      	bpl.n	8005c2c <__swrite+0x1e>
 8005c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c24:	2302      	movs	r3, #2
 8005c26:	2200      	movs	r2, #0
 8005c28:	f000 f8d0 	bl	8005dcc <_lseek_r>
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c36:	81a3      	strh	r3, [r4, #12]
 8005c38:	4632      	mov	r2, r6
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c42:	f000 b8e7 	b.w	8005e14 <_write_r>

08005c46 <__sseek>:
 8005c46:	b510      	push	{r4, lr}
 8005c48:	460c      	mov	r4, r1
 8005c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4e:	f000 f8bd 	bl	8005dcc <_lseek_r>
 8005c52:	1c43      	adds	r3, r0, #1
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	bf15      	itete	ne
 8005c58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c62:	81a3      	strheq	r3, [r4, #12]
 8005c64:	bf18      	it	ne
 8005c66:	81a3      	strhne	r3, [r4, #12]
 8005c68:	bd10      	pop	{r4, pc}

08005c6a <__sclose>:
 8005c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6e:	f000 b89d 	b.w	8005dac <_close_r>

08005c72 <__swbuf_r>:
 8005c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c74:	460e      	mov	r6, r1
 8005c76:	4614      	mov	r4, r2
 8005c78:	4605      	mov	r5, r0
 8005c7a:	b118      	cbz	r0, 8005c84 <__swbuf_r+0x12>
 8005c7c:	6a03      	ldr	r3, [r0, #32]
 8005c7e:	b90b      	cbnz	r3, 8005c84 <__swbuf_r+0x12>
 8005c80:	f7ff ff0e 	bl	8005aa0 <__sinit>
 8005c84:	69a3      	ldr	r3, [r4, #24]
 8005c86:	60a3      	str	r3, [r4, #8]
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	071a      	lsls	r2, r3, #28
 8005c8c:	d501      	bpl.n	8005c92 <__swbuf_r+0x20>
 8005c8e:	6923      	ldr	r3, [r4, #16]
 8005c90:	b943      	cbnz	r3, 8005ca4 <__swbuf_r+0x32>
 8005c92:	4621      	mov	r1, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 f82b 	bl	8005cf0 <__swsetup_r>
 8005c9a:	b118      	cbz	r0, 8005ca4 <__swbuf_r+0x32>
 8005c9c:	f04f 37ff 	mov.w	r7, #4294967295
 8005ca0:	4638      	mov	r0, r7
 8005ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	6922      	ldr	r2, [r4, #16]
 8005ca8:	1a98      	subs	r0, r3, r2
 8005caa:	6963      	ldr	r3, [r4, #20]
 8005cac:	b2f6      	uxtb	r6, r6
 8005cae:	4283      	cmp	r3, r0
 8005cb0:	4637      	mov	r7, r6
 8005cb2:	dc05      	bgt.n	8005cc0 <__swbuf_r+0x4e>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 fd38 	bl	800672c <_fflush_r>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d1ed      	bne.n	8005c9c <__swbuf_r+0x2a>
 8005cc0:	68a3      	ldr	r3, [r4, #8]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	60a3      	str	r3, [r4, #8]
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	6022      	str	r2, [r4, #0]
 8005ccc:	701e      	strb	r6, [r3, #0]
 8005cce:	6962      	ldr	r2, [r4, #20]
 8005cd0:	1c43      	adds	r3, r0, #1
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d004      	beq.n	8005ce0 <__swbuf_r+0x6e>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	07db      	lsls	r3, r3, #31
 8005cda:	d5e1      	bpl.n	8005ca0 <__swbuf_r+0x2e>
 8005cdc:	2e0a      	cmp	r6, #10
 8005cde:	d1df      	bne.n	8005ca0 <__swbuf_r+0x2e>
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fd22 	bl	800672c <_fflush_r>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d0d9      	beq.n	8005ca0 <__swbuf_r+0x2e>
 8005cec:	e7d6      	b.n	8005c9c <__swbuf_r+0x2a>
	...

08005cf0 <__swsetup_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4b29      	ldr	r3, [pc, #164]	@ (8005d98 <__swsetup_r+0xa8>)
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	b118      	cbz	r0, 8005d04 <__swsetup_r+0x14>
 8005cfc:	6a03      	ldr	r3, [r0, #32]
 8005cfe:	b90b      	cbnz	r3, 8005d04 <__swsetup_r+0x14>
 8005d00:	f7ff fece 	bl	8005aa0 <__sinit>
 8005d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d08:	0719      	lsls	r1, r3, #28
 8005d0a:	d422      	bmi.n	8005d52 <__swsetup_r+0x62>
 8005d0c:	06da      	lsls	r2, r3, #27
 8005d0e:	d407      	bmi.n	8005d20 <__swsetup_r+0x30>
 8005d10:	2209      	movs	r2, #9
 8005d12:	602a      	str	r2, [r5, #0]
 8005d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1e:	e033      	b.n	8005d88 <__swsetup_r+0x98>
 8005d20:	0758      	lsls	r0, r3, #29
 8005d22:	d512      	bpl.n	8005d4a <__swsetup_r+0x5a>
 8005d24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d26:	b141      	cbz	r1, 8005d3a <__swsetup_r+0x4a>
 8005d28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d2c:	4299      	cmp	r1, r3
 8005d2e:	d002      	beq.n	8005d36 <__swsetup_r+0x46>
 8005d30:	4628      	mov	r0, r5
 8005d32:	f000 f8af 	bl	8005e94 <_free_r>
 8005d36:	2300      	movs	r3, #0
 8005d38:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	2300      	movs	r3, #0
 8005d44:	6063      	str	r3, [r4, #4]
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	89a3      	ldrh	r3, [r4, #12]
 8005d4c:	f043 0308 	orr.w	r3, r3, #8
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	6923      	ldr	r3, [r4, #16]
 8005d54:	b94b      	cbnz	r3, 8005d6a <__swsetup_r+0x7a>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d60:	d003      	beq.n	8005d6a <__swsetup_r+0x7a>
 8005d62:	4621      	mov	r1, r4
 8005d64:	4628      	mov	r0, r5
 8005d66:	f000 fd2f 	bl	80067c8 <__smakebuf_r>
 8005d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d6e:	f013 0201 	ands.w	r2, r3, #1
 8005d72:	d00a      	beq.n	8005d8a <__swsetup_r+0x9a>
 8005d74:	2200      	movs	r2, #0
 8005d76:	60a2      	str	r2, [r4, #8]
 8005d78:	6962      	ldr	r2, [r4, #20]
 8005d7a:	4252      	negs	r2, r2
 8005d7c:	61a2      	str	r2, [r4, #24]
 8005d7e:	6922      	ldr	r2, [r4, #16]
 8005d80:	b942      	cbnz	r2, 8005d94 <__swsetup_r+0xa4>
 8005d82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d86:	d1c5      	bne.n	8005d14 <__swsetup_r+0x24>
 8005d88:	bd38      	pop	{r3, r4, r5, pc}
 8005d8a:	0799      	lsls	r1, r3, #30
 8005d8c:	bf58      	it	pl
 8005d8e:	6962      	ldrpl	r2, [r4, #20]
 8005d90:	60a2      	str	r2, [r4, #8]
 8005d92:	e7f4      	b.n	8005d7e <__swsetup_r+0x8e>
 8005d94:	2000      	movs	r0, #0
 8005d96:	e7f7      	b.n	8005d88 <__swsetup_r+0x98>
 8005d98:	20000018 	.word	0x20000018

08005d9c <memset>:
 8005d9c:	4402      	add	r2, r0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d100      	bne.n	8005da6 <memset+0xa>
 8005da4:	4770      	bx	lr
 8005da6:	f803 1b01 	strb.w	r1, [r3], #1
 8005daa:	e7f9      	b.n	8005da0 <memset+0x4>

08005dac <_close_r>:
 8005dac:	b538      	push	{r3, r4, r5, lr}
 8005dae:	4d06      	ldr	r5, [pc, #24]	@ (8005dc8 <_close_r+0x1c>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	4604      	mov	r4, r0
 8005db4:	4608      	mov	r0, r1
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	f7fb fb64 	bl	8001484 <_close>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_close_r+0x1a>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_close_r+0x1a>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	20000654 	.word	0x20000654

08005dcc <_lseek_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d07      	ldr	r5, [pc, #28]	@ (8005dec <_lseek_r+0x20>)
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	4608      	mov	r0, r1
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	602a      	str	r2, [r5, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f7fb fb79 	bl	80014d2 <_lseek>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d102      	bne.n	8005dea <_lseek_r+0x1e>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b103      	cbz	r3, 8005dea <_lseek_r+0x1e>
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	bd38      	pop	{r3, r4, r5, pc}
 8005dec:	20000654 	.word	0x20000654

08005df0 <_read_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d07      	ldr	r5, [pc, #28]	@ (8005e10 <_read_r+0x20>)
 8005df4:	4604      	mov	r4, r0
 8005df6:	4608      	mov	r0, r1
 8005df8:	4611      	mov	r1, r2
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	602a      	str	r2, [r5, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f7fb fb23 	bl	800144a <_read>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d102      	bne.n	8005e0e <_read_r+0x1e>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b103      	cbz	r3, 8005e0e <_read_r+0x1e>
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	20000654 	.word	0x20000654

08005e14 <_write_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	4d07      	ldr	r5, [pc, #28]	@ (8005e34 <_write_r+0x20>)
 8005e18:	4604      	mov	r4, r0
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	602a      	str	r2, [r5, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f7fa fb9c 	bl	8000560 <_write>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_write_r+0x1e>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_write_r+0x1e>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000654 	.word	0x20000654

08005e38 <__errno>:
 8005e38:	4b01      	ldr	r3, [pc, #4]	@ (8005e40 <__errno+0x8>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20000018 	.word	0x20000018

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4d0d      	ldr	r5, [pc, #52]	@ (8005e7c <__libc_init_array+0x38>)
 8005e48:	4c0d      	ldr	r4, [pc, #52]	@ (8005e80 <__libc_init_array+0x3c>)
 8005e4a:	1b64      	subs	r4, r4, r5
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	2600      	movs	r6, #0
 8005e50:	42a6      	cmp	r6, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4d0b      	ldr	r5, [pc, #44]	@ (8005e84 <__libc_init_array+0x40>)
 8005e56:	4c0c      	ldr	r4, [pc, #48]	@ (8005e88 <__libc_init_array+0x44>)
 8005e58:	f000 fd24 	bl	80068a4 <_init>
 8005e5c:	1b64      	subs	r4, r4, r5
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	2600      	movs	r6, #0
 8005e62:	42a6      	cmp	r6, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6c:	4798      	blx	r3
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e76:	4798      	blx	r3
 8005e78:	3601      	adds	r6, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	08006a50 	.word	0x08006a50
 8005e80:	08006a50 	.word	0x08006a50
 8005e84:	08006a50 	.word	0x08006a50
 8005e88:	08006a54 	.word	0x08006a54

08005e8c <__retarget_lock_init_recursive>:
 8005e8c:	4770      	bx	lr

08005e8e <__retarget_lock_acquire_recursive>:
 8005e8e:	4770      	bx	lr

08005e90 <__retarget_lock_release_recursive>:
 8005e90:	4770      	bx	lr
	...

08005e94 <_free_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4605      	mov	r5, r0
 8005e98:	2900      	cmp	r1, #0
 8005e9a:	d041      	beq.n	8005f20 <_free_r+0x8c>
 8005e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ea0:	1f0c      	subs	r4, r1, #4
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	bfb8      	it	lt
 8005ea6:	18e4      	addlt	r4, r4, r3
 8005ea8:	f000 f8e0 	bl	800606c <__malloc_lock>
 8005eac:	4a1d      	ldr	r2, [pc, #116]	@ (8005f24 <_free_r+0x90>)
 8005eae:	6813      	ldr	r3, [r2, #0]
 8005eb0:	b933      	cbnz	r3, 8005ec0 <_free_r+0x2c>
 8005eb2:	6063      	str	r3, [r4, #4]
 8005eb4:	6014      	str	r4, [r2, #0]
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ebc:	f000 b8dc 	b.w	8006078 <__malloc_unlock>
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	d908      	bls.n	8005ed6 <_free_r+0x42>
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	1821      	adds	r1, r4, r0
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	bf01      	itttt	eq
 8005ecc:	6819      	ldreq	r1, [r3, #0]
 8005ece:	685b      	ldreq	r3, [r3, #4]
 8005ed0:	1809      	addeq	r1, r1, r0
 8005ed2:	6021      	streq	r1, [r4, #0]
 8005ed4:	e7ed      	b.n	8005eb2 <_free_r+0x1e>
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	b10b      	cbz	r3, 8005ee0 <_free_r+0x4c>
 8005edc:	42a3      	cmp	r3, r4
 8005ede:	d9fa      	bls.n	8005ed6 <_free_r+0x42>
 8005ee0:	6811      	ldr	r1, [r2, #0]
 8005ee2:	1850      	adds	r0, r2, r1
 8005ee4:	42a0      	cmp	r0, r4
 8005ee6:	d10b      	bne.n	8005f00 <_free_r+0x6c>
 8005ee8:	6820      	ldr	r0, [r4, #0]
 8005eea:	4401      	add	r1, r0
 8005eec:	1850      	adds	r0, r2, r1
 8005eee:	4283      	cmp	r3, r0
 8005ef0:	6011      	str	r1, [r2, #0]
 8005ef2:	d1e0      	bne.n	8005eb6 <_free_r+0x22>
 8005ef4:	6818      	ldr	r0, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	6053      	str	r3, [r2, #4]
 8005efa:	4408      	add	r0, r1
 8005efc:	6010      	str	r0, [r2, #0]
 8005efe:	e7da      	b.n	8005eb6 <_free_r+0x22>
 8005f00:	d902      	bls.n	8005f08 <_free_r+0x74>
 8005f02:	230c      	movs	r3, #12
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	e7d6      	b.n	8005eb6 <_free_r+0x22>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	1821      	adds	r1, r4, r0
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	bf04      	itt	eq
 8005f10:	6819      	ldreq	r1, [r3, #0]
 8005f12:	685b      	ldreq	r3, [r3, #4]
 8005f14:	6063      	str	r3, [r4, #4]
 8005f16:	bf04      	itt	eq
 8005f18:	1809      	addeq	r1, r1, r0
 8005f1a:	6021      	streq	r1, [r4, #0]
 8005f1c:	6054      	str	r4, [r2, #4]
 8005f1e:	e7ca      	b.n	8005eb6 <_free_r+0x22>
 8005f20:	bd38      	pop	{r3, r4, r5, pc}
 8005f22:	bf00      	nop
 8005f24:	20000660 	.word	0x20000660

08005f28 <sbrk_aligned>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	4e0f      	ldr	r6, [pc, #60]	@ (8005f68 <sbrk_aligned+0x40>)
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	6831      	ldr	r1, [r6, #0]
 8005f30:	4605      	mov	r5, r0
 8005f32:	b911      	cbnz	r1, 8005f3a <sbrk_aligned+0x12>
 8005f34:	f000 fca6 	bl	8006884 <_sbrk_r>
 8005f38:	6030      	str	r0, [r6, #0]
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 fca1 	bl	8006884 <_sbrk_r>
 8005f42:	1c43      	adds	r3, r0, #1
 8005f44:	d103      	bne.n	8005f4e <sbrk_aligned+0x26>
 8005f46:	f04f 34ff 	mov.w	r4, #4294967295
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	bd70      	pop	{r4, r5, r6, pc}
 8005f4e:	1cc4      	adds	r4, r0, #3
 8005f50:	f024 0403 	bic.w	r4, r4, #3
 8005f54:	42a0      	cmp	r0, r4
 8005f56:	d0f8      	beq.n	8005f4a <sbrk_aligned+0x22>
 8005f58:	1a21      	subs	r1, r4, r0
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	f000 fc92 	bl	8006884 <_sbrk_r>
 8005f60:	3001      	adds	r0, #1
 8005f62:	d1f2      	bne.n	8005f4a <sbrk_aligned+0x22>
 8005f64:	e7ef      	b.n	8005f46 <sbrk_aligned+0x1e>
 8005f66:	bf00      	nop
 8005f68:	2000065c 	.word	0x2000065c

08005f6c <_malloc_r>:
 8005f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f70:	1ccd      	adds	r5, r1, #3
 8005f72:	f025 0503 	bic.w	r5, r5, #3
 8005f76:	3508      	adds	r5, #8
 8005f78:	2d0c      	cmp	r5, #12
 8005f7a:	bf38      	it	cc
 8005f7c:	250c      	movcc	r5, #12
 8005f7e:	2d00      	cmp	r5, #0
 8005f80:	4606      	mov	r6, r0
 8005f82:	db01      	blt.n	8005f88 <_malloc_r+0x1c>
 8005f84:	42a9      	cmp	r1, r5
 8005f86:	d904      	bls.n	8005f92 <_malloc_r+0x26>
 8005f88:	230c      	movs	r3, #12
 8005f8a:	6033      	str	r3, [r6, #0]
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006068 <_malloc_r+0xfc>
 8005f96:	f000 f869 	bl	800606c <__malloc_lock>
 8005f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f9e:	461c      	mov	r4, r3
 8005fa0:	bb44      	cbnz	r4, 8005ff4 <_malloc_r+0x88>
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f7ff ffbf 	bl	8005f28 <sbrk_aligned>
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	4604      	mov	r4, r0
 8005fae:	d158      	bne.n	8006062 <_malloc_r+0xf6>
 8005fb0:	f8d8 4000 	ldr.w	r4, [r8]
 8005fb4:	4627      	mov	r7, r4
 8005fb6:	2f00      	cmp	r7, #0
 8005fb8:	d143      	bne.n	8006042 <_malloc_r+0xd6>
 8005fba:	2c00      	cmp	r4, #0
 8005fbc:	d04b      	beq.n	8006056 <_malloc_r+0xea>
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	4639      	mov	r1, r7
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	eb04 0903 	add.w	r9, r4, r3
 8005fc8:	f000 fc5c 	bl	8006884 <_sbrk_r>
 8005fcc:	4581      	cmp	r9, r0
 8005fce:	d142      	bne.n	8006056 <_malloc_r+0xea>
 8005fd0:	6821      	ldr	r1, [r4, #0]
 8005fd2:	1a6d      	subs	r5, r5, r1
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f7ff ffa6 	bl	8005f28 <sbrk_aligned>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d03a      	beq.n	8006056 <_malloc_r+0xea>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	442b      	add	r3, r5
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	bb62      	cbnz	r2, 8006048 <_malloc_r+0xdc>
 8005fee:	f8c8 7000 	str.w	r7, [r8]
 8005ff2:	e00f      	b.n	8006014 <_malloc_r+0xa8>
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	1b52      	subs	r2, r2, r5
 8005ff8:	d420      	bmi.n	800603c <_malloc_r+0xd0>
 8005ffa:	2a0b      	cmp	r2, #11
 8005ffc:	d917      	bls.n	800602e <_malloc_r+0xc2>
 8005ffe:	1961      	adds	r1, r4, r5
 8006000:	42a3      	cmp	r3, r4
 8006002:	6025      	str	r5, [r4, #0]
 8006004:	bf18      	it	ne
 8006006:	6059      	strne	r1, [r3, #4]
 8006008:	6863      	ldr	r3, [r4, #4]
 800600a:	bf08      	it	eq
 800600c:	f8c8 1000 	streq.w	r1, [r8]
 8006010:	5162      	str	r2, [r4, r5]
 8006012:	604b      	str	r3, [r1, #4]
 8006014:	4630      	mov	r0, r6
 8006016:	f000 f82f 	bl	8006078 <__malloc_unlock>
 800601a:	f104 000b 	add.w	r0, r4, #11
 800601e:	1d23      	adds	r3, r4, #4
 8006020:	f020 0007 	bic.w	r0, r0, #7
 8006024:	1ac2      	subs	r2, r0, r3
 8006026:	bf1c      	itt	ne
 8006028:	1a1b      	subne	r3, r3, r0
 800602a:	50a3      	strne	r3, [r4, r2]
 800602c:	e7af      	b.n	8005f8e <_malloc_r+0x22>
 800602e:	6862      	ldr	r2, [r4, #4]
 8006030:	42a3      	cmp	r3, r4
 8006032:	bf0c      	ite	eq
 8006034:	f8c8 2000 	streq.w	r2, [r8]
 8006038:	605a      	strne	r2, [r3, #4]
 800603a:	e7eb      	b.n	8006014 <_malloc_r+0xa8>
 800603c:	4623      	mov	r3, r4
 800603e:	6864      	ldr	r4, [r4, #4]
 8006040:	e7ae      	b.n	8005fa0 <_malloc_r+0x34>
 8006042:	463c      	mov	r4, r7
 8006044:	687f      	ldr	r7, [r7, #4]
 8006046:	e7b6      	b.n	8005fb6 <_malloc_r+0x4a>
 8006048:	461a      	mov	r2, r3
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	42a3      	cmp	r3, r4
 800604e:	d1fb      	bne.n	8006048 <_malloc_r+0xdc>
 8006050:	2300      	movs	r3, #0
 8006052:	6053      	str	r3, [r2, #4]
 8006054:	e7de      	b.n	8006014 <_malloc_r+0xa8>
 8006056:	230c      	movs	r3, #12
 8006058:	6033      	str	r3, [r6, #0]
 800605a:	4630      	mov	r0, r6
 800605c:	f000 f80c 	bl	8006078 <__malloc_unlock>
 8006060:	e794      	b.n	8005f8c <_malloc_r+0x20>
 8006062:	6005      	str	r5, [r0, #0]
 8006064:	e7d6      	b.n	8006014 <_malloc_r+0xa8>
 8006066:	bf00      	nop
 8006068:	20000660 	.word	0x20000660

0800606c <__malloc_lock>:
 800606c:	4801      	ldr	r0, [pc, #4]	@ (8006074 <__malloc_lock+0x8>)
 800606e:	f7ff bf0e 	b.w	8005e8e <__retarget_lock_acquire_recursive>
 8006072:	bf00      	nop
 8006074:	20000658 	.word	0x20000658

08006078 <__malloc_unlock>:
 8006078:	4801      	ldr	r0, [pc, #4]	@ (8006080 <__malloc_unlock+0x8>)
 800607a:	f7ff bf09 	b.w	8005e90 <__retarget_lock_release_recursive>
 800607e:	bf00      	nop
 8006080:	20000658 	.word	0x20000658

08006084 <__sfputc_r>:
 8006084:	6893      	ldr	r3, [r2, #8]
 8006086:	3b01      	subs	r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	b410      	push	{r4}
 800608c:	6093      	str	r3, [r2, #8]
 800608e:	da08      	bge.n	80060a2 <__sfputc_r+0x1e>
 8006090:	6994      	ldr	r4, [r2, #24]
 8006092:	42a3      	cmp	r3, r4
 8006094:	db01      	blt.n	800609a <__sfputc_r+0x16>
 8006096:	290a      	cmp	r1, #10
 8006098:	d103      	bne.n	80060a2 <__sfputc_r+0x1e>
 800609a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800609e:	f7ff bde8 	b.w	8005c72 <__swbuf_r>
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	1c58      	adds	r0, r3, #1
 80060a6:	6010      	str	r0, [r2, #0]
 80060a8:	7019      	strb	r1, [r3, #0]
 80060aa:	4608      	mov	r0, r1
 80060ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <__sfputs_r>:
 80060b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b4:	4606      	mov	r6, r0
 80060b6:	460f      	mov	r7, r1
 80060b8:	4614      	mov	r4, r2
 80060ba:	18d5      	adds	r5, r2, r3
 80060bc:	42ac      	cmp	r4, r5
 80060be:	d101      	bne.n	80060c4 <__sfputs_r+0x12>
 80060c0:	2000      	movs	r0, #0
 80060c2:	e007      	b.n	80060d4 <__sfputs_r+0x22>
 80060c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c8:	463a      	mov	r2, r7
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ffda 	bl	8006084 <__sfputc_r>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	d1f3      	bne.n	80060bc <__sfputs_r+0xa>
 80060d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060d8 <_vfiprintf_r>:
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	460d      	mov	r5, r1
 80060de:	b09d      	sub	sp, #116	@ 0x74
 80060e0:	4614      	mov	r4, r2
 80060e2:	4698      	mov	r8, r3
 80060e4:	4606      	mov	r6, r0
 80060e6:	b118      	cbz	r0, 80060f0 <_vfiprintf_r+0x18>
 80060e8:	6a03      	ldr	r3, [r0, #32]
 80060ea:	b90b      	cbnz	r3, 80060f0 <_vfiprintf_r+0x18>
 80060ec:	f7ff fcd8 	bl	8005aa0 <__sinit>
 80060f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060f2:	07d9      	lsls	r1, r3, #31
 80060f4:	d405      	bmi.n	8006102 <_vfiprintf_r+0x2a>
 80060f6:	89ab      	ldrh	r3, [r5, #12]
 80060f8:	059a      	lsls	r2, r3, #22
 80060fa:	d402      	bmi.n	8006102 <_vfiprintf_r+0x2a>
 80060fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060fe:	f7ff fec6 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8006102:	89ab      	ldrh	r3, [r5, #12]
 8006104:	071b      	lsls	r3, r3, #28
 8006106:	d501      	bpl.n	800610c <_vfiprintf_r+0x34>
 8006108:	692b      	ldr	r3, [r5, #16]
 800610a:	b99b      	cbnz	r3, 8006134 <_vfiprintf_r+0x5c>
 800610c:	4629      	mov	r1, r5
 800610e:	4630      	mov	r0, r6
 8006110:	f7ff fdee 	bl	8005cf0 <__swsetup_r>
 8006114:	b170      	cbz	r0, 8006134 <_vfiprintf_r+0x5c>
 8006116:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006118:	07dc      	lsls	r4, r3, #31
 800611a:	d504      	bpl.n	8006126 <_vfiprintf_r+0x4e>
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
 8006120:	b01d      	add	sp, #116	@ 0x74
 8006122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006126:	89ab      	ldrh	r3, [r5, #12]
 8006128:	0598      	lsls	r0, r3, #22
 800612a:	d4f7      	bmi.n	800611c <_vfiprintf_r+0x44>
 800612c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800612e:	f7ff feaf 	bl	8005e90 <__retarget_lock_release_recursive>
 8006132:	e7f3      	b.n	800611c <_vfiprintf_r+0x44>
 8006134:	2300      	movs	r3, #0
 8006136:	9309      	str	r3, [sp, #36]	@ 0x24
 8006138:	2320      	movs	r3, #32
 800613a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800613e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006142:	2330      	movs	r3, #48	@ 0x30
 8006144:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062f4 <_vfiprintf_r+0x21c>
 8006148:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800614c:	f04f 0901 	mov.w	r9, #1
 8006150:	4623      	mov	r3, r4
 8006152:	469a      	mov	sl, r3
 8006154:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006158:	b10a      	cbz	r2, 800615e <_vfiprintf_r+0x86>
 800615a:	2a25      	cmp	r2, #37	@ 0x25
 800615c:	d1f9      	bne.n	8006152 <_vfiprintf_r+0x7a>
 800615e:	ebba 0b04 	subs.w	fp, sl, r4
 8006162:	d00b      	beq.n	800617c <_vfiprintf_r+0xa4>
 8006164:	465b      	mov	r3, fp
 8006166:	4622      	mov	r2, r4
 8006168:	4629      	mov	r1, r5
 800616a:	4630      	mov	r0, r6
 800616c:	f7ff ffa1 	bl	80060b2 <__sfputs_r>
 8006170:	3001      	adds	r0, #1
 8006172:	f000 80a7 	beq.w	80062c4 <_vfiprintf_r+0x1ec>
 8006176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006178:	445a      	add	r2, fp
 800617a:	9209      	str	r2, [sp, #36]	@ 0x24
 800617c:	f89a 3000 	ldrb.w	r3, [sl]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 809f 	beq.w	80062c4 <_vfiprintf_r+0x1ec>
 8006186:	2300      	movs	r3, #0
 8006188:	f04f 32ff 	mov.w	r2, #4294967295
 800618c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006190:	f10a 0a01 	add.w	sl, sl, #1
 8006194:	9304      	str	r3, [sp, #16]
 8006196:	9307      	str	r3, [sp, #28]
 8006198:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800619c:	931a      	str	r3, [sp, #104]	@ 0x68
 800619e:	4654      	mov	r4, sl
 80061a0:	2205      	movs	r2, #5
 80061a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061a6:	4853      	ldr	r0, [pc, #332]	@ (80062f4 <_vfiprintf_r+0x21c>)
 80061a8:	f7fa f812 	bl	80001d0 <memchr>
 80061ac:	9a04      	ldr	r2, [sp, #16]
 80061ae:	b9d8      	cbnz	r0, 80061e8 <_vfiprintf_r+0x110>
 80061b0:	06d1      	lsls	r1, r2, #27
 80061b2:	bf44      	itt	mi
 80061b4:	2320      	movmi	r3, #32
 80061b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061ba:	0713      	lsls	r3, r2, #28
 80061bc:	bf44      	itt	mi
 80061be:	232b      	movmi	r3, #43	@ 0x2b
 80061c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061c4:	f89a 3000 	ldrb.w	r3, [sl]
 80061c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80061ca:	d015      	beq.n	80061f8 <_vfiprintf_r+0x120>
 80061cc:	9a07      	ldr	r2, [sp, #28]
 80061ce:	4654      	mov	r4, sl
 80061d0:	2000      	movs	r0, #0
 80061d2:	f04f 0c0a 	mov.w	ip, #10
 80061d6:	4621      	mov	r1, r4
 80061d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061dc:	3b30      	subs	r3, #48	@ 0x30
 80061de:	2b09      	cmp	r3, #9
 80061e0:	d94b      	bls.n	800627a <_vfiprintf_r+0x1a2>
 80061e2:	b1b0      	cbz	r0, 8006212 <_vfiprintf_r+0x13a>
 80061e4:	9207      	str	r2, [sp, #28]
 80061e6:	e014      	b.n	8006212 <_vfiprintf_r+0x13a>
 80061e8:	eba0 0308 	sub.w	r3, r0, r8
 80061ec:	fa09 f303 	lsl.w	r3, r9, r3
 80061f0:	4313      	orrs	r3, r2
 80061f2:	9304      	str	r3, [sp, #16]
 80061f4:	46a2      	mov	sl, r4
 80061f6:	e7d2      	b.n	800619e <_vfiprintf_r+0xc6>
 80061f8:	9b03      	ldr	r3, [sp, #12]
 80061fa:	1d19      	adds	r1, r3, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	9103      	str	r1, [sp, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	bfbb      	ittet	lt
 8006204:	425b      	neglt	r3, r3
 8006206:	f042 0202 	orrlt.w	r2, r2, #2
 800620a:	9307      	strge	r3, [sp, #28]
 800620c:	9307      	strlt	r3, [sp, #28]
 800620e:	bfb8      	it	lt
 8006210:	9204      	strlt	r2, [sp, #16]
 8006212:	7823      	ldrb	r3, [r4, #0]
 8006214:	2b2e      	cmp	r3, #46	@ 0x2e
 8006216:	d10a      	bne.n	800622e <_vfiprintf_r+0x156>
 8006218:	7863      	ldrb	r3, [r4, #1]
 800621a:	2b2a      	cmp	r3, #42	@ 0x2a
 800621c:	d132      	bne.n	8006284 <_vfiprintf_r+0x1ac>
 800621e:	9b03      	ldr	r3, [sp, #12]
 8006220:	1d1a      	adds	r2, r3, #4
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	9203      	str	r2, [sp, #12]
 8006226:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800622a:	3402      	adds	r4, #2
 800622c:	9305      	str	r3, [sp, #20]
 800622e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006304 <_vfiprintf_r+0x22c>
 8006232:	7821      	ldrb	r1, [r4, #0]
 8006234:	2203      	movs	r2, #3
 8006236:	4650      	mov	r0, sl
 8006238:	f7f9 ffca 	bl	80001d0 <memchr>
 800623c:	b138      	cbz	r0, 800624e <_vfiprintf_r+0x176>
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	eba0 000a 	sub.w	r0, r0, sl
 8006244:	2240      	movs	r2, #64	@ 0x40
 8006246:	4082      	lsls	r2, r0
 8006248:	4313      	orrs	r3, r2
 800624a:	3401      	adds	r4, #1
 800624c:	9304      	str	r3, [sp, #16]
 800624e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006252:	4829      	ldr	r0, [pc, #164]	@ (80062f8 <_vfiprintf_r+0x220>)
 8006254:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006258:	2206      	movs	r2, #6
 800625a:	f7f9 ffb9 	bl	80001d0 <memchr>
 800625e:	2800      	cmp	r0, #0
 8006260:	d03f      	beq.n	80062e2 <_vfiprintf_r+0x20a>
 8006262:	4b26      	ldr	r3, [pc, #152]	@ (80062fc <_vfiprintf_r+0x224>)
 8006264:	bb1b      	cbnz	r3, 80062ae <_vfiprintf_r+0x1d6>
 8006266:	9b03      	ldr	r3, [sp, #12]
 8006268:	3307      	adds	r3, #7
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	3308      	adds	r3, #8
 8006270:	9303      	str	r3, [sp, #12]
 8006272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006274:	443b      	add	r3, r7
 8006276:	9309      	str	r3, [sp, #36]	@ 0x24
 8006278:	e76a      	b.n	8006150 <_vfiprintf_r+0x78>
 800627a:	fb0c 3202 	mla	r2, ip, r2, r3
 800627e:	460c      	mov	r4, r1
 8006280:	2001      	movs	r0, #1
 8006282:	e7a8      	b.n	80061d6 <_vfiprintf_r+0xfe>
 8006284:	2300      	movs	r3, #0
 8006286:	3401      	adds	r4, #1
 8006288:	9305      	str	r3, [sp, #20]
 800628a:	4619      	mov	r1, r3
 800628c:	f04f 0c0a 	mov.w	ip, #10
 8006290:	4620      	mov	r0, r4
 8006292:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006296:	3a30      	subs	r2, #48	@ 0x30
 8006298:	2a09      	cmp	r2, #9
 800629a:	d903      	bls.n	80062a4 <_vfiprintf_r+0x1cc>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0c6      	beq.n	800622e <_vfiprintf_r+0x156>
 80062a0:	9105      	str	r1, [sp, #20]
 80062a2:	e7c4      	b.n	800622e <_vfiprintf_r+0x156>
 80062a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80062a8:	4604      	mov	r4, r0
 80062aa:	2301      	movs	r3, #1
 80062ac:	e7f0      	b.n	8006290 <_vfiprintf_r+0x1b8>
 80062ae:	ab03      	add	r3, sp, #12
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	462a      	mov	r2, r5
 80062b4:	4b12      	ldr	r3, [pc, #72]	@ (8006300 <_vfiprintf_r+0x228>)
 80062b6:	a904      	add	r1, sp, #16
 80062b8:	4630      	mov	r0, r6
 80062ba:	f3af 8000 	nop.w
 80062be:	4607      	mov	r7, r0
 80062c0:	1c78      	adds	r0, r7, #1
 80062c2:	d1d6      	bne.n	8006272 <_vfiprintf_r+0x19a>
 80062c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062c6:	07d9      	lsls	r1, r3, #31
 80062c8:	d405      	bmi.n	80062d6 <_vfiprintf_r+0x1fe>
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	059a      	lsls	r2, r3, #22
 80062ce:	d402      	bmi.n	80062d6 <_vfiprintf_r+0x1fe>
 80062d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062d2:	f7ff fddd 	bl	8005e90 <__retarget_lock_release_recursive>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	065b      	lsls	r3, r3, #25
 80062da:	f53f af1f 	bmi.w	800611c <_vfiprintf_r+0x44>
 80062de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062e0:	e71e      	b.n	8006120 <_vfiprintf_r+0x48>
 80062e2:	ab03      	add	r3, sp, #12
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	462a      	mov	r2, r5
 80062e8:	4b05      	ldr	r3, [pc, #20]	@ (8006300 <_vfiprintf_r+0x228>)
 80062ea:	a904      	add	r1, sp, #16
 80062ec:	4630      	mov	r0, r6
 80062ee:	f000 f879 	bl	80063e4 <_printf_i>
 80062f2:	e7e4      	b.n	80062be <_vfiprintf_r+0x1e6>
 80062f4:	08006a14 	.word	0x08006a14
 80062f8:	08006a1e 	.word	0x08006a1e
 80062fc:	00000000 	.word	0x00000000
 8006300:	080060b3 	.word	0x080060b3
 8006304:	08006a1a 	.word	0x08006a1a

08006308 <_printf_common>:
 8006308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630c:	4616      	mov	r6, r2
 800630e:	4698      	mov	r8, r3
 8006310:	688a      	ldr	r2, [r1, #8]
 8006312:	690b      	ldr	r3, [r1, #16]
 8006314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006318:	4293      	cmp	r3, r2
 800631a:	bfb8      	it	lt
 800631c:	4613      	movlt	r3, r2
 800631e:	6033      	str	r3, [r6, #0]
 8006320:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006324:	4607      	mov	r7, r0
 8006326:	460c      	mov	r4, r1
 8006328:	b10a      	cbz	r2, 800632e <_printf_common+0x26>
 800632a:	3301      	adds	r3, #1
 800632c:	6033      	str	r3, [r6, #0]
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	0699      	lsls	r1, r3, #26
 8006332:	bf42      	ittt	mi
 8006334:	6833      	ldrmi	r3, [r6, #0]
 8006336:	3302      	addmi	r3, #2
 8006338:	6033      	strmi	r3, [r6, #0]
 800633a:	6825      	ldr	r5, [r4, #0]
 800633c:	f015 0506 	ands.w	r5, r5, #6
 8006340:	d106      	bne.n	8006350 <_printf_common+0x48>
 8006342:	f104 0a19 	add.w	sl, r4, #25
 8006346:	68e3      	ldr	r3, [r4, #12]
 8006348:	6832      	ldr	r2, [r6, #0]
 800634a:	1a9b      	subs	r3, r3, r2
 800634c:	42ab      	cmp	r3, r5
 800634e:	dc26      	bgt.n	800639e <_printf_common+0x96>
 8006350:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006354:	6822      	ldr	r2, [r4, #0]
 8006356:	3b00      	subs	r3, #0
 8006358:	bf18      	it	ne
 800635a:	2301      	movne	r3, #1
 800635c:	0692      	lsls	r2, r2, #26
 800635e:	d42b      	bmi.n	80063b8 <_printf_common+0xb0>
 8006360:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006364:	4641      	mov	r1, r8
 8006366:	4638      	mov	r0, r7
 8006368:	47c8      	blx	r9
 800636a:	3001      	adds	r0, #1
 800636c:	d01e      	beq.n	80063ac <_printf_common+0xa4>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	6922      	ldr	r2, [r4, #16]
 8006372:	f003 0306 	and.w	r3, r3, #6
 8006376:	2b04      	cmp	r3, #4
 8006378:	bf02      	ittt	eq
 800637a:	68e5      	ldreq	r5, [r4, #12]
 800637c:	6833      	ldreq	r3, [r6, #0]
 800637e:	1aed      	subeq	r5, r5, r3
 8006380:	68a3      	ldr	r3, [r4, #8]
 8006382:	bf0c      	ite	eq
 8006384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006388:	2500      	movne	r5, #0
 800638a:	4293      	cmp	r3, r2
 800638c:	bfc4      	itt	gt
 800638e:	1a9b      	subgt	r3, r3, r2
 8006390:	18ed      	addgt	r5, r5, r3
 8006392:	2600      	movs	r6, #0
 8006394:	341a      	adds	r4, #26
 8006396:	42b5      	cmp	r5, r6
 8006398:	d11a      	bne.n	80063d0 <_printf_common+0xc8>
 800639a:	2000      	movs	r0, #0
 800639c:	e008      	b.n	80063b0 <_printf_common+0xa8>
 800639e:	2301      	movs	r3, #1
 80063a0:	4652      	mov	r2, sl
 80063a2:	4641      	mov	r1, r8
 80063a4:	4638      	mov	r0, r7
 80063a6:	47c8      	blx	r9
 80063a8:	3001      	adds	r0, #1
 80063aa:	d103      	bne.n	80063b4 <_printf_common+0xac>
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7c6      	b.n	8006346 <_printf_common+0x3e>
 80063b8:	18e1      	adds	r1, r4, r3
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	2030      	movs	r0, #48	@ 0x30
 80063be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063c2:	4422      	add	r2, r4
 80063c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063cc:	3302      	adds	r3, #2
 80063ce:	e7c7      	b.n	8006360 <_printf_common+0x58>
 80063d0:	2301      	movs	r3, #1
 80063d2:	4622      	mov	r2, r4
 80063d4:	4641      	mov	r1, r8
 80063d6:	4638      	mov	r0, r7
 80063d8:	47c8      	blx	r9
 80063da:	3001      	adds	r0, #1
 80063dc:	d0e6      	beq.n	80063ac <_printf_common+0xa4>
 80063de:	3601      	adds	r6, #1
 80063e0:	e7d9      	b.n	8006396 <_printf_common+0x8e>
	...

080063e4 <_printf_i>:
 80063e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	7e0f      	ldrb	r7, [r1, #24]
 80063ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063ec:	2f78      	cmp	r7, #120	@ 0x78
 80063ee:	4691      	mov	r9, r2
 80063f0:	4680      	mov	r8, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	469a      	mov	sl, r3
 80063f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063fa:	d807      	bhi.n	800640c <_printf_i+0x28>
 80063fc:	2f62      	cmp	r7, #98	@ 0x62
 80063fe:	d80a      	bhi.n	8006416 <_printf_i+0x32>
 8006400:	2f00      	cmp	r7, #0
 8006402:	f000 80d2 	beq.w	80065aa <_printf_i+0x1c6>
 8006406:	2f58      	cmp	r7, #88	@ 0x58
 8006408:	f000 80b9 	beq.w	800657e <_printf_i+0x19a>
 800640c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006414:	e03a      	b.n	800648c <_printf_i+0xa8>
 8006416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800641a:	2b15      	cmp	r3, #21
 800641c:	d8f6      	bhi.n	800640c <_printf_i+0x28>
 800641e:	a101      	add	r1, pc, #4	@ (adr r1, 8006424 <_printf_i+0x40>)
 8006420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006424:	0800647d 	.word	0x0800647d
 8006428:	08006491 	.word	0x08006491
 800642c:	0800640d 	.word	0x0800640d
 8006430:	0800640d 	.word	0x0800640d
 8006434:	0800640d 	.word	0x0800640d
 8006438:	0800640d 	.word	0x0800640d
 800643c:	08006491 	.word	0x08006491
 8006440:	0800640d 	.word	0x0800640d
 8006444:	0800640d 	.word	0x0800640d
 8006448:	0800640d 	.word	0x0800640d
 800644c:	0800640d 	.word	0x0800640d
 8006450:	08006591 	.word	0x08006591
 8006454:	080064bb 	.word	0x080064bb
 8006458:	0800654b 	.word	0x0800654b
 800645c:	0800640d 	.word	0x0800640d
 8006460:	0800640d 	.word	0x0800640d
 8006464:	080065b3 	.word	0x080065b3
 8006468:	0800640d 	.word	0x0800640d
 800646c:	080064bb 	.word	0x080064bb
 8006470:	0800640d 	.word	0x0800640d
 8006474:	0800640d 	.word	0x0800640d
 8006478:	08006553 	.word	0x08006553
 800647c:	6833      	ldr	r3, [r6, #0]
 800647e:	1d1a      	adds	r2, r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6032      	str	r2, [r6, #0]
 8006484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800648c:	2301      	movs	r3, #1
 800648e:	e09d      	b.n	80065cc <_printf_i+0x1e8>
 8006490:	6833      	ldr	r3, [r6, #0]
 8006492:	6820      	ldr	r0, [r4, #0]
 8006494:	1d19      	adds	r1, r3, #4
 8006496:	6031      	str	r1, [r6, #0]
 8006498:	0606      	lsls	r6, r0, #24
 800649a:	d501      	bpl.n	80064a0 <_printf_i+0xbc>
 800649c:	681d      	ldr	r5, [r3, #0]
 800649e:	e003      	b.n	80064a8 <_printf_i+0xc4>
 80064a0:	0645      	lsls	r5, r0, #25
 80064a2:	d5fb      	bpl.n	800649c <_printf_i+0xb8>
 80064a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064a8:	2d00      	cmp	r5, #0
 80064aa:	da03      	bge.n	80064b4 <_printf_i+0xd0>
 80064ac:	232d      	movs	r3, #45	@ 0x2d
 80064ae:	426d      	negs	r5, r5
 80064b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064b4:	4859      	ldr	r0, [pc, #356]	@ (800661c <_printf_i+0x238>)
 80064b6:	230a      	movs	r3, #10
 80064b8:	e011      	b.n	80064de <_printf_i+0xfa>
 80064ba:	6821      	ldr	r1, [r4, #0]
 80064bc:	6833      	ldr	r3, [r6, #0]
 80064be:	0608      	lsls	r0, r1, #24
 80064c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80064c4:	d402      	bmi.n	80064cc <_printf_i+0xe8>
 80064c6:	0649      	lsls	r1, r1, #25
 80064c8:	bf48      	it	mi
 80064ca:	b2ad      	uxthmi	r5, r5
 80064cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80064ce:	4853      	ldr	r0, [pc, #332]	@ (800661c <_printf_i+0x238>)
 80064d0:	6033      	str	r3, [r6, #0]
 80064d2:	bf14      	ite	ne
 80064d4:	230a      	movne	r3, #10
 80064d6:	2308      	moveq	r3, #8
 80064d8:	2100      	movs	r1, #0
 80064da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064de:	6866      	ldr	r6, [r4, #4]
 80064e0:	60a6      	str	r6, [r4, #8]
 80064e2:	2e00      	cmp	r6, #0
 80064e4:	bfa2      	ittt	ge
 80064e6:	6821      	ldrge	r1, [r4, #0]
 80064e8:	f021 0104 	bicge.w	r1, r1, #4
 80064ec:	6021      	strge	r1, [r4, #0]
 80064ee:	b90d      	cbnz	r5, 80064f4 <_printf_i+0x110>
 80064f0:	2e00      	cmp	r6, #0
 80064f2:	d04b      	beq.n	800658c <_printf_i+0x1a8>
 80064f4:	4616      	mov	r6, r2
 80064f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80064fa:	fb03 5711 	mls	r7, r3, r1, r5
 80064fe:	5dc7      	ldrb	r7, [r0, r7]
 8006500:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006504:	462f      	mov	r7, r5
 8006506:	42bb      	cmp	r3, r7
 8006508:	460d      	mov	r5, r1
 800650a:	d9f4      	bls.n	80064f6 <_printf_i+0x112>
 800650c:	2b08      	cmp	r3, #8
 800650e:	d10b      	bne.n	8006528 <_printf_i+0x144>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	07df      	lsls	r7, r3, #31
 8006514:	d508      	bpl.n	8006528 <_printf_i+0x144>
 8006516:	6923      	ldr	r3, [r4, #16]
 8006518:	6861      	ldr	r1, [r4, #4]
 800651a:	4299      	cmp	r1, r3
 800651c:	bfde      	ittt	le
 800651e:	2330      	movle	r3, #48	@ 0x30
 8006520:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006524:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006528:	1b92      	subs	r2, r2, r6
 800652a:	6122      	str	r2, [r4, #16]
 800652c:	f8cd a000 	str.w	sl, [sp]
 8006530:	464b      	mov	r3, r9
 8006532:	aa03      	add	r2, sp, #12
 8006534:	4621      	mov	r1, r4
 8006536:	4640      	mov	r0, r8
 8006538:	f7ff fee6 	bl	8006308 <_printf_common>
 800653c:	3001      	adds	r0, #1
 800653e:	d14a      	bne.n	80065d6 <_printf_i+0x1f2>
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	b004      	add	sp, #16
 8006546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f043 0320 	orr.w	r3, r3, #32
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	4833      	ldr	r0, [pc, #204]	@ (8006620 <_printf_i+0x23c>)
 8006554:	2778      	movs	r7, #120	@ 0x78
 8006556:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	6831      	ldr	r1, [r6, #0]
 800655e:	061f      	lsls	r7, r3, #24
 8006560:	f851 5b04 	ldr.w	r5, [r1], #4
 8006564:	d402      	bmi.n	800656c <_printf_i+0x188>
 8006566:	065f      	lsls	r7, r3, #25
 8006568:	bf48      	it	mi
 800656a:	b2ad      	uxthmi	r5, r5
 800656c:	6031      	str	r1, [r6, #0]
 800656e:	07d9      	lsls	r1, r3, #31
 8006570:	bf44      	itt	mi
 8006572:	f043 0320 	orrmi.w	r3, r3, #32
 8006576:	6023      	strmi	r3, [r4, #0]
 8006578:	b11d      	cbz	r5, 8006582 <_printf_i+0x19e>
 800657a:	2310      	movs	r3, #16
 800657c:	e7ac      	b.n	80064d8 <_printf_i+0xf4>
 800657e:	4827      	ldr	r0, [pc, #156]	@ (800661c <_printf_i+0x238>)
 8006580:	e7e9      	b.n	8006556 <_printf_i+0x172>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	f023 0320 	bic.w	r3, r3, #32
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	e7f6      	b.n	800657a <_printf_i+0x196>
 800658c:	4616      	mov	r6, r2
 800658e:	e7bd      	b.n	800650c <_printf_i+0x128>
 8006590:	6833      	ldr	r3, [r6, #0]
 8006592:	6825      	ldr	r5, [r4, #0]
 8006594:	6961      	ldr	r1, [r4, #20]
 8006596:	1d18      	adds	r0, r3, #4
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	062e      	lsls	r6, r5, #24
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	d501      	bpl.n	80065a4 <_printf_i+0x1c0>
 80065a0:	6019      	str	r1, [r3, #0]
 80065a2:	e002      	b.n	80065aa <_printf_i+0x1c6>
 80065a4:	0668      	lsls	r0, r5, #25
 80065a6:	d5fb      	bpl.n	80065a0 <_printf_i+0x1bc>
 80065a8:	8019      	strh	r1, [r3, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	4616      	mov	r6, r2
 80065b0:	e7bc      	b.n	800652c <_printf_i+0x148>
 80065b2:	6833      	ldr	r3, [r6, #0]
 80065b4:	1d1a      	adds	r2, r3, #4
 80065b6:	6032      	str	r2, [r6, #0]
 80065b8:	681e      	ldr	r6, [r3, #0]
 80065ba:	6862      	ldr	r2, [r4, #4]
 80065bc:	2100      	movs	r1, #0
 80065be:	4630      	mov	r0, r6
 80065c0:	f7f9 fe06 	bl	80001d0 <memchr>
 80065c4:	b108      	cbz	r0, 80065ca <_printf_i+0x1e6>
 80065c6:	1b80      	subs	r0, r0, r6
 80065c8:	6060      	str	r0, [r4, #4]
 80065ca:	6863      	ldr	r3, [r4, #4]
 80065cc:	6123      	str	r3, [r4, #16]
 80065ce:	2300      	movs	r3, #0
 80065d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065d4:	e7aa      	b.n	800652c <_printf_i+0x148>
 80065d6:	6923      	ldr	r3, [r4, #16]
 80065d8:	4632      	mov	r2, r6
 80065da:	4649      	mov	r1, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	47d0      	blx	sl
 80065e0:	3001      	adds	r0, #1
 80065e2:	d0ad      	beq.n	8006540 <_printf_i+0x15c>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	079b      	lsls	r3, r3, #30
 80065e8:	d413      	bmi.n	8006612 <_printf_i+0x22e>
 80065ea:	68e0      	ldr	r0, [r4, #12]
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	4298      	cmp	r0, r3
 80065f0:	bfb8      	it	lt
 80065f2:	4618      	movlt	r0, r3
 80065f4:	e7a6      	b.n	8006544 <_printf_i+0x160>
 80065f6:	2301      	movs	r3, #1
 80065f8:	4632      	mov	r2, r6
 80065fa:	4649      	mov	r1, r9
 80065fc:	4640      	mov	r0, r8
 80065fe:	47d0      	blx	sl
 8006600:	3001      	adds	r0, #1
 8006602:	d09d      	beq.n	8006540 <_printf_i+0x15c>
 8006604:	3501      	adds	r5, #1
 8006606:	68e3      	ldr	r3, [r4, #12]
 8006608:	9903      	ldr	r1, [sp, #12]
 800660a:	1a5b      	subs	r3, r3, r1
 800660c:	42ab      	cmp	r3, r5
 800660e:	dcf2      	bgt.n	80065f6 <_printf_i+0x212>
 8006610:	e7eb      	b.n	80065ea <_printf_i+0x206>
 8006612:	2500      	movs	r5, #0
 8006614:	f104 0619 	add.w	r6, r4, #25
 8006618:	e7f5      	b.n	8006606 <_printf_i+0x222>
 800661a:	bf00      	nop
 800661c:	08006a25 	.word	0x08006a25
 8006620:	08006a36 	.word	0x08006a36

08006624 <__sflush_r>:
 8006624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662c:	0716      	lsls	r6, r2, #28
 800662e:	4605      	mov	r5, r0
 8006630:	460c      	mov	r4, r1
 8006632:	d454      	bmi.n	80066de <__sflush_r+0xba>
 8006634:	684b      	ldr	r3, [r1, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	dc02      	bgt.n	8006640 <__sflush_r+0x1c>
 800663a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800663c:	2b00      	cmp	r3, #0
 800663e:	dd48      	ble.n	80066d2 <__sflush_r+0xae>
 8006640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006642:	2e00      	cmp	r6, #0
 8006644:	d045      	beq.n	80066d2 <__sflush_r+0xae>
 8006646:	2300      	movs	r3, #0
 8006648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800664c:	682f      	ldr	r7, [r5, #0]
 800664e:	6a21      	ldr	r1, [r4, #32]
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	d030      	beq.n	80066b6 <__sflush_r+0x92>
 8006654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006656:	89a3      	ldrh	r3, [r4, #12]
 8006658:	0759      	lsls	r1, r3, #29
 800665a:	d505      	bpl.n	8006668 <__sflush_r+0x44>
 800665c:	6863      	ldr	r3, [r4, #4]
 800665e:	1ad2      	subs	r2, r2, r3
 8006660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006662:	b10b      	cbz	r3, 8006668 <__sflush_r+0x44>
 8006664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006666:	1ad2      	subs	r2, r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800666c:	6a21      	ldr	r1, [r4, #32]
 800666e:	4628      	mov	r0, r5
 8006670:	47b0      	blx	r6
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	d106      	bne.n	8006686 <__sflush_r+0x62>
 8006678:	6829      	ldr	r1, [r5, #0]
 800667a:	291d      	cmp	r1, #29
 800667c:	d82b      	bhi.n	80066d6 <__sflush_r+0xb2>
 800667e:	4a2a      	ldr	r2, [pc, #168]	@ (8006728 <__sflush_r+0x104>)
 8006680:	410a      	asrs	r2, r1
 8006682:	07d6      	lsls	r6, r2, #31
 8006684:	d427      	bmi.n	80066d6 <__sflush_r+0xb2>
 8006686:	2200      	movs	r2, #0
 8006688:	6062      	str	r2, [r4, #4]
 800668a:	04d9      	lsls	r1, r3, #19
 800668c:	6922      	ldr	r2, [r4, #16]
 800668e:	6022      	str	r2, [r4, #0]
 8006690:	d504      	bpl.n	800669c <__sflush_r+0x78>
 8006692:	1c42      	adds	r2, r0, #1
 8006694:	d101      	bne.n	800669a <__sflush_r+0x76>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	b903      	cbnz	r3, 800669c <__sflush_r+0x78>
 800669a:	6560      	str	r0, [r4, #84]	@ 0x54
 800669c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800669e:	602f      	str	r7, [r5, #0]
 80066a0:	b1b9      	cbz	r1, 80066d2 <__sflush_r+0xae>
 80066a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066a6:	4299      	cmp	r1, r3
 80066a8:	d002      	beq.n	80066b0 <__sflush_r+0x8c>
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7ff fbf2 	bl	8005e94 <_free_r>
 80066b0:	2300      	movs	r3, #0
 80066b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80066b4:	e00d      	b.n	80066d2 <__sflush_r+0xae>
 80066b6:	2301      	movs	r3, #1
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b0      	blx	r6
 80066bc:	4602      	mov	r2, r0
 80066be:	1c50      	adds	r0, r2, #1
 80066c0:	d1c9      	bne.n	8006656 <__sflush_r+0x32>
 80066c2:	682b      	ldr	r3, [r5, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0c6      	beq.n	8006656 <__sflush_r+0x32>
 80066c8:	2b1d      	cmp	r3, #29
 80066ca:	d001      	beq.n	80066d0 <__sflush_r+0xac>
 80066cc:	2b16      	cmp	r3, #22
 80066ce:	d11e      	bne.n	800670e <__sflush_r+0xea>
 80066d0:	602f      	str	r7, [r5, #0]
 80066d2:	2000      	movs	r0, #0
 80066d4:	e022      	b.n	800671c <__sflush_r+0xf8>
 80066d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066da:	b21b      	sxth	r3, r3
 80066dc:	e01b      	b.n	8006716 <__sflush_r+0xf2>
 80066de:	690f      	ldr	r7, [r1, #16]
 80066e0:	2f00      	cmp	r7, #0
 80066e2:	d0f6      	beq.n	80066d2 <__sflush_r+0xae>
 80066e4:	0793      	lsls	r3, r2, #30
 80066e6:	680e      	ldr	r6, [r1, #0]
 80066e8:	bf08      	it	eq
 80066ea:	694b      	ldreq	r3, [r1, #20]
 80066ec:	600f      	str	r7, [r1, #0]
 80066ee:	bf18      	it	ne
 80066f0:	2300      	movne	r3, #0
 80066f2:	eba6 0807 	sub.w	r8, r6, r7
 80066f6:	608b      	str	r3, [r1, #8]
 80066f8:	f1b8 0f00 	cmp.w	r8, #0
 80066fc:	dde9      	ble.n	80066d2 <__sflush_r+0xae>
 80066fe:	6a21      	ldr	r1, [r4, #32]
 8006700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006702:	4643      	mov	r3, r8
 8006704:	463a      	mov	r2, r7
 8006706:	4628      	mov	r0, r5
 8006708:	47b0      	blx	r6
 800670a:	2800      	cmp	r0, #0
 800670c:	dc08      	bgt.n	8006720 <__sflush_r+0xfc>
 800670e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006716:	81a3      	strh	r3, [r4, #12]
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006720:	4407      	add	r7, r0
 8006722:	eba8 0800 	sub.w	r8, r8, r0
 8006726:	e7e7      	b.n	80066f8 <__sflush_r+0xd4>
 8006728:	dfbffffe 	.word	0xdfbffffe

0800672c <_fflush_r>:
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	690b      	ldr	r3, [r1, #16]
 8006730:	4605      	mov	r5, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b913      	cbnz	r3, 800673c <_fflush_r+0x10>
 8006736:	2500      	movs	r5, #0
 8006738:	4628      	mov	r0, r5
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	b118      	cbz	r0, 8006746 <_fflush_r+0x1a>
 800673e:	6a03      	ldr	r3, [r0, #32]
 8006740:	b90b      	cbnz	r3, 8006746 <_fflush_r+0x1a>
 8006742:	f7ff f9ad 	bl	8005aa0 <__sinit>
 8006746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0f3      	beq.n	8006736 <_fflush_r+0xa>
 800674e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006750:	07d0      	lsls	r0, r2, #31
 8006752:	d404      	bmi.n	800675e <_fflush_r+0x32>
 8006754:	0599      	lsls	r1, r3, #22
 8006756:	d402      	bmi.n	800675e <_fflush_r+0x32>
 8006758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800675a:	f7ff fb98 	bl	8005e8e <__retarget_lock_acquire_recursive>
 800675e:	4628      	mov	r0, r5
 8006760:	4621      	mov	r1, r4
 8006762:	f7ff ff5f 	bl	8006624 <__sflush_r>
 8006766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006768:	07da      	lsls	r2, r3, #31
 800676a:	4605      	mov	r5, r0
 800676c:	d4e4      	bmi.n	8006738 <_fflush_r+0xc>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	059b      	lsls	r3, r3, #22
 8006772:	d4e1      	bmi.n	8006738 <_fflush_r+0xc>
 8006774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006776:	f7ff fb8b 	bl	8005e90 <__retarget_lock_release_recursive>
 800677a:	e7dd      	b.n	8006738 <_fflush_r+0xc>

0800677c <__swhatbuf_r>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	460c      	mov	r4, r1
 8006780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006784:	2900      	cmp	r1, #0
 8006786:	b096      	sub	sp, #88	@ 0x58
 8006788:	4615      	mov	r5, r2
 800678a:	461e      	mov	r6, r3
 800678c:	da0d      	bge.n	80067aa <__swhatbuf_r+0x2e>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006794:	f04f 0100 	mov.w	r1, #0
 8006798:	bf14      	ite	ne
 800679a:	2340      	movne	r3, #64	@ 0x40
 800679c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067a0:	2000      	movs	r0, #0
 80067a2:	6031      	str	r1, [r6, #0]
 80067a4:	602b      	str	r3, [r5, #0]
 80067a6:	b016      	add	sp, #88	@ 0x58
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	466a      	mov	r2, sp
 80067ac:	f000 f848 	bl	8006840 <_fstat_r>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	dbec      	blt.n	800678e <__swhatbuf_r+0x12>
 80067b4:	9901      	ldr	r1, [sp, #4]
 80067b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067be:	4259      	negs	r1, r3
 80067c0:	4159      	adcs	r1, r3
 80067c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067c6:	e7eb      	b.n	80067a0 <__swhatbuf_r+0x24>

080067c8 <__smakebuf_r>:
 80067c8:	898b      	ldrh	r3, [r1, #12]
 80067ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067cc:	079d      	lsls	r5, r3, #30
 80067ce:	4606      	mov	r6, r0
 80067d0:	460c      	mov	r4, r1
 80067d2:	d507      	bpl.n	80067e4 <__smakebuf_r+0x1c>
 80067d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	2301      	movs	r3, #1
 80067de:	6163      	str	r3, [r4, #20]
 80067e0:	b003      	add	sp, #12
 80067e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e4:	ab01      	add	r3, sp, #4
 80067e6:	466a      	mov	r2, sp
 80067e8:	f7ff ffc8 	bl	800677c <__swhatbuf_r>
 80067ec:	9f00      	ldr	r7, [sp, #0]
 80067ee:	4605      	mov	r5, r0
 80067f0:	4639      	mov	r1, r7
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7ff fbba 	bl	8005f6c <_malloc_r>
 80067f8:	b948      	cbnz	r0, 800680e <__smakebuf_r+0x46>
 80067fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067fe:	059a      	lsls	r2, r3, #22
 8006800:	d4ee      	bmi.n	80067e0 <__smakebuf_r+0x18>
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	f043 0302 	orr.w	r3, r3, #2
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	e7e2      	b.n	80067d4 <__smakebuf_r+0xc>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	6020      	str	r0, [r4, #0]
 8006812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006816:	81a3      	strh	r3, [r4, #12]
 8006818:	9b01      	ldr	r3, [sp, #4]
 800681a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800681e:	b15b      	cbz	r3, 8006838 <__smakebuf_r+0x70>
 8006820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006824:	4630      	mov	r0, r6
 8006826:	f000 f81d 	bl	8006864 <_isatty_r>
 800682a:	b128      	cbz	r0, 8006838 <__smakebuf_r+0x70>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	f023 0303 	bic.w	r3, r3, #3
 8006832:	f043 0301 	orr.w	r3, r3, #1
 8006836:	81a3      	strh	r3, [r4, #12]
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	431d      	orrs	r5, r3
 800683c:	81a5      	strh	r5, [r4, #12]
 800683e:	e7cf      	b.n	80067e0 <__smakebuf_r+0x18>

08006840 <_fstat_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d07      	ldr	r5, [pc, #28]	@ (8006860 <_fstat_r+0x20>)
 8006844:	2300      	movs	r3, #0
 8006846:	4604      	mov	r4, r0
 8006848:	4608      	mov	r0, r1
 800684a:	4611      	mov	r1, r2
 800684c:	602b      	str	r3, [r5, #0]
 800684e:	f7fa fe25 	bl	800149c <_fstat>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	d102      	bne.n	800685c <_fstat_r+0x1c>
 8006856:	682b      	ldr	r3, [r5, #0]
 8006858:	b103      	cbz	r3, 800685c <_fstat_r+0x1c>
 800685a:	6023      	str	r3, [r4, #0]
 800685c:	bd38      	pop	{r3, r4, r5, pc}
 800685e:	bf00      	nop
 8006860:	20000654 	.word	0x20000654

08006864 <_isatty_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d06      	ldr	r5, [pc, #24]	@ (8006880 <_isatty_r+0x1c>)
 8006868:	2300      	movs	r3, #0
 800686a:	4604      	mov	r4, r0
 800686c:	4608      	mov	r0, r1
 800686e:	602b      	str	r3, [r5, #0]
 8006870:	f7fa fe24 	bl	80014bc <_isatty>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_isatty_r+0x1a>
 8006878:	682b      	ldr	r3, [r5, #0]
 800687a:	b103      	cbz	r3, 800687e <_isatty_r+0x1a>
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	20000654 	.word	0x20000654

08006884 <_sbrk_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d06      	ldr	r5, [pc, #24]	@ (80068a0 <_sbrk_r+0x1c>)
 8006888:	2300      	movs	r3, #0
 800688a:	4604      	mov	r4, r0
 800688c:	4608      	mov	r0, r1
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	f7fa fe2c 	bl	80014ec <_sbrk>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_sbrk_r+0x1a>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_sbrk_r+0x1a>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	20000654 	.word	0x20000654

080068a4 <_init>:
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a6:	bf00      	nop
 80068a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068aa:	bc08      	pop	{r3}
 80068ac:	469e      	mov	lr, r3
 80068ae:	4770      	bx	lr

080068b0 <_fini>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	bf00      	nop
 80068b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b6:	bc08      	pop	{r3}
 80068b8:	469e      	mov	lr, r3
 80068ba:	4770      	bx	lr
