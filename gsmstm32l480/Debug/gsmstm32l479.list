
gsmstm32l479.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  0800a440  0800a440  0000b440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aab4  0800aab4  0000c204  2**0
                  CONTENTS
  4 .ARM          00000008  0800aab4  0800aab4  0000bab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aabc  0800aabc  0000c204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aabc  0800aabc  0000babc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aac0  0800aac0  0000bac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800aac4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000204  0800acc8  0000c204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a10  0800acc8  0000ca10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017624  00000000  00000000  0000c234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b89  00000000  00000000  00023858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  000263e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117f  00000000  00000000  00027a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f76  00000000  00000000  00028ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ec0  00000000  00000000  00052b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a516  00000000  00000000  0006c9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176ef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000759c  00000000  00000000  00176f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017e4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a424 	.word	0x0800a424

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800a424 	.word	0x0800a424

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <GSM_SendCommand>:
{
    HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
}

void GSM_SendCommand(const char *cmd, char *response, uint16_t resp_size)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	80fb      	strh	r3, [r7, #6]
    memset(response, 0, resp_size);
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	68b8      	ldr	r0, [r7, #8]
 8000eae:	f006 fd9c 	bl	80079ea <memset>
    HAL_UART_Transmit(&huart4, (uint8_t*)cmd, strlen(cmd), 100);
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff f9dc 	bl	8000270 <strlen>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	2364      	movs	r3, #100	@ 0x64
 8000ebe:	68f9      	ldr	r1, [r7, #12]
 8000ec0:	4806      	ldr	r0, [pc, #24]	@ (8000edc <GSM_SendCommand+0x44>)
 8000ec2:	f005 f925 	bl	8006110 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart4, (uint8_t*)response, resp_size, 100);
 8000ec6:	88fa      	ldrh	r2, [r7, #6]
 8000ec8:	2364      	movs	r3, #100	@ 0x64
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <GSM_SendCommand+0x44>)
 8000ece:	f005 f9a8 	bl	8006222 <HAL_UART_Receive>
//    GSM_Debug_Print("CMD: ");
//    GSM_Debug_Print(cmd);
//    GSM_Debug_Print("RESP: ");
//    GSM_Debug_Print(response);
//    GSM_Debug_Print("\r\n");
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000324 	.word	0x20000324

08000ee0 <Config_Init>:

// Initialize default configuration
void Config_Init(void)
{
 8000ee0:	b490      	push	{r4, r7}
 8000ee2:	af00      	add	r7, sp, #0
    strcpy(systemConfig.serverIP, "69.62.83.251");
 8000ee4:	4a06      	ldr	r2, [pc, #24]	@ (8000f00 <Config_Init+0x20>)
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <Config_Init+0x24>)
 8000ee8:	4614      	mov	r4, r2
 8000eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eec:	c407      	stmia	r4!, {r0, r1, r2}
 8000eee:	7023      	strb	r3, [r4, #0]
    systemConfig.serverPort = 4200;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <Config_Init+0x20>)
 8000ef2:	f241 0268 	movw	r2, #4200	@ 0x1068
 8000ef6:	829a      	strh	r2, [r3, #20]
    //systemConfig.refreshTime = 5; // seconds
   // strcpy(systemConfig.password, "default123");
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc90      	pop	{r4, r7}
 8000efe:	4770      	bx	lr
 8000f00:	200008a4 	.word	0x200008a4
 8000f04:	0800a440 	.word	0x0800a440

08000f08 <Read_ADC>:

void Read_ADC(uint16_t *values, uint32_t *channels, uint8_t num_channels)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	@ 0x30
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	4613      	mov	r3, r2
 8000f14:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]

    for (uint8_t i = 0; i < num_channels; i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f2e:	e03a      	b.n	8000fa6 <Read_ADC+0x9e>
    {
        sConfig.Channel = channels[i];
 8000f30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	4413      	add	r3, r2
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	617b      	str	r3, [r7, #20]
        sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3e:	2306      	movs	r3, #6
 8000f40:	61bb      	str	r3, [r7, #24]
        sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]

        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481b      	ldr	r0, [pc, #108]	@ (8000fbc <Read_ADC+0xb4>)
 8000f4e:	f001 fed9 	bl	8002d04 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <Read_ADC+0x54>
        {
            Error_Handler();
 8000f58:	f000 fdcc 	bl	8001af4 <Error_Handler>
        }

        if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000f5c:	4817      	ldr	r0, [pc, #92]	@ (8000fbc <Read_ADC+0xb4>)
 8000f5e:	f001 fcfd 	bl	800295c <HAL_ADC_Start>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <Read_ADC+0x64>
        {
            Error_Handler();
 8000f68:	f000 fdc4 	bl	8001af4 <Error_Handler>
        }

        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	4812      	ldr	r0, [pc, #72]	@ (8000fbc <Read_ADC+0xb4>)
 8000f72:	f001 fde1 	bl	8002b38 <HAL_ADC_PollForConversion>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <Read_ADC+0x78>
        {
            Error_Handler();
 8000f7c:	f000 fdba 	bl	8001af4 <Error_Handler>
        }

        values[i] = HAL_ADC_GetValue(&hadc1);
 8000f80:	480e      	ldr	r0, [pc, #56]	@ (8000fbc <Read_ADC+0xb4>)
 8000f82:	f001 feb1 	bl	8002ce8 <HAL_ADC_GetValue>
 8000f86:	4601      	mov	r1, r0
 8000f88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	b28a      	uxth	r2, r1
 8000f94:	801a      	strh	r2, [r3, #0]
        HAL_ADC_Stop(&hadc1);
 8000f96:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <Read_ADC+0xb4>)
 8000f98:	f001 fd9a 	bl	8002ad0 <HAL_ADC_Stop>
    for (uint8_t i = 0; i < num_channels; i++)
 8000f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fa6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d3bf      	bcc.n	8000f30 <Read_ADC+0x28>
    }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	@ 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000220 	.word	0x20000220

08000fc0 <gsm_get_time_from_module>:

void gsm_get_time_from_module(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b092      	sub	sp, #72	@ 0x48
 8000fc4:	af00      	add	r7, sp, #0
    char response[64] = {0};
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	223c      	movs	r2, #60	@ 0x3c
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f006 fd0a 	bl	80079ea <memset>
    // Enable network time sync and save config
    GSM_SendCommand("AT+CLTS=1\r\n", response, sizeof(response));
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2240      	movs	r2, #64	@ 0x40
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481c      	ldr	r0, [pc, #112]	@ (8001050 <gsm_get_time_from_module+0x90>)
 8000fde:	f7ff ff5b 	bl	8000e98 <GSM_SendCommand>
    GSM_SendCommand("AT&W\r\n", response, sizeof(response));
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2240      	movs	r2, #64	@ 0x40
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481a      	ldr	r0, [pc, #104]	@ (8001054 <gsm_get_time_from_module+0x94>)
 8000fea:	f7ff ff55 	bl	8000e98 <GSM_SendCommand>

    GSM_SendCommand("AT+CCLK?\r\n", response, sizeof(response));
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2240      	movs	r2, #64	@ 0x40
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4818      	ldr	r0, [pc, #96]	@ (8001058 <gsm_get_time_from_module+0x98>)
 8000ff6:	f7ff ff4f 	bl	8000e98 <GSM_SendCommand>

    // Find the quote-delimited time string
    char *start = strchr(response, '\"');
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2122      	movs	r1, #34	@ 0x22
 8000ffe:	4618      	mov	r0, r3
 8001000:	f006 fcfb 	bl	80079fa <strchr>
 8001004:	6478      	str	r0, [r7, #68]	@ 0x44
    char *end = strrchr(response, '\"');
 8001006:	463b      	mov	r3, r7
 8001008:	2122      	movs	r1, #34	@ 0x22
 800100a:	4618      	mov	r0, r3
 800100c:	f006 fd15 	bl	8007a3a <strrchr>
 8001010:	6438      	str	r0, [r7, #64]	@ 0x40
    if (start && end && (end > start)) {
 8001012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001014:	2b00      	cmp	r3, #0
 8001016:	d017      	beq.n	8001048 <gsm_get_time_from_module+0x88>
 8001018:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d014      	beq.n	8001048 <gsm_get_time_from_module+0x88>
 800101e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001022:	429a      	cmp	r2, r3
 8001024:	d910      	bls.n	8001048 <gsm_get_time_from_module+0x88>
        strncpy(gsm_time, start + 1, end - start - 1);
 8001026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001028:	1c59      	adds	r1, r3, #1
 800102a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800102c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	3b01      	subs	r3, #1
 8001032:	461a      	mov	r2, r3
 8001034:	4809      	ldr	r0, [pc, #36]	@ (800105c <gsm_get_time_from_module+0x9c>)
 8001036:	f006 fced 	bl	8007a14 <strncpy>
        gsm_time[end - start - 1] = '\0';
 800103a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800103c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	3b01      	subs	r3, #1
 8001042:	4a06      	ldr	r2, [pc, #24]	@ (800105c <gsm_get_time_from_module+0x9c>)
 8001044:	2100      	movs	r1, #0
 8001046:	54d1      	strb	r1, [r2, r3]
    }
}
 8001048:	bf00      	nop
 800104a:	3748      	adds	r7, #72	@ 0x48
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	0800a450 	.word	0x0800a450
 8001054:	0800a45c 	.word	0x0800a45c
 8001058:	0800a464 	.word	0x0800a464
 800105c:	20000484 	.word	0x20000484

08001060 <gsm_get_imei>:

void gsm_get_imei(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0a4      	sub	sp, #144	@ 0x90
 8001064:	af00      	add	r7, sp, #0
    char resp[128] = {0};
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	227c      	movs	r2, #124	@ 0x7c
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f006 fcb9 	bl	80079ea <memset>
    GSM_SendCommand("AT+CGSN\r\n", resp, sizeof(resp));
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2280      	movs	r2, #128	@ 0x80
 800107c:	4619      	mov	r1, r3
 800107e:	482a      	ldr	r0, [pc, #168]	@ (8001128 <gsm_get_imei+0xc8>)
 8001080:	f7ff ff0a 	bl	8000e98 <GSM_SendCommand>

    // Find the first digit sequence in the response
    char *p = resp;
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (*p && !(*p >= '0' && *p <= '9')) {
 800108a:	e004      	b.n	8001096 <gsm_get_imei+0x36>
        p++;
 800108c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001090:	3301      	adds	r3, #1
 8001092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (*p && !(*p >= '0' && *p <= '9')) {
 8001096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d009      	beq.n	80010b4 <gsm_get_imei+0x54>
 80010a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80010a8:	d9f0      	bls.n	800108c <gsm_get_imei+0x2c>
 80010aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b39      	cmp	r3, #57	@ 0x39
 80010b2:	d8eb      	bhi.n	800108c <gsm_get_imei+0x2c>
    }

    if (*p) {
 80010b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d030      	beq.n	8001120 <gsm_get_imei+0xc0>
        char *end = p;
 80010be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (*end >= '0' && *end <= '9') {
 80010c6:	e004      	b.n	80010d2 <gsm_get_imei+0x72>
            end++;
 80010c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (*end >= '0' && *end <= '9') {
 80010d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80010da:	d904      	bls.n	80010e6 <gsm_get_imei+0x86>
 80010dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b39      	cmp	r3, #57	@ 0x39
 80010e4:	d9f0      	bls.n	80010c8 <gsm_get_imei+0x68>
        }

        int imei_len = end - p;
 80010e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80010ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        if (imei_len > 0 && imei_len < sizeof(imei)) {
 80010f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dd11      	ble.n	8001120 <gsm_get_imei+0xc0>
 80010fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001100:	2b3f      	cmp	r3, #63	@ 0x3f
 8001102:	d80d      	bhi.n	8001120 <gsm_get_imei+0xc0>
            strncpy(imei, p, imei_len);
 8001104:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001108:	461a      	mov	r2, r3
 800110a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800110e:	4807      	ldr	r0, [pc, #28]	@ (800112c <gsm_get_imei+0xcc>)
 8001110:	f006 fc80 	bl	8007a14 <strncpy>
            imei[imei_len] = '\0';
 8001114:	4a05      	ldr	r2, [pc, #20]	@ (800112c <gsm_get_imei+0xcc>)
 8001116:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800111a:	4413      	add	r3, r2
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
        }
    }

}
 8001120:	bf00      	nop
 8001122:	3790      	adds	r7, #144	@ 0x90
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800a470 	.word	0x0800a470
 800112c:	20000444 	.word	0x20000444

08001130 <gsm_get_battery_voltage>:



int gsm_get_battery_voltage(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b096      	sub	sp, #88	@ 0x58
 8001134:	af02      	add	r7, sp, #8
    char response[64] = {0};
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	223c      	movs	r2, #60	@ 0x3c
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f006 fc51 	bl	80079ea <memset>
    int battery_mv = -1;
 8001148:	f04f 33ff 	mov.w	r3, #4294967295
 800114c:	60bb      	str	r3, [r7, #8]

    GSM_SendCommand("AT+CBC\r\n", response, sizeof(response));
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2240      	movs	r2, #64	@ 0x40
 8001154:	4619      	mov	r1, r3
 8001156:	4810      	ldr	r0, [pc, #64]	@ (8001198 <gsm_get_battery_voltage+0x68>)
 8001158:	f7ff fe9e 	bl	8000e98 <GSM_SendCommand>

    char *ptr = strstr(response, "+CBC:");
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	490e      	ldr	r1, [pc, #56]	@ (800119c <gsm_get_battery_voltage+0x6c>)
 8001162:	4618      	mov	r0, r3
 8001164:	f006 fc7f 	bl	8007a66 <strstr>
 8001168:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (ptr)
 800116a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800116c:	2b00      	cmp	r3, #0
 800116e:	d00e      	beq.n	800118e <gsm_get_battery_voltage+0x5e>
    {
        int bcs, bcl;
        if (sscanf(ptr, "+CBC: %d,%d,%d", &bcs, &bcl, &battery_mv) == 3)
 8001170:	4639      	mov	r1, r7
 8001172:	1d3a      	adds	r2, r7, #4
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	460b      	mov	r3, r1
 800117c:	4908      	ldr	r1, [pc, #32]	@ (80011a0 <gsm_get_battery_voltage+0x70>)
 800117e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001180:	f006 fbc4 	bl	800790c <siscanf>
 8001184:	4603      	mov	r3, r0
 8001186:	2b03      	cmp	r3, #3
 8001188:	d101      	bne.n	800118e <gsm_get_battery_voltage+0x5e>
        {
            return battery_mv;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	e000      	b.n	8001190 <gsm_get_battery_voltage+0x60>
        }
    }
    return battery_mv;
 800118e:	68bb      	ldr	r3, [r7, #8]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3750      	adds	r7, #80	@ 0x50
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	0800a47c 	.word	0x0800a47c
 800119c:	0800a488 	.word	0x0800a488
 80011a0:	0800a490 	.word	0x0800a490

080011a4 <signal_strength>:

int signal_strength(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	@ 0x50
 80011a8:	af00      	add	r7, sp, #0
    char response[64] = {0};
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	223c      	movs	r2, #60	@ 0x3c
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f006 fc17 	bl	80079ea <memset>
    int rssi = -1, ber = -1;
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	607b      	str	r3, [r7, #4]

    GSM_SendCommand("AT+CSQ\r\n", response, sizeof(response));
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	2240      	movs	r2, #64	@ 0x40
 80011ce:	4619      	mov	r1, r3
 80011d0:	4811      	ldr	r0, [pc, #68]	@ (8001218 <signal_strength+0x74>)
 80011d2:	f7ff fe61 	bl	8000e98 <GSM_SendCommand>

    char *ptr = strstr(response, "+CSQ:");
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4910      	ldr	r1, [pc, #64]	@ (800121c <signal_strength+0x78>)
 80011dc:	4618      	mov	r0, r3
 80011de:	f006 fc42 	bl	8007a66 <strstr>
 80011e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (ptr)
 80011e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00f      	beq.n	800120a <signal_strength+0x66>
    {
        // Parse two integers: rssi and ber
        if (sscanf(ptr, "+CSQ: %d,%d", &rssi, &ber) == 2)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	f107 0208 	add.w	r2, r7, #8
 80011f0:	490b      	ldr	r1, [pc, #44]	@ (8001220 <signal_strength+0x7c>)
 80011f2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80011f4:	f006 fb8a 	bl	800790c <siscanf>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d105      	bne.n	800120a <signal_strength+0x66>
        {
            strength = rssi;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <signal_strength+0x80>)
 8001202:	6013      	str	r3, [r2, #0]
            return strength;
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <signal_strength+0x80>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	e001      	b.n	800120e <signal_strength+0x6a>
        }
    }
    return -1; // failed
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120e:	4618      	mov	r0, r3
 8001210:	3750      	adds	r7, #80	@ 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	0800a4a0 	.word	0x0800a4a0
 800121c:	0800a4ac 	.word	0x0800a4ac
 8001220:	0800a4b4 	.word	0x0800a4b4
 8001224:	20000000 	.word	0x20000000

08001228 <Create_JSON_String>:



void Create_JSON_String(void)
{
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	b093      	sub	sp, #76	@ 0x4c
 800122c:	af0c      	add	r7, sp, #48	@ 0x30
    // Read values
	gsm_get_imei();
 800122e:	f7ff ff17 	bl	8001060 <gsm_get_imei>
    gsm_get_time_from_module();
 8001232:	f7ff fec5 	bl	8000fc0 <gsm_get_time_from_module>
    gsm_battery_voltage = gsm_get_battery_voltage();
 8001236:	f7ff ff7b 	bl	8001130 <gsm_get_battery_voltage>
 800123a:	4603      	mov	r3, r0
 800123c:	4a20      	ldr	r2, [pc, #128]	@ (80012c0 <Create_JSON_String+0x98>)
 800123e:	6013      	str	r3, [r2, #0]
    Read_ADC(adc_values, channels, 8);
 8001240:	2208      	movs	r2, #8
 8001242:	4920      	ldr	r1, [pc, #128]	@ (80012c4 <Create_JSON_String+0x9c>)
 8001244:	4820      	ldr	r0, [pc, #128]	@ (80012c8 <Create_JSON_String+0xa0>)
 8001246:	f7ff fe5f 	bl	8000f08 <Read_ADC>
    int sig_strength = signal_strength(); // get latest signal strength
 800124a:	f7ff ffab 	bl	80011a4 <signal_strength>
 800124e:	6178      	str	r0, [r7, #20]

    // Create JSON
    snprintf(json_string, sizeof(json_string),
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <Create_JSON_String+0x98>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a1d      	ldr	r2, [pc, #116]	@ (80012cc <Create_JSON_String+0xa4>)
 8001256:	6812      	ldr	r2, [r2, #0]
        "}"
        "}",
        imei, gsm_time,
        sig_strength,
        gsm_battery_voltage, gsm_input_voltage,
        adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 8001258:	491b      	ldr	r1, [pc, #108]	@ (80012c8 <Create_JSON_String+0xa0>)
 800125a:	8809      	ldrh	r1, [r1, #0]
    snprintf(json_string, sizeof(json_string),
 800125c:	4608      	mov	r0, r1
        adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 800125e:	491a      	ldr	r1, [pc, #104]	@ (80012c8 <Create_JSON_String+0xa0>)
 8001260:	8849      	ldrh	r1, [r1, #2]
    snprintf(json_string, sizeof(json_string),
 8001262:	460c      	mov	r4, r1
        adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 8001264:	4918      	ldr	r1, [pc, #96]	@ (80012c8 <Create_JSON_String+0xa0>)
 8001266:	8889      	ldrh	r1, [r1, #4]
    snprintf(json_string, sizeof(json_string),
 8001268:	460d      	mov	r5, r1
        adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 800126a:	4917      	ldr	r1, [pc, #92]	@ (80012c8 <Create_JSON_String+0xa0>)
 800126c:	88c9      	ldrh	r1, [r1, #6]
    snprintf(json_string, sizeof(json_string),
 800126e:	460e      	mov	r6, r1
        adc_values[4], adc_values[5], adc_values[6], adc_values[7]
 8001270:	4915      	ldr	r1, [pc, #84]	@ (80012c8 <Create_JSON_String+0xa0>)
 8001272:	8909      	ldrh	r1, [r1, #8]
    snprintf(json_string, sizeof(json_string),
 8001274:	60f9      	str	r1, [r7, #12]
        adc_values[4], adc_values[5], adc_values[6], adc_values[7]
 8001276:	4914      	ldr	r1, [pc, #80]	@ (80012c8 <Create_JSON_String+0xa0>)
 8001278:	8949      	ldrh	r1, [r1, #10]
    snprintf(json_string, sizeof(json_string),
 800127a:	60b9      	str	r1, [r7, #8]
        adc_values[4], adc_values[5], adc_values[6], adc_values[7]
 800127c:	4912      	ldr	r1, [pc, #72]	@ (80012c8 <Create_JSON_String+0xa0>)
 800127e:	8989      	ldrh	r1, [r1, #12]
    snprintf(json_string, sizeof(json_string),
 8001280:	6079      	str	r1, [r7, #4]
        adc_values[4], adc_values[5], adc_values[6], adc_values[7]
 8001282:	4911      	ldr	r1, [pc, #68]	@ (80012c8 <Create_JSON_String+0xa0>)
 8001284:	89c9      	ldrh	r1, [r1, #14]
    snprintf(json_string, sizeof(json_string),
 8001286:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	910a      	str	r1, [sp, #40]	@ 0x28
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	9109      	str	r1, [sp, #36]	@ 0x24
 8001290:	68f9      	ldr	r1, [r7, #12]
 8001292:	9108      	str	r1, [sp, #32]
 8001294:	9607      	str	r6, [sp, #28]
 8001296:	9506      	str	r5, [sp, #24]
 8001298:	9405      	str	r4, [sp, #20]
 800129a:	9004      	str	r0, [sp, #16]
 800129c:	9203      	str	r2, [sp, #12]
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <Create_JSON_String+0xa8>)
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <Create_JSON_String+0xac>)
 80012aa:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <Create_JSON_String+0xb0>)
 80012ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012b0:	480a      	ldr	r0, [pc, #40]	@ (80012dc <Create_JSON_String+0xb4>)
 80012b2:	f006 faf7 	bl	80078a4 <sniprintf>
    );
}
 80012b6:	bf00      	nop
 80012b8:	371c      	adds	r7, #28
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000010 	.word	0x20000010
 80012c8:	20000434 	.word	0x20000434
 80012cc:	2000000c 	.word	0x2000000c
 80012d0:	20000484 	.word	0x20000484
 80012d4:	20000444 	.word	0x20000444
 80012d8:	0800a4c0 	.word	0x0800a4c0
 80012dc:	200004a4 	.word	0x200004a4

080012e0 <GPRS_Send_JSON>:




void GPRS_Send_JSON(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 80012e6:	af02      	add	r7, sp, #8
    char resp[512] = {0};
 80012e8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80012ec:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	3304      	adds	r3, #4
 80012f6:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f006 fb74 	bl	80079ea <memset>

    // Create fresh JSON data
    Create_JSON_String();
 8001302:	f7ff ff91 	bl	8001228 <Create_JSON_String>

    // 1. Basic init


    // 2. Set bearer profile
    GSM_SendCommand("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r\n", resp, sizeof(resp));
 8001306:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800130a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800130e:	4619      	mov	r1, r3
 8001310:	4858      	ldr	r0, [pc, #352]	@ (8001474 <GPRS_Send_JSON+0x194>)
 8001312:	f7ff fdc1 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(5);
 8001316:	2005      	movs	r0, #5
 8001318:	f000 ff7a 	bl	8002210 <HAL_Delay>

    GSM_SendCommand("AT+SAPBR=3,1,\"APN\",\"internet\"\r\n", resp, sizeof(resp));
 800131c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001324:	4619      	mov	r1, r3
 8001326:	4854      	ldr	r0, [pc, #336]	@ (8001478 <GPRS_Send_JSON+0x198>)
 8001328:	f7ff fdb6 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(5);
 800132c:	2005      	movs	r0, #5
 800132e:	f000 ff6f 	bl	8002210 <HAL_Delay>



    GSM_SendCommand("AT+SAPBR=1,1\r\n", resp, sizeof(resp));
 8001332:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133a:	4619      	mov	r1, r3
 800133c:	484f      	ldr	r0, [pc, #316]	@ (800147c <GPRS_Send_JSON+0x19c>)
 800133e:	f7ff fdab 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(5);
 8001342:	2005      	movs	r0, #5
 8001344:	f000 ff64 	bl	8002210 <HAL_Delay>

    GSM_SendCommand("AT+SAPBR=2,1\r\n", resp, sizeof(resp));
 8001348:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800134c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001350:	4619      	mov	r1, r3
 8001352:	484b      	ldr	r0, [pc, #300]	@ (8001480 <GPRS_Send_JSON+0x1a0>)
 8001354:	f7ff fda0 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(5);
 8001358:	2005      	movs	r0, #5
 800135a:	f000 ff59 	bl	8002210 <HAL_Delay>

    // 3. HTTP Init
//    GSM_SendCommand("AT+HTTPTERM\r\n", resp, sizeof(resp)); // ensure clean state
//    HAL_Delay(delay0);

    GSM_SendCommand("AT+HTTPINIT\r\n", resp, sizeof(resp));
 800135e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001366:	4619      	mov	r1, r3
 8001368:	4846      	ldr	r0, [pc, #280]	@ (8001484 <GPRS_Send_JSON+0x1a4>)
 800136a:	f7ff fd95 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(5);
 800136e:	2005      	movs	r0, #5
 8001370:	f000 ff4e 	bl	8002210 <HAL_Delay>

    GSM_SendCommand("AT+HTTPPARA=\"CID\",1\r\n", resp, sizeof(resp));
 8001374:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137c:	4619      	mov	r1, r3
 800137e:	4842      	ldr	r0, [pc, #264]	@ (8001488 <GPRS_Send_JSON+0x1a8>)
 8001380:	f7ff fd8a 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(5);
 8001384:	2005      	movs	r0, #5
 8001386:	f000 ff43 	bl	8002210 <HAL_Delay>



    char http_url[256] = {0};
 800138a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800138e:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	3304      	adds	r3, #4
 8001398:	22fc      	movs	r2, #252	@ 0xfc
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f006 fb24 	bl	80079ea <memset>
    snprintf(http_url, sizeof(http_url), "AT+HTTPPARA=\"URL\",\"http://%s:%d/api/test\"\r\n", systemConfig.serverIP, systemConfig.serverPort);
 80013a2:	4b3a      	ldr	r3, [pc, #232]	@ (800148c <GPRS_Send_JSON+0x1ac>)
 80013a4:	8a9b      	ldrh	r3, [r3, #20]
 80013a6:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4b37      	ldr	r3, [pc, #220]	@ (800148c <GPRS_Send_JSON+0x1ac>)
 80013ae:	4a38      	ldr	r2, [pc, #224]	@ (8001490 <GPRS_Send_JSON+0x1b0>)
 80013b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013b4:	f006 fa76 	bl	80078a4 <sniprintf>
    GSM_SendCommand(http_url, resp, sizeof(resp));
 80013b8:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80013bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd67 	bl	8000e98 <GSM_SendCommand>
       HAL_Delay(delay);
 80013ca:	4b32      	ldr	r3, [pc, #200]	@ (8001494 <GPRS_Send_JSON+0x1b4>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 ff1e 	bl	8002210 <HAL_Delay>
//             "AT+HTTPPARA=\"URL\",\"http://69.62.83.251:4200/api/test\"\r\n");
//    GSM_SendCommand(http_url, resp, sizeof(resp));
//    HAL_Delay(delay);

    // 5. Set content type to JSON (or x-www-form-urlencoded)
    GSM_SendCommand("AT+HTTPPARA=\"CONTENT\",\"application/json\"\r\n", resp, sizeof(resp));
 80013d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013dc:	4619      	mov	r1, r3
 80013de:	482e      	ldr	r0, [pc, #184]	@ (8001498 <GPRS_Send_JSON+0x1b8>)
 80013e0:	f7ff fd5a 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(delay);
 80013e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <GPRS_Send_JSON+0x1b4>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 ff11 	bl	8002210 <HAL_Delay>

//    // 6. Send data length
    char data_len_cmd[64];
    snprintf(data_len_cmd, sizeof(data_len_cmd), "AT+HTTPDATA=%d,1000\r\n", (int)strlen(json_string));
 80013ee:	482b      	ldr	r0, [pc, #172]	@ (800149c <GPRS_Send_JSON+0x1bc>)
 80013f0:	f7fe ff3e 	bl	8000270 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4638      	mov	r0, r7
 80013f8:	4a29      	ldr	r2, [pc, #164]	@ (80014a0 <GPRS_Send_JSON+0x1c0>)
 80013fa:	2140      	movs	r1, #64	@ 0x40
 80013fc:	f006 fa52 	bl	80078a4 <sniprintf>
    GSM_SendCommand(data_len_cmd, resp, sizeof(resp));
 8001400:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8001404:	463b      	mov	r3, r7
 8001406:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fd44 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(delay);
 8001410:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <GPRS_Send_JSON+0x1b4>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fefb 	bl	8002210 <HAL_Delay>

    // 7. Send actual JSON data
    HAL_UART_Transmit(&huart4, (uint8_t*)json_string, strlen(json_string), HAL_MAX_DELAY);
 800141a:	4820      	ldr	r0, [pc, #128]	@ (800149c <GPRS_Send_JSON+0x1bc>)
 800141c:	f7fe ff28 	bl	8000270 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	491c      	ldr	r1, [pc, #112]	@ (800149c <GPRS_Send_JSON+0x1bc>)
 800142a:	481e      	ldr	r0, [pc, #120]	@ (80014a4 <GPRS_Send_JSON+0x1c4>)
 800142c:	f004 fe70 	bl	8006110 <HAL_UART_Transmit>
    HAL_Delay(delay);
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <GPRS_Send_JSON+0x1b4>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 feeb 	bl	8002210 <HAL_Delay>

    // 8. HTTP POST
    GSM_SendCommand("AT+HTTPACTION=1\r\n", resp, sizeof(resp));
 800143a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800143e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001442:	4619      	mov	r1, r3
 8001444:	4818      	ldr	r0, [pc, #96]	@ (80014a8 <GPRS_Send_JSON+0x1c8>)
 8001446:	f7ff fd27 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(300);
 800144a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800144e:	f000 fedf 	bl	8002210 <HAL_Delay>
//    // 9. Read server response
//    GSM_SendCommand("AT+HTTPREAD\r\n", resp, sizeof(resp));
//    HAL_Delay(delay);

    // 10. End HTTP
    GSM_SendCommand("AT+HTTPTERM\r\n", resp, sizeof(resp));
 8001452:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800145a:	4619      	mov	r1, r3
 800145c:	4813      	ldr	r0, [pc, #76]	@ (80014ac <GPRS_Send_JSON+0x1cc>)
 800145e:	f7ff fd1b 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(10);
 8001462:	200a      	movs	r0, #10
 8001464:	f000 fed4 	bl	8002210 <HAL_Delay>

    // 11. Close bearer
//    GSM_SendCommand("AT+SAPBR=0,1\r\n", resp, sizeof(resp));
//    HAL_Delay(delay);
}
 8001468:	bf00      	nop
 800146a:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	0800a570 	.word	0x0800a570
 8001478:	0800a590 	.word	0x0800a590
 800147c:	0800a5b0 	.word	0x0800a5b0
 8001480:	0800a5c0 	.word	0x0800a5c0
 8001484:	0800a5d0 	.word	0x0800a5d0
 8001488:	0800a5e0 	.word	0x0800a5e0
 800148c:	200008a4 	.word	0x200008a4
 8001490:	0800a5f8 	.word	0x0800a5f8
 8001494:	20000004 	.word	0x20000004
 8001498:	0800a624 	.word	0x0800a624
 800149c:	200004a4 	.word	0x200004a4
 80014a0:	0800a650 	.word	0x0800a650
 80014a4:	20000324 	.word	0x20000324
 80014a8:	0800a668 	.word	0x0800a668
 80014ac:	0800a67c 	.word	0x0800a67c

080014b0 <Check_Incoming_SMS>:


void Check_Incoming_SMS(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80014b6:	af00      	add	r7, sp, #0
    char response[512] = {0};
 80014b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014bc:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	3304      	adds	r3, #4
 80014c6:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f006 fa8c 	bl	80079ea <memset>

    // Set SMS text mode
    GSM_SendCommand("AT+CMGF=1\r\n", response, sizeof(response));
 80014d2:	463b      	mov	r3, r7
 80014d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <Check_Incoming_SMS+0x60>)
 80014dc:	f7ff fcdc 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(100);
 80014e0:	2064      	movs	r0, #100	@ 0x64
 80014e2:	f000 fe95 	bl	8002210 <HAL_Delay>

    // List all SMS messages (unread + read)
    GSM_SendCommand("AT+CMGL=\"ALL\"\r\n", response, sizeof(response));
 80014e6:	463b      	mov	r3, r7
 80014e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ec:	4619      	mov	r1, r3
 80014ee:	4809      	ldr	r0, [pc, #36]	@ (8001514 <Check_Incoming_SMS+0x64>)
 80014f0:	f7ff fcd2 	bl	8000e98 <GSM_SendCommand>
    HAL_Delay(500);
 80014f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014f8:	f000 fe8a 	bl	8002210 <HAL_Delay>

    // Parse SMS messages and look for configuration updates
    Parse_SMS_Messages(response);
 80014fc:	463b      	mov	r3, r7
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 f80a 	bl	8001518 <Parse_SMS_Messages>


}
 8001504:	bf00      	nop
 8001506:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0800a68c 	.word	0x0800a68c
 8001514:	0800a698 	.word	0x0800a698

08001518 <Parse_SMS_Messages>:

// Function to parse SMS messages and extract configuration
void Parse_SMS_Messages(char* sms_data)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    char *line_start = sms_data;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	60fb      	str	r3, [r7, #12]
    char *line_end;

    while ((line_end = strstr(line_start, "\r\n")) != NULL)
 8001524:	e019      	b.n	800155a <Parse_SMS_Messages+0x42>
    {
        // Null terminate the current line
        *line_end = '\0';
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]

        // Check if this line contains SMS content (not header)
        if (strstr(line_start, "+CMGL:") == NULL && strlen(line_start) > 0)
 800152c:	4912      	ldr	r1, [pc, #72]	@ (8001578 <Parse_SMS_Messages+0x60>)
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f006 fa99 	bl	8007a66 <strstr>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <Parse_SMS_Messages+0x36>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <Parse_SMS_Messages+0x36>
        {
            // This might be SMS content, try to extract IP and port
            if (Extract_IP_Port_From_SMS(line_start))
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f81c 	bl	8001580 <Extract_IP_Port_From_SMS>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d10e      	bne.n	800156c <Parse_SMS_Messages+0x54>
                break; // Exit after first successful configuration update
            }
        }

        // Restore the original character and move to next line
        *line_end = '\r';
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	220d      	movs	r2, #13
 8001552:	701a      	strb	r2, [r3, #0]
        line_start = line_end + 2; // Skip \r\n
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3302      	adds	r3, #2
 8001558:	60fb      	str	r3, [r7, #12]
    while ((line_end = strstr(line_start, "\r\n")) != NULL)
 800155a:	4908      	ldr	r1, [pc, #32]	@ (800157c <Parse_SMS_Messages+0x64>)
 800155c:	68f8      	ldr	r0, [r7, #12]
 800155e:	f006 fa82 	bl	8007a66 <strstr>
 8001562:	60b8      	str	r0, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1dd      	bne.n	8001526 <Parse_SMS_Messages+0xe>
    }
}
 800156a:	e000      	b.n	800156e <Parse_SMS_Messages+0x56>
                break; // Exit after first successful configuration update
 800156c:	bf00      	nop
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	0800a6a8 	.word	0x0800a6a8
 800157c:	0800a6b0 	.word	0x0800a6b0

08001580 <Extract_IP_Port_From_SMS>:




int Extract_IP_Port_From_SMS(char* sms_content)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b095      	sub	sp, #84	@ 0x54
 8001584:	af04      	add	r7, sp, #16
 8001586:	6078      	str	r0, [r7, #4]
    char temp_ip[20] = {0};
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	f107 0320 	add.w	r3, r7, #32
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
    uint16_t temp_port = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	837b      	strh	r3, [r7, #26]
    int ip_parts[4];

    // Look for pattern: xxx.xxx.xxx.xxx,xxxx
    // Using sscanf to extract IP and port
    if (sscanf(sms_content, "%d.%d.%d.%d,%hu",
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	1d19      	adds	r1, r3, #4
 80015a4:	f107 0208 	add.w	r2, r7, #8
 80015a8:	f107 031a 	add.w	r3, r7, #26
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	330c      	adds	r3, #12
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	3308      	adds	r3, #8
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	460b      	mov	r3, r1
 80015c0:	4944      	ldr	r1, [pc, #272]	@ (80016d4 <Extract_IP_Port_From_SMS+0x154>)
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f006 f9a2 	bl	800790c <siscanf>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b05      	cmp	r3, #5
 80015cc:	d138      	bne.n	8001640 <Extract_IP_Port_From_SMS+0xc0>
               &ip_parts[0], &ip_parts[1], &ip_parts[2], &ip_parts[3], &temp_port) == 5)
    {
        // Validate IP address parts (0-255)
        for (int i = 0; i < 4; i++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015d2:	e014      	b.n	80015fe <Extract_IP_Port_From_SMS+0x7e>
        {
            if (ip_parts[i] < 0 || ip_parts[i] > 255)
 80015d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	3340      	adds	r3, #64	@ 0x40
 80015da:	443b      	add	r3, r7
 80015dc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	db07      	blt.n	80015f4 <Extract_IP_Port_From_SMS+0x74>
 80015e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	3340      	adds	r3, #64	@ 0x40
 80015ea:	443b      	add	r3, r7
 80015ec:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80015f0:	2bff      	cmp	r3, #255	@ 0xff
 80015f2:	dd01      	ble.n	80015f8 <Extract_IP_Port_From_SMS+0x78>
            {
                //GSM_Debug_Print("Invalid IP address in SMS\r\n");
                return 0; // Invalid IP
 80015f4:	2300      	movs	r3, #0
 80015f6:	e068      	b.n	80016ca <Extract_IP_Port_From_SMS+0x14a>
        for (int i = 0; i < 4; i++)
 80015f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015fa:	3301      	adds	r3, #1
 80015fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001600:	2b03      	cmp	r3, #3
 8001602:	dde7      	ble.n	80015d4 <Extract_IP_Port_From_SMS+0x54>
            }
        }

        // Validate port (1-65535)
        if (temp_port == 0 || temp_port > 65535)
 8001604:	8b7b      	ldrh	r3, [r7, #26]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <Extract_IP_Port_From_SMS+0x8e>
        {
           // GSM_Debug_Print("Invalid port in SMS\r\n");
            return 0; // Invalid port
 800160a:	2300      	movs	r3, #0
 800160c:	e05d      	b.n	80016ca <Extract_IP_Port_From_SMS+0x14a>
        }

        // Format IP address string
        snprintf(temp_ip, sizeof(temp_ip), "%d.%d.%d.%d",
 800160e:	68bc      	ldr	r4, [r7, #8]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	6979      	ldr	r1, [r7, #20]
 8001616:	f107 001c 	add.w	r0, r7, #28
 800161a:	9102      	str	r1, [sp, #8]
 800161c:	9201      	str	r2, [sp, #4]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	4623      	mov	r3, r4
 8001622:	4a2d      	ldr	r2, [pc, #180]	@ (80016d8 <Extract_IP_Port_From_SMS+0x158>)
 8001624:	2114      	movs	r1, #20
 8001626:	f006 f93d 	bl	80078a4 <sniprintf>
                 ip_parts[0], ip_parts[1], ip_parts[2], ip_parts[3]);

        // Update system configuration
        strcpy(systemConfig.serverIP, temp_ip);
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	4619      	mov	r1, r3
 8001630:	482a      	ldr	r0, [pc, #168]	@ (80016dc <Extract_IP_Port_From_SMS+0x15c>)
 8001632:	f006 faa6 	bl	8007b82 <strcpy>
        systemConfig.serverPort = temp_port;
 8001636:	8b7a      	ldrh	r2, [r7, #26]
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <Extract_IP_Port_From_SMS+0x15c>)
 800163a:	829a      	strh	r2, [r3, #20]
        //char debug_msg[100];
        //snprintf(debug_msg, sizeof(debug_msg), "New Config - IP: %s, Port: %d\r\n",
        //         systemConfig.serverIP, systemConfig.serverPort);
        //GSM_Debug_Print(debug_msg);

        return 1; // Success - THIS WAS MISSING!
 800163c:	2301      	movs	r3, #1
 800163e:	e044      	b.n	80016ca <Extract_IP_Port_From_SMS+0x14a>
    }

    // Alternative pattern search if sscanf fails
    // Look for IP pattern manually
    char *ip_start = sms_content;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (*ip_start)
 8001644:	e03c      	b.n	80016c0 <Extract_IP_Port_From_SMS+0x140>
    {
        if (*ip_start >= '0' && *ip_start <= '9')
 8001646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b2f      	cmp	r3, #47	@ 0x2f
 800164c:	d935      	bls.n	80016ba <Extract_IP_Port_From_SMS+0x13a>
 800164e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b39      	cmp	r3, #57	@ 0x39
 8001654:	d831      	bhi.n	80016ba <Extract_IP_Port_From_SMS+0x13a>
        {
            // Found start of potential IP
            char *comma_pos = strchr(ip_start, ',');
 8001656:	212c      	movs	r1, #44	@ 0x2c
 8001658:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800165a:	f006 f9ce 	bl	80079fa <strchr>
 800165e:	6378      	str	r0, [r7, #52]	@ 0x34
            if (comma_pos != NULL)
 8001660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001662:	2b00      	cmp	r3, #0
 8001664:	d029      	beq.n	80016ba <Extract_IP_Port_From_SMS+0x13a>
            {
                // Extract IP part
                int ip_len = comma_pos - ip_start;
 8001666:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	633b      	str	r3, [r7, #48]	@ 0x30
                if (ip_len < sizeof(temp_ip))
 800166e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001670:	2b13      	cmp	r3, #19
 8001672:	d822      	bhi.n	80016ba <Extract_IP_Port_From_SMS+0x13a>
                {
                    strncpy(temp_ip, ip_start, ip_len);
 8001674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800167c:	4618      	mov	r0, r3
 800167e:	f006 f9c9 	bl	8007a14 <strncpy>
                    temp_ip[ip_len] = '\0';
 8001682:	f107 021c 	add.w	r2, r7, #28
 8001686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001688:	4413      	add	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]

                    // Extract port part
                    temp_port = (uint16_t)atoi(comma_pos + 1);
 800168e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001690:	3301      	adds	r3, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f005 fb61 	bl	8006d5a <atoi>
 8001698:	4603      	mov	r3, r0
 800169a:	b29b      	uxth	r3, r3
 800169c:	837b      	strh	r3, [r7, #26]

                    // Basic validation and update
                    if (temp_port > 0 && temp_port <= 65535)
 800169e:	8b7b      	ldrh	r3, [r7, #26]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00a      	beq.n	80016ba <Extract_IP_Port_From_SMS+0x13a>
                    {
                        strcpy(systemConfig.serverIP, temp_ip);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	480c      	ldr	r0, [pc, #48]	@ (80016dc <Extract_IP_Port_From_SMS+0x15c>)
 80016ac:	f006 fa69 	bl	8007b82 <strcpy>
                        systemConfig.serverPort = temp_port;
 80016b0:	8b7a      	ldrh	r2, [r7, #26]
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <Extract_IP_Port_From_SMS+0x15c>)
 80016b4:	829a      	strh	r2, [r3, #20]
                        //char debug_msg[100];
                        //snprintf(debug_msg, sizeof(debug_msg), "Config Updated - IP: %s, Port: %d\r\n",
                        //         systemConfig.serverIP, systemConfig.serverPort);
                        //GSM_Debug_Print(debug_msg);

                        return 1; // Success
 80016b6:	2301      	movs	r3, #1
 80016b8:	e007      	b.n	80016ca <Extract_IP_Port_From_SMS+0x14a>
                    }
                }
            }
        }
        ip_start++;
 80016ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016bc:	3301      	adds	r3, #1
 80016be:	63bb      	str	r3, [r7, #56]	@ 0x38
    while (*ip_start)
 80016c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1be      	bne.n	8001646 <Extract_IP_Port_From_SMS+0xc6>
    }

    return 0; // No valid configuration found
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3744      	adds	r7, #68	@ 0x44
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	0800a6b4 	.word	0x0800a6b4
 80016d8:	0800a6c4 	.word	0x0800a6c4
 80016dc:	200008a4 	.word	0x200008a4

080016e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e4:	f000 fd18 	bl	8002118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e8:	f000 f81c 	bl	8001724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ec:	f000 f9d2 	bl	8001a94 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016f0:	f000 f8e0 	bl	80018b4 <MX_I2C1_Init>
  MX_UART4_Init();
 80016f4:	f000 f96e 	bl	80019d4 <MX_UART4_Init>
  MX_ADC1_Init();
 80016f8:	f000 f866 	bl	80017c8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016fc:	f000 f99a 	bl	8001a34 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001700:	f000 f918 	bl	8001934 <MX_TIM2_Init>
  Config_Init();
 8001704:	f7ff fbec 	bl	8000ee0 <Config_Init>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		Check_Incoming_SMS();
 8001708:	f7ff fed2 	bl	80014b0 <Check_Incoming_SMS>
		GPRS_Send_JSON();
 800170c:	f7ff fde8 	bl	80012e0 <GPRS_Send_JSON>
		HAL_Delay(Delay);
 8001710:	4b03      	ldr	r3, [pc, #12]	@ (8001720 <main+0x40>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fd7b 	bl	8002210 <HAL_Delay>
		Check_Incoming_SMS();
 800171a:	bf00      	nop
 800171c:	e7f4      	b.n	8001708 <main+0x28>
 800171e:	bf00      	nop
 8001720:	20000006 	.word	0x20000006

08001724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b096      	sub	sp, #88	@ 0x58
 8001728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2244      	movs	r2, #68	@ 0x44
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f006 f959 	bl	80079ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001746:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800174a:	f002 fd41 	bl	80041d0 <HAL_PWREx_ControlVoltageScaling>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001754:	f000 f9ce 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001758:	2302      	movs	r3, #2
 800175a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001760:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001762:	2310      	movs	r3, #16
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001766:	2302      	movs	r3, #2
 8001768:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800176a:	2302      	movs	r3, #2
 800176c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800176e:	2301      	movs	r3, #1
 8001770:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001772:	230a      	movs	r3, #10
 8001774:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001776:	2307      	movs	r3, #7
 8001778:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800177a:	2302      	movs	r3, #2
 800177c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800177e:	2302      	movs	r3, #2
 8001780:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fd78 	bl	800427c <HAL_RCC_OscConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001792:	f000 f9af 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001796:	230f      	movs	r3, #15
 8001798:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179a:	2303      	movs	r3, #3
 800179c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017aa:	463b      	mov	r3, r7
 80017ac:	2104      	movs	r1, #4
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 f940 	bl	8004a34 <HAL_RCC_ClockConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017ba:	f000 f99b 	bl	8001af4 <Error_Handler>
  }
}
 80017be:	bf00      	nop
 80017c0:	3758      	adds	r7, #88	@ 0x58
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017ea:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 80017ec:	4a2f      	ldr	r2, [pc, #188]	@ (80018ac <MX_ADC1_Init+0xe4>)
 80017ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017f0:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017f6:	4b2c      	ldr	r3, [pc, #176]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017fc:	4b2a      	ldr	r3, [pc, #168]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001802:	4b29      	ldr	r3, [pc, #164]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001808:	4b27      	ldr	r3, [pc, #156]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 800180a:	2204      	movs	r2, #4
 800180c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800180e:	4b26      	ldr	r3, [pc, #152]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 8001810:	2200      	movs	r2, #0
 8001812:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001814:	4b24      	ldr	r3, [pc, #144]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 8001816:	2200      	movs	r2, #0
 8001818:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800181a:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 800181c:	2201      	movs	r2, #1
 800181e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001820:	4b21      	ldr	r3, [pc, #132]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001828:	4b1f      	ldr	r3, [pc, #124]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 800182a:	2200      	movs	r2, #0
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800182e:	4b1e      	ldr	r3, [pc, #120]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 8001830:	2200      	movs	r2, #0
 8001832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001834:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800183c:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 800183e:	2200      	movs	r2, #0
 8001840:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001842:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800184a:	4817      	ldr	r0, [pc, #92]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 800184c:	f000 ff36 	bl	80026bc <HAL_ADC_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001856:	f000 f94d 	bl	8001af4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4810      	ldr	r0, [pc, #64]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 8001866:	f002 f807 	bl	8003878 <HAL_ADCEx_MultiModeConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001870:	f000 f940 	bl	8001af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001874:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MX_ADC1_Init+0xe8>)
 8001876:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001878:	2306      	movs	r3, #6
 800187a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001880:	237f      	movs	r3, #127	@ 0x7f
 8001882:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001884:	2304      	movs	r3, #4
 8001886:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <MX_ADC1_Init+0xe0>)
 8001892:	f001 fa37 	bl	8002d04 <HAL_ADC_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800189c:	f000 f92a 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	@ 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000220 	.word	0x20000220
 80018ac:	50040000 	.word	0x50040000
 80018b0:	04300002 	.word	0x04300002

080018b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018ba:	4a1c      	ldr	r2, [pc, #112]	@ (800192c <MX_I2C1_Init+0x78>)
 80018bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001930 <MX_I2C1_Init+0x7c>)
 80018c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018c4:	4b18      	ldr	r3, [pc, #96]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d0:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018d6:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ee:	480e      	ldr	r0, [pc, #56]	@ (8001928 <MX_I2C1_Init+0x74>)
 80018f0:	f002 fb2e 	bl	8003f50 <HAL_I2C_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018fa:	f000 f8fb 	bl	8001af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018fe:	2100      	movs	r1, #0
 8001900:	4809      	ldr	r0, [pc, #36]	@ (8001928 <MX_I2C1_Init+0x74>)
 8001902:	f002 fbc0 	bl	8004086 <HAL_I2CEx_ConfigAnalogFilter>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800190c:	f000 f8f2 	bl	8001af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001910:	2100      	movs	r1, #0
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_I2C1_Init+0x74>)
 8001914:	f002 fc02 	bl	800411c <HAL_I2CEx_ConfigDigitalFilter>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800191e:	f000 f8e9 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000284 	.word	0x20000284
 800192c:	40005400 	.word	0x40005400
 8001930:	10d19ce4 	.word	0x10d19ce4

08001934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0310 	add.w	r3, r7, #16
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <MX_TIM2_Init+0x98>)
 8001954:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001958:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79999;
 800195a:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <MX_TIM2_Init+0x98>)
 800195c:	4a1c      	ldr	r2, [pc, #112]	@ (80019d0 <MX_TIM2_Init+0x9c>)
 800195e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b1a      	ldr	r3, [pc, #104]	@ (80019cc <MX_TIM2_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29999;
 8001966:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <MX_TIM2_Init+0x98>)
 8001968:	f247 522f 	movw	r2, #29999	@ 0x752f
 800196c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b17      	ldr	r3, [pc, #92]	@ (80019cc <MX_TIM2_Init+0x98>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001974:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <MX_TIM2_Init+0x98>)
 8001976:	2200      	movs	r2, #0
 8001978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800197a:	4814      	ldr	r0, [pc, #80]	@ (80019cc <MX_TIM2_Init+0x98>)
 800197c:	f003 ff3a 	bl	80057f4 <HAL_TIM_Base_Init>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001986:	f000 f8b5 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800198e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	480d      	ldr	r0, [pc, #52]	@ (80019cc <MX_TIM2_Init+0x98>)
 8001998:	f004 f88a 	bl	8005ab0 <HAL_TIM_ConfigClockSource>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019a2:	f000 f8a7 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4806      	ldr	r0, [pc, #24]	@ (80019cc <MX_TIM2_Init+0x98>)
 80019b4:	f004 fab8 	bl	8005f28 <HAL_TIMEx_MasterConfigSynchronization>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019be:	f000 f899 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200002d8 	.word	0x200002d8
 80019d0:	0001387f 	.word	0x0001387f

080019d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d8:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <MX_UART4_Init+0x58>)
 80019da:	4a15      	ldr	r2, [pc, #84]	@ (8001a30 <MX_UART4_Init+0x5c>)
 80019dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <MX_UART4_Init+0x58>)
 80019e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_UART4_Init+0x58>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <MX_UART4_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <MX_UART4_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <MX_UART4_Init+0x58>)
 80019fa:	220c      	movs	r2, #12
 80019fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <MX_UART4_Init+0x58>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <MX_UART4_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a0a:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <MX_UART4_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <MX_UART4_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_UART4_Init+0x58>)
 8001a18:	f004 fb2c 	bl	8006074 <HAL_UART_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a22:	f000 f867 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000324 	.word	0x20000324
 8001a30:	40004c00 	.word	0x40004c00

08001a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a3a:	4a15      	ldr	r2, [pc, #84]	@ (8001a90 <MX_USART1_UART_Init+0x5c>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a3e:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <MX_USART1_UART_Init+0x58>)
 8001a78:	f004 fafc 	bl	8006074 <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a82:	f000 f837 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200003ac 	.word	0x200003ac
 8001a90:	40013800 	.word	0x40013800

08001a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <MX_GPIO_Init+0x5c>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <MX_GPIO_Init+0x5c>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa6:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <MX_GPIO_Init+0x5c>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_GPIO_Init+0x5c>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	@ (8001af0 <MX_GPIO_Init+0x5c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001abe:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <MX_GPIO_Init+0x5c>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <MX_GPIO_Init+0x5c>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <MX_GPIO_Init+0x5c>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <MX_GPIO_Init+0x5c>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <Error_Handler+0x8>

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b12:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b22:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b2a:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <HAL_MspInit+0x44>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0ac      	sub	sp, #176	@ 0xb0
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2288      	movs	r2, #136	@ 0x88
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f005 ff3e 	bl	80079ea <memset>
  if(hadc->Instance==ADC1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a35      	ldr	r2, [pc, #212]	@ (8001c48 <HAL_ADC_MspInit+0x100>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d162      	bne.n	8001c3e <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b92:	2307      	movs	r3, #7
 8001b94:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b96:	2302      	movs	r3, #2
 8001b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b9e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ba2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 f967 	bl	8004e7c <HAL_RCCEx_PeriphCLKConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001bb4:	f7ff ff9e 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001bb8:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <HAL_ADC_MspInit+0x104>)
 8001bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbc:	4a23      	ldr	r2, [pc, #140]	@ (8001c4c <HAL_ADC_MspInit+0x104>)
 8001bbe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc4:	4b21      	ldr	r3, [pc, #132]	@ (8001c4c <HAL_ADC_MspInit+0x104>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c4c <HAL_ADC_MspInit+0x104>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c4c <HAL_ADC_MspInit+0x104>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c4c <HAL_ADC_MspInit+0x104>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <HAL_ADC_MspInit+0x104>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bec:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_ADC_MspInit+0x104>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf4:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_ADC_MspInit+0x104>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c00:	230f      	movs	r3, #15
 8001c02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c06:	230b      	movs	r3, #11
 8001c08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c16:	4619      	mov	r1, r3
 8001c18:	480d      	ldr	r0, [pc, #52]	@ (8001c50 <HAL_ADC_MspInit+0x108>)
 8001c1a:	f001 ffef 	bl	8003bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c1e:	230f      	movs	r3, #15
 8001c20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c24:	230b      	movs	r3, #11
 8001c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c34:	4619      	mov	r1, r3
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c3a:	f001 ffdf 	bl	8003bfc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c3e:	bf00      	nop
 8001c40:	37b0      	adds	r7, #176	@ 0xb0
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	50040000 	.word	0x50040000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48000800 	.word	0x48000800

08001c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0ac      	sub	sp, #176	@ 0xb0
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2288      	movs	r2, #136	@ 0x88
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f005 feb8 	bl	80079ea <memset>
  if(hi2c->Instance==I2C1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a21      	ldr	r2, [pc, #132]	@ (8001d04 <HAL_I2C_MspInit+0xb0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d13a      	bne.n	8001cfa <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c84:	2340      	movs	r3, #64	@ 0x40
 8001c86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 f8f3 	bl	8004e7c <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c9c:	f7ff ff2a 	bl	8001af4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <HAL_I2C_MspInit+0xb4>)
 8001ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca4:	4a18      	ldr	r2, [pc, #96]	@ (8001d08 <HAL_I2C_MspInit+0xb4>)
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cac:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HAL_I2C_MspInit+0xb4>)
 8001cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb8:	23c0      	movs	r3, #192	@ 0xc0
 8001cba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbe:	2312      	movs	r3, #18
 8001cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480b      	ldr	r0, [pc, #44]	@ (8001d0c <HAL_I2C_MspInit+0xb8>)
 8001cde:	f001 ff8d 	bl	8003bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_I2C_MspInit+0xb4>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce6:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <HAL_I2C_MspInit+0xb4>)
 8001ce8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_I2C_MspInit+0xb4>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cfa:	bf00      	nop
 8001cfc:	37b0      	adds	r7, #176	@ 0xb0
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40005400 	.word	0x40005400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000400 	.word	0x48000400

08001d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d20:	d113      	bne.n	8001d4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d22:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <HAL_TIM_Base_MspInit+0x44>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d26:	4a0b      	ldr	r2, [pc, #44]	@ (8001d54 <HAL_TIM_Base_MspInit+0x44>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <HAL_TIM_Base_MspInit+0x44>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	201c      	movs	r0, #28
 8001d40:	f001 ff25 	bl	8003b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d44:	201c      	movs	r0, #28
 8001d46:	f001 ff3e 	bl	8003bc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b0ae      	sub	sp, #184	@ 0xb8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d70:	f107 031c 	add.w	r3, r7, #28
 8001d74:	2288      	movs	r2, #136	@ 0x88
 8001d76:	2100      	movs	r1, #0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f005 fe36 	bl	80079ea <memset>
  if(huart->Instance==UART4)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a43      	ldr	r2, [pc, #268]	@ (8001e90 <HAL_UART_MspInit+0x138>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d13c      	bne.n	8001e02 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d88:	2308      	movs	r3, #8
 8001d8a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 f871 	bl	8004e7c <HAL_RCCEx_PeriphCLKConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001da0:	f7ff fea8 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001da4:	4b3b      	ldr	r3, [pc, #236]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	4a3a      	ldr	r2, [pc, #232]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001daa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001dae:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db0:	4b38      	ldr	r3, [pc, #224]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbc:	4b35      	ldr	r3, [pc, #212]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	4a34      	ldr	r2, [pc, #208]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc8:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dd4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dee:	2308      	movs	r3, #8
 8001df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4827      	ldr	r0, [pc, #156]	@ (8001e98 <HAL_UART_MspInit+0x140>)
 8001dfc:	f001 fefe 	bl	8003bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e00:	e041      	b.n	8001e86 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a25      	ldr	r2, [pc, #148]	@ (8001e9c <HAL_UART_MspInit+0x144>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d13c      	bne.n	8001e86 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e10:	2300      	movs	r3, #0
 8001e12:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 f82f 	bl	8004e7c <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001e24:	f7ff fe66 	bl	8001af4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e28:	4b1a      	ldr	r3, [pc, #104]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2c:	4a19      	ldr	r2, [pc, #100]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e32:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e34:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e40:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e44:	4a13      	ldr	r2, [pc, #76]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <HAL_UART_MspInit+0x13c>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e72:	2307      	movs	r3, #7
 8001e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e82:	f001 febb 	bl	8003bfc <HAL_GPIO_Init>
}
 8001e86:	bf00      	nop
 8001e88:	37b8      	adds	r7, #184	@ 0xb8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004c00 	.word	0x40004c00
 8001e94:	40021000 	.word	0x40021000
 8001e98:	48000800 	.word	0x48000800
 8001e9c:	40013800 	.word	0x40013800

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef6:	f000 f96b 	bl	80021d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <TIM2_IRQHandler+0x10>)
 8001f06:	f003 fccc 	bl	80058a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200002d8 	.word	0x200002d8

08001f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return 1;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <_kill>:

int _kill(int pid, int sig)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f2e:	f005 fdfb 	bl	8007b28 <__errno>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2216      	movs	r2, #22
 8001f36:	601a      	str	r2, [r3, #0]
  return -1;
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_exit>:

void _exit (int status)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ffe7 	bl	8001f24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f56:	bf00      	nop
 8001f58:	e7fd      	b.n	8001f56 <_exit+0x12>

08001f5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e00a      	b.n	8001f82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f6c:	f3af 8000 	nop.w
 8001f70:	4601      	mov	r1, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	60ba      	str	r2, [r7, #8]
 8001f78:	b2ca      	uxtb	r2, r1
 8001f7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	dbf0      	blt.n	8001f6c <_read+0x12>
  }

  return len;
 8001f8a:	687b      	ldr	r3, [r7, #4]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e009      	b.n	8001fba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	60ba      	str	r2, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	dbf1      	blt.n	8001fa6 <_write+0x12>
  }
  return len;
 8001fc2:	687b      	ldr	r3, [r7, #4]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_close>:

int _close(int file)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ff4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_isatty>:

int _isatty(int file)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800200c:	2301      	movs	r3, #1
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800203c:	4a14      	ldr	r2, [pc, #80]	@ (8002090 <_sbrk+0x5c>)
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <_sbrk+0x60>)
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <_sbrk+0x64>)
 8002052:	4a12      	ldr	r2, [pc, #72]	@ (800209c <_sbrk+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002056:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d207      	bcs.n	8002074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002064:	f005 fd60 	bl	8007b28 <__errno>
 8002068:	4603      	mov	r3, r0
 800206a:	220c      	movs	r2, #12
 800206c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	e009      	b.n	8002088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002074:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	4a05      	ldr	r2, [pc, #20]	@ (8002098 <_sbrk+0x64>)
 8002084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20018000 	.word	0x20018000
 8002094:	00000400 	.word	0x00000400
 8002098:	200008bc 	.word	0x200008bc
 800209c:	20000a10 	.word	0x20000a10

080020a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <SystemInit+0x20>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020aa:	4a05      	ldr	r2, [pc, #20]	@ (80020c0 <SystemInit+0x20>)
 80020ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020c8:	f7ff ffea 	bl	80020a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480c      	ldr	r0, [pc, #48]	@ (8002100 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ce:	490d      	ldr	r1, [pc, #52]	@ (8002104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002108 <LoopForever+0xe>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002110 <LoopForever+0x16>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f2:	f005 fd1f 	bl	8007b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020f6:	f7ff faf3 	bl	80016e0 <main>

080020fa <LoopForever>:

LoopForever:
    b LoopForever
 80020fa:	e7fe      	b.n	80020fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002108:	0800aac4 	.word	0x0800aac4
  ldr r2, =_sbss
 800210c:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002110:	20000a10 	.word	0x20000a10

08002114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC1_2_IRQHandler>
	...

08002118 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <HAL_Init+0x3c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a0b      	ldr	r2, [pc, #44]	@ (8002154 <HAL_Init+0x3c>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800212e:	2003      	movs	r0, #3
 8002130:	f001 fd22 	bl	8003b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002134:	2000      	movs	r0, #0
 8002136:	f000 f80f 	bl	8002158 <HAL_InitTick>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	71fb      	strb	r3, [r7, #7]
 8002144:	e001      	b.n	800214a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002146:	f7ff fcdb 	bl	8001b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800214a:	79fb      	ldrb	r3, [r7, #7]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40022000 	.word	0x40022000

08002158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002164:	4b17      	ldr	r3, [pc, #92]	@ (80021c4 <HAL_InitTick+0x6c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d023      	beq.n	80021b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800216c:	4b16      	ldr	r3, [pc, #88]	@ (80021c8 <HAL_InitTick+0x70>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <HAL_InitTick+0x6c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217a:	fbb3 f3f1 	udiv	r3, r3, r1
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4618      	mov	r0, r3
 8002184:	f001 fd2d 	bl	8003be2 <HAL_SYSTICK_Config>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10f      	bne.n	80021ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0f      	cmp	r3, #15
 8002192:	d809      	bhi.n	80021a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f001 fcf7 	bl	8003b8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021a0:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <HAL_InitTick+0x74>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e007      	b.n	80021b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e004      	b.n	80021b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	e001      	b.n	80021b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000038 	.word	0x20000038
 80021c8:	20000030 	.word	0x20000030
 80021cc:	20000034 	.word	0x20000034

080021d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_IncTick+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_IncTick+0x24>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_IncTick+0x24>)
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000038 	.word	0x20000038
 80021f4:	200008c0 	.word	0x200008c0

080021f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return uwTick;
 80021fc:	4b03      	ldr	r3, [pc, #12]	@ (800220c <HAL_GetTick+0x14>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	200008c0 	.word	0x200008c0

08002210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff ffee 	bl	80021f8 <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d005      	beq.n	8002236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_Delay+0x44>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002236:	bf00      	nop
 8002238:	f7ff ffde 	bl	80021f8 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d8f7      	bhi.n	8002238 <HAL_Delay+0x28>
  {
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000038 	.word	0x20000038

08002258 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	609a      	str	r2, [r3, #8]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	3360      	adds	r3, #96	@ 0x60
 80022d2:	461a      	mov	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <LL_ADC_SetOffset+0x44>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022f8:	bf00      	nop
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	03fff000 	.word	0x03fff000

08002308 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3360      	adds	r3, #96	@ 0x60
 8002316:	461a      	mov	r2, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3360      	adds	r3, #96	@ 0x60
 8002344:	461a      	mov	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	431a      	orrs	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800235e:	bf00      	nop
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3330      	adds	r3, #48	@ 0x30
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	4413      	add	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	211f      	movs	r1, #31
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	401a      	ands	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0e9b      	lsrs	r3, r3, #26
 80023c8:	f003 011f 	and.w	r1, r3, #31
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	431a      	orrs	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3314      	adds	r3, #20
 80023f8:	461a      	mov	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	0e5b      	lsrs	r3, r3, #25
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	4413      	add	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	0d1b      	lsrs	r3, r3, #20
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	2107      	movs	r1, #7
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	401a      	ands	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	0d1b      	lsrs	r3, r3, #20
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	43db      	mvns	r3, r3
 800245a:	401a      	ands	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0318 	and.w	r3, r3, #24
 8002462:	4908      	ldr	r1, [pc, #32]	@ (8002484 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002464:	40d9      	lsrs	r1, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	400b      	ands	r3, r1
 800246a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246e:	431a      	orrs	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	0007ffff 	.word	0x0007ffff

08002488 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 031f 	and.w	r3, r3, #31
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6093      	str	r3, [r2, #8]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024f8:	d101      	bne.n	80024fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800251c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002520:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002548:	d101      	bne.n	800254e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800256c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002594:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002598:	f043 0202 	orr.w	r2, r3, #2
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <LL_ADC_IsEnabled+0x18>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <LL_ADC_IsEnabled+0x1a>
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d101      	bne.n	80025ea <LL_ADC_IsDisableOngoing+0x18>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_ADC_IsDisableOngoing+0x1a>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002608:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800260c:	f043 0204 	orr.w	r2, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002630:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002634:	f043 0210 	orr.w	r2, r3, #16
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b04      	cmp	r3, #4
 800265a:	d101      	bne.n	8002660 <LL_ADC_REG_IsConversionOngoing+0x18>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800267e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d101      	bne.n	80026ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b089      	sub	sp, #36	@ 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e130      	b.n	8002938 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fa2f 	bl	8001b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fef1 	bl	80024e4 <LL_ADC_IsDeepPowerDownEnabled>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fed7 	bl	80024c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff0c 	bl	8002534 <LL_ADC_IsInternalRegulatorEnabled>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d115      	bne.n	800274e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fef0 	bl	800250c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800272c:	4b84      	ldr	r3, [pc, #528]	@ (8002940 <HAL_ADC_Init+0x284>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	4a84      	ldr	r2, [pc, #528]	@ (8002944 <HAL_ADC_Init+0x288>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	3301      	adds	r3, #1
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002740:	e002      	b.n	8002748 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	3b01      	subs	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f9      	bne.n	8002742 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff feee 	bl	8002534 <LL_ADC_IsInternalRegulatorEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10d      	bne.n	800277a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002762:	f043 0210 	orr.w	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff62 	bl	8002648 <LL_ADC_REG_IsConversionOngoing>
 8002784:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 80c9 	bne.w	8002926 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f040 80c5 	bne.w	8002926 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027a4:	f043 0202 	orr.w	r2, r3, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fefb 	bl	80025ac <LL_ADC_IsEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d115      	bne.n	80027e8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027bc:	4862      	ldr	r0, [pc, #392]	@ (8002948 <HAL_ADC_Init+0x28c>)
 80027be:	f7ff fef5 	bl	80025ac <LL_ADC_IsEnabled>
 80027c2:	4604      	mov	r4, r0
 80027c4:	4861      	ldr	r0, [pc, #388]	@ (800294c <HAL_ADC_Init+0x290>)
 80027c6:	f7ff fef1 	bl	80025ac <LL_ADC_IsEnabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	431c      	orrs	r4, r3
 80027ce:	4860      	ldr	r0, [pc, #384]	@ (8002950 <HAL_ADC_Init+0x294>)
 80027d0:	f7ff feec 	bl	80025ac <LL_ADC_IsEnabled>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4323      	orrs	r3, r4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4619      	mov	r1, r3
 80027e2:	485c      	ldr	r0, [pc, #368]	@ (8002954 <HAL_ADC_Init+0x298>)
 80027e4:	f7ff fd38 	bl	8002258 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7e5b      	ldrb	r3, [r3, #25]
 80027ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002806:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d106      	bne.n	8002824 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	3b01      	subs	r3, #1
 800281c:	045b      	lsls	r3, r3, #17
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	4b44      	ldr	r3, [pc, #272]	@ (8002958 <HAL_ADC_Init+0x29c>)
 8002848:	4013      	ands	r3, r2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	69b9      	ldr	r1, [r7, #24]
 8002850:	430b      	orrs	r3, r1
 8002852:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff1c 	bl	8002696 <LL_ADC_INJ_IsConversionOngoing>
 800285e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d13d      	bne.n	80028e2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d13a      	bne.n	80028e2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002870:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002878:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002888:	f023 0302 	bic.w	r3, r3, #2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	69b9      	ldr	r1, [r7, #24]
 8002892:	430b      	orrs	r3, r1
 8002894:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800289c:	2b01      	cmp	r3, #1
 800289e:	d118      	bne.n	80028d2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028aa:	f023 0304 	bic.w	r3, r3, #4
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028bc:	4311      	orrs	r1, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028c2:	430a      	orrs	r2, r1
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	611a      	str	r2, [r3, #16]
 80028d0:	e007      	b.n	80028e2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10c      	bne.n	8002904 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	f023 010f 	bic.w	r1, r3, #15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	1e5a      	subs	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30
 8002902:	e007      	b.n	8002914 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 020f 	bic.w	r2, r2, #15
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002918:	f023 0303 	bic.w	r3, r3, #3
 800291c:	f043 0201 	orr.w	r2, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54
 8002924:	e007      	b.n	8002936 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002936:	7ffb      	ldrb	r3, [r7, #31]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3724      	adds	r7, #36	@ 0x24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd90      	pop	{r4, r7, pc}
 8002940:	20000030 	.word	0x20000030
 8002944:	053e2d63 	.word	0x053e2d63
 8002948:	50040000 	.word	0x50040000
 800294c:	50040100 	.word	0x50040100
 8002950:	50040200 	.word	0x50040200
 8002954:	50040300 	.word	0x50040300
 8002958:	fff0c007 	.word	0xfff0c007

0800295c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002964:	4857      	ldr	r0, [pc, #348]	@ (8002ac4 <HAL_ADC_Start+0x168>)
 8002966:	f7ff fd8f 	bl	8002488 <LL_ADC_GetMultimode>
 800296a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fe69 	bl	8002648 <LL_ADC_REG_IsConversionOngoing>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	f040 809c 	bne.w	8002ab6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_ADC_Start+0x30>
 8002988:	2302      	movs	r3, #2
 800298a:	e097      	b.n	8002abc <HAL_ADC_Start+0x160>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fe63 	bl	8003660 <ADC_Enable>
 800299a:	4603      	mov	r3, r0
 800299c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 8083 	bne.w	8002aac <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a42      	ldr	r2, [pc, #264]	@ (8002ac8 <HAL_ADC_Start+0x16c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d002      	beq.n	80029ca <HAL_ADC_Start+0x6e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	e000      	b.n	80029cc <HAL_ADC_Start+0x70>
 80029ca:	4b40      	ldr	r3, [pc, #256]	@ (8002acc <HAL_ADC_Start+0x170>)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d002      	beq.n	80029da <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d105      	bne.n	80029e6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f2:	d106      	bne.n	8002a02 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f8:	f023 0206 	bic.w	r2, r3, #6
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a00:	e002      	b.n	8002a08 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	221c      	movs	r2, #28
 8002a0e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac8 <HAL_ADC_Start+0x16c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d002      	beq.n	8002a28 <HAL_ADC_Start+0xcc>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	e000      	b.n	8002a2a <HAL_ADC_Start+0xce>
 8002a28:	4b28      	ldr	r3, [pc, #160]	@ (8002acc <HAL_ADC_Start+0x170>)
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6812      	ldr	r2, [r2, #0]
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d008      	beq.n	8002a44 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d002      	beq.n	8002a44 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d114      	bne.n	8002a6e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a5a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fdc6 	bl	80025f8 <LL_ADC_REG_StartConversion>
 8002a6c:	e025      	b.n	8002aba <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a12      	ldr	r2, [pc, #72]	@ (8002ac8 <HAL_ADC_Start+0x16c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d002      	beq.n	8002a8a <HAL_ADC_Start+0x12e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	e000      	b.n	8002a8c <HAL_ADC_Start+0x130>
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <HAL_ADC_Start+0x170>)
 8002a8c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00f      	beq.n	8002aba <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aa2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002aaa:	e006      	b.n	8002aba <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002ab4:	e001      	b.n	8002aba <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	50040300 	.word	0x50040300
 8002ac8:	50040100 	.word	0x50040100
 8002acc:	50040000 	.word	0x50040000

08002ad0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Stop+0x16>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e023      	b.n	8002b2e <HAL_ADC_Stop+0x5e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002aee:	2103      	movs	r1, #3
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fcf9 	bl	80034e8 <ADC_ConversionStop>
 8002af6:	4603      	mov	r3, r0
 8002af8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d111      	bne.n	8002b24 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fe33 	bl	800376c <ADC_Disable>
 8002b06:	4603      	mov	r3, r0
 8002b08:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b42:	4866      	ldr	r0, [pc, #408]	@ (8002cdc <HAL_ADC_PollForConversion+0x1a4>)
 8002b44:	f7ff fca0 	bl	8002488 <LL_ADC_GetMultimode>
 8002b48:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d102      	bne.n	8002b58 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002b52:	2308      	movs	r3, #8
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	e02a      	b.n	8002bae <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b05      	cmp	r3, #5
 8002b62:	d002      	beq.n	8002b6a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b09      	cmp	r3, #9
 8002b68:	d111      	bne.n	8002b8e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0a4      	b.n	8002cd2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b88:	2304      	movs	r3, #4
 8002b8a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b8c:	e00f      	b.n	8002bae <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b8e:	4853      	ldr	r0, [pc, #332]	@ (8002cdc <HAL_ADC_PollForConversion+0x1a4>)
 8002b90:	f7ff fc88 	bl	80024a4 <LL_ADC_GetMultiDMATransfer>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d007      	beq.n	8002baa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9e:	f043 0220 	orr.w	r2, r3, #32
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e093      	b.n	8002cd2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002baa:	2304      	movs	r3, #4
 8002bac:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002bae:	f7ff fb23 	bl	80021f8 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bb4:	e021      	b.n	8002bfa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d01d      	beq.n	8002bfa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002bbe:	f7ff fb1b 	bl	80021f8 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <HAL_ADC_PollForConversion+0x9c>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d112      	bne.n	8002bfa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10b      	bne.n	8002bfa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be6:	f043 0204 	orr.w	r2, r3, #4
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e06b      	b.n	8002cd2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0d6      	beq.n	8002bb6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fba6 	bl	800236a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01c      	beq.n	8002c5e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7e5b      	ldrb	r3, [r3, #25]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d118      	bne.n	8002c5e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d111      	bne.n	8002c5e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce0 <HAL_ADC_PollForConversion+0x1a8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d002      	beq.n	8002c6e <HAL_ADC_PollForConversion+0x136>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	e000      	b.n	8002c70 <HAL_ADC_PollForConversion+0x138>
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <HAL_ADC_PollForConversion+0x1ac>)
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d008      	beq.n	8002c8a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d002      	beq.n	8002c8a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	d104      	bne.n	8002c94 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	e00c      	b.n	8002cae <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a11      	ldr	r2, [pc, #68]	@ (8002ce0 <HAL_ADC_PollForConversion+0x1a8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d002      	beq.n	8002ca4 <HAL_ADC_PollForConversion+0x16c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADC_PollForConversion+0x16e>
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <HAL_ADC_PollForConversion+0x1ac>)
 8002ca6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d104      	bne.n	8002cbe <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2208      	movs	r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e008      	b.n	8002cd0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d103      	bne.n	8002cd0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	220c      	movs	r2, #12
 8002cce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	50040300 	.word	0x50040300
 8002ce0:	50040100 	.word	0x50040100
 8002ce4:	50040000 	.word	0x50040000

08002ce8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b0b6      	sub	sp, #216	@ 0xd8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x22>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e3c9      	b.n	80034ba <HAL_ADC_ConfigChannel+0x7b6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fc88 	bl	8002648 <LL_ADC_REG_IsConversionOngoing>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 83aa 	bne.w	8003494 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d824      	bhi.n	8002d9a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	3b02      	subs	r3, #2
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d81b      	bhi.n	8002d92 <HAL_ADC_ConfigChannel+0x8e>
 8002d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d60 <HAL_ADC_ConfigChannel+0x5c>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d79 	.word	0x08002d79
 8002d68:	08002d81 	.word	0x08002d81
 8002d6c:	08002d89 	.word	0x08002d89
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d70:	230c      	movs	r3, #12
 8002d72:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d76:	e010      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d78:	2312      	movs	r3, #18
 8002d7a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d7e:	e00c      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d80:	2318      	movs	r3, #24
 8002d82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d86:	e008      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d90:	e003      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002d92:	2306      	movs	r3, #6
 8002d94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d98:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002da8:	f7ff faf2 	bl	8002390 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fc49 	bl	8002648 <LL_ADC_REG_IsConversionOngoing>
 8002db6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fc69 	bl	8002696 <LL_ADC_INJ_IsConversionOngoing>
 8002dc4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 81a4 	bne.w	800311a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f040 819f 	bne.w	800311a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6819      	ldr	r1, [r3, #0]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	461a      	mov	r2, r3
 8002dea:	f7ff fafd 	bl	80023e8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	08db      	lsrs	r3, r3, #3
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d00a      	beq.n	8002e26 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6919      	ldr	r1, [r3, #16]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e20:	f7ff fa4e 	bl	80022c0 <LL_ADC_SetOffset>
 8002e24:	e179      	b.n	800311a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fa6b 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d10a      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x14e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fa60 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	0e9b      	lsrs	r3, r3, #26
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	e01e      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x18c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fa55 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e004      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002e84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x1a4>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	0e9b      	lsrs	r3, r3, #26
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	e018      	b.n	8002eda <HAL_ADC_ConfigChannel+0x1d6>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	e004      	b.n	8002eda <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d106      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fa24 	bl	8002334 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fa08 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x214>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2101      	movs	r1, #1
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f9fd 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	0e9b      	lsrs	r3, r3, #26
 8002f12:	f003 021f 	and.w	r2, r3, #31
 8002f16:	e01e      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x252>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f9f2 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f2e:	fa93 f3a3 	rbit	r3, r3
 8002f32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f46:	2320      	movs	r3, #32
 8002f48:	e004      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x26a>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0e9b      	lsrs	r3, r3, #26
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	e018      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x29c>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e004      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002f96:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f9a:	fab3 f383 	clz	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d106      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff f9c1 	bl	8002334 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff f9a5 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x2da>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff f99a 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	0e9b      	lsrs	r3, r3, #26
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	e01e      	b.n	800301c <HAL_ADC_ConfigChannel+0x318>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f98f 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002ffc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003004:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e004      	b.n	800301a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003010:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x330>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	f003 031f 	and.w	r3, r3, #31
 8003032:	e014      	b.n	800305e <HAL_ADC_ConfigChannel+0x35a>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003042:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003048:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003050:	2320      	movs	r3, #32
 8003052:	e004      	b.n	800305e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003054:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800305e:	429a      	cmp	r2, r3
 8003060:	d106      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2200      	movs	r2, #0
 8003068:	2102      	movs	r1, #2
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff f962 	bl	8002334 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2103      	movs	r1, #3
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff f946 	bl	8002308 <LL_ADC_GetOffsetChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <HAL_ADC_ConfigChannel+0x398>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2103      	movs	r1, #3
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff f93b 	bl	8002308 <LL_ADC_GetOffsetChannel>
 8003092:	4603      	mov	r3, r0
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	f003 021f 	and.w	r2, r3, #31
 800309a:	e017      	b.n	80030cc <HAL_ADC_ConfigChannel+0x3c8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2103      	movs	r1, #3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff f930 	bl	8002308 <LL_ADC_GetOffsetChannel>
 80030a8:	4603      	mov	r3, r0
 80030aa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030b6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80030b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80030be:	2320      	movs	r3, #32
 80030c0:	e003      	b.n	80030ca <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80030c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x3e0>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	e011      	b.n	8003108 <HAL_ADC_ConfigChannel+0x404>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80030f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80030f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80030fc:	2320      	movs	r3, #32
 80030fe:	e003      	b.n	8003108 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003100:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003102:	fab3 f383 	clz	r3, r3
 8003106:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003108:	429a      	cmp	r2, r3
 800310a:	d106      	bne.n	800311a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2200      	movs	r2, #0
 8003112:	2103      	movs	r1, #3
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f90d 	bl	8002334 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fa44 	bl	80025ac <LL_ADC_IsEnabled>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 8140 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6819      	ldr	r1, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	461a      	mov	r2, r3
 800313a:	f7ff f981 	bl	8002440 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a8f      	ldr	r2, [pc, #572]	@ (8003380 <HAL_ADC_ConfigChannel+0x67c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	f040 8131 	bne.w	80033ac <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10b      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x46e>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	0e9b      	lsrs	r3, r3, #26
 8003160:	3301      	adds	r3, #1
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2b09      	cmp	r3, #9
 8003168:	bf94      	ite	ls
 800316a:	2301      	movls	r3, #1
 800316c:	2300      	movhi	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e019      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x4a2>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003182:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800318a:	2320      	movs	r3, #32
 800318c:	e003      	b.n	8003196 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800318e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	3301      	adds	r3, #1
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2b09      	cmp	r3, #9
 800319e:	bf94      	ite	ls
 80031a0:	2301      	movls	r3, #1
 80031a2:	2300      	movhi	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d079      	beq.n	800329e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d107      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x4c2>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	3301      	adds	r3, #1
 80031be:	069b      	lsls	r3, r3, #26
 80031c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031c4:	e015      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x4ee>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80031d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80031d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80031de:	2320      	movs	r3, #32
 80031e0:	e003      	b.n	80031ea <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80031e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	069b      	lsls	r3, r3, #26
 80031ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x50e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	3301      	adds	r3, #1
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	e017      	b.n	8003242 <HAL_ADC_ConfigChannel+0x53e>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003222:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800322a:	2320      	movs	r3, #32
 800322c:	e003      	b.n	8003236 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800322e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	b2db      	uxtb	r3, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	2101      	movs	r1, #1
 800323e:	fa01 f303 	lsl.w	r3, r1, r3
 8003242:	ea42 0103 	orr.w	r1, r2, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x564>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	3301      	adds	r3, #1
 800325a:	f003 021f 	and.w	r2, r3, #31
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	051b      	lsls	r3, r3, #20
 8003266:	e018      	b.n	800329a <HAL_ADC_ConfigChannel+0x596>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800327a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e003      	b.n	800328c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3301      	adds	r3, #1
 800328e:	f003 021f 	and.w	r2, r3, #31
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329a:	430b      	orrs	r3, r1
 800329c:	e081      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d107      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x5b6>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	0e9b      	lsrs	r3, r3, #26
 80032b0:	3301      	adds	r3, #1
 80032b2:	069b      	lsls	r3, r3, #26
 80032b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032b8:	e015      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x5e2>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80032d2:	2320      	movs	r3, #32
 80032d4:	e003      	b.n	80032de <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80032d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	069b      	lsls	r3, r3, #26
 80032e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x602>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	0e9b      	lsrs	r3, r3, #26
 80032f8:	3301      	adds	r3, #1
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	e017      	b.n	8003336 <HAL_ADC_ConfigChannel+0x632>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	61bb      	str	r3, [r7, #24]
  return result;
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800331e:	2320      	movs	r3, #32
 8003320:	e003      	b.n	800332a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	3301      	adds	r3, #1
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	ea42 0103 	orr.w	r1, r2, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10d      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x65e>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	3301      	adds	r3, #1
 800334e:	f003 021f 	and.w	r2, r3, #31
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	3b1e      	subs	r3, #30
 800335a:	051b      	lsls	r3, r3, #20
 800335c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003360:	e01e      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x69c>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	60fb      	str	r3, [r7, #12]
  return result;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800337a:	2320      	movs	r3, #32
 800337c:	e006      	b.n	800338c <HAL_ADC_ConfigChannel+0x688>
 800337e:	bf00      	nop
 8003380:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3301      	adds	r3, #1
 800338e:	f003 021f 	and.w	r2, r3, #31
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	3b1e      	subs	r3, #30
 800339a:	051b      	lsls	r3, r3, #20
 800339c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033a6:	4619      	mov	r1, r3
 80033a8:	f7ff f81e 	bl	80023e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b44      	ldr	r3, [pc, #272]	@ (80034c4 <HAL_ADC_ConfigChannel+0x7c0>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d07a      	beq.n	80034ae <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033b8:	4843      	ldr	r0, [pc, #268]	@ (80034c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80033ba:	f7fe ff73 	bl	80022a4 <LL_ADC_GetCommonPathInternalCh>
 80033be:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a41      	ldr	r2, [pc, #260]	@ (80034cc <HAL_ADC_ConfigChannel+0x7c8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d12c      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d126      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a3c      	ldr	r2, [pc, #240]	@ (80034d0 <HAL_ADC_ConfigChannel+0x7cc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d004      	beq.n	80033ec <HAL_ADC_ConfigChannel+0x6e8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a3b      	ldr	r2, [pc, #236]	@ (80034d4 <HAL_ADC_ConfigChannel+0x7d0>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d15d      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033f4:	4619      	mov	r1, r3
 80033f6:	4834      	ldr	r0, [pc, #208]	@ (80034c8 <HAL_ADC_ConfigChannel+0x7c4>)
 80033f8:	f7fe ff41 	bl	800227e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033fc:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <HAL_ADC_ConfigChannel+0x7d4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	4a36      	ldr	r2, [pc, #216]	@ (80034dc <HAL_ADC_ConfigChannel+0x7d8>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003416:	e002      	b.n	800341e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3b01      	subs	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f9      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003424:	e040      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a2d      	ldr	r2, [pc, #180]	@ (80034e0 <HAL_ADC_ConfigChannel+0x7dc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d118      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003434:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d112      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a23      	ldr	r2, [pc, #140]	@ (80034d0 <HAL_ADC_ConfigChannel+0x7cc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_ADC_ConfigChannel+0x74c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a22      	ldr	r2, [pc, #136]	@ (80034d4 <HAL_ADC_ConfigChannel+0x7d0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d12d      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003454:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003458:	4619      	mov	r1, r3
 800345a:	481b      	ldr	r0, [pc, #108]	@ (80034c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800345c:	f7fe ff0f 	bl	800227e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003460:	e024      	b.n	80034ac <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1f      	ldr	r2, [pc, #124]	@ (80034e4 <HAL_ADC_ConfigChannel+0x7e0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d120      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800346c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11a      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <HAL_ADC_ConfigChannel+0x7cc>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d115      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003482:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003486:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800348a:	4619      	mov	r1, r3
 800348c:	480e      	ldr	r0, [pc, #56]	@ (80034c8 <HAL_ADC_ConfigChannel+0x7c4>)
 800348e:	f7fe fef6 	bl	800227e <LL_ADC_SetCommonPathInternalCh>
 8003492:	e00c      	b.n	80034ae <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80034a6:	e002      	b.n	80034ae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	37d8      	adds	r7, #216	@ 0xd8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	80080000 	.word	0x80080000
 80034c8:	50040300 	.word	0x50040300
 80034cc:	c7520000 	.word	0xc7520000
 80034d0:	50040000 	.word	0x50040000
 80034d4:	50040200 	.word	0x50040200
 80034d8:	20000030 	.word	0x20000030
 80034dc:	053e2d63 	.word	0x053e2d63
 80034e0:	cb840000 	.word	0xcb840000
 80034e4:	80000001 	.word	0x80000001

080034e8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f8a2 	bl	8002648 <LL_ADC_REG_IsConversionOngoing>
 8003504:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff f8c3 	bl	8002696 <LL_ADC_INJ_IsConversionOngoing>
 8003510:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d103      	bne.n	8003520 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8098 	beq.w	8003650 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d02a      	beq.n	8003584 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7e5b      	ldrb	r3, [r3, #25]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d126      	bne.n	8003584 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	7e1b      	ldrb	r3, [r3, #24]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d122      	bne.n	8003584 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800353e:	2301      	movs	r3, #1
 8003540:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003542:	e014      	b.n	800356e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	4a45      	ldr	r2, [pc, #276]	@ (800365c <ADC_ConversionStop+0x174>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d90d      	bls.n	8003568 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003550:	f043 0210 	orr.w	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e074      	b.n	8003652 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	3301      	adds	r3, #1
 800356c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d1e3      	bne.n	8003544 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2240      	movs	r2, #64	@ 0x40
 8003582:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d014      	beq.n	80035b4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff f85a 	bl	8002648 <LL_ADC_REG_IsConversionOngoing>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f817 	bl	80025d2 <LL_ADC_IsDisableOngoing>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f836 	bl	8002620 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d014      	beq.n	80035e4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff f869 	bl	8002696 <LL_ADC_INJ_IsConversionOngoing>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00c      	beq.n	80035e4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe ffff 	bl	80025d2 <LL_ADC_IsDisableOngoing>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff f845 	bl	800266e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d005      	beq.n	80035f6 <ADC_ConversionStop+0x10e>
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d105      	bne.n	80035fc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80035f0:	230c      	movs	r3, #12
 80035f2:	617b      	str	r3, [r7, #20]
        break;
 80035f4:	e005      	b.n	8003602 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80035f6:	2308      	movs	r3, #8
 80035f8:	617b      	str	r3, [r7, #20]
        break;
 80035fa:	e002      	b.n	8003602 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80035fc:	2304      	movs	r3, #4
 80035fe:	617b      	str	r3, [r7, #20]
        break;
 8003600:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003602:	f7fe fdf9 	bl	80021f8 <HAL_GetTick>
 8003606:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003608:	e01b      	b.n	8003642 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800360a:	f7fe fdf5 	bl	80021f8 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b05      	cmp	r3, #5
 8003616:	d914      	bls.n	8003642 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362a:	f043 0210 	orr.w	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	f043 0201 	orr.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e007      	b.n	8003652 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1dc      	bne.n	800360a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	a33fffff 	.word	0xa33fffff

08003660 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003668:	2300      	movs	r3, #0
 800366a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe ff9b 	bl	80025ac <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d169      	bne.n	8003750 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	4b36      	ldr	r3, [pc, #216]	@ (800375c <ADC_Enable+0xfc>)
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e055      	b.n	8003752 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe ff56 	bl	800255c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036b0:	482b      	ldr	r0, [pc, #172]	@ (8003760 <ADC_Enable+0x100>)
 80036b2:	f7fe fdf7 	bl	80022a4 <LL_ADC_GetCommonPathInternalCh>
 80036b6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d013      	beq.n	80036e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036c0:	4b28      	ldr	r3, [pc, #160]	@ (8003764 <ADC_Enable+0x104>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	099b      	lsrs	r3, r3, #6
 80036c6:	4a28      	ldr	r2, [pc, #160]	@ (8003768 <ADC_Enable+0x108>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036da:	e002      	b.n	80036e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	3b01      	subs	r3, #1
 80036e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f9      	bne.n	80036dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036e8:	f7fe fd86 	bl	80021f8 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ee:	e028      	b.n	8003742 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe ff59 	bl	80025ac <LL_ADC_IsEnabled>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe ff29 	bl	800255c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800370a:	f7fe fd75 	bl	80021f8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d914      	bls.n	8003742 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d00d      	beq.n	8003742 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372a:	f043 0210 	orr.w	r2, r3, #16
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e007      	b.n	8003752 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	d1cf      	bne.n	80036f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	8000003f 	.word	0x8000003f
 8003760:	50040300 	.word	0x50040300
 8003764:	20000030 	.word	0x20000030
 8003768:	053e2d63 	.word	0x053e2d63

0800376c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe ff2a 	bl	80025d2 <LL_ADC_IsDisableOngoing>
 800377e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe ff11 	bl	80025ac <LL_ADC_IsEnabled>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d047      	beq.n	8003820 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d144      	bne.n	8003820 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f003 030d 	and.w	r3, r3, #13
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10c      	bne.n	80037be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe feeb 	bl	8002584 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2203      	movs	r2, #3
 80037b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037b6:	f7fe fd1f 	bl	80021f8 <HAL_GetTick>
 80037ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037bc:	e029      	b.n	8003812 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c2:	f043 0210 	orr.w	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e023      	b.n	8003822 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037da:	f7fe fd0d 	bl	80021f8 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d914      	bls.n	8003812 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fa:	f043 0210 	orr.w	r2, r3, #16
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e007      	b.n	8003822 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1dc      	bne.n	80037da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <LL_ADC_IsEnabled>:
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <LL_ADC_IsEnabled+0x18>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <LL_ADC_IsEnabled+0x1a>
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <LL_ADC_REG_IsConversionOngoing>:
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b04      	cmp	r3, #4
 8003862:	d101      	bne.n	8003868 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b09f      	sub	sp, #124	@ 0x7c
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003892:	2302      	movs	r3, #2
 8003894:	e093      	b.n	80039be <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800389e:	2300      	movs	r3, #0
 80038a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038a2:	2300      	movs	r3, #0
 80038a4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a47      	ldr	r2, [pc, #284]	@ (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d102      	bne.n	80038b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038b0:	4b46      	ldr	r3, [pc, #280]	@ (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	e001      	b.n	80038ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c4:	f043 0220 	orr.w	r2, r3, #32
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e072      	b.n	80039be <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ffb8 	bl	8003850 <LL_ADC_REG_IsConversionOngoing>
 80038e0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ffb2 	bl	8003850 <LL_ADC_REG_IsConversionOngoing>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d154      	bne.n	800399c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80038f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d151      	bne.n	800399c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038f8:	4b35      	ldr	r3, [pc, #212]	@ (80039d0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80038fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d02c      	beq.n	800395e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003916:	035b      	lsls	r3, r3, #13
 8003918:	430b      	orrs	r3, r1
 800391a:	431a      	orrs	r2, r3
 800391c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800391e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003920:	4829      	ldr	r0, [pc, #164]	@ (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003922:	f7ff ff82 	bl	800382a <LL_ADC_IsEnabled>
 8003926:	4604      	mov	r4, r0
 8003928:	4828      	ldr	r0, [pc, #160]	@ (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800392a:	f7ff ff7e 	bl	800382a <LL_ADC_IsEnabled>
 800392e:	4603      	mov	r3, r0
 8003930:	431c      	orrs	r4, r3
 8003932:	4828      	ldr	r0, [pc, #160]	@ (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003934:	f7ff ff79 	bl	800382a <LL_ADC_IsEnabled>
 8003938:	4603      	mov	r3, r0
 800393a:	4323      	orrs	r3, r4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d137      	bne.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003948:	f023 030f 	bic.w	r3, r3, #15
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	6811      	ldr	r1, [r2, #0]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	430a      	orrs	r2, r1
 8003956:	431a      	orrs	r2, r3
 8003958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800395a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800395c:	e028      	b.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800395e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003968:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800396a:	4817      	ldr	r0, [pc, #92]	@ (80039c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800396c:	f7ff ff5d 	bl	800382a <LL_ADC_IsEnabled>
 8003970:	4604      	mov	r4, r0
 8003972:	4816      	ldr	r0, [pc, #88]	@ (80039cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003974:	f7ff ff59 	bl	800382a <LL_ADC_IsEnabled>
 8003978:	4603      	mov	r3, r0
 800397a:	431c      	orrs	r4, r3
 800397c:	4815      	ldr	r0, [pc, #84]	@ (80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800397e:	f7ff ff54 	bl	800382a <LL_ADC_IsEnabled>
 8003982:	4603      	mov	r3, r0
 8003984:	4323      	orrs	r3, r4
 8003986:	2b00      	cmp	r3, #0
 8003988:	d112      	bne.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800398a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003992:	f023 030f 	bic.w	r3, r3, #15
 8003996:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003998:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800399a:	e009      	b.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80039ae:	e000      	b.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80039ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80039be:	4618      	mov	r0, r3
 80039c0:	377c      	adds	r7, #124	@ 0x7c
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd90      	pop	{r4, r7, pc}
 80039c6:	bf00      	nop
 80039c8:	50040000 	.word	0x50040000
 80039cc:	50040100 	.word	0x50040100
 80039d0:	50040300 	.word	0x50040300
 80039d4:	50040200 	.word	0x50040200

080039d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e8:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <__NVIC_SetPriorityGrouping+0x44>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039f4:	4013      	ands	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a0a:	4a04      	ldr	r2, [pc, #16]	@ (8003a1c <__NVIC_SetPriorityGrouping+0x44>)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	60d3      	str	r3, [r2, #12]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000ed00 	.word	0xe000ed00

08003a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <__NVIC_GetPriorityGrouping+0x18>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	0a1b      	lsrs	r3, r3, #8
 8003a2a:	f003 0307 	and.w	r3, r3, #7
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000ed00 	.word	0xe000ed00

08003a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	db0b      	blt.n	8003a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	f003 021f 	and.w	r2, r3, #31
 8003a54:	4907      	ldr	r1, [pc, #28]	@ (8003a74 <__NVIC_EnableIRQ+0x38>)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2001      	movs	r0, #1
 8003a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000e100 	.word	0xe000e100

08003a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db0a      	blt.n	8003aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	490c      	ldr	r1, [pc, #48]	@ (8003ac4 <__NVIC_SetPriority+0x4c>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	0112      	lsls	r2, r2, #4
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa0:	e00a      	b.n	8003ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4908      	ldr	r1, [pc, #32]	@ (8003ac8 <__NVIC_SetPriority+0x50>)
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	3b04      	subs	r3, #4
 8003ab0:	0112      	lsls	r2, r2, #4
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	761a      	strb	r2, [r3, #24]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000e100 	.word	0xe000e100
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b089      	sub	sp, #36	@ 0x24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f1c3 0307 	rsb	r3, r3, #7
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	bf28      	it	cs
 8003aea:	2304      	movcs	r3, #4
 8003aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d902      	bls.n	8003afc <NVIC_EncodePriority+0x30>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3b03      	subs	r3, #3
 8003afa:	e000      	b.n	8003afe <NVIC_EncodePriority+0x32>
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	401a      	ands	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b14:	f04f 31ff 	mov.w	r1, #4294967295
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1e:	43d9      	mvns	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	4313      	orrs	r3, r2
         );
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3724      	adds	r7, #36	@ 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b44:	d301      	bcc.n	8003b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b46:	2301      	movs	r3, #1
 8003b48:	e00f      	b.n	8003b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <SysTick_Config+0x40>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b52:	210f      	movs	r1, #15
 8003b54:	f04f 30ff 	mov.w	r0, #4294967295
 8003b58:	f7ff ff8e 	bl	8003a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b5c:	4b05      	ldr	r3, [pc, #20]	@ (8003b74 <SysTick_Config+0x40>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b62:	4b04      	ldr	r3, [pc, #16]	@ (8003b74 <SysTick_Config+0x40>)
 8003b64:	2207      	movs	r2, #7
 8003b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	e000e010 	.word	0xe000e010

08003b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ff29 	bl	80039d8 <__NVIC_SetPriorityGrouping>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b086      	sub	sp, #24
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba0:	f7ff ff3e 	bl	8003a20 <__NVIC_GetPriorityGrouping>
 8003ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f7ff ff8e 	bl	8003acc <NVIC_EncodePriority>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff ff5d 	bl	8003a78 <__NVIC_SetPriority>
}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff ff31 	bl	8003a3c <__NVIC_EnableIRQ>
}
 8003bda:	bf00      	nop
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff ffa2 	bl	8003b34 <SysTick_Config>
 8003bf0:	4603      	mov	r3, r0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c0a:	e17f      	b.n	8003f0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	2101      	movs	r1, #1
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	fa01 f303 	lsl.w	r3, r1, r3
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8171 	beq.w	8003f06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d005      	beq.n	8003c3c <HAL_GPIO_Init+0x40>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d130      	bne.n	8003c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	2203      	movs	r2, #3
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c72:	2201      	movs	r2, #1
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 0201 	and.w	r2, r3, #1
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d118      	bne.n	8003cdc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	08db      	lsrs	r3, r3, #3
 8003cc6:	f003 0201 	and.w	r2, r3, #1
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d017      	beq.n	8003d18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d123      	bne.n	8003d6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	08da      	lsrs	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	220f      	movs	r2, #15
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	08da      	lsrs	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3208      	adds	r2, #8
 8003d66:	6939      	ldr	r1, [r7, #16]
 8003d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0203 	and.w	r2, r3, #3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80ac 	beq.w	8003f06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	4b5f      	ldr	r3, [pc, #380]	@ (8003f2c <HAL_GPIO_Init+0x330>)
 8003db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db2:	4a5e      	ldr	r2, [pc, #376]	@ (8003f2c <HAL_GPIO_Init+0x330>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dba:	4b5c      	ldr	r3, [pc, #368]	@ (8003f2c <HAL_GPIO_Init+0x330>)
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dc6:	4a5a      	ldr	r2, [pc, #360]	@ (8003f30 <HAL_GPIO_Init+0x334>)
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	3302      	adds	r3, #2
 8003dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f003 0303 	and.w	r3, r3, #3
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	220f      	movs	r2, #15
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003df0:	d025      	beq.n	8003e3e <HAL_GPIO_Init+0x242>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4f      	ldr	r2, [pc, #316]	@ (8003f34 <HAL_GPIO_Init+0x338>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d01f      	beq.n	8003e3a <HAL_GPIO_Init+0x23e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4e      	ldr	r2, [pc, #312]	@ (8003f38 <HAL_GPIO_Init+0x33c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d019      	beq.n	8003e36 <HAL_GPIO_Init+0x23a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4d      	ldr	r2, [pc, #308]	@ (8003f3c <HAL_GPIO_Init+0x340>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d013      	beq.n	8003e32 <HAL_GPIO_Init+0x236>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8003f40 <HAL_GPIO_Init+0x344>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d00d      	beq.n	8003e2e <HAL_GPIO_Init+0x232>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a4b      	ldr	r2, [pc, #300]	@ (8003f44 <HAL_GPIO_Init+0x348>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d007      	beq.n	8003e2a <HAL_GPIO_Init+0x22e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f48 <HAL_GPIO_Init+0x34c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_GPIO_Init+0x22a>
 8003e22:	2306      	movs	r3, #6
 8003e24:	e00c      	b.n	8003e40 <HAL_GPIO_Init+0x244>
 8003e26:	2307      	movs	r3, #7
 8003e28:	e00a      	b.n	8003e40 <HAL_GPIO_Init+0x244>
 8003e2a:	2305      	movs	r3, #5
 8003e2c:	e008      	b.n	8003e40 <HAL_GPIO_Init+0x244>
 8003e2e:	2304      	movs	r3, #4
 8003e30:	e006      	b.n	8003e40 <HAL_GPIO_Init+0x244>
 8003e32:	2303      	movs	r3, #3
 8003e34:	e004      	b.n	8003e40 <HAL_GPIO_Init+0x244>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e002      	b.n	8003e40 <HAL_GPIO_Init+0x244>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_GPIO_Init+0x244>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	f002 0203 	and.w	r2, r2, #3
 8003e46:	0092      	lsls	r2, r2, #2
 8003e48:	4093      	lsls	r3, r2
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e50:	4937      	ldr	r1, [pc, #220]	@ (8003f30 <HAL_GPIO_Init+0x334>)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	3302      	adds	r3, #2
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f4c <HAL_GPIO_Init+0x350>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e82:	4a32      	ldr	r2, [pc, #200]	@ (8003f4c <HAL_GPIO_Init+0x350>)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e88:	4b30      	ldr	r3, [pc, #192]	@ (8003f4c <HAL_GPIO_Init+0x350>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eac:	4a27      	ldr	r2, [pc, #156]	@ (8003f4c <HAL_GPIO_Init+0x350>)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003eb2:	4b26      	ldr	r3, [pc, #152]	@ (8003f4c <HAL_GPIO_Init+0x350>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_GPIO_Init+0x350>)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <HAL_GPIO_Init+0x350>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f00:	4a12      	ldr	r2, [pc, #72]	@ (8003f4c <HAL_GPIO_Init+0x350>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	fa22 f303 	lsr.w	r3, r2, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f47f ae78 	bne.w	8003c0c <HAL_GPIO_Init+0x10>
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40010000 	.word	0x40010000
 8003f34:	48000400 	.word	0x48000400
 8003f38:	48000800 	.word	0x48000800
 8003f3c:	48000c00 	.word	0x48000c00
 8003f40:	48001000 	.word	0x48001000
 8003f44:	48001400 	.word	0x48001400
 8003f48:	48001800 	.word	0x48001800
 8003f4c:	40010400 	.word	0x40010400

08003f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e08d      	b.n	800407e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd fe6c 	bl	8001c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2224      	movs	r2, #36	@ 0x24
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	e006      	b.n	8003fd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d108      	bne.n	8003ff2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	e007      	b.n	8004002 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004014:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69d9      	ldr	r1, [r3, #28]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1a      	ldr	r2, [r3, #32]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b20      	cmp	r3, #32
 800409a:	d138      	bne.n	800410e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e032      	b.n	8004110 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2224      	movs	r2, #36	@ 0x24
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800410e:	2302      	movs	r3, #2
  }
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b20      	cmp	r3, #32
 8004130:	d139      	bne.n	80041a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800413c:	2302      	movs	r3, #2
 800413e:	e033      	b.n	80041a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2224      	movs	r2, #36	@ 0x24
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800416e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041b8:	4b04      	ldr	r3, [pc, #16]	@ (80041cc <HAL_PWREx_GetVoltageRange+0x18>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40007000 	.word	0x40007000

080041d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041de:	d130      	bne.n	8004242 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e0:	4b23      	ldr	r3, [pc, #140]	@ (8004270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ec:	d038      	beq.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ee:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004274 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2232      	movs	r2, #50	@ 0x32
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	4a1b      	ldr	r2, [pc, #108]	@ (8004278 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	0c9b      	lsrs	r3, r3, #18
 8004210:	3301      	adds	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004214:	e002      	b.n	800421c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3b01      	subs	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800421c:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004228:	d102      	bne.n	8004230 <HAL_PWREx_ControlVoltageScaling+0x60>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f2      	bne.n	8004216 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004230:	4b0f      	ldr	r3, [pc, #60]	@ (8004270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423c:	d110      	bne.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e00f      	b.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424e:	d007      	beq.n	8004260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004250:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004258:	4a05      	ldr	r2, [pc, #20]	@ (8004270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800425e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40007000 	.word	0x40007000
 8004274:	20000030 	.word	0x20000030
 8004278:	431bde83 	.word	0x431bde83

0800427c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e3ca      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800428e:	4b97      	ldr	r3, [pc, #604]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004298:	4b94      	ldr	r3, [pc, #592]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80e4 	beq.w	8004478 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <HAL_RCC_OscConfig+0x4a>
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	f040 808b 	bne.w	80043d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	f040 8087 	bne.w	80043d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042c6:	4b89      	ldr	r3, [pc, #548]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_RCC_OscConfig+0x62>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e3a2      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	4b82      	ldr	r3, [pc, #520]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d004      	beq.n	80042f8 <HAL_RCC_OscConfig+0x7c>
 80042ee:	4b7f      	ldr	r3, [pc, #508]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f6:	e005      	b.n	8004304 <HAL_RCC_OscConfig+0x88>
 80042f8:	4b7c      	ldr	r3, [pc, #496]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80042fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042fe:	091b      	lsrs	r3, r3, #4
 8004300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004304:	4293      	cmp	r3, r2
 8004306:	d223      	bcs.n	8004350 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fd55 	bl	8004dbc <RCC_SetFlashLatencyFromMSIRange>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e383      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800431c:	4b73      	ldr	r3, [pc, #460]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a72      	ldr	r2, [pc, #456]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004322:	f043 0308 	orr.w	r3, r3, #8
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4b70      	ldr	r3, [pc, #448]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	496d      	ldr	r1, [pc, #436]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800433a:	4b6c      	ldr	r3, [pc, #432]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	4968      	ldr	r1, [pc, #416]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800434a:	4313      	orrs	r3, r2
 800434c:	604b      	str	r3, [r1, #4]
 800434e:	e025      	b.n	800439c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004350:	4b66      	ldr	r3, [pc, #408]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a65      	ldr	r2, [pc, #404]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004356:	f043 0308 	orr.w	r3, r3, #8
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	4b63      	ldr	r3, [pc, #396]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4960      	ldr	r1, [pc, #384]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800436e:	4b5f      	ldr	r3, [pc, #380]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	495b      	ldr	r1, [pc, #364]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800437e:	4313      	orrs	r3, r2
 8004380:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fd15 	bl	8004dbc <RCC_SetFlashLatencyFromMSIRange>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e343      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800439c:	f000 fc4a 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 80043a0:	4602      	mov	r2, r0
 80043a2:	4b52      	ldr	r3, [pc, #328]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	091b      	lsrs	r3, r3, #4
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	4950      	ldr	r1, [pc, #320]	@ (80044f0 <HAL_RCC_OscConfig+0x274>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
 80043b8:	4a4e      	ldr	r2, [pc, #312]	@ (80044f4 <HAL_RCC_OscConfig+0x278>)
 80043ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043bc:	4b4e      	ldr	r3, [pc, #312]	@ (80044f8 <HAL_RCC_OscConfig+0x27c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fec9 	bl	8002158 <HAL_InitTick>
 80043c6:	4603      	mov	r3, r0
 80043c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d052      	beq.n	8004476 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	e327      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d032      	beq.n	8004442 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043dc:	4b43      	ldr	r3, [pc, #268]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a42      	ldr	r2, [pc, #264]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043e8:	f7fd ff06 	bl	80021f8 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f0:	f7fd ff02 	bl	80021f8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e310      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004402:	4b3a      	ldr	r3, [pc, #232]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440e:	4b37      	ldr	r3, [pc, #220]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a36      	ldr	r2, [pc, #216]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004414:	f043 0308 	orr.w	r3, r3, #8
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b34      	ldr	r3, [pc, #208]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	4931      	ldr	r1, [pc, #196]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004428:	4313      	orrs	r3, r2
 800442a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442c:	4b2f      	ldr	r3, [pc, #188]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	492c      	ldr	r1, [pc, #176]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]
 8004440:	e01a      	b.n	8004478 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004442:	4b2a      	ldr	r3, [pc, #168]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a29      	ldr	r2, [pc, #164]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800444e:	f7fd fed3 	bl	80021f8 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004456:	f7fd fecf 	bl	80021f8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e2dd      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004468:	4b20      	ldr	r3, [pc, #128]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCC_OscConfig+0x1da>
 8004474:	e000      	b.n	8004478 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004476:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d074      	beq.n	800456e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b08      	cmp	r3, #8
 8004488:	d005      	beq.n	8004496 <HAL_RCC_OscConfig+0x21a>
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b0c      	cmp	r3, #12
 800448e:	d10e      	bne.n	80044ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d10b      	bne.n	80044ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004496:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d064      	beq.n	800456c <HAL_RCC_OscConfig+0x2f0>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d160      	bne.n	800456c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e2ba      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b6:	d106      	bne.n	80044c6 <HAL_RCC_OscConfig+0x24a>
 80044b8:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0b      	ldr	r2, [pc, #44]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80044be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c2:	6013      	str	r3, [r2, #0]
 80044c4:	e026      	b.n	8004514 <HAL_RCC_OscConfig+0x298>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044ce:	d115      	bne.n	80044fc <HAL_RCC_OscConfig+0x280>
 80044d0:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a05      	ldr	r2, [pc, #20]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80044d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b03      	ldr	r3, [pc, #12]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a02      	ldr	r2, [pc, #8]	@ (80044ec <HAL_RCC_OscConfig+0x270>)
 80044e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e014      	b.n	8004514 <HAL_RCC_OscConfig+0x298>
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	0800a6dc 	.word	0x0800a6dc
 80044f4:	20000030 	.word	0x20000030
 80044f8:	20000034 	.word	0x20000034
 80044fc:	4ba0      	ldr	r3, [pc, #640]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a9f      	ldr	r2, [pc, #636]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4b9d      	ldr	r3, [pc, #628]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a9c      	ldr	r2, [pc, #624]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 800450e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fe6c 	bl	80021f8 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fd fe68 	bl	80021f8 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	@ 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e276      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004536:	4b92      	ldr	r3, [pc, #584]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x2a8>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004544:	f7fd fe58 	bl	80021f8 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fd fe54 	bl	80021f8 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	@ 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e262      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800455e:	4b88      	ldr	r3, [pc, #544]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x2d0>
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d060      	beq.n	800463c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b04      	cmp	r3, #4
 800457e:	d005      	beq.n	800458c <HAL_RCC_OscConfig+0x310>
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b0c      	cmp	r3, #12
 8004584:	d119      	bne.n	80045ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d116      	bne.n	80045ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800458c:	4b7c      	ldr	r3, [pc, #496]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_OscConfig+0x328>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e23f      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a4:	4b76      	ldr	r3, [pc, #472]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	061b      	lsls	r3, r3, #24
 80045b2:	4973      	ldr	r1, [pc, #460]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045b8:	e040      	b.n	800463c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d023      	beq.n	800460a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6e      	ldr	r2, [pc, #440]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fd fe13 	bl	80021f8 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d6:	f7fd fe0f 	bl	80021f8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e21d      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e8:	4b65      	ldr	r3, [pc, #404]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f4:	4b62      	ldr	r3, [pc, #392]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	495f      	ldr	r1, [pc, #380]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
 8004608:	e018      	b.n	800463c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460a:	4b5d      	ldr	r3, [pc, #372]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a5c      	ldr	r2, [pc, #368]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fd fdef 	bl	80021f8 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461e:	f7fd fdeb 	bl	80021f8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e1f9      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004630:	4b53      	ldr	r3, [pc, #332]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d03c      	beq.n	80046c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01c      	beq.n	800468a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004650:	4b4b      	ldr	r3, [pc, #300]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004656:	4a4a      	ldr	r2, [pc, #296]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fd fdca 	bl	80021f8 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004668:	f7fd fdc6 	bl	80021f8 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e1d4      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800467a:	4b41      	ldr	r3, [pc, #260]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 800467c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0ef      	beq.n	8004668 <HAL_RCC_OscConfig+0x3ec>
 8004688:	e01b      	b.n	80046c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468a:	4b3d      	ldr	r3, [pc, #244]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 800468c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004690:	4a3b      	ldr	r2, [pc, #236]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469a:	f7fd fdad 	bl	80021f8 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fd fda9 	bl	80021f8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e1b7      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046b4:	4b32      	ldr	r3, [pc, #200]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80046b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ef      	bne.n	80046a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80a6 	beq.w	800481c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d0:	2300      	movs	r3, #0
 80046d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10d      	bne.n	80046fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e0:	4b27      	ldr	r3, [pc, #156]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80046e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e4:	4a26      	ldr	r2, [pc, #152]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80046e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80046ec:	4b24      	ldr	r3, [pc, #144]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f8:	2301      	movs	r3, #1
 80046fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046fc:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <HAL_RCC_OscConfig+0x508>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d118      	bne.n	800473a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004708:	4b1e      	ldr	r3, [pc, #120]	@ (8004784 <HAL_RCC_OscConfig+0x508>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1d      	ldr	r2, [pc, #116]	@ (8004784 <HAL_RCC_OscConfig+0x508>)
 800470e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004714:	f7fd fd70 	bl	80021f8 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471c:	f7fd fd6c 	bl	80021f8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e17a      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472e:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <HAL_RCC_OscConfig+0x508>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0f0      	beq.n	800471c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d108      	bne.n	8004754 <HAL_RCC_OscConfig+0x4d8>
 8004742:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004748:	4a0d      	ldr	r2, [pc, #52]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004752:	e029      	b.n	80047a8 <HAL_RCC_OscConfig+0x52c>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b05      	cmp	r3, #5
 800475a:	d115      	bne.n	8004788 <HAL_RCC_OscConfig+0x50c>
 800475c:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004762:	4a07      	ldr	r2, [pc, #28]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004764:	f043 0304 	orr.w	r3, r3, #4
 8004768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004772:	4a03      	ldr	r2, [pc, #12]	@ (8004780 <HAL_RCC_OscConfig+0x504>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800477c:	e014      	b.n	80047a8 <HAL_RCC_OscConfig+0x52c>
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	40007000 	.word	0x40007000
 8004788:	4b9c      	ldr	r3, [pc, #624]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	4a9b      	ldr	r2, [pc, #620]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004790:	f023 0301 	bic.w	r3, r3, #1
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004798:	4b98      	ldr	r3, [pc, #608]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479e:	4a97      	ldr	r2, [pc, #604]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d016      	beq.n	80047de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fd fd22 	bl	80021f8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b8:	f7fd fd1e 	bl	80021f8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e12a      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ce:	4b8b      	ldr	r3, [pc, #556]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0ed      	beq.n	80047b8 <HAL_RCC_OscConfig+0x53c>
 80047dc:	e015      	b.n	800480a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fd fd0b 	bl	80021f8 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fd fd07 	bl	80021f8 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e113      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047fc:	4b7f      	ldr	r3, [pc, #508]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1ed      	bne.n	80047e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800480a:	7ffb      	ldrb	r3, [r7, #31]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d105      	bne.n	800481c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004810:	4b7a      	ldr	r3, [pc, #488]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004814:	4a79      	ldr	r2, [pc, #484]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80fe 	beq.w	8004a22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482a:	2b02      	cmp	r3, #2
 800482c:	f040 80d0 	bne.w	80049d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004830:	4b72      	ldr	r3, [pc, #456]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f003 0203 	and.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	429a      	cmp	r2, r3
 8004842:	d130      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	3b01      	subs	r3, #1
 8004850:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d127      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004860:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d11f      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004870:	2a07      	cmp	r2, #7
 8004872:	bf14      	ite	ne
 8004874:	2201      	movne	r2, #1
 8004876:	2200      	moveq	r2, #0
 8004878:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800487a:	4293      	cmp	r3, r2
 800487c:	d113      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	3b01      	subs	r3, #1
 800488c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d109      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	3b01      	subs	r3, #1
 80048a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d06e      	beq.n	8004984 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b0c      	cmp	r3, #12
 80048aa:	d069      	beq.n	8004980 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048ac:	4b53      	ldr	r3, [pc, #332]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048b8:	4b50      	ldr	r3, [pc, #320]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0ad      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048c8:	4b4c      	ldr	r3, [pc, #304]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a4b      	ldr	r2, [pc, #300]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80048ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048d4:	f7fd fc90 	bl	80021f8 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fd fc8c 	bl	80021f8 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e09a      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ee:	4b43      	ldr	r3, [pc, #268]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048fa:	4b40      	ldr	r3, [pc, #256]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	4b40      	ldr	r3, [pc, #256]	@ (8004a00 <HAL_RCC_OscConfig+0x784>)
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800490a:	3a01      	subs	r2, #1
 800490c:	0112      	lsls	r2, r2, #4
 800490e:	4311      	orrs	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004914:	0212      	lsls	r2, r2, #8
 8004916:	4311      	orrs	r1, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800491c:	0852      	lsrs	r2, r2, #1
 800491e:	3a01      	subs	r2, #1
 8004920:	0552      	lsls	r2, r2, #21
 8004922:	4311      	orrs	r1, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004928:	0852      	lsrs	r2, r2, #1
 800492a:	3a01      	subs	r2, #1
 800492c:	0652      	lsls	r2, r2, #25
 800492e:	4311      	orrs	r1, r2
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004934:	0912      	lsrs	r2, r2, #4
 8004936:	0452      	lsls	r2, r2, #17
 8004938:	430a      	orrs	r2, r1
 800493a:	4930      	ldr	r1, [pc, #192]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 800493c:	4313      	orrs	r3, r2
 800493e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004940:	4b2e      	ldr	r3, [pc, #184]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2d      	ldr	r2, [pc, #180]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800494a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800494c:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4a2a      	ldr	r2, [pc, #168]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004956:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004958:	f7fd fc4e 	bl	80021f8 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd fc4a 	bl	80021f8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e058      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004972:	4b22      	ldr	r3, [pc, #136]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800497e:	e050      	b.n	8004a22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e04f      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004984:	4b1d      	ldr	r3, [pc, #116]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d148      	bne.n	8004a22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004990:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a19      	ldr	r2, [pc, #100]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 8004996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800499a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800499c:	4b17      	ldr	r3, [pc, #92]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80049a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049a8:	f7fd fc26 	bl	80021f8 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fd fc22 	bl	80021f8 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e030      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c2:	4b0e      	ldr	r3, [pc, #56]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x734>
 80049ce:	e028      	b.n	8004a22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b0c      	cmp	r3, #12
 80049d4:	d023      	beq.n	8004a1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d6:	4b09      	ldr	r3, [pc, #36]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a08      	ldr	r2, [pc, #32]	@ (80049fc <HAL_RCC_OscConfig+0x780>)
 80049dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e2:	f7fd fc09 	bl	80021f8 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e8:	e00c      	b.n	8004a04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ea:	f7fd fc05 	bl	80021f8 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d905      	bls.n	8004a04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e013      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
 80049fc:	40021000 	.word	0x40021000
 8004a00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a04:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <HAL_RCC_OscConfig+0x7b0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ec      	bne.n	80049ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a10:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_RCC_OscConfig+0x7b0>)
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	4905      	ldr	r1, [pc, #20]	@ (8004a2c <HAL_RCC_OscConfig+0x7b0>)
 8004a16:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <HAL_RCC_OscConfig+0x7b4>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	60cb      	str	r3, [r1, #12]
 8004a1c:	e001      	b.n	8004a22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	feeefffc 	.word	0xfeeefffc

08004a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0e7      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b75      	ldr	r3, [pc, #468]	@ (8004c20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d910      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b72      	ldr	r3, [pc, #456]	@ (8004c20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 0207 	bic.w	r2, r3, #7
 8004a5e:	4970      	ldr	r1, [pc, #448]	@ (8004c20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b6e      	ldr	r3, [pc, #440]	@ (8004c20 <HAL_RCC_ClockConfig+0x1ec>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0cf      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d010      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	4b66      	ldr	r3, [pc, #408]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d908      	bls.n	8004aa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a94:	4b63      	ldr	r3, [pc, #396]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4960      	ldr	r1, [pc, #384]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d04c      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b03      	cmp	r3, #3
 8004ab8:	d107      	bne.n	8004aca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aba:	4b5a      	ldr	r3, [pc, #360]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d121      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0a6      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad2:	4b54      	ldr	r3, [pc, #336]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d115      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e09a      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aea:	4b4e      	ldr	r3, [pc, #312]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e08e      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afa:	4b4a      	ldr	r3, [pc, #296]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e086      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b0a:	4b46      	ldr	r3, [pc, #280]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f023 0203 	bic.w	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4943      	ldr	r1, [pc, #268]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1c:	f7fd fb6c 	bl	80021f8 <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b24:	f7fd fb68 	bl	80021f8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e06e      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 020c 	and.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d1eb      	bne.n	8004b24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d010      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	4b31      	ldr	r3, [pc, #196]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d208      	bcs.n	8004b7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b68:	4b2e      	ldr	r3, [pc, #184]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	492b      	ldr	r1, [pc, #172]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7a:	4b29      	ldr	r3, [pc, #164]	@ (8004c20 <HAL_RCC_ClockConfig+0x1ec>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d210      	bcs.n	8004baa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b88:	4b25      	ldr	r3, [pc, #148]	@ (8004c20 <HAL_RCC_ClockConfig+0x1ec>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f023 0207 	bic.w	r2, r3, #7
 8004b90:	4923      	ldr	r1, [pc, #140]	@ (8004c20 <HAL_RCC_ClockConfig+0x1ec>)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b98:	4b21      	ldr	r3, [pc, #132]	@ (8004c20 <HAL_RCC_ClockConfig+0x1ec>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d001      	beq.n	8004baa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e036      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d008      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4918      	ldr	r1, [pc, #96]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bd4:	4b13      	ldr	r3, [pc, #76]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4910      	ldr	r1, [pc, #64]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004be8:	f000 f824 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b0d      	ldr	r3, [pc, #52]	@ (8004c24 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	490b      	ldr	r1, [pc, #44]	@ (8004c28 <HAL_RCC_ClockConfig+0x1f4>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	f003 031f 	and.w	r3, r3, #31
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	4a09      	ldr	r2, [pc, #36]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f8>)
 8004c06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c08:	4b09      	ldr	r3, [pc, #36]	@ (8004c30 <HAL_RCC_ClockConfig+0x1fc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fd faa3 	bl	8002158 <HAL_InitTick>
 8004c12:	4603      	mov	r3, r0
 8004c14:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c16:	7afb      	ldrb	r3, [r7, #11]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40022000 	.word	0x40022000
 8004c24:	40021000 	.word	0x40021000
 8004c28:	0800a6dc 	.word	0x0800a6dc
 8004c2c:	20000030 	.word	0x20000030
 8004c30:	20000034 	.word	0x20000034

08004c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b089      	sub	sp, #36	@ 0x24
 8004c38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c42:	4b3e      	ldr	r3, [pc, #248]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0x34>
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b0c      	cmp	r3, #12
 8004c60:	d121      	bne.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d11e      	bne.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c68:	4b34      	ldr	r3, [pc, #208]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c74:	4b31      	ldr	r3, [pc, #196]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	e005      	b.n	8004c90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c84:	4b2d      	ldr	r3, [pc, #180]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	f003 030f 	and.w	r3, r3, #15
 8004c8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c90:	4a2b      	ldr	r2, [pc, #172]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10d      	bne.n	8004cbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d102      	bne.n	8004cb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cac:	4b25      	ldr	r3, [pc, #148]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e004      	b.n	8004cbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cb8:	4b23      	ldr	r3, [pc, #140]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	2b0c      	cmp	r3, #12
 8004cc0:	d134      	bne.n	8004d2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d003      	beq.n	8004cda <HAL_RCC_GetSysClockFreq+0xa6>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d003      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0xac>
 8004cd8:	e005      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cda:	4b1a      	ldr	r3, [pc, #104]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cdc:	617b      	str	r3, [r7, #20]
      break;
 8004cde:	e005      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ce0:	4b19      	ldr	r3, [pc, #100]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ce2:	617b      	str	r3, [r7, #20]
      break;
 8004ce4:	e002      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	617b      	str	r3, [r7, #20]
      break;
 8004cea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cec:	4b13      	ldr	r3, [pc, #76]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cfa:	4b10      	ldr	r3, [pc, #64]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	fb03 f202 	mul.w	r2, r3, r2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d12:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	0e5b      	lsrs	r3, r3, #25
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d2c:	69bb      	ldr	r3, [r7, #24]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3724      	adds	r7, #36	@ 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	0800a6f4 	.word	0x0800a6f4
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	007a1200 	.word	0x007a1200

08004d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d50:	4b03      	ldr	r3, [pc, #12]	@ (8004d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000030 	.word	0x20000030

08004d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d68:	f7ff fff0 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4904      	ldr	r1, [pc, #16]	@ (8004d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	0800a6ec 	.word	0x0800a6ec

08004d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d94:	f7ff ffda 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0adb      	lsrs	r3, r3, #11
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4904      	ldr	r1, [pc, #16]	@ (8004db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40021000 	.word	0x40021000
 8004db8:	0800a6ec 	.word	0x0800a6ec

08004dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dd4:	f7ff f9ee 	bl	80041b4 <HAL_PWREx_GetVoltageRange>
 8004dd8:	6178      	str	r0, [r7, #20]
 8004dda:	e014      	b.n	8004e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b25      	ldr	r3, [pc, #148]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de0:	4a24      	ldr	r2, [pc, #144]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004de8:	4b22      	ldr	r3, [pc, #136]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004df4:	f7ff f9de 	bl	80041b4 <HAL_PWREx_GetVoltageRange>
 8004df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0c:	d10b      	bne.n	8004e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b80      	cmp	r3, #128	@ 0x80
 8004e12:	d919      	bls.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e18:	d902      	bls.n	8004e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	e013      	b.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e20:	2301      	movs	r3, #1
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	e010      	b.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b80      	cmp	r3, #128	@ 0x80
 8004e2a:	d902      	bls.n	8004e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	e00a      	b.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b80      	cmp	r3, #128	@ 0x80
 8004e36:	d102      	bne.n	8004e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e38:	2302      	movs	r3, #2
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	e004      	b.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b70      	cmp	r3, #112	@ 0x70
 8004e42:	d101      	bne.n	8004e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e44:	2301      	movs	r3, #1
 8004e46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e48:	4b0b      	ldr	r3, [pc, #44]	@ (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 0207 	bic.w	r2, r3, #7
 8004e50:	4909      	ldr	r1, [pc, #36]	@ (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e58:	4b07      	ldr	r3, [pc, #28]	@ (8004e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d001      	beq.n	8004e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40022000 	.word	0x40022000

08004e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e84:	2300      	movs	r3, #0
 8004e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e88:	2300      	movs	r3, #0
 8004e8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d041      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ea0:	d02a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ea2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ea6:	d824      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ea8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eac:	d008      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eb2:	d81e      	bhi.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ebc:	d010      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ebe:	e018      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ec0:	4b86      	ldr	r3, [pc, #536]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4a85      	ldr	r2, [pc, #532]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ecc:	e015      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fabb 	bl	8005450 <RCCEx_PLLSAI1_Config>
 8004eda:	4603      	mov	r3, r0
 8004edc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ede:	e00c      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3320      	adds	r3, #32
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 fba6 	bl	8005638 <RCCEx_PLLSAI2_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ef0:	e003      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ef6:	e000      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10b      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f00:	4b76      	ldr	r3, [pc, #472]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f0e:	4973      	ldr	r1, [pc, #460]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f16:	e001      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	7cfb      	ldrb	r3, [r7, #19]
 8004f1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d041      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f30:	d02a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f36:	d824      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f42:	d81e      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f4c:	d010      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f4e:	e018      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f50:	4b62      	ldr	r3, [pc, #392]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4a61      	ldr	r2, [pc, #388]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f5c:	e015      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3304      	adds	r3, #4
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fa73 	bl	8005450 <RCCEx_PLLSAI1_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f6e:	e00c      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3320      	adds	r3, #32
 8004f74:	2100      	movs	r1, #0
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fb5e 	bl	8005638 <RCCEx_PLLSAI2_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f80:	e003      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	74fb      	strb	r3, [r7, #19]
      break;
 8004f86:	e000      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8a:	7cfb      	ldrb	r3, [r7, #19]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f90:	4b52      	ldr	r3, [pc, #328]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f9e:	494f      	ldr	r1, [pc, #316]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004fa6:	e001      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80a0 	beq.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fbe:	4b47      	ldr	r3, [pc, #284]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00d      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd4:	4b41      	ldr	r3, [pc, #260]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd8:	4a40      	ldr	r2, [pc, #256]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fec:	2301      	movs	r3, #1
 8004fee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ffc:	f7fd f8fc 	bl	80021f8 <HAL_GetTick>
 8005000:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005002:	e009      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005004:	f7fd f8f8 	bl	80021f8 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d902      	bls.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	74fb      	strb	r3, [r7, #19]
        break;
 8005016:	e005      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005018:	4b31      	ldr	r3, [pc, #196]	@ (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ef      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d15c      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800502a:	4b2c      	ldr	r3, [pc, #176]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005034:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01f      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	429a      	cmp	r2, r3
 8005046:	d019      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005048:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005054:	4b21      	ldr	r3, [pc, #132]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505a:	4a20      	ldr	r2, [pc, #128]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005064:	4b1d      	ldr	r3, [pc, #116]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800506a:	4a1c      	ldr	r2, [pc, #112]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005074:	4a19      	ldr	r2, [pc, #100]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005086:	f7fd f8b7 	bl	80021f8 <HAL_GetTick>
 800508a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508c:	e00b      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800508e:	f7fd f8b3 	bl	80021f8 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509c:	4293      	cmp	r3, r2
 800509e:	d902      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	74fb      	strb	r3, [r7, #19]
            break;
 80050a4:	e006      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a6:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ec      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ba:	4b08      	ldr	r3, [pc, #32]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ca:	4904      	ldr	r1, [pc, #16]	@ (80050dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050d2:	e009      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
 80050d8:	e006      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050e8:	7c7b      	ldrb	r3, [r7, #17]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ee:	4b9e      	ldr	r3, [pc, #632]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f2:	4a9d      	ldr	r2, [pc, #628]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005106:	4b98      	ldr	r3, [pc, #608]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510c:	f023 0203 	bic.w	r2, r3, #3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005114:	4994      	ldr	r1, [pc, #592]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005128:	4b8f      	ldr	r3, [pc, #572]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512e:	f023 020c 	bic.w	r2, r3, #12
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	498c      	ldr	r1, [pc, #560]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800514a:	4b87      	ldr	r3, [pc, #540]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005150:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005158:	4983      	ldr	r1, [pc, #524]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800516c:	4b7e      	ldr	r3, [pc, #504]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005172:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517a:	497b      	ldr	r1, [pc, #492]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517c:	4313      	orrs	r3, r2
 800517e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800518e:	4b76      	ldr	r3, [pc, #472]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519c:	4972      	ldr	r1, [pc, #456]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0320 	and.w	r3, r3, #32
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051be:	496a      	ldr	r1, [pc, #424]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051d2:	4b65      	ldr	r3, [pc, #404]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e0:	4961      	ldr	r1, [pc, #388]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051f4:	4b5c      	ldr	r3, [pc, #368]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005202:	4959      	ldr	r1, [pc, #356]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005216:	4b54      	ldr	r3, [pc, #336]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005224:	4950      	ldr	r1, [pc, #320]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005238:	4b4b      	ldr	r3, [pc, #300]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800523e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005246:	4948      	ldr	r1, [pc, #288]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800525a:	4b43      	ldr	r3, [pc, #268]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005260:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005268:	493f      	ldr	r1, [pc, #252]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d028      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800527c:	4b3a      	ldr	r3, [pc, #232]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005282:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800528a:	4937      	ldr	r1, [pc, #220]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800529a:	d106      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800529c:	4b32      	ldr	r3, [pc, #200]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4a31      	ldr	r2, [pc, #196]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052a6:	60d3      	str	r3, [r2, #12]
 80052a8:	e011      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052b2:	d10c      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3304      	adds	r3, #4
 80052b8:	2101      	movs	r1, #1
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f8c8 	bl	8005450 <RCCEx_PLLSAI1_Config>
 80052c0:	4603      	mov	r3, r0
 80052c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052c4:	7cfb      	ldrb	r3, [r7, #19]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052ca:	7cfb      	ldrb	r3, [r7, #19]
 80052cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d028      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052da:	4b23      	ldr	r3, [pc, #140]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e8:	491f      	ldr	r1, [pc, #124]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052f8:	d106      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005304:	60d3      	str	r3, [r2, #12]
 8005306:	e011      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005310:	d10c      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3304      	adds	r3, #4
 8005316:	2101      	movs	r1, #1
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f899 	bl	8005450 <RCCEx_PLLSAI1_Config>
 800531e:	4603      	mov	r3, r0
 8005320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d02b      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005338:	4b0b      	ldr	r3, [pc, #44]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005346:	4908      	ldr	r1, [pc, #32]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005356:	d109      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005358:	4b03      	ldr	r3, [pc, #12]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4a02      	ldr	r2, [pc, #8]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005362:	60d3      	str	r3, [r2, #12]
 8005364:	e014      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005374:	d10c      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	2101      	movs	r1, #1
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f867 	bl	8005450 <RCCEx_PLLSAI1_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d02f      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800539c:	4b2b      	ldr	r3, [pc, #172]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053aa:	4928      	ldr	r1, [pc, #160]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ba:	d10d      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3304      	adds	r3, #4
 80053c0:	2102      	movs	r1, #2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f844 	bl	8005450 <RCCEx_PLLSAI1_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053cc:	7cfb      	ldrb	r3, [r7, #19]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d014      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
 80053d4:	74bb      	strb	r3, [r7, #18]
 80053d6:	e011      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e0:	d10c      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3320      	adds	r3, #32
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f925 	bl	8005638 <RCCEx_PLLSAI2_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f2:	7cfb      	ldrb	r3, [r7, #19]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005408:	4b10      	ldr	r3, [pc, #64]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005416:	490d      	ldr	r1, [pc, #52]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00b      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800542a:	4b08      	ldr	r3, [pc, #32]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005430:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800543a:	4904      	ldr	r1, [pc, #16]	@ (800544c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005442:	7cbb      	ldrb	r3, [r7, #18]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000

08005450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800545e:	4b75      	ldr	r3, [pc, #468]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d018      	beq.n	800549c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800546a:	4b72      	ldr	r3, [pc, #456]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0203 	and.w	r2, r3, #3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d10d      	bne.n	8005496 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
       ||
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005482:	4b6c      	ldr	r3, [pc, #432]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	091b      	lsrs	r3, r3, #4
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	1c5a      	adds	r2, r3, #1
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
       ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d047      	beq.n	8005526 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
 800549a:	e044      	b.n	8005526 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d018      	beq.n	80054d6 <RCCEx_PLLSAI1_Config+0x86>
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d825      	bhi.n	80054f4 <RCCEx_PLLSAI1_Config+0xa4>
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d002      	beq.n	80054b2 <RCCEx_PLLSAI1_Config+0x62>
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d009      	beq.n	80054c4 <RCCEx_PLLSAI1_Config+0x74>
 80054b0:	e020      	b.n	80054f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054b2:	4b60      	ldr	r3, [pc, #384]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11d      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c2:	e01a      	b.n	80054fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d116      	bne.n	80054fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d4:	e013      	b.n	80054fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054d6:	4b57      	ldr	r3, [pc, #348]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054e2:	4b54      	ldr	r3, [pc, #336]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054f2:	e006      	b.n	8005502 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	73fb      	strb	r3, [r7, #15]
      break;
 80054f8:	e004      	b.n	8005504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054fa:	bf00      	nop
 80054fc:	e002      	b.n	8005504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005502:	bf00      	nop
    }

    if(status == HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10d      	bne.n	8005526 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800550a:	4b4a      	ldr	r3, [pc, #296]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6819      	ldr	r1, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	3b01      	subs	r3, #1
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	430b      	orrs	r3, r1
 8005520:	4944      	ldr	r1, [pc, #272]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005522:	4313      	orrs	r3, r2
 8005524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d17d      	bne.n	8005628 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800552c:	4b41      	ldr	r3, [pc, #260]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a40      	ldr	r2, [pc, #256]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005532:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005538:	f7fc fe5e 	bl	80021f8 <HAL_GetTick>
 800553c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800553e:	e009      	b.n	8005554 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005540:	f7fc fe5a 	bl	80021f8 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d902      	bls.n	8005554 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	73fb      	strb	r3, [r7, #15]
        break;
 8005552:	e005      	b.n	8005560 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005554:	4b37      	ldr	r3, [pc, #220]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1ef      	bne.n	8005540 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d160      	bne.n	8005628 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d111      	bne.n	8005590 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800556c:	4b31      	ldr	r3, [pc, #196]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6892      	ldr	r2, [r2, #8]
 800557c:	0211      	lsls	r1, r2, #8
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68d2      	ldr	r2, [r2, #12]
 8005582:	0912      	lsrs	r2, r2, #4
 8005584:	0452      	lsls	r2, r2, #17
 8005586:	430a      	orrs	r2, r1
 8005588:	492a      	ldr	r1, [pc, #168]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558a:	4313      	orrs	r3, r2
 800558c:	610b      	str	r3, [r1, #16]
 800558e:	e027      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d112      	bne.n	80055bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005596:	4b27      	ldr	r3, [pc, #156]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800559e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6892      	ldr	r2, [r2, #8]
 80055a6:	0211      	lsls	r1, r2, #8
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6912      	ldr	r2, [r2, #16]
 80055ac:	0852      	lsrs	r2, r2, #1
 80055ae:	3a01      	subs	r2, #1
 80055b0:	0552      	lsls	r2, r2, #21
 80055b2:	430a      	orrs	r2, r1
 80055b4:	491f      	ldr	r1, [pc, #124]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	610b      	str	r3, [r1, #16]
 80055ba:	e011      	b.n	80055e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6892      	ldr	r2, [r2, #8]
 80055cc:	0211      	lsls	r1, r2, #8
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6952      	ldr	r2, [r2, #20]
 80055d2:	0852      	lsrs	r2, r2, #1
 80055d4:	3a01      	subs	r2, #1
 80055d6:	0652      	lsls	r2, r2, #25
 80055d8:	430a      	orrs	r2, r1
 80055da:	4916      	ldr	r1, [pc, #88]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055e0:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a13      	ldr	r2, [pc, #76]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ec:	f7fc fe04 	bl	80021f8 <HAL_GetTick>
 80055f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055f2:	e009      	b.n	8005608 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055f4:	f7fc fe00 	bl	80021f8 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d902      	bls.n	8005608 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	73fb      	strb	r3, [r7, #15]
          break;
 8005606:	e005      	b.n	8005614 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005608:	4b0a      	ldr	r3, [pc, #40]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0ef      	beq.n	80055f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	4904      	ldr	r1, [pc, #16]	@ (8005634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	4313      	orrs	r3, r2
 8005626:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000

08005638 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005646:	4b6a      	ldr	r3, [pc, #424]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d018      	beq.n	8005684 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005652:	4b67      	ldr	r3, [pc, #412]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f003 0203 	and.w	r2, r3, #3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d10d      	bne.n	800567e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
       ||
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800566a:	4b61      	ldr	r3, [pc, #388]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
       ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d047      	beq.n	800570e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
 8005682:	e044      	b.n	800570e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d018      	beq.n	80056be <RCCEx_PLLSAI2_Config+0x86>
 800568c:	2b03      	cmp	r3, #3
 800568e:	d825      	bhi.n	80056dc <RCCEx_PLLSAI2_Config+0xa4>
 8005690:	2b01      	cmp	r3, #1
 8005692:	d002      	beq.n	800569a <RCCEx_PLLSAI2_Config+0x62>
 8005694:	2b02      	cmp	r3, #2
 8005696:	d009      	beq.n	80056ac <RCCEx_PLLSAI2_Config+0x74>
 8005698:	e020      	b.n	80056dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800569a:	4b55      	ldr	r3, [pc, #340]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d11d      	bne.n	80056e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056aa:	e01a      	b.n	80056e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056ac:	4b50      	ldr	r3, [pc, #320]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d116      	bne.n	80056e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056bc:	e013      	b.n	80056e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056be:	4b4c      	ldr	r3, [pc, #304]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056ca:	4b49      	ldr	r3, [pc, #292]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056da:	e006      	b.n	80056ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
      break;
 80056e0:	e004      	b.n	80056ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056e2:	bf00      	nop
 80056e4:	e002      	b.n	80056ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056e6:	bf00      	nop
 80056e8:	e000      	b.n	80056ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056f2:	4b3f      	ldr	r3, [pc, #252]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	3b01      	subs	r3, #1
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	430b      	orrs	r3, r1
 8005708:	4939      	ldr	r1, [pc, #228]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800570a:	4313      	orrs	r3, r2
 800570c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d167      	bne.n	80057e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005714:	4b36      	ldr	r3, [pc, #216]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a35      	ldr	r2, [pc, #212]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800571e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005720:	f7fc fd6a 	bl	80021f8 <HAL_GetTick>
 8005724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005726:	e009      	b.n	800573c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005728:	f7fc fd66 	bl	80021f8 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d902      	bls.n	800573c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	73fb      	strb	r3, [r7, #15]
        break;
 800573a:	e005      	b.n	8005748 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800573c:	4b2c      	ldr	r3, [pc, #176]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1ef      	bne.n	8005728 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d14a      	bne.n	80057e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d111      	bne.n	8005778 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005754:	4b26      	ldr	r3, [pc, #152]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800575c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6892      	ldr	r2, [r2, #8]
 8005764:	0211      	lsls	r1, r2, #8
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68d2      	ldr	r2, [r2, #12]
 800576a:	0912      	lsrs	r2, r2, #4
 800576c:	0452      	lsls	r2, r2, #17
 800576e:	430a      	orrs	r2, r1
 8005770:	491f      	ldr	r1, [pc, #124]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	614b      	str	r3, [r1, #20]
 8005776:	e011      	b.n	800579c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005778:	4b1d      	ldr	r3, [pc, #116]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005780:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6892      	ldr	r2, [r2, #8]
 8005788:	0211      	lsls	r1, r2, #8
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6912      	ldr	r2, [r2, #16]
 800578e:	0852      	lsrs	r2, r2, #1
 8005790:	3a01      	subs	r2, #1
 8005792:	0652      	lsls	r2, r2, #25
 8005794:	430a      	orrs	r2, r1
 8005796:	4916      	ldr	r1, [pc, #88]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005798:	4313      	orrs	r3, r2
 800579a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800579c:	4b14      	ldr	r3, [pc, #80]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a13      	ldr	r2, [pc, #76]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fc fd26 	bl	80021f8 <HAL_GetTick>
 80057ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057ae:	e009      	b.n	80057c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057b0:	f7fc fd22 	bl	80021f8 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d902      	bls.n	80057c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	73fb      	strb	r3, [r7, #15]
          break;
 80057c2:	e005      	b.n	80057d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057c4:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0ef      	beq.n	80057b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057d6:	4b06      	ldr	r3, [pc, #24]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	4904      	ldr	r1, [pc, #16]	@ (80057f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000

080057f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e049      	b.n	800589a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fc fa78 	bl	8001d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f000 fa38 	bl	8005ca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d020      	beq.n	8005906 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01b      	beq.n	8005906 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0202 	mvn.w	r2, #2
 80058d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f9bc 	bl	8005c6a <HAL_TIM_IC_CaptureCallback>
 80058f2:	e005      	b.n	8005900 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 f9ae 	bl	8005c56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f9bf 	bl	8005c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d020      	beq.n	8005952 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01b      	beq.n	8005952 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0204 	mvn.w	r2, #4
 8005922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f996 	bl	8005c6a <HAL_TIM_IC_CaptureCallback>
 800593e:	e005      	b.n	800594c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f988 	bl	8005c56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f999 	bl	8005c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01b      	beq.n	800599e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f06f 0208 	mvn.w	r2, #8
 800596e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2204      	movs	r2, #4
 8005974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f970 	bl	8005c6a <HAL_TIM_IC_CaptureCallback>
 800598a:	e005      	b.n	8005998 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f962 	bl	8005c56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f973 	bl	8005c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01b      	beq.n	80059ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0210 	mvn.w	r2, #16
 80059ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2208      	movs	r2, #8
 80059c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f94a 	bl	8005c6a <HAL_TIM_IC_CaptureCallback>
 80059d6:	e005      	b.n	80059e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f93c 	bl	8005c56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f94d 	bl	8005c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00c      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f06f 0201 	mvn.w	r2, #1
 8005a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f91a 	bl	8005c42 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00c      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb08 	bl	800604c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00c      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fb00 	bl	8006060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f907 	bl	8005c92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00c      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0220 	mvn.w	r2, #32
 8005aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fac8 	bl	8006038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_TIM_ConfigClockSource+0x1c>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e0b6      	b.n	8005c3a <HAL_TIM_ConfigClockSource+0x18a>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005af6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b08:	d03e      	beq.n	8005b88 <HAL_TIM_ConfigClockSource+0xd8>
 8005b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b0e:	f200 8087 	bhi.w	8005c20 <HAL_TIM_ConfigClockSource+0x170>
 8005b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b16:	f000 8086 	beq.w	8005c26 <HAL_TIM_ConfigClockSource+0x176>
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b1e:	d87f      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x170>
 8005b20:	2b70      	cmp	r3, #112	@ 0x70
 8005b22:	d01a      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0xaa>
 8005b24:	2b70      	cmp	r3, #112	@ 0x70
 8005b26:	d87b      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x170>
 8005b28:	2b60      	cmp	r3, #96	@ 0x60
 8005b2a:	d050      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x11e>
 8005b2c:	2b60      	cmp	r3, #96	@ 0x60
 8005b2e:	d877      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x170>
 8005b30:	2b50      	cmp	r3, #80	@ 0x50
 8005b32:	d03c      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0xfe>
 8005b34:	2b50      	cmp	r3, #80	@ 0x50
 8005b36:	d873      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x170>
 8005b38:	2b40      	cmp	r3, #64	@ 0x40
 8005b3a:	d058      	beq.n	8005bee <HAL_TIM_ConfigClockSource+0x13e>
 8005b3c:	2b40      	cmp	r3, #64	@ 0x40
 8005b3e:	d86f      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x170>
 8005b40:	2b30      	cmp	r3, #48	@ 0x30
 8005b42:	d064      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x15e>
 8005b44:	2b30      	cmp	r3, #48	@ 0x30
 8005b46:	d86b      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x170>
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d060      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x15e>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d867      	bhi.n	8005c20 <HAL_TIM_ConfigClockSource+0x170>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d05c      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x15e>
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d05a      	beq.n	8005c0e <HAL_TIM_ConfigClockSource+0x15e>
 8005b58:	e062      	b.n	8005c20 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	f000 f9bd 	bl	8005ee8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	609a      	str	r2, [r3, #8]
      break;
 8005b86:	e04f      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b98:	f000 f9a6 	bl	8005ee8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005baa:	609a      	str	r2, [r3, #8]
      break;
 8005bac:	e03c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 f91a 	bl	8005df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2150      	movs	r1, #80	@ 0x50
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f973 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e02c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f000 f939 	bl	8005e52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2160      	movs	r1, #96	@ 0x60
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f963 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005bec:	e01c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f000 f8fa 	bl	8005df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2140      	movs	r1, #64	@ 0x40
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f953 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005c0c:	e00c      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f000 f94a 	bl	8005eb2 <TIM_ITRx_SetConfig>
      break;
 8005c1e:	e003      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
      break;
 8005c24:	e000      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
	...

08005ca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a46      	ldr	r2, [pc, #280]	@ (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d013      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a43      	ldr	r2, [pc, #268]	@ (8005dd8 <TIM_Base_SetConfig+0x130>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a42      	ldr	r2, [pc, #264]	@ (8005ddc <TIM_Base_SetConfig+0x134>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a41      	ldr	r2, [pc, #260]	@ (8005de0 <TIM_Base_SetConfig+0x138>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a40      	ldr	r2, [pc, #256]	@ (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a35      	ldr	r2, [pc, #212]	@ (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01f      	beq.n	8005d42 <TIM_Base_SetConfig+0x9a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d08:	d01b      	beq.n	8005d42 <TIM_Base_SetConfig+0x9a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a32      	ldr	r2, [pc, #200]	@ (8005dd8 <TIM_Base_SetConfig+0x130>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d017      	beq.n	8005d42 <TIM_Base_SetConfig+0x9a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a31      	ldr	r2, [pc, #196]	@ (8005ddc <TIM_Base_SetConfig+0x134>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <TIM_Base_SetConfig+0x9a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a30      	ldr	r2, [pc, #192]	@ (8005de0 <TIM_Base_SetConfig+0x138>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d00f      	beq.n	8005d42 <TIM_Base_SetConfig+0x9a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2f      	ldr	r2, [pc, #188]	@ (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00b      	beq.n	8005d42 <TIM_Base_SetConfig+0x9a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005de8 <TIM_Base_SetConfig+0x140>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d007      	beq.n	8005d42 <TIM_Base_SetConfig+0x9a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2d      	ldr	r2, [pc, #180]	@ (8005dec <TIM_Base_SetConfig+0x144>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d003      	beq.n	8005d42 <TIM_Base_SetConfig+0x9a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005df0 <TIM_Base_SetConfig+0x148>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d108      	bne.n	8005d54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a16      	ldr	r2, [pc, #88]	@ (8005dd4 <TIM_Base_SetConfig+0x12c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00f      	beq.n	8005da0 <TIM_Base_SetConfig+0xf8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a18      	ldr	r2, [pc, #96]	@ (8005de4 <TIM_Base_SetConfig+0x13c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00b      	beq.n	8005da0 <TIM_Base_SetConfig+0xf8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a17      	ldr	r2, [pc, #92]	@ (8005de8 <TIM_Base_SetConfig+0x140>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0xf8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a16      	ldr	r2, [pc, #88]	@ (8005dec <TIM_Base_SetConfig+0x144>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0xf8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a15      	ldr	r2, [pc, #84]	@ (8005df0 <TIM_Base_SetConfig+0x148>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d103      	bne.n	8005da8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	f023 0201 	bic.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	611a      	str	r2, [r3, #16]
  }
}
 8005dc6:	bf00      	nop
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f023 0201 	bic.w	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f023 030a 	bic.w	r3, r3, #10
 8005e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b087      	sub	sp, #28
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f023 0210 	bic.w	r2, r3, #16
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	031b      	lsls	r3, r3, #12
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f043 0307 	orr.w	r3, r3, #7
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	609a      	str	r2, [r3, #8]
}
 8005edc:	bf00      	nop
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	021a      	lsls	r2, r3, #8
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	609a      	str	r2, [r3, #8]
}
 8005f1c:	bf00      	nop
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e068      	b.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a2e      	ldr	r2, [pc, #184]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d108      	bne.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01d      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb2:	d018      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00e      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a18      	ldr	r2, [pc, #96]	@ (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d009      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a13      	ldr	r2, [pc, #76]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d004      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a14      	ldr	r2, [pc, #80]	@ (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d10c      	bne.n	8006000 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40013400 	.word	0x40013400
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40014000 	.word	0x40014000

08006038 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e040      	b.n	8006108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fb fe5e 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	@ 0x24
 80060a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0201 	bic.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fc32 	bl	8006924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f977 	bl	80063b4 <UART_SetConfig>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e01b      	b.n	8006108 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fcb1 	bl	8006a68 <UART_CheckIdleState>
 8006106:	4603      	mov	r3, r0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08a      	sub	sp, #40	@ 0x28
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006124:	2b20      	cmp	r3, #32
 8006126:	d177      	bne.n	8006218 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_UART_Transmit+0x24>
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e070      	b.n	800621a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2221      	movs	r2, #33	@ 0x21
 8006144:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006146:	f7fc f857 	bl	80021f8 <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	88fa      	ldrh	r2, [r7, #6]
 8006150:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	88fa      	ldrh	r2, [r7, #6]
 8006158:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006164:	d108      	bne.n	8006178 <HAL_UART_Transmit+0x68>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	e003      	b.n	8006180 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800617c:	2300      	movs	r3, #0
 800617e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006180:	e02f      	b.n	80061e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2200      	movs	r2, #0
 800618a:	2180      	movs	r1, #128	@ 0x80
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fd13 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e03b      	b.n	800621a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	881a      	ldrh	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b4:	b292      	uxth	r2, r2
 80061b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	3302      	adds	r3, #2
 80061bc:	61bb      	str	r3, [r7, #24]
 80061be:	e007      	b.n	80061d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	781a      	ldrb	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	3301      	adds	r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1c9      	bne.n	8006182 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	2140      	movs	r1, #64	@ 0x40
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 fcdd 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d004      	beq.n	800620e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e005      	b.n	800621a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	e000      	b.n	800621a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006218:	2302      	movs	r3, #2
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08a      	sub	sp, #40	@ 0x28
 8006226:	af02      	add	r7, sp, #8
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006238:	2b20      	cmp	r3, #32
 800623a:	f040 80b6 	bne.w	80063aa <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d002      	beq.n	800624a <HAL_UART_Receive+0x28>
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e0ae      	b.n	80063ac <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2222      	movs	r2, #34	@ 0x22
 800625a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006264:	f7fb ffc8 	bl	80021f8 <HAL_GetTick>
 8006268:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006282:	d10e      	bne.n	80062a2 <HAL_UART_Receive+0x80>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d105      	bne.n	8006298 <HAL_UART_Receive+0x76>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006292:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006296:	e02d      	b.n	80062f4 <HAL_UART_Receive+0xd2>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	22ff      	movs	r2, #255	@ 0xff
 800629c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062a0:	e028      	b.n	80062f4 <HAL_UART_Receive+0xd2>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10d      	bne.n	80062c6 <HAL_UART_Receive+0xa4>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <HAL_UART_Receive+0x9a>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	22ff      	movs	r2, #255	@ 0xff
 80062b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ba:	e01b      	b.n	80062f4 <HAL_UART_Receive+0xd2>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	227f      	movs	r2, #127	@ 0x7f
 80062c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062c4:	e016      	b.n	80062f4 <HAL_UART_Receive+0xd2>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ce:	d10d      	bne.n	80062ec <HAL_UART_Receive+0xca>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d104      	bne.n	80062e2 <HAL_UART_Receive+0xc0>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	227f      	movs	r2, #127	@ 0x7f
 80062dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062e0:	e008      	b.n	80062f4 <HAL_UART_Receive+0xd2>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	223f      	movs	r2, #63	@ 0x3f
 80062e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ea:	e003      	b.n	80062f4 <HAL_UART_Receive+0xd2>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062fa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006304:	d108      	bne.n	8006318 <HAL_UART_Receive+0xf6>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d104      	bne.n	8006318 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800630e:	2300      	movs	r3, #0
 8006310:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	61bb      	str	r3, [r7, #24]
 8006316:	e003      	b.n	8006320 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006320:	e037      	b.n	8006392 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	2120      	movs	r1, #32
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fc43 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e033      	b.n	80063ac <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10c      	bne.n	8006364 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006350:	b29a      	uxth	r2, r3
 8006352:	8a7b      	ldrh	r3, [r7, #18]
 8006354:	4013      	ands	r3, r2
 8006356:	b29a      	uxth	r2, r3
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	3302      	adds	r3, #2
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	e00d      	b.n	8006380 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800636a:	b29b      	uxth	r3, r3
 800636c:	b2da      	uxtb	r2, r3
 800636e:	8a7b      	ldrh	r3, [r7, #18]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	4013      	ands	r3, r2
 8006374:	b2da      	uxtb	r2, r3
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	3301      	adds	r3, #1
 800637e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1c1      	bne.n	8006322 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e000      	b.n	80063ac <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80063aa:	2302      	movs	r3, #2
  }
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063b8:	b08a      	sub	sp, #40	@ 0x28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	431a      	orrs	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	431a      	orrs	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	4313      	orrs	r3, r2
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4ba4      	ldr	r3, [pc, #656]	@ (8006674 <UART_SetConfig+0x2c0>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	6812      	ldr	r2, [r2, #0]
 80063ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063ec:	430b      	orrs	r3, r1
 80063ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a99      	ldr	r2, [pc, #612]	@ (8006678 <UART_SetConfig+0x2c4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d004      	beq.n	8006420 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641c:	4313      	orrs	r3, r2
 800641e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006430:	430a      	orrs	r2, r1
 8006432:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a90      	ldr	r2, [pc, #576]	@ (800667c <UART_SetConfig+0x2c8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d126      	bne.n	800648c <UART_SetConfig+0xd8>
 800643e:	4b90      	ldr	r3, [pc, #576]	@ (8006680 <UART_SetConfig+0x2cc>)
 8006440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	2b03      	cmp	r3, #3
 800644a:	d81b      	bhi.n	8006484 <UART_SetConfig+0xd0>
 800644c:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <UART_SetConfig+0xa0>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	08006465 	.word	0x08006465
 8006458:	08006475 	.word	0x08006475
 800645c:	0800646d 	.word	0x0800646d
 8006460:	0800647d 	.word	0x0800647d
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646a:	e116      	b.n	800669a <UART_SetConfig+0x2e6>
 800646c:	2302      	movs	r3, #2
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006472:	e112      	b.n	800669a <UART_SetConfig+0x2e6>
 8006474:	2304      	movs	r3, #4
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647a:	e10e      	b.n	800669a <UART_SetConfig+0x2e6>
 800647c:	2308      	movs	r3, #8
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006482:	e10a      	b.n	800669a <UART_SetConfig+0x2e6>
 8006484:	2310      	movs	r3, #16
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648a:	e106      	b.n	800669a <UART_SetConfig+0x2e6>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a7c      	ldr	r2, [pc, #496]	@ (8006684 <UART_SetConfig+0x2d0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d138      	bne.n	8006508 <UART_SetConfig+0x154>
 8006496:	4b7a      	ldr	r3, [pc, #488]	@ (8006680 <UART_SetConfig+0x2cc>)
 8006498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800649c:	f003 030c 	and.w	r3, r3, #12
 80064a0:	2b0c      	cmp	r3, #12
 80064a2:	d82d      	bhi.n	8006500 <UART_SetConfig+0x14c>
 80064a4:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <UART_SetConfig+0xf8>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	08006501 	.word	0x08006501
 80064b4:	08006501 	.word	0x08006501
 80064b8:	08006501 	.word	0x08006501
 80064bc:	080064f1 	.word	0x080064f1
 80064c0:	08006501 	.word	0x08006501
 80064c4:	08006501 	.word	0x08006501
 80064c8:	08006501 	.word	0x08006501
 80064cc:	080064e9 	.word	0x080064e9
 80064d0:	08006501 	.word	0x08006501
 80064d4:	08006501 	.word	0x08006501
 80064d8:	08006501 	.word	0x08006501
 80064dc:	080064f9 	.word	0x080064f9
 80064e0:	2300      	movs	r3, #0
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e6:	e0d8      	b.n	800669a <UART_SetConfig+0x2e6>
 80064e8:	2302      	movs	r3, #2
 80064ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ee:	e0d4      	b.n	800669a <UART_SetConfig+0x2e6>
 80064f0:	2304      	movs	r3, #4
 80064f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f6:	e0d0      	b.n	800669a <UART_SetConfig+0x2e6>
 80064f8:	2308      	movs	r3, #8
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fe:	e0cc      	b.n	800669a <UART_SetConfig+0x2e6>
 8006500:	2310      	movs	r3, #16
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006506:	e0c8      	b.n	800669a <UART_SetConfig+0x2e6>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a5e      	ldr	r2, [pc, #376]	@ (8006688 <UART_SetConfig+0x2d4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d125      	bne.n	800655e <UART_SetConfig+0x1aa>
 8006512:	4b5b      	ldr	r3, [pc, #364]	@ (8006680 <UART_SetConfig+0x2cc>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006518:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800651c:	2b30      	cmp	r3, #48	@ 0x30
 800651e:	d016      	beq.n	800654e <UART_SetConfig+0x19a>
 8006520:	2b30      	cmp	r3, #48	@ 0x30
 8006522:	d818      	bhi.n	8006556 <UART_SetConfig+0x1a2>
 8006524:	2b20      	cmp	r3, #32
 8006526:	d00a      	beq.n	800653e <UART_SetConfig+0x18a>
 8006528:	2b20      	cmp	r3, #32
 800652a:	d814      	bhi.n	8006556 <UART_SetConfig+0x1a2>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <UART_SetConfig+0x182>
 8006530:	2b10      	cmp	r3, #16
 8006532:	d008      	beq.n	8006546 <UART_SetConfig+0x192>
 8006534:	e00f      	b.n	8006556 <UART_SetConfig+0x1a2>
 8006536:	2300      	movs	r3, #0
 8006538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653c:	e0ad      	b.n	800669a <UART_SetConfig+0x2e6>
 800653e:	2302      	movs	r3, #2
 8006540:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006544:	e0a9      	b.n	800669a <UART_SetConfig+0x2e6>
 8006546:	2304      	movs	r3, #4
 8006548:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654c:	e0a5      	b.n	800669a <UART_SetConfig+0x2e6>
 800654e:	2308      	movs	r3, #8
 8006550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006554:	e0a1      	b.n	800669a <UART_SetConfig+0x2e6>
 8006556:	2310      	movs	r3, #16
 8006558:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655c:	e09d      	b.n	800669a <UART_SetConfig+0x2e6>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a4a      	ldr	r2, [pc, #296]	@ (800668c <UART_SetConfig+0x2d8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d125      	bne.n	80065b4 <UART_SetConfig+0x200>
 8006568:	4b45      	ldr	r3, [pc, #276]	@ (8006680 <UART_SetConfig+0x2cc>)
 800656a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006572:	2bc0      	cmp	r3, #192	@ 0xc0
 8006574:	d016      	beq.n	80065a4 <UART_SetConfig+0x1f0>
 8006576:	2bc0      	cmp	r3, #192	@ 0xc0
 8006578:	d818      	bhi.n	80065ac <UART_SetConfig+0x1f8>
 800657a:	2b80      	cmp	r3, #128	@ 0x80
 800657c:	d00a      	beq.n	8006594 <UART_SetConfig+0x1e0>
 800657e:	2b80      	cmp	r3, #128	@ 0x80
 8006580:	d814      	bhi.n	80065ac <UART_SetConfig+0x1f8>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <UART_SetConfig+0x1d8>
 8006586:	2b40      	cmp	r3, #64	@ 0x40
 8006588:	d008      	beq.n	800659c <UART_SetConfig+0x1e8>
 800658a:	e00f      	b.n	80065ac <UART_SetConfig+0x1f8>
 800658c:	2300      	movs	r3, #0
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006592:	e082      	b.n	800669a <UART_SetConfig+0x2e6>
 8006594:	2302      	movs	r3, #2
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659a:	e07e      	b.n	800669a <UART_SetConfig+0x2e6>
 800659c:	2304      	movs	r3, #4
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a2:	e07a      	b.n	800669a <UART_SetConfig+0x2e6>
 80065a4:	2308      	movs	r3, #8
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065aa:	e076      	b.n	800669a <UART_SetConfig+0x2e6>
 80065ac:	2310      	movs	r3, #16
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b2:	e072      	b.n	800669a <UART_SetConfig+0x2e6>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a35      	ldr	r2, [pc, #212]	@ (8006690 <UART_SetConfig+0x2dc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d12a      	bne.n	8006614 <UART_SetConfig+0x260>
 80065be:	4b30      	ldr	r3, [pc, #192]	@ (8006680 <UART_SetConfig+0x2cc>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065cc:	d01a      	beq.n	8006604 <UART_SetConfig+0x250>
 80065ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065d2:	d81b      	bhi.n	800660c <UART_SetConfig+0x258>
 80065d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065d8:	d00c      	beq.n	80065f4 <UART_SetConfig+0x240>
 80065da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065de:	d815      	bhi.n	800660c <UART_SetConfig+0x258>
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <UART_SetConfig+0x238>
 80065e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e8:	d008      	beq.n	80065fc <UART_SetConfig+0x248>
 80065ea:	e00f      	b.n	800660c <UART_SetConfig+0x258>
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f2:	e052      	b.n	800669a <UART_SetConfig+0x2e6>
 80065f4:	2302      	movs	r3, #2
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fa:	e04e      	b.n	800669a <UART_SetConfig+0x2e6>
 80065fc:	2304      	movs	r3, #4
 80065fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006602:	e04a      	b.n	800669a <UART_SetConfig+0x2e6>
 8006604:	2308      	movs	r3, #8
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800660a:	e046      	b.n	800669a <UART_SetConfig+0x2e6>
 800660c:	2310      	movs	r3, #16
 800660e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006612:	e042      	b.n	800669a <UART_SetConfig+0x2e6>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a17      	ldr	r2, [pc, #92]	@ (8006678 <UART_SetConfig+0x2c4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d13a      	bne.n	8006694 <UART_SetConfig+0x2e0>
 800661e:	4b18      	ldr	r3, [pc, #96]	@ (8006680 <UART_SetConfig+0x2cc>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006624:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006628:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800662c:	d01a      	beq.n	8006664 <UART_SetConfig+0x2b0>
 800662e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006632:	d81b      	bhi.n	800666c <UART_SetConfig+0x2b8>
 8006634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006638:	d00c      	beq.n	8006654 <UART_SetConfig+0x2a0>
 800663a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800663e:	d815      	bhi.n	800666c <UART_SetConfig+0x2b8>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <UART_SetConfig+0x298>
 8006644:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006648:	d008      	beq.n	800665c <UART_SetConfig+0x2a8>
 800664a:	e00f      	b.n	800666c <UART_SetConfig+0x2b8>
 800664c:	2300      	movs	r3, #0
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006652:	e022      	b.n	800669a <UART_SetConfig+0x2e6>
 8006654:	2302      	movs	r3, #2
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665a:	e01e      	b.n	800669a <UART_SetConfig+0x2e6>
 800665c:	2304      	movs	r3, #4
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006662:	e01a      	b.n	800669a <UART_SetConfig+0x2e6>
 8006664:	2308      	movs	r3, #8
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666a:	e016      	b.n	800669a <UART_SetConfig+0x2e6>
 800666c:	2310      	movs	r3, #16
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006672:	e012      	b.n	800669a <UART_SetConfig+0x2e6>
 8006674:	efff69f3 	.word	0xefff69f3
 8006678:	40008000 	.word	0x40008000
 800667c:	40013800 	.word	0x40013800
 8006680:	40021000 	.word	0x40021000
 8006684:	40004400 	.word	0x40004400
 8006688:	40004800 	.word	0x40004800
 800668c:	40004c00 	.word	0x40004c00
 8006690:	40005000 	.word	0x40005000
 8006694:	2310      	movs	r3, #16
 8006696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a9f      	ldr	r2, [pc, #636]	@ (800691c <UART_SetConfig+0x568>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d17a      	bne.n	800679a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d824      	bhi.n	80066f6 <UART_SetConfig+0x342>
 80066ac:	a201      	add	r2, pc, #4	@ (adr r2, 80066b4 <UART_SetConfig+0x300>)
 80066ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b2:	bf00      	nop
 80066b4:	080066d9 	.word	0x080066d9
 80066b8:	080066f7 	.word	0x080066f7
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	080066f7 	.word	0x080066f7
 80066c4:	080066e7 	.word	0x080066e7
 80066c8:	080066f7 	.word	0x080066f7
 80066cc:	080066f7 	.word	0x080066f7
 80066d0:	080066f7 	.word	0x080066f7
 80066d4:	080066ef 	.word	0x080066ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d8:	f7fe fb44 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 80066dc:	61f8      	str	r0, [r7, #28]
        break;
 80066de:	e010      	b.n	8006702 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e0:	4b8f      	ldr	r3, [pc, #572]	@ (8006920 <UART_SetConfig+0x56c>)
 80066e2:	61fb      	str	r3, [r7, #28]
        break;
 80066e4:	e00d      	b.n	8006702 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066e6:	f7fe faa5 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 80066ea:	61f8      	str	r0, [r7, #28]
        break;
 80066ec:	e009      	b.n	8006702 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066f2:	61fb      	str	r3, [r7, #28]
        break;
 80066f4:	e005      	b.n	8006702 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 80fb 	beq.w	8006900 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	4413      	add	r3, r2
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	429a      	cmp	r2, r3
 8006718:	d305      	bcc.n	8006726 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	429a      	cmp	r2, r3
 8006724:	d903      	bls.n	800672e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800672c:	e0e8      	b.n	8006900 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	2200      	movs	r2, #0
 8006732:	461c      	mov	r4, r3
 8006734:	4615      	mov	r5, r2
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	f04f 0300 	mov.w	r3, #0
 800673e:	022b      	lsls	r3, r5, #8
 8006740:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006744:	0222      	lsls	r2, r4, #8
 8006746:	68f9      	ldr	r1, [r7, #12]
 8006748:	6849      	ldr	r1, [r1, #4]
 800674a:	0849      	lsrs	r1, r1, #1
 800674c:	2000      	movs	r0, #0
 800674e:	4688      	mov	r8, r1
 8006750:	4681      	mov	r9, r0
 8006752:	eb12 0a08 	adds.w	sl, r2, r8
 8006756:	eb43 0b09 	adc.w	fp, r3, r9
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006768:	4650      	mov	r0, sl
 800676a:	4659      	mov	r1, fp
 800676c:	f7fa fa1c 	bl	8000ba8 <__aeabi_uldivmod>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4613      	mov	r3, r2
 8006776:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800677e:	d308      	bcc.n	8006792 <UART_SetConfig+0x3de>
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006786:	d204      	bcs.n	8006792 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	60da      	str	r2, [r3, #12]
 8006790:	e0b6      	b.n	8006900 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006798:	e0b2      	b.n	8006900 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a2:	d15e      	bne.n	8006862 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d828      	bhi.n	80067fe <UART_SetConfig+0x44a>
 80067ac:	a201      	add	r2, pc, #4	@ (adr r2, 80067b4 <UART_SetConfig+0x400>)
 80067ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b2:	bf00      	nop
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	080067e1 	.word	0x080067e1
 80067bc:	080067e9 	.word	0x080067e9
 80067c0:	080067ff 	.word	0x080067ff
 80067c4:	080067ef 	.word	0x080067ef
 80067c8:	080067ff 	.word	0x080067ff
 80067cc:	080067ff 	.word	0x080067ff
 80067d0:	080067ff 	.word	0x080067ff
 80067d4:	080067f7 	.word	0x080067f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d8:	f7fe fac4 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 80067dc:	61f8      	str	r0, [r7, #28]
        break;
 80067de:	e014      	b.n	800680a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067e0:	f7fe fad6 	bl	8004d90 <HAL_RCC_GetPCLK2Freq>
 80067e4:	61f8      	str	r0, [r7, #28]
        break;
 80067e6:	e010      	b.n	800680a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067e8:	4b4d      	ldr	r3, [pc, #308]	@ (8006920 <UART_SetConfig+0x56c>)
 80067ea:	61fb      	str	r3, [r7, #28]
        break;
 80067ec:	e00d      	b.n	800680a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ee:	f7fe fa21 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 80067f2:	61f8      	str	r0, [r7, #28]
        break;
 80067f4:	e009      	b.n	800680a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067fa:	61fb      	str	r3, [r7, #28]
        break;
 80067fc:	e005      	b.n	800680a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006808:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d077      	beq.n	8006900 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	005a      	lsls	r2, r3, #1
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	085b      	lsrs	r3, r3, #1
 800681a:	441a      	add	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b0f      	cmp	r3, #15
 800682a:	d916      	bls.n	800685a <UART_SetConfig+0x4a6>
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006832:	d212      	bcs.n	800685a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f023 030f 	bic.w	r3, r3, #15
 800683c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	b29b      	uxth	r3, r3
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	b29a      	uxth	r2, r3
 800684a:	8afb      	ldrh	r3, [r7, #22]
 800684c:	4313      	orrs	r3, r2
 800684e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	8afa      	ldrh	r2, [r7, #22]
 8006856:	60da      	str	r2, [r3, #12]
 8006858:	e052      	b.n	8006900 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006860:	e04e      	b.n	8006900 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006862:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006866:	2b08      	cmp	r3, #8
 8006868:	d827      	bhi.n	80068ba <UART_SetConfig+0x506>
 800686a:	a201      	add	r2, pc, #4	@ (adr r2, 8006870 <UART_SetConfig+0x4bc>)
 800686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006870:	08006895 	.word	0x08006895
 8006874:	0800689d 	.word	0x0800689d
 8006878:	080068a5 	.word	0x080068a5
 800687c:	080068bb 	.word	0x080068bb
 8006880:	080068ab 	.word	0x080068ab
 8006884:	080068bb 	.word	0x080068bb
 8006888:	080068bb 	.word	0x080068bb
 800688c:	080068bb 	.word	0x080068bb
 8006890:	080068b3 	.word	0x080068b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006894:	f7fe fa66 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 8006898:	61f8      	str	r0, [r7, #28]
        break;
 800689a:	e014      	b.n	80068c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800689c:	f7fe fa78 	bl	8004d90 <HAL_RCC_GetPCLK2Freq>
 80068a0:	61f8      	str	r0, [r7, #28]
        break;
 80068a2:	e010      	b.n	80068c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006920 <UART_SetConfig+0x56c>)
 80068a6:	61fb      	str	r3, [r7, #28]
        break;
 80068a8:	e00d      	b.n	80068c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068aa:	f7fe f9c3 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 80068ae:	61f8      	str	r0, [r7, #28]
        break;
 80068b0:	e009      	b.n	80068c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068b6:	61fb      	str	r3, [r7, #28]
        break;
 80068b8:	e005      	b.n	80068c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068c4:	bf00      	nop
    }

    if (pclk != 0U)
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d019      	beq.n	8006900 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	085a      	lsrs	r2, r3, #1
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	441a      	add	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	fbb2 f3f3 	udiv	r3, r2, r3
 80068de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b0f      	cmp	r3, #15
 80068e4:	d909      	bls.n	80068fa <UART_SetConfig+0x546>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ec:	d205      	bcs.n	80068fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	60da      	str	r2, [r3, #12]
 80068f8:	e002      	b.n	8006900 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800690c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006910:	4618      	mov	r0, r3
 8006912:	3728      	adds	r7, #40	@ 0x28
 8006914:	46bd      	mov	sp, r7
 8006916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800691a:	bf00      	nop
 800691c:	40008000 	.word	0x40008000
 8006920:	00f42400 	.word	0x00f42400

08006924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00a      	beq.n	8006992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006996:	f003 0304 	and.w	r3, r3, #4
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00a      	beq.n	80069b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01a      	beq.n	8006a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a22:	d10a      	bne.n	8006a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	605a      	str	r2, [r3, #4]
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b098      	sub	sp, #96	@ 0x60
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a78:	f7fb fbbe 	bl	80021f8 <HAL_GetTick>
 8006a7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d12e      	bne.n	8006aea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a94:	2200      	movs	r2, #0
 8006a96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f88c 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d021      	beq.n	8006aea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ac6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e062      	b.n	8006bb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b04      	cmp	r3, #4
 8006af6:	d149      	bne.n	8006b8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b00:	2200      	movs	r2, #0
 8006b02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f856 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d03c      	beq.n	8006b8c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b32:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b38:	e841 2300 	strex	r3, r2, [r1]
 8006b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1e6      	bne.n	8006b12 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b64:	61fa      	str	r2, [r7, #28]
 8006b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	69b9      	ldr	r1, [r7, #24]
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	617b      	str	r3, [r7, #20]
   return(result);
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e5      	bne.n	8006b44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e011      	b.n	8006bb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2220      	movs	r2, #32
 8006b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3758      	adds	r7, #88	@ 0x58
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc8:	e04f      	b.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd0:	d04b      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd2:	f7fb fb11 	bl	80021f8 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d302      	bcc.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e04e      	b.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d037      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b80      	cmp	r3, #128	@ 0x80
 8006bfe:	d034      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b40      	cmp	r3, #64	@ 0x40
 8006c04:	d031      	beq.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d110      	bne.n	8006c36 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2208      	movs	r2, #8
 8006c1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 f838 	bl	8006c92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2208      	movs	r2, #8
 8006c26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e029      	b.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c44:	d111      	bne.n	8006c6a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f81e 	bl	8006c92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e00f      	b.n	8006c8a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	69da      	ldr	r2, [r3, #28]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	4013      	ands	r3, r2
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	bf0c      	ite	eq
 8006c7a:	2301      	moveq	r3, #1
 8006c7c:	2300      	movne	r3, #0
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d0a0      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b095      	sub	sp, #84	@ 0x54
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006caa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e6      	bne.n	8006c9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e5      	bne.n	8006ccc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d118      	bne.n	8006d3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f023 0310 	bic.w	r3, r3, #16
 8006d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6979      	ldr	r1, [r7, #20]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	613b      	str	r3, [r7, #16]
   return(result);
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e6      	bne.n	8006d08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d4e:	bf00      	nop
 8006d50:	3754      	adds	r7, #84	@ 0x54
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <atoi>:
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	f000 b87d 	b.w	8006e5c <strtol>
	...

08006d64 <_strtol_l.constprop.0>:
 8006d64:	2b24      	cmp	r3, #36	@ 0x24
 8006d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d6a:	4686      	mov	lr, r0
 8006d6c:	4690      	mov	r8, r2
 8006d6e:	d801      	bhi.n	8006d74 <_strtol_l.constprop.0+0x10>
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d106      	bne.n	8006d82 <_strtol_l.constprop.0+0x1e>
 8006d74:	f000 fed8 	bl	8007b28 <__errno>
 8006d78:	2316      	movs	r3, #22
 8006d7a:	6003      	str	r3, [r0, #0]
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d82:	4834      	ldr	r0, [pc, #208]	@ (8006e54 <_strtol_l.constprop.0+0xf0>)
 8006d84:	460d      	mov	r5, r1
 8006d86:	462a      	mov	r2, r5
 8006d88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006d8c:	5d06      	ldrb	r6, [r0, r4]
 8006d8e:	f016 0608 	ands.w	r6, r6, #8
 8006d92:	d1f8      	bne.n	8006d86 <_strtol_l.constprop.0+0x22>
 8006d94:	2c2d      	cmp	r4, #45	@ 0x2d
 8006d96:	d12d      	bne.n	8006df4 <_strtol_l.constprop.0+0x90>
 8006d98:	782c      	ldrb	r4, [r5, #0]
 8006d9a:	2601      	movs	r6, #1
 8006d9c:	1c95      	adds	r5, r2, #2
 8006d9e:	f033 0210 	bics.w	r2, r3, #16
 8006da2:	d109      	bne.n	8006db8 <_strtol_l.constprop.0+0x54>
 8006da4:	2c30      	cmp	r4, #48	@ 0x30
 8006da6:	d12a      	bne.n	8006dfe <_strtol_l.constprop.0+0x9a>
 8006da8:	782a      	ldrb	r2, [r5, #0]
 8006daa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006dae:	2a58      	cmp	r2, #88	@ 0x58
 8006db0:	d125      	bne.n	8006dfe <_strtol_l.constprop.0+0x9a>
 8006db2:	786c      	ldrb	r4, [r5, #1]
 8006db4:	2310      	movs	r3, #16
 8006db6:	3502      	adds	r5, #2
 8006db8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006dbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	fbbc f9f3 	udiv	r9, ip, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	fb03 ca19 	mls	sl, r3, r9, ip
 8006dcc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006dd0:	2f09      	cmp	r7, #9
 8006dd2:	d81b      	bhi.n	8006e0c <_strtol_l.constprop.0+0xa8>
 8006dd4:	463c      	mov	r4, r7
 8006dd6:	42a3      	cmp	r3, r4
 8006dd8:	dd27      	ble.n	8006e2a <_strtol_l.constprop.0+0xc6>
 8006dda:	1c57      	adds	r7, r2, #1
 8006ddc:	d007      	beq.n	8006dee <_strtol_l.constprop.0+0x8a>
 8006dde:	4581      	cmp	r9, r0
 8006de0:	d320      	bcc.n	8006e24 <_strtol_l.constprop.0+0xc0>
 8006de2:	d101      	bne.n	8006de8 <_strtol_l.constprop.0+0x84>
 8006de4:	45a2      	cmp	sl, r4
 8006de6:	db1d      	blt.n	8006e24 <_strtol_l.constprop.0+0xc0>
 8006de8:	fb00 4003 	mla	r0, r0, r3, r4
 8006dec:	2201      	movs	r2, #1
 8006dee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006df2:	e7eb      	b.n	8006dcc <_strtol_l.constprop.0+0x68>
 8006df4:	2c2b      	cmp	r4, #43	@ 0x2b
 8006df6:	bf04      	itt	eq
 8006df8:	782c      	ldrbeq	r4, [r5, #0]
 8006dfa:	1c95      	addeq	r5, r2, #2
 8006dfc:	e7cf      	b.n	8006d9e <_strtol_l.constprop.0+0x3a>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1da      	bne.n	8006db8 <_strtol_l.constprop.0+0x54>
 8006e02:	2c30      	cmp	r4, #48	@ 0x30
 8006e04:	bf0c      	ite	eq
 8006e06:	2308      	moveq	r3, #8
 8006e08:	230a      	movne	r3, #10
 8006e0a:	e7d5      	b.n	8006db8 <_strtol_l.constprop.0+0x54>
 8006e0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006e10:	2f19      	cmp	r7, #25
 8006e12:	d801      	bhi.n	8006e18 <_strtol_l.constprop.0+0xb4>
 8006e14:	3c37      	subs	r4, #55	@ 0x37
 8006e16:	e7de      	b.n	8006dd6 <_strtol_l.constprop.0+0x72>
 8006e18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006e1c:	2f19      	cmp	r7, #25
 8006e1e:	d804      	bhi.n	8006e2a <_strtol_l.constprop.0+0xc6>
 8006e20:	3c57      	subs	r4, #87	@ 0x57
 8006e22:	e7d8      	b.n	8006dd6 <_strtol_l.constprop.0+0x72>
 8006e24:	f04f 32ff 	mov.w	r2, #4294967295
 8006e28:	e7e1      	b.n	8006dee <_strtol_l.constprop.0+0x8a>
 8006e2a:	1c53      	adds	r3, r2, #1
 8006e2c:	d108      	bne.n	8006e40 <_strtol_l.constprop.0+0xdc>
 8006e2e:	2322      	movs	r3, #34	@ 0x22
 8006e30:	f8ce 3000 	str.w	r3, [lr]
 8006e34:	4660      	mov	r0, ip
 8006e36:	f1b8 0f00 	cmp.w	r8, #0
 8006e3a:	d0a0      	beq.n	8006d7e <_strtol_l.constprop.0+0x1a>
 8006e3c:	1e69      	subs	r1, r5, #1
 8006e3e:	e006      	b.n	8006e4e <_strtol_l.constprop.0+0xea>
 8006e40:	b106      	cbz	r6, 8006e44 <_strtol_l.constprop.0+0xe0>
 8006e42:	4240      	negs	r0, r0
 8006e44:	f1b8 0f00 	cmp.w	r8, #0
 8006e48:	d099      	beq.n	8006d7e <_strtol_l.constprop.0+0x1a>
 8006e4a:	2a00      	cmp	r2, #0
 8006e4c:	d1f6      	bne.n	8006e3c <_strtol_l.constprop.0+0xd8>
 8006e4e:	f8c8 1000 	str.w	r1, [r8]
 8006e52:	e794      	b.n	8006d7e <_strtol_l.constprop.0+0x1a>
 8006e54:	0800a725 	.word	0x0800a725

08006e58 <_strtol_r>:
 8006e58:	f7ff bf84 	b.w	8006d64 <_strtol_l.constprop.0>

08006e5c <strtol>:
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	460a      	mov	r2, r1
 8006e60:	4601      	mov	r1, r0
 8006e62:	4802      	ldr	r0, [pc, #8]	@ (8006e6c <strtol+0x10>)
 8006e64:	6800      	ldr	r0, [r0, #0]
 8006e66:	f7ff bf7d 	b.w	8006d64 <_strtol_l.constprop.0>
 8006e6a:	bf00      	nop
 8006e6c:	20000048 	.word	0x20000048

08006e70 <__cvt>:
 8006e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e74:	ec57 6b10 	vmov	r6, r7, d0
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	463b      	mov	r3, r7
 8006e80:	bfbb      	ittet	lt
 8006e82:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006e86:	461f      	movlt	r7, r3
 8006e88:	2300      	movge	r3, #0
 8006e8a:	232d      	movlt	r3, #45	@ 0x2d
 8006e8c:	700b      	strb	r3, [r1, #0]
 8006e8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e90:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006e94:	4691      	mov	r9, r2
 8006e96:	f023 0820 	bic.w	r8, r3, #32
 8006e9a:	bfbc      	itt	lt
 8006e9c:	4632      	movlt	r2, r6
 8006e9e:	4616      	movlt	r6, r2
 8006ea0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ea4:	d005      	beq.n	8006eb2 <__cvt+0x42>
 8006ea6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006eaa:	d100      	bne.n	8006eae <__cvt+0x3e>
 8006eac:	3401      	adds	r4, #1
 8006eae:	2102      	movs	r1, #2
 8006eb0:	e000      	b.n	8006eb4 <__cvt+0x44>
 8006eb2:	2103      	movs	r1, #3
 8006eb4:	ab03      	add	r3, sp, #12
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	ab02      	add	r3, sp, #8
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	ec47 6b10 	vmov	d0, r6, r7
 8006ec0:	4653      	mov	r3, sl
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	f000 fef0 	bl	8007ca8 <_dtoa_r>
 8006ec8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006ecc:	4605      	mov	r5, r0
 8006ece:	d119      	bne.n	8006f04 <__cvt+0x94>
 8006ed0:	f019 0f01 	tst.w	r9, #1
 8006ed4:	d00e      	beq.n	8006ef4 <__cvt+0x84>
 8006ed6:	eb00 0904 	add.w	r9, r0, r4
 8006eda:	2200      	movs	r2, #0
 8006edc:	2300      	movs	r3, #0
 8006ede:	4630      	mov	r0, r6
 8006ee0:	4639      	mov	r1, r7
 8006ee2:	f7f9 fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ee6:	b108      	cbz	r0, 8006eec <__cvt+0x7c>
 8006ee8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006eec:	2230      	movs	r2, #48	@ 0x30
 8006eee:	9b03      	ldr	r3, [sp, #12]
 8006ef0:	454b      	cmp	r3, r9
 8006ef2:	d31e      	bcc.n	8006f32 <__cvt+0xc2>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ef8:	1b5b      	subs	r3, r3, r5
 8006efa:	4628      	mov	r0, r5
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	b004      	add	sp, #16
 8006f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f08:	eb00 0904 	add.w	r9, r0, r4
 8006f0c:	d1e5      	bne.n	8006eda <__cvt+0x6a>
 8006f0e:	7803      	ldrb	r3, [r0, #0]
 8006f10:	2b30      	cmp	r3, #48	@ 0x30
 8006f12:	d10a      	bne.n	8006f2a <__cvt+0xba>
 8006f14:	2200      	movs	r2, #0
 8006f16:	2300      	movs	r3, #0
 8006f18:	4630      	mov	r0, r6
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f20:	b918      	cbnz	r0, 8006f2a <__cvt+0xba>
 8006f22:	f1c4 0401 	rsb	r4, r4, #1
 8006f26:	f8ca 4000 	str.w	r4, [sl]
 8006f2a:	f8da 3000 	ldr.w	r3, [sl]
 8006f2e:	4499      	add	r9, r3
 8006f30:	e7d3      	b.n	8006eda <__cvt+0x6a>
 8006f32:	1c59      	adds	r1, r3, #1
 8006f34:	9103      	str	r1, [sp, #12]
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e7d9      	b.n	8006eee <__cvt+0x7e>

08006f3a <__exponent>:
 8006f3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f3c:	2900      	cmp	r1, #0
 8006f3e:	bfba      	itte	lt
 8006f40:	4249      	neglt	r1, r1
 8006f42:	232d      	movlt	r3, #45	@ 0x2d
 8006f44:	232b      	movge	r3, #43	@ 0x2b
 8006f46:	2909      	cmp	r1, #9
 8006f48:	7002      	strb	r2, [r0, #0]
 8006f4a:	7043      	strb	r3, [r0, #1]
 8006f4c:	dd29      	ble.n	8006fa2 <__exponent+0x68>
 8006f4e:	f10d 0307 	add.w	r3, sp, #7
 8006f52:	461d      	mov	r5, r3
 8006f54:	270a      	movs	r7, #10
 8006f56:	461a      	mov	r2, r3
 8006f58:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f5c:	fb07 1416 	mls	r4, r7, r6, r1
 8006f60:	3430      	adds	r4, #48	@ 0x30
 8006f62:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f66:	460c      	mov	r4, r1
 8006f68:	2c63      	cmp	r4, #99	@ 0x63
 8006f6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f6e:	4631      	mov	r1, r6
 8006f70:	dcf1      	bgt.n	8006f56 <__exponent+0x1c>
 8006f72:	3130      	adds	r1, #48	@ 0x30
 8006f74:	1e94      	subs	r4, r2, #2
 8006f76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f7a:	1c41      	adds	r1, r0, #1
 8006f7c:	4623      	mov	r3, r4
 8006f7e:	42ab      	cmp	r3, r5
 8006f80:	d30a      	bcc.n	8006f98 <__exponent+0x5e>
 8006f82:	f10d 0309 	add.w	r3, sp, #9
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	42ac      	cmp	r4, r5
 8006f8a:	bf88      	it	hi
 8006f8c:	2300      	movhi	r3, #0
 8006f8e:	3302      	adds	r3, #2
 8006f90:	4403      	add	r3, r0
 8006f92:	1a18      	subs	r0, r3, r0
 8006f94:	b003      	add	sp, #12
 8006f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f98:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f9c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006fa0:	e7ed      	b.n	8006f7e <__exponent+0x44>
 8006fa2:	2330      	movs	r3, #48	@ 0x30
 8006fa4:	3130      	adds	r1, #48	@ 0x30
 8006fa6:	7083      	strb	r3, [r0, #2]
 8006fa8:	70c1      	strb	r1, [r0, #3]
 8006faa:	1d03      	adds	r3, r0, #4
 8006fac:	e7f1      	b.n	8006f92 <__exponent+0x58>
	...

08006fb0 <_printf_float>:
 8006fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb4:	b08d      	sub	sp, #52	@ 0x34
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006fbc:	4616      	mov	r6, r2
 8006fbe:	461f      	mov	r7, r3
 8006fc0:	4605      	mov	r5, r0
 8006fc2:	f000 fd67 	bl	8007a94 <_localeconv_r>
 8006fc6:	6803      	ldr	r3, [r0, #0]
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7f9 f950 	bl	8000270 <strlen>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd8:	9005      	str	r0, [sp, #20]
 8006fda:	3307      	adds	r3, #7
 8006fdc:	f023 0307 	bic.w	r3, r3, #7
 8006fe0:	f103 0208 	add.w	r2, r3, #8
 8006fe4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006fe8:	f8d4 b000 	ldr.w	fp, [r4]
 8006fec:	f8c8 2000 	str.w	r2, [r8]
 8006ff0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ff4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ff8:	9307      	str	r3, [sp, #28]
 8006ffa:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ffe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007002:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007006:	4b9c      	ldr	r3, [pc, #624]	@ (8007278 <_printf_float+0x2c8>)
 8007008:	f04f 32ff 	mov.w	r2, #4294967295
 800700c:	f7f9 fd8e 	bl	8000b2c <__aeabi_dcmpun>
 8007010:	bb70      	cbnz	r0, 8007070 <_printf_float+0xc0>
 8007012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007016:	4b98      	ldr	r3, [pc, #608]	@ (8007278 <_printf_float+0x2c8>)
 8007018:	f04f 32ff 	mov.w	r2, #4294967295
 800701c:	f7f9 fd68 	bl	8000af0 <__aeabi_dcmple>
 8007020:	bb30      	cbnz	r0, 8007070 <_printf_float+0xc0>
 8007022:	2200      	movs	r2, #0
 8007024:	2300      	movs	r3, #0
 8007026:	4640      	mov	r0, r8
 8007028:	4649      	mov	r1, r9
 800702a:	f7f9 fd57 	bl	8000adc <__aeabi_dcmplt>
 800702e:	b110      	cbz	r0, 8007036 <_printf_float+0x86>
 8007030:	232d      	movs	r3, #45	@ 0x2d
 8007032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007036:	4a91      	ldr	r2, [pc, #580]	@ (800727c <_printf_float+0x2cc>)
 8007038:	4b91      	ldr	r3, [pc, #580]	@ (8007280 <_printf_float+0x2d0>)
 800703a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800703e:	bf94      	ite	ls
 8007040:	4690      	movls	r8, r2
 8007042:	4698      	movhi	r8, r3
 8007044:	2303      	movs	r3, #3
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	f02b 0304 	bic.w	r3, fp, #4
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	f04f 0900 	mov.w	r9, #0
 8007052:	9700      	str	r7, [sp, #0]
 8007054:	4633      	mov	r3, r6
 8007056:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007058:	4621      	mov	r1, r4
 800705a:	4628      	mov	r0, r5
 800705c:	f000 f9d2 	bl	8007404 <_printf_common>
 8007060:	3001      	adds	r0, #1
 8007062:	f040 808d 	bne.w	8007180 <_printf_float+0x1d0>
 8007066:	f04f 30ff 	mov.w	r0, #4294967295
 800706a:	b00d      	add	sp, #52	@ 0x34
 800706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007070:	4642      	mov	r2, r8
 8007072:	464b      	mov	r3, r9
 8007074:	4640      	mov	r0, r8
 8007076:	4649      	mov	r1, r9
 8007078:	f7f9 fd58 	bl	8000b2c <__aeabi_dcmpun>
 800707c:	b140      	cbz	r0, 8007090 <_printf_float+0xe0>
 800707e:	464b      	mov	r3, r9
 8007080:	2b00      	cmp	r3, #0
 8007082:	bfbc      	itt	lt
 8007084:	232d      	movlt	r3, #45	@ 0x2d
 8007086:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800708a:	4a7e      	ldr	r2, [pc, #504]	@ (8007284 <_printf_float+0x2d4>)
 800708c:	4b7e      	ldr	r3, [pc, #504]	@ (8007288 <_printf_float+0x2d8>)
 800708e:	e7d4      	b.n	800703a <_printf_float+0x8a>
 8007090:	6863      	ldr	r3, [r4, #4]
 8007092:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007096:	9206      	str	r2, [sp, #24]
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	d13b      	bne.n	8007114 <_printf_float+0x164>
 800709c:	2306      	movs	r3, #6
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80070a4:	2300      	movs	r3, #0
 80070a6:	6022      	str	r2, [r4, #0]
 80070a8:	9303      	str	r3, [sp, #12]
 80070aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80070ac:	e9cd a301 	strd	sl, r3, [sp, #4]
 80070b0:	ab09      	add	r3, sp, #36	@ 0x24
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	6861      	ldr	r1, [r4, #4]
 80070b6:	ec49 8b10 	vmov	d0, r8, r9
 80070ba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80070be:	4628      	mov	r0, r5
 80070c0:	f7ff fed6 	bl	8006e70 <__cvt>
 80070c4:	9b06      	ldr	r3, [sp, #24]
 80070c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070c8:	2b47      	cmp	r3, #71	@ 0x47
 80070ca:	4680      	mov	r8, r0
 80070cc:	d129      	bne.n	8007122 <_printf_float+0x172>
 80070ce:	1cc8      	adds	r0, r1, #3
 80070d0:	db02      	blt.n	80070d8 <_printf_float+0x128>
 80070d2:	6863      	ldr	r3, [r4, #4]
 80070d4:	4299      	cmp	r1, r3
 80070d6:	dd41      	ble.n	800715c <_printf_float+0x1ac>
 80070d8:	f1aa 0a02 	sub.w	sl, sl, #2
 80070dc:	fa5f fa8a 	uxtb.w	sl, sl
 80070e0:	3901      	subs	r1, #1
 80070e2:	4652      	mov	r2, sl
 80070e4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80070e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80070ea:	f7ff ff26 	bl	8006f3a <__exponent>
 80070ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070f0:	1813      	adds	r3, r2, r0
 80070f2:	2a01      	cmp	r2, #1
 80070f4:	4681      	mov	r9, r0
 80070f6:	6123      	str	r3, [r4, #16]
 80070f8:	dc02      	bgt.n	8007100 <_printf_float+0x150>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	07d2      	lsls	r2, r2, #31
 80070fe:	d501      	bpl.n	8007104 <_printf_float+0x154>
 8007100:	3301      	adds	r3, #1
 8007102:	6123      	str	r3, [r4, #16]
 8007104:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007108:	2b00      	cmp	r3, #0
 800710a:	d0a2      	beq.n	8007052 <_printf_float+0xa2>
 800710c:	232d      	movs	r3, #45	@ 0x2d
 800710e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007112:	e79e      	b.n	8007052 <_printf_float+0xa2>
 8007114:	9a06      	ldr	r2, [sp, #24]
 8007116:	2a47      	cmp	r2, #71	@ 0x47
 8007118:	d1c2      	bne.n	80070a0 <_printf_float+0xf0>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1c0      	bne.n	80070a0 <_printf_float+0xf0>
 800711e:	2301      	movs	r3, #1
 8007120:	e7bd      	b.n	800709e <_printf_float+0xee>
 8007122:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007126:	d9db      	bls.n	80070e0 <_printf_float+0x130>
 8007128:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800712c:	d118      	bne.n	8007160 <_printf_float+0x1b0>
 800712e:	2900      	cmp	r1, #0
 8007130:	6863      	ldr	r3, [r4, #4]
 8007132:	dd0b      	ble.n	800714c <_printf_float+0x19c>
 8007134:	6121      	str	r1, [r4, #16]
 8007136:	b913      	cbnz	r3, 800713e <_printf_float+0x18e>
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	07d0      	lsls	r0, r2, #31
 800713c:	d502      	bpl.n	8007144 <_printf_float+0x194>
 800713e:	3301      	adds	r3, #1
 8007140:	440b      	add	r3, r1
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	e7db      	b.n	8007104 <_printf_float+0x154>
 800714c:	b913      	cbnz	r3, 8007154 <_printf_float+0x1a4>
 800714e:	6822      	ldr	r2, [r4, #0]
 8007150:	07d2      	lsls	r2, r2, #31
 8007152:	d501      	bpl.n	8007158 <_printf_float+0x1a8>
 8007154:	3302      	adds	r3, #2
 8007156:	e7f4      	b.n	8007142 <_printf_float+0x192>
 8007158:	2301      	movs	r3, #1
 800715a:	e7f2      	b.n	8007142 <_printf_float+0x192>
 800715c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007162:	4299      	cmp	r1, r3
 8007164:	db05      	blt.n	8007172 <_printf_float+0x1c2>
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	6121      	str	r1, [r4, #16]
 800716a:	07d8      	lsls	r0, r3, #31
 800716c:	d5ea      	bpl.n	8007144 <_printf_float+0x194>
 800716e:	1c4b      	adds	r3, r1, #1
 8007170:	e7e7      	b.n	8007142 <_printf_float+0x192>
 8007172:	2900      	cmp	r1, #0
 8007174:	bfd4      	ite	le
 8007176:	f1c1 0202 	rsble	r2, r1, #2
 800717a:	2201      	movgt	r2, #1
 800717c:	4413      	add	r3, r2
 800717e:	e7e0      	b.n	8007142 <_printf_float+0x192>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	055a      	lsls	r2, r3, #21
 8007184:	d407      	bmi.n	8007196 <_printf_float+0x1e6>
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	4642      	mov	r2, r8
 800718a:	4631      	mov	r1, r6
 800718c:	4628      	mov	r0, r5
 800718e:	47b8      	blx	r7
 8007190:	3001      	adds	r0, #1
 8007192:	d12b      	bne.n	80071ec <_printf_float+0x23c>
 8007194:	e767      	b.n	8007066 <_printf_float+0xb6>
 8007196:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800719a:	f240 80dd 	bls.w	8007358 <_printf_float+0x3a8>
 800719e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071a2:	2200      	movs	r2, #0
 80071a4:	2300      	movs	r3, #0
 80071a6:	f7f9 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d033      	beq.n	8007216 <_printf_float+0x266>
 80071ae:	4a37      	ldr	r2, [pc, #220]	@ (800728c <_printf_float+0x2dc>)
 80071b0:	2301      	movs	r3, #1
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	f43f af54 	beq.w	8007066 <_printf_float+0xb6>
 80071be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80071c2:	4543      	cmp	r3, r8
 80071c4:	db02      	blt.n	80071cc <_printf_float+0x21c>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	07d8      	lsls	r0, r3, #31
 80071ca:	d50f      	bpl.n	80071ec <_printf_float+0x23c>
 80071cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071d0:	4631      	mov	r1, r6
 80071d2:	4628      	mov	r0, r5
 80071d4:	47b8      	blx	r7
 80071d6:	3001      	adds	r0, #1
 80071d8:	f43f af45 	beq.w	8007066 <_printf_float+0xb6>
 80071dc:	f04f 0900 	mov.w	r9, #0
 80071e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80071e4:	f104 0a1a 	add.w	sl, r4, #26
 80071e8:	45c8      	cmp	r8, r9
 80071ea:	dc09      	bgt.n	8007200 <_printf_float+0x250>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	079b      	lsls	r3, r3, #30
 80071f0:	f100 8103 	bmi.w	80073fa <_printf_float+0x44a>
 80071f4:	68e0      	ldr	r0, [r4, #12]
 80071f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071f8:	4298      	cmp	r0, r3
 80071fa:	bfb8      	it	lt
 80071fc:	4618      	movlt	r0, r3
 80071fe:	e734      	b.n	800706a <_printf_float+0xba>
 8007200:	2301      	movs	r3, #1
 8007202:	4652      	mov	r2, sl
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	f43f af2b 	beq.w	8007066 <_printf_float+0xb6>
 8007210:	f109 0901 	add.w	r9, r9, #1
 8007214:	e7e8      	b.n	80071e8 <_printf_float+0x238>
 8007216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	dc39      	bgt.n	8007290 <_printf_float+0x2e0>
 800721c:	4a1b      	ldr	r2, [pc, #108]	@ (800728c <_printf_float+0x2dc>)
 800721e:	2301      	movs	r3, #1
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f af1d 	beq.w	8007066 <_printf_float+0xb6>
 800722c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007230:	ea59 0303 	orrs.w	r3, r9, r3
 8007234:	d102      	bne.n	800723c <_printf_float+0x28c>
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	07d9      	lsls	r1, r3, #31
 800723a:	d5d7      	bpl.n	80071ec <_printf_float+0x23c>
 800723c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007240:	4631      	mov	r1, r6
 8007242:	4628      	mov	r0, r5
 8007244:	47b8      	blx	r7
 8007246:	3001      	adds	r0, #1
 8007248:	f43f af0d 	beq.w	8007066 <_printf_float+0xb6>
 800724c:	f04f 0a00 	mov.w	sl, #0
 8007250:	f104 0b1a 	add.w	fp, r4, #26
 8007254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007256:	425b      	negs	r3, r3
 8007258:	4553      	cmp	r3, sl
 800725a:	dc01      	bgt.n	8007260 <_printf_float+0x2b0>
 800725c:	464b      	mov	r3, r9
 800725e:	e793      	b.n	8007188 <_printf_float+0x1d8>
 8007260:	2301      	movs	r3, #1
 8007262:	465a      	mov	r2, fp
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f aefb 	beq.w	8007066 <_printf_float+0xb6>
 8007270:	f10a 0a01 	add.w	sl, sl, #1
 8007274:	e7ee      	b.n	8007254 <_printf_float+0x2a4>
 8007276:	bf00      	nop
 8007278:	7fefffff 	.word	0x7fefffff
 800727c:	0800a825 	.word	0x0800a825
 8007280:	0800a829 	.word	0x0800a829
 8007284:	0800a82d 	.word	0x0800a82d
 8007288:	0800a831 	.word	0x0800a831
 800728c:	0800aa67 	.word	0x0800aa67
 8007290:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007292:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007296:	4553      	cmp	r3, sl
 8007298:	bfa8      	it	ge
 800729a:	4653      	movge	r3, sl
 800729c:	2b00      	cmp	r3, #0
 800729e:	4699      	mov	r9, r3
 80072a0:	dc36      	bgt.n	8007310 <_printf_float+0x360>
 80072a2:	f04f 0b00 	mov.w	fp, #0
 80072a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072aa:	f104 021a 	add.w	r2, r4, #26
 80072ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072b0:	9306      	str	r3, [sp, #24]
 80072b2:	eba3 0309 	sub.w	r3, r3, r9
 80072b6:	455b      	cmp	r3, fp
 80072b8:	dc31      	bgt.n	800731e <_printf_float+0x36e>
 80072ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072bc:	459a      	cmp	sl, r3
 80072be:	dc3a      	bgt.n	8007336 <_printf_float+0x386>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	07da      	lsls	r2, r3, #31
 80072c4:	d437      	bmi.n	8007336 <_printf_float+0x386>
 80072c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c8:	ebaa 0903 	sub.w	r9, sl, r3
 80072cc:	9b06      	ldr	r3, [sp, #24]
 80072ce:	ebaa 0303 	sub.w	r3, sl, r3
 80072d2:	4599      	cmp	r9, r3
 80072d4:	bfa8      	it	ge
 80072d6:	4699      	movge	r9, r3
 80072d8:	f1b9 0f00 	cmp.w	r9, #0
 80072dc:	dc33      	bgt.n	8007346 <_printf_float+0x396>
 80072de:	f04f 0800 	mov.w	r8, #0
 80072e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072e6:	f104 0b1a 	add.w	fp, r4, #26
 80072ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ec:	ebaa 0303 	sub.w	r3, sl, r3
 80072f0:	eba3 0309 	sub.w	r3, r3, r9
 80072f4:	4543      	cmp	r3, r8
 80072f6:	f77f af79 	ble.w	80071ec <_printf_float+0x23c>
 80072fa:	2301      	movs	r3, #1
 80072fc:	465a      	mov	r2, fp
 80072fe:	4631      	mov	r1, r6
 8007300:	4628      	mov	r0, r5
 8007302:	47b8      	blx	r7
 8007304:	3001      	adds	r0, #1
 8007306:	f43f aeae 	beq.w	8007066 <_printf_float+0xb6>
 800730a:	f108 0801 	add.w	r8, r8, #1
 800730e:	e7ec      	b.n	80072ea <_printf_float+0x33a>
 8007310:	4642      	mov	r2, r8
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	d1c2      	bne.n	80072a2 <_printf_float+0x2f2>
 800731c:	e6a3      	b.n	8007066 <_printf_float+0xb6>
 800731e:	2301      	movs	r3, #1
 8007320:	4631      	mov	r1, r6
 8007322:	4628      	mov	r0, r5
 8007324:	9206      	str	r2, [sp, #24]
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	f43f ae9c 	beq.w	8007066 <_printf_float+0xb6>
 800732e:	9a06      	ldr	r2, [sp, #24]
 8007330:	f10b 0b01 	add.w	fp, fp, #1
 8007334:	e7bb      	b.n	80072ae <_printf_float+0x2fe>
 8007336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800733a:	4631      	mov	r1, r6
 800733c:	4628      	mov	r0, r5
 800733e:	47b8      	blx	r7
 8007340:	3001      	adds	r0, #1
 8007342:	d1c0      	bne.n	80072c6 <_printf_float+0x316>
 8007344:	e68f      	b.n	8007066 <_printf_float+0xb6>
 8007346:	9a06      	ldr	r2, [sp, #24]
 8007348:	464b      	mov	r3, r9
 800734a:	4442      	add	r2, r8
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	d1c3      	bne.n	80072de <_printf_float+0x32e>
 8007356:	e686      	b.n	8007066 <_printf_float+0xb6>
 8007358:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800735c:	f1ba 0f01 	cmp.w	sl, #1
 8007360:	dc01      	bgt.n	8007366 <_printf_float+0x3b6>
 8007362:	07db      	lsls	r3, r3, #31
 8007364:	d536      	bpl.n	80073d4 <_printf_float+0x424>
 8007366:	2301      	movs	r3, #1
 8007368:	4642      	mov	r2, r8
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f ae78 	beq.w	8007066 <_printf_float+0xb6>
 8007376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	f43f ae70 	beq.w	8007066 <_printf_float+0xb6>
 8007386:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800738a:	2200      	movs	r2, #0
 800738c:	2300      	movs	r3, #0
 800738e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007392:	f7f9 fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 8007396:	b9c0      	cbnz	r0, 80073ca <_printf_float+0x41a>
 8007398:	4653      	mov	r3, sl
 800739a:	f108 0201 	add.w	r2, r8, #1
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	d10c      	bne.n	80073c2 <_printf_float+0x412>
 80073a8:	e65d      	b.n	8007066 <_printf_float+0xb6>
 80073aa:	2301      	movs	r3, #1
 80073ac:	465a      	mov	r2, fp
 80073ae:	4631      	mov	r1, r6
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b8      	blx	r7
 80073b4:	3001      	adds	r0, #1
 80073b6:	f43f ae56 	beq.w	8007066 <_printf_float+0xb6>
 80073ba:	f108 0801 	add.w	r8, r8, #1
 80073be:	45d0      	cmp	r8, sl
 80073c0:	dbf3      	blt.n	80073aa <_printf_float+0x3fa>
 80073c2:	464b      	mov	r3, r9
 80073c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80073c8:	e6df      	b.n	800718a <_printf_float+0x1da>
 80073ca:	f04f 0800 	mov.w	r8, #0
 80073ce:	f104 0b1a 	add.w	fp, r4, #26
 80073d2:	e7f4      	b.n	80073be <_printf_float+0x40e>
 80073d4:	2301      	movs	r3, #1
 80073d6:	4642      	mov	r2, r8
 80073d8:	e7e1      	b.n	800739e <_printf_float+0x3ee>
 80073da:	2301      	movs	r3, #1
 80073dc:	464a      	mov	r2, r9
 80073de:	4631      	mov	r1, r6
 80073e0:	4628      	mov	r0, r5
 80073e2:	47b8      	blx	r7
 80073e4:	3001      	adds	r0, #1
 80073e6:	f43f ae3e 	beq.w	8007066 <_printf_float+0xb6>
 80073ea:	f108 0801 	add.w	r8, r8, #1
 80073ee:	68e3      	ldr	r3, [r4, #12]
 80073f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073f2:	1a5b      	subs	r3, r3, r1
 80073f4:	4543      	cmp	r3, r8
 80073f6:	dcf0      	bgt.n	80073da <_printf_float+0x42a>
 80073f8:	e6fc      	b.n	80071f4 <_printf_float+0x244>
 80073fa:	f04f 0800 	mov.w	r8, #0
 80073fe:	f104 0919 	add.w	r9, r4, #25
 8007402:	e7f4      	b.n	80073ee <_printf_float+0x43e>

08007404 <_printf_common>:
 8007404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007408:	4616      	mov	r6, r2
 800740a:	4698      	mov	r8, r3
 800740c:	688a      	ldr	r2, [r1, #8]
 800740e:	690b      	ldr	r3, [r1, #16]
 8007410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007414:	4293      	cmp	r3, r2
 8007416:	bfb8      	it	lt
 8007418:	4613      	movlt	r3, r2
 800741a:	6033      	str	r3, [r6, #0]
 800741c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007420:	4607      	mov	r7, r0
 8007422:	460c      	mov	r4, r1
 8007424:	b10a      	cbz	r2, 800742a <_printf_common+0x26>
 8007426:	3301      	adds	r3, #1
 8007428:	6033      	str	r3, [r6, #0]
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	0699      	lsls	r1, r3, #26
 800742e:	bf42      	ittt	mi
 8007430:	6833      	ldrmi	r3, [r6, #0]
 8007432:	3302      	addmi	r3, #2
 8007434:	6033      	strmi	r3, [r6, #0]
 8007436:	6825      	ldr	r5, [r4, #0]
 8007438:	f015 0506 	ands.w	r5, r5, #6
 800743c:	d106      	bne.n	800744c <_printf_common+0x48>
 800743e:	f104 0a19 	add.w	sl, r4, #25
 8007442:	68e3      	ldr	r3, [r4, #12]
 8007444:	6832      	ldr	r2, [r6, #0]
 8007446:	1a9b      	subs	r3, r3, r2
 8007448:	42ab      	cmp	r3, r5
 800744a:	dc26      	bgt.n	800749a <_printf_common+0x96>
 800744c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007450:	6822      	ldr	r2, [r4, #0]
 8007452:	3b00      	subs	r3, #0
 8007454:	bf18      	it	ne
 8007456:	2301      	movne	r3, #1
 8007458:	0692      	lsls	r2, r2, #26
 800745a:	d42b      	bmi.n	80074b4 <_printf_common+0xb0>
 800745c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007460:	4641      	mov	r1, r8
 8007462:	4638      	mov	r0, r7
 8007464:	47c8      	blx	r9
 8007466:	3001      	adds	r0, #1
 8007468:	d01e      	beq.n	80074a8 <_printf_common+0xa4>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	6922      	ldr	r2, [r4, #16]
 800746e:	f003 0306 	and.w	r3, r3, #6
 8007472:	2b04      	cmp	r3, #4
 8007474:	bf02      	ittt	eq
 8007476:	68e5      	ldreq	r5, [r4, #12]
 8007478:	6833      	ldreq	r3, [r6, #0]
 800747a:	1aed      	subeq	r5, r5, r3
 800747c:	68a3      	ldr	r3, [r4, #8]
 800747e:	bf0c      	ite	eq
 8007480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007484:	2500      	movne	r5, #0
 8007486:	4293      	cmp	r3, r2
 8007488:	bfc4      	itt	gt
 800748a:	1a9b      	subgt	r3, r3, r2
 800748c:	18ed      	addgt	r5, r5, r3
 800748e:	2600      	movs	r6, #0
 8007490:	341a      	adds	r4, #26
 8007492:	42b5      	cmp	r5, r6
 8007494:	d11a      	bne.n	80074cc <_printf_common+0xc8>
 8007496:	2000      	movs	r0, #0
 8007498:	e008      	b.n	80074ac <_printf_common+0xa8>
 800749a:	2301      	movs	r3, #1
 800749c:	4652      	mov	r2, sl
 800749e:	4641      	mov	r1, r8
 80074a0:	4638      	mov	r0, r7
 80074a2:	47c8      	blx	r9
 80074a4:	3001      	adds	r0, #1
 80074a6:	d103      	bne.n	80074b0 <_printf_common+0xac>
 80074a8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b0:	3501      	adds	r5, #1
 80074b2:	e7c6      	b.n	8007442 <_printf_common+0x3e>
 80074b4:	18e1      	adds	r1, r4, r3
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	2030      	movs	r0, #48	@ 0x30
 80074ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074be:	4422      	add	r2, r4
 80074c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074c8:	3302      	adds	r3, #2
 80074ca:	e7c7      	b.n	800745c <_printf_common+0x58>
 80074cc:	2301      	movs	r3, #1
 80074ce:	4622      	mov	r2, r4
 80074d0:	4641      	mov	r1, r8
 80074d2:	4638      	mov	r0, r7
 80074d4:	47c8      	blx	r9
 80074d6:	3001      	adds	r0, #1
 80074d8:	d0e6      	beq.n	80074a8 <_printf_common+0xa4>
 80074da:	3601      	adds	r6, #1
 80074dc:	e7d9      	b.n	8007492 <_printf_common+0x8e>
	...

080074e0 <_printf_i>:
 80074e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074e4:	7e0f      	ldrb	r7, [r1, #24]
 80074e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074e8:	2f78      	cmp	r7, #120	@ 0x78
 80074ea:	4691      	mov	r9, r2
 80074ec:	4680      	mov	r8, r0
 80074ee:	460c      	mov	r4, r1
 80074f0:	469a      	mov	sl, r3
 80074f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074f6:	d807      	bhi.n	8007508 <_printf_i+0x28>
 80074f8:	2f62      	cmp	r7, #98	@ 0x62
 80074fa:	d80a      	bhi.n	8007512 <_printf_i+0x32>
 80074fc:	2f00      	cmp	r7, #0
 80074fe:	f000 80d2 	beq.w	80076a6 <_printf_i+0x1c6>
 8007502:	2f58      	cmp	r7, #88	@ 0x58
 8007504:	f000 80b9 	beq.w	800767a <_printf_i+0x19a>
 8007508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800750c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007510:	e03a      	b.n	8007588 <_printf_i+0xa8>
 8007512:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007516:	2b15      	cmp	r3, #21
 8007518:	d8f6      	bhi.n	8007508 <_printf_i+0x28>
 800751a:	a101      	add	r1, pc, #4	@ (adr r1, 8007520 <_printf_i+0x40>)
 800751c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007520:	08007579 	.word	0x08007579
 8007524:	0800758d 	.word	0x0800758d
 8007528:	08007509 	.word	0x08007509
 800752c:	08007509 	.word	0x08007509
 8007530:	08007509 	.word	0x08007509
 8007534:	08007509 	.word	0x08007509
 8007538:	0800758d 	.word	0x0800758d
 800753c:	08007509 	.word	0x08007509
 8007540:	08007509 	.word	0x08007509
 8007544:	08007509 	.word	0x08007509
 8007548:	08007509 	.word	0x08007509
 800754c:	0800768d 	.word	0x0800768d
 8007550:	080075b7 	.word	0x080075b7
 8007554:	08007647 	.word	0x08007647
 8007558:	08007509 	.word	0x08007509
 800755c:	08007509 	.word	0x08007509
 8007560:	080076af 	.word	0x080076af
 8007564:	08007509 	.word	0x08007509
 8007568:	080075b7 	.word	0x080075b7
 800756c:	08007509 	.word	0x08007509
 8007570:	08007509 	.word	0x08007509
 8007574:	0800764f 	.word	0x0800764f
 8007578:	6833      	ldr	r3, [r6, #0]
 800757a:	1d1a      	adds	r2, r3, #4
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6032      	str	r2, [r6, #0]
 8007580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007588:	2301      	movs	r3, #1
 800758a:	e09d      	b.n	80076c8 <_printf_i+0x1e8>
 800758c:	6833      	ldr	r3, [r6, #0]
 800758e:	6820      	ldr	r0, [r4, #0]
 8007590:	1d19      	adds	r1, r3, #4
 8007592:	6031      	str	r1, [r6, #0]
 8007594:	0606      	lsls	r6, r0, #24
 8007596:	d501      	bpl.n	800759c <_printf_i+0xbc>
 8007598:	681d      	ldr	r5, [r3, #0]
 800759a:	e003      	b.n	80075a4 <_printf_i+0xc4>
 800759c:	0645      	lsls	r5, r0, #25
 800759e:	d5fb      	bpl.n	8007598 <_printf_i+0xb8>
 80075a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075a4:	2d00      	cmp	r5, #0
 80075a6:	da03      	bge.n	80075b0 <_printf_i+0xd0>
 80075a8:	232d      	movs	r3, #45	@ 0x2d
 80075aa:	426d      	negs	r5, r5
 80075ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075b0:	4859      	ldr	r0, [pc, #356]	@ (8007718 <_printf_i+0x238>)
 80075b2:	230a      	movs	r3, #10
 80075b4:	e011      	b.n	80075da <_printf_i+0xfa>
 80075b6:	6821      	ldr	r1, [r4, #0]
 80075b8:	6833      	ldr	r3, [r6, #0]
 80075ba:	0608      	lsls	r0, r1, #24
 80075bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80075c0:	d402      	bmi.n	80075c8 <_printf_i+0xe8>
 80075c2:	0649      	lsls	r1, r1, #25
 80075c4:	bf48      	it	mi
 80075c6:	b2ad      	uxthmi	r5, r5
 80075c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80075ca:	4853      	ldr	r0, [pc, #332]	@ (8007718 <_printf_i+0x238>)
 80075cc:	6033      	str	r3, [r6, #0]
 80075ce:	bf14      	ite	ne
 80075d0:	230a      	movne	r3, #10
 80075d2:	2308      	moveq	r3, #8
 80075d4:	2100      	movs	r1, #0
 80075d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075da:	6866      	ldr	r6, [r4, #4]
 80075dc:	60a6      	str	r6, [r4, #8]
 80075de:	2e00      	cmp	r6, #0
 80075e0:	bfa2      	ittt	ge
 80075e2:	6821      	ldrge	r1, [r4, #0]
 80075e4:	f021 0104 	bicge.w	r1, r1, #4
 80075e8:	6021      	strge	r1, [r4, #0]
 80075ea:	b90d      	cbnz	r5, 80075f0 <_printf_i+0x110>
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	d04b      	beq.n	8007688 <_printf_i+0x1a8>
 80075f0:	4616      	mov	r6, r2
 80075f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80075f6:	fb03 5711 	mls	r7, r3, r1, r5
 80075fa:	5dc7      	ldrb	r7, [r0, r7]
 80075fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007600:	462f      	mov	r7, r5
 8007602:	42bb      	cmp	r3, r7
 8007604:	460d      	mov	r5, r1
 8007606:	d9f4      	bls.n	80075f2 <_printf_i+0x112>
 8007608:	2b08      	cmp	r3, #8
 800760a:	d10b      	bne.n	8007624 <_printf_i+0x144>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	07df      	lsls	r7, r3, #31
 8007610:	d508      	bpl.n	8007624 <_printf_i+0x144>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	6861      	ldr	r1, [r4, #4]
 8007616:	4299      	cmp	r1, r3
 8007618:	bfde      	ittt	le
 800761a:	2330      	movle	r3, #48	@ 0x30
 800761c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007620:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007624:	1b92      	subs	r2, r2, r6
 8007626:	6122      	str	r2, [r4, #16]
 8007628:	f8cd a000 	str.w	sl, [sp]
 800762c:	464b      	mov	r3, r9
 800762e:	aa03      	add	r2, sp, #12
 8007630:	4621      	mov	r1, r4
 8007632:	4640      	mov	r0, r8
 8007634:	f7ff fee6 	bl	8007404 <_printf_common>
 8007638:	3001      	adds	r0, #1
 800763a:	d14a      	bne.n	80076d2 <_printf_i+0x1f2>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	b004      	add	sp, #16
 8007642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	f043 0320 	orr.w	r3, r3, #32
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	4833      	ldr	r0, [pc, #204]	@ (800771c <_printf_i+0x23c>)
 8007650:	2778      	movs	r7, #120	@ 0x78
 8007652:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	6831      	ldr	r1, [r6, #0]
 800765a:	061f      	lsls	r7, r3, #24
 800765c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007660:	d402      	bmi.n	8007668 <_printf_i+0x188>
 8007662:	065f      	lsls	r7, r3, #25
 8007664:	bf48      	it	mi
 8007666:	b2ad      	uxthmi	r5, r5
 8007668:	6031      	str	r1, [r6, #0]
 800766a:	07d9      	lsls	r1, r3, #31
 800766c:	bf44      	itt	mi
 800766e:	f043 0320 	orrmi.w	r3, r3, #32
 8007672:	6023      	strmi	r3, [r4, #0]
 8007674:	b11d      	cbz	r5, 800767e <_printf_i+0x19e>
 8007676:	2310      	movs	r3, #16
 8007678:	e7ac      	b.n	80075d4 <_printf_i+0xf4>
 800767a:	4827      	ldr	r0, [pc, #156]	@ (8007718 <_printf_i+0x238>)
 800767c:	e7e9      	b.n	8007652 <_printf_i+0x172>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	f023 0320 	bic.w	r3, r3, #32
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	e7f6      	b.n	8007676 <_printf_i+0x196>
 8007688:	4616      	mov	r6, r2
 800768a:	e7bd      	b.n	8007608 <_printf_i+0x128>
 800768c:	6833      	ldr	r3, [r6, #0]
 800768e:	6825      	ldr	r5, [r4, #0]
 8007690:	6961      	ldr	r1, [r4, #20]
 8007692:	1d18      	adds	r0, r3, #4
 8007694:	6030      	str	r0, [r6, #0]
 8007696:	062e      	lsls	r6, r5, #24
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	d501      	bpl.n	80076a0 <_printf_i+0x1c0>
 800769c:	6019      	str	r1, [r3, #0]
 800769e:	e002      	b.n	80076a6 <_printf_i+0x1c6>
 80076a0:	0668      	lsls	r0, r5, #25
 80076a2:	d5fb      	bpl.n	800769c <_printf_i+0x1bc>
 80076a4:	8019      	strh	r1, [r3, #0]
 80076a6:	2300      	movs	r3, #0
 80076a8:	6123      	str	r3, [r4, #16]
 80076aa:	4616      	mov	r6, r2
 80076ac:	e7bc      	b.n	8007628 <_printf_i+0x148>
 80076ae:	6833      	ldr	r3, [r6, #0]
 80076b0:	1d1a      	adds	r2, r3, #4
 80076b2:	6032      	str	r2, [r6, #0]
 80076b4:	681e      	ldr	r6, [r3, #0]
 80076b6:	6862      	ldr	r2, [r4, #4]
 80076b8:	2100      	movs	r1, #0
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7f8 fd88 	bl	80001d0 <memchr>
 80076c0:	b108      	cbz	r0, 80076c6 <_printf_i+0x1e6>
 80076c2:	1b80      	subs	r0, r0, r6
 80076c4:	6060      	str	r0, [r4, #4]
 80076c6:	6863      	ldr	r3, [r4, #4]
 80076c8:	6123      	str	r3, [r4, #16]
 80076ca:	2300      	movs	r3, #0
 80076cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076d0:	e7aa      	b.n	8007628 <_printf_i+0x148>
 80076d2:	6923      	ldr	r3, [r4, #16]
 80076d4:	4632      	mov	r2, r6
 80076d6:	4649      	mov	r1, r9
 80076d8:	4640      	mov	r0, r8
 80076da:	47d0      	blx	sl
 80076dc:	3001      	adds	r0, #1
 80076de:	d0ad      	beq.n	800763c <_printf_i+0x15c>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	079b      	lsls	r3, r3, #30
 80076e4:	d413      	bmi.n	800770e <_printf_i+0x22e>
 80076e6:	68e0      	ldr	r0, [r4, #12]
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	4298      	cmp	r0, r3
 80076ec:	bfb8      	it	lt
 80076ee:	4618      	movlt	r0, r3
 80076f0:	e7a6      	b.n	8007640 <_printf_i+0x160>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4632      	mov	r2, r6
 80076f6:	4649      	mov	r1, r9
 80076f8:	4640      	mov	r0, r8
 80076fa:	47d0      	blx	sl
 80076fc:	3001      	adds	r0, #1
 80076fe:	d09d      	beq.n	800763c <_printf_i+0x15c>
 8007700:	3501      	adds	r5, #1
 8007702:	68e3      	ldr	r3, [r4, #12]
 8007704:	9903      	ldr	r1, [sp, #12]
 8007706:	1a5b      	subs	r3, r3, r1
 8007708:	42ab      	cmp	r3, r5
 800770a:	dcf2      	bgt.n	80076f2 <_printf_i+0x212>
 800770c:	e7eb      	b.n	80076e6 <_printf_i+0x206>
 800770e:	2500      	movs	r5, #0
 8007710:	f104 0619 	add.w	r6, r4, #25
 8007714:	e7f5      	b.n	8007702 <_printf_i+0x222>
 8007716:	bf00      	nop
 8007718:	0800a835 	.word	0x0800a835
 800771c:	0800a846 	.word	0x0800a846

08007720 <std>:
 8007720:	2300      	movs	r3, #0
 8007722:	b510      	push	{r4, lr}
 8007724:	4604      	mov	r4, r0
 8007726:	e9c0 3300 	strd	r3, r3, [r0]
 800772a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800772e:	6083      	str	r3, [r0, #8]
 8007730:	8181      	strh	r1, [r0, #12]
 8007732:	6643      	str	r3, [r0, #100]	@ 0x64
 8007734:	81c2      	strh	r2, [r0, #14]
 8007736:	6183      	str	r3, [r0, #24]
 8007738:	4619      	mov	r1, r3
 800773a:	2208      	movs	r2, #8
 800773c:	305c      	adds	r0, #92	@ 0x5c
 800773e:	f000 f954 	bl	80079ea <memset>
 8007742:	4b0d      	ldr	r3, [pc, #52]	@ (8007778 <std+0x58>)
 8007744:	6263      	str	r3, [r4, #36]	@ 0x24
 8007746:	4b0d      	ldr	r3, [pc, #52]	@ (800777c <std+0x5c>)
 8007748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800774a:	4b0d      	ldr	r3, [pc, #52]	@ (8007780 <std+0x60>)
 800774c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800774e:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <std+0x64>)
 8007750:	6323      	str	r3, [r4, #48]	@ 0x30
 8007752:	4b0d      	ldr	r3, [pc, #52]	@ (8007788 <std+0x68>)
 8007754:	6224      	str	r4, [r4, #32]
 8007756:	429c      	cmp	r4, r3
 8007758:	d006      	beq.n	8007768 <std+0x48>
 800775a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800775e:	4294      	cmp	r4, r2
 8007760:	d002      	beq.n	8007768 <std+0x48>
 8007762:	33d0      	adds	r3, #208	@ 0xd0
 8007764:	429c      	cmp	r4, r3
 8007766:	d105      	bne.n	8007774 <std+0x54>
 8007768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800776c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007770:	f000 ba04 	b.w	8007b7c <__retarget_lock_init_recursive>
 8007774:	bd10      	pop	{r4, pc}
 8007776:	bf00      	nop
 8007778:	08007961 	.word	0x08007961
 800777c:	08007987 	.word	0x08007987
 8007780:	080079bf 	.word	0x080079bf
 8007784:	080079e3 	.word	0x080079e3
 8007788:	200008c4 	.word	0x200008c4

0800778c <stdio_exit_handler>:
 800778c:	4a02      	ldr	r2, [pc, #8]	@ (8007798 <stdio_exit_handler+0xc>)
 800778e:	4903      	ldr	r1, [pc, #12]	@ (800779c <stdio_exit_handler+0x10>)
 8007790:	4803      	ldr	r0, [pc, #12]	@ (80077a0 <stdio_exit_handler+0x14>)
 8007792:	f000 b869 	b.w	8007868 <_fwalk_sglue>
 8007796:	bf00      	nop
 8007798:	2000003c 	.word	0x2000003c
 800779c:	08009b21 	.word	0x08009b21
 80077a0:	2000004c 	.word	0x2000004c

080077a4 <cleanup_stdio>:
 80077a4:	6841      	ldr	r1, [r0, #4]
 80077a6:	4b0c      	ldr	r3, [pc, #48]	@ (80077d8 <cleanup_stdio+0x34>)
 80077a8:	4299      	cmp	r1, r3
 80077aa:	b510      	push	{r4, lr}
 80077ac:	4604      	mov	r4, r0
 80077ae:	d001      	beq.n	80077b4 <cleanup_stdio+0x10>
 80077b0:	f002 f9b6 	bl	8009b20 <_fflush_r>
 80077b4:	68a1      	ldr	r1, [r4, #8]
 80077b6:	4b09      	ldr	r3, [pc, #36]	@ (80077dc <cleanup_stdio+0x38>)
 80077b8:	4299      	cmp	r1, r3
 80077ba:	d002      	beq.n	80077c2 <cleanup_stdio+0x1e>
 80077bc:	4620      	mov	r0, r4
 80077be:	f002 f9af 	bl	8009b20 <_fflush_r>
 80077c2:	68e1      	ldr	r1, [r4, #12]
 80077c4:	4b06      	ldr	r3, [pc, #24]	@ (80077e0 <cleanup_stdio+0x3c>)
 80077c6:	4299      	cmp	r1, r3
 80077c8:	d004      	beq.n	80077d4 <cleanup_stdio+0x30>
 80077ca:	4620      	mov	r0, r4
 80077cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d0:	f002 b9a6 	b.w	8009b20 <_fflush_r>
 80077d4:	bd10      	pop	{r4, pc}
 80077d6:	bf00      	nop
 80077d8:	200008c4 	.word	0x200008c4
 80077dc:	2000092c 	.word	0x2000092c
 80077e0:	20000994 	.word	0x20000994

080077e4 <global_stdio_init.part.0>:
 80077e4:	b510      	push	{r4, lr}
 80077e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <global_stdio_init.part.0+0x30>)
 80077e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007818 <global_stdio_init.part.0+0x34>)
 80077ea:	4a0c      	ldr	r2, [pc, #48]	@ (800781c <global_stdio_init.part.0+0x38>)
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	4620      	mov	r0, r4
 80077f0:	2200      	movs	r2, #0
 80077f2:	2104      	movs	r1, #4
 80077f4:	f7ff ff94 	bl	8007720 <std>
 80077f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077fc:	2201      	movs	r2, #1
 80077fe:	2109      	movs	r1, #9
 8007800:	f7ff ff8e 	bl	8007720 <std>
 8007804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007808:	2202      	movs	r2, #2
 800780a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800780e:	2112      	movs	r1, #18
 8007810:	f7ff bf86 	b.w	8007720 <std>
 8007814:	200009fc 	.word	0x200009fc
 8007818:	200008c4 	.word	0x200008c4
 800781c:	0800778d 	.word	0x0800778d

08007820 <__sfp_lock_acquire>:
 8007820:	4801      	ldr	r0, [pc, #4]	@ (8007828 <__sfp_lock_acquire+0x8>)
 8007822:	f000 b9ac 	b.w	8007b7e <__retarget_lock_acquire_recursive>
 8007826:	bf00      	nop
 8007828:	20000a05 	.word	0x20000a05

0800782c <__sfp_lock_release>:
 800782c:	4801      	ldr	r0, [pc, #4]	@ (8007834 <__sfp_lock_release+0x8>)
 800782e:	f000 b9a7 	b.w	8007b80 <__retarget_lock_release_recursive>
 8007832:	bf00      	nop
 8007834:	20000a05 	.word	0x20000a05

08007838 <__sinit>:
 8007838:	b510      	push	{r4, lr}
 800783a:	4604      	mov	r4, r0
 800783c:	f7ff fff0 	bl	8007820 <__sfp_lock_acquire>
 8007840:	6a23      	ldr	r3, [r4, #32]
 8007842:	b11b      	cbz	r3, 800784c <__sinit+0x14>
 8007844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007848:	f7ff bff0 	b.w	800782c <__sfp_lock_release>
 800784c:	4b04      	ldr	r3, [pc, #16]	@ (8007860 <__sinit+0x28>)
 800784e:	6223      	str	r3, [r4, #32]
 8007850:	4b04      	ldr	r3, [pc, #16]	@ (8007864 <__sinit+0x2c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1f5      	bne.n	8007844 <__sinit+0xc>
 8007858:	f7ff ffc4 	bl	80077e4 <global_stdio_init.part.0>
 800785c:	e7f2      	b.n	8007844 <__sinit+0xc>
 800785e:	bf00      	nop
 8007860:	080077a5 	.word	0x080077a5
 8007864:	200009fc 	.word	0x200009fc

08007868 <_fwalk_sglue>:
 8007868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800786c:	4607      	mov	r7, r0
 800786e:	4688      	mov	r8, r1
 8007870:	4614      	mov	r4, r2
 8007872:	2600      	movs	r6, #0
 8007874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007878:	f1b9 0901 	subs.w	r9, r9, #1
 800787c:	d505      	bpl.n	800788a <_fwalk_sglue+0x22>
 800787e:	6824      	ldr	r4, [r4, #0]
 8007880:	2c00      	cmp	r4, #0
 8007882:	d1f7      	bne.n	8007874 <_fwalk_sglue+0xc>
 8007884:	4630      	mov	r0, r6
 8007886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d907      	bls.n	80078a0 <_fwalk_sglue+0x38>
 8007890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007894:	3301      	adds	r3, #1
 8007896:	d003      	beq.n	80078a0 <_fwalk_sglue+0x38>
 8007898:	4629      	mov	r1, r5
 800789a:	4638      	mov	r0, r7
 800789c:	47c0      	blx	r8
 800789e:	4306      	orrs	r6, r0
 80078a0:	3568      	adds	r5, #104	@ 0x68
 80078a2:	e7e9      	b.n	8007878 <_fwalk_sglue+0x10>

080078a4 <sniprintf>:
 80078a4:	b40c      	push	{r2, r3}
 80078a6:	b530      	push	{r4, r5, lr}
 80078a8:	4b17      	ldr	r3, [pc, #92]	@ (8007908 <sniprintf+0x64>)
 80078aa:	1e0c      	subs	r4, r1, #0
 80078ac:	681d      	ldr	r5, [r3, #0]
 80078ae:	b09d      	sub	sp, #116	@ 0x74
 80078b0:	da08      	bge.n	80078c4 <sniprintf+0x20>
 80078b2:	238b      	movs	r3, #139	@ 0x8b
 80078b4:	602b      	str	r3, [r5, #0]
 80078b6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ba:	b01d      	add	sp, #116	@ 0x74
 80078bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078c0:	b002      	add	sp, #8
 80078c2:	4770      	bx	lr
 80078c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078cc:	bf14      	ite	ne
 80078ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078d2:	4623      	moveq	r3, r4
 80078d4:	9304      	str	r3, [sp, #16]
 80078d6:	9307      	str	r3, [sp, #28]
 80078d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80078dc:	9002      	str	r0, [sp, #8]
 80078de:	9006      	str	r0, [sp, #24]
 80078e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80078e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80078e6:	ab21      	add	r3, sp, #132	@ 0x84
 80078e8:	a902      	add	r1, sp, #8
 80078ea:	4628      	mov	r0, r5
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	f001 fc7d 	bl	80091ec <_svfiprintf_r>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	bfbc      	itt	lt
 80078f6:	238b      	movlt	r3, #139	@ 0x8b
 80078f8:	602b      	strlt	r3, [r5, #0]
 80078fa:	2c00      	cmp	r4, #0
 80078fc:	d0dd      	beq.n	80078ba <sniprintf+0x16>
 80078fe:	9b02      	ldr	r3, [sp, #8]
 8007900:	2200      	movs	r2, #0
 8007902:	701a      	strb	r2, [r3, #0]
 8007904:	e7d9      	b.n	80078ba <sniprintf+0x16>
 8007906:	bf00      	nop
 8007908:	20000048 	.word	0x20000048

0800790c <siscanf>:
 800790c:	b40e      	push	{r1, r2, r3}
 800790e:	b530      	push	{r4, r5, lr}
 8007910:	b09c      	sub	sp, #112	@ 0x70
 8007912:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007914:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007918:	f854 5b04 	ldr.w	r5, [r4], #4
 800791c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007920:	9002      	str	r0, [sp, #8]
 8007922:	9006      	str	r0, [sp, #24]
 8007924:	f7f8 fca4 	bl	8000270 <strlen>
 8007928:	4b0b      	ldr	r3, [pc, #44]	@ (8007958 <siscanf+0x4c>)
 800792a:	9003      	str	r0, [sp, #12]
 800792c:	9007      	str	r0, [sp, #28]
 800792e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007930:	480a      	ldr	r0, [pc, #40]	@ (800795c <siscanf+0x50>)
 8007932:	9401      	str	r4, [sp, #4]
 8007934:	2300      	movs	r3, #0
 8007936:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007938:	9314      	str	r3, [sp, #80]	@ 0x50
 800793a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800793e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007942:	462a      	mov	r2, r5
 8007944:	4623      	mov	r3, r4
 8007946:	a902      	add	r1, sp, #8
 8007948:	6800      	ldr	r0, [r0, #0]
 800794a:	f001 fda3 	bl	8009494 <__ssvfiscanf_r>
 800794e:	b01c      	add	sp, #112	@ 0x70
 8007950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007954:	b003      	add	sp, #12
 8007956:	4770      	bx	lr
 8007958:	08007983 	.word	0x08007983
 800795c:	20000048 	.word	0x20000048

08007960 <__sread>:
 8007960:	b510      	push	{r4, lr}
 8007962:	460c      	mov	r4, r1
 8007964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007968:	f000 f8ba 	bl	8007ae0 <_read_r>
 800796c:	2800      	cmp	r0, #0
 800796e:	bfab      	itete	ge
 8007970:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007972:	89a3      	ldrhlt	r3, [r4, #12]
 8007974:	181b      	addge	r3, r3, r0
 8007976:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800797a:	bfac      	ite	ge
 800797c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800797e:	81a3      	strhlt	r3, [r4, #12]
 8007980:	bd10      	pop	{r4, pc}

08007982 <__seofread>:
 8007982:	2000      	movs	r0, #0
 8007984:	4770      	bx	lr

08007986 <__swrite>:
 8007986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800798a:	461f      	mov	r7, r3
 800798c:	898b      	ldrh	r3, [r1, #12]
 800798e:	05db      	lsls	r3, r3, #23
 8007990:	4605      	mov	r5, r0
 8007992:	460c      	mov	r4, r1
 8007994:	4616      	mov	r6, r2
 8007996:	d505      	bpl.n	80079a4 <__swrite+0x1e>
 8007998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800799c:	2302      	movs	r3, #2
 800799e:	2200      	movs	r2, #0
 80079a0:	f000 f88c 	bl	8007abc <_lseek_r>
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	4632      	mov	r2, r6
 80079b2:	463b      	mov	r3, r7
 80079b4:	4628      	mov	r0, r5
 80079b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ba:	f000 b8a3 	b.w	8007b04 <_write_r>

080079be <__sseek>:
 80079be:	b510      	push	{r4, lr}
 80079c0:	460c      	mov	r4, r1
 80079c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c6:	f000 f879 	bl	8007abc <_lseek_r>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	bf15      	itete	ne
 80079d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079da:	81a3      	strheq	r3, [r4, #12]
 80079dc:	bf18      	it	ne
 80079de:	81a3      	strhne	r3, [r4, #12]
 80079e0:	bd10      	pop	{r4, pc}

080079e2 <__sclose>:
 80079e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e6:	f000 b859 	b.w	8007a9c <_close_r>

080079ea <memset>:
 80079ea:	4402      	add	r2, r0
 80079ec:	4603      	mov	r3, r0
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d100      	bne.n	80079f4 <memset+0xa>
 80079f2:	4770      	bx	lr
 80079f4:	f803 1b01 	strb.w	r1, [r3], #1
 80079f8:	e7f9      	b.n	80079ee <memset+0x4>

080079fa <strchr>:
 80079fa:	b2c9      	uxtb	r1, r1
 80079fc:	4603      	mov	r3, r0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a04:	b112      	cbz	r2, 8007a0c <strchr+0x12>
 8007a06:	428a      	cmp	r2, r1
 8007a08:	d1f9      	bne.n	80079fe <strchr+0x4>
 8007a0a:	4770      	bx	lr
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	bf18      	it	ne
 8007a10:	2000      	movne	r0, #0
 8007a12:	4770      	bx	lr

08007a14 <strncpy>:
 8007a14:	b510      	push	{r4, lr}
 8007a16:	3901      	subs	r1, #1
 8007a18:	4603      	mov	r3, r0
 8007a1a:	b132      	cbz	r2, 8007a2a <strncpy+0x16>
 8007a1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a20:	f803 4b01 	strb.w	r4, [r3], #1
 8007a24:	3a01      	subs	r2, #1
 8007a26:	2c00      	cmp	r4, #0
 8007a28:	d1f7      	bne.n	8007a1a <strncpy+0x6>
 8007a2a:	441a      	add	r2, r3
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d100      	bne.n	8007a34 <strncpy+0x20>
 8007a32:	bd10      	pop	{r4, pc}
 8007a34:	f803 1b01 	strb.w	r1, [r3], #1
 8007a38:	e7f9      	b.n	8007a2e <strncpy+0x1a>

08007a3a <strrchr>:
 8007a3a:	b538      	push	{r3, r4, r5, lr}
 8007a3c:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8007a40:	4603      	mov	r3, r0
 8007a42:	d10e      	bne.n	8007a62 <strrchr+0x28>
 8007a44:	4621      	mov	r1, r4
 8007a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a4a:	f7ff bfd6 	b.w	80079fa <strchr>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	4605      	mov	r5, r0
 8007a52:	4621      	mov	r1, r4
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff ffd0 	bl	80079fa <strchr>
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	d1f7      	bne.n	8007a4e <strrchr+0x14>
 8007a5e:	4628      	mov	r0, r5
 8007a60:	bd38      	pop	{r3, r4, r5, pc}
 8007a62:	2500      	movs	r5, #0
 8007a64:	e7f5      	b.n	8007a52 <strrchr+0x18>

08007a66 <strstr>:
 8007a66:	780a      	ldrb	r2, [r1, #0]
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	b96a      	cbnz	r2, 8007a88 <strstr+0x22>
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d109      	bne.n	8007a86 <strstr+0x20>
 8007a72:	460c      	mov	r4, r1
 8007a74:	4605      	mov	r5, r0
 8007a76:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0f6      	beq.n	8007a6c <strstr+0x6>
 8007a7e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007a82:	429e      	cmp	r6, r3
 8007a84:	d0f7      	beq.n	8007a76 <strstr+0x10>
 8007a86:	3001      	adds	r0, #1
 8007a88:	7803      	ldrb	r3, [r0, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1ef      	bne.n	8007a6e <strstr+0x8>
 8007a8e:	4618      	mov	r0, r3
 8007a90:	e7ec      	b.n	8007a6c <strstr+0x6>
	...

08007a94 <_localeconv_r>:
 8007a94:	4800      	ldr	r0, [pc, #0]	@ (8007a98 <_localeconv_r+0x4>)
 8007a96:	4770      	bx	lr
 8007a98:	20000188 	.word	0x20000188

08007a9c <_close_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d06      	ldr	r5, [pc, #24]	@ (8007ab8 <_close_r+0x1c>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	602b      	str	r3, [r5, #0]
 8007aa8:	f7fa fa90 	bl	8001fcc <_close>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_close_r+0x1a>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_close_r+0x1a>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	20000a00 	.word	0x20000a00

08007abc <_lseek_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d07      	ldr	r5, [pc, #28]	@ (8007adc <_lseek_r+0x20>)
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	4608      	mov	r0, r1
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	602a      	str	r2, [r5, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f7fa faa5 	bl	800201a <_lseek>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_lseek_r+0x1e>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_lseek_r+0x1e>
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	20000a00 	.word	0x20000a00

08007ae0 <_read_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4d07      	ldr	r5, [pc, #28]	@ (8007b00 <_read_r+0x20>)
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	4611      	mov	r1, r2
 8007aea:	2200      	movs	r2, #0
 8007aec:	602a      	str	r2, [r5, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f7fa fa33 	bl	8001f5a <_read>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_read_r+0x1e>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_read_r+0x1e>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	20000a00 	.word	0x20000a00

08007b04 <_write_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d07      	ldr	r5, [pc, #28]	@ (8007b24 <_write_r+0x20>)
 8007b08:	4604      	mov	r4, r0
 8007b0a:	4608      	mov	r0, r1
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	2200      	movs	r2, #0
 8007b10:	602a      	str	r2, [r5, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f7fa fa3e 	bl	8001f94 <_write>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_write_r+0x1e>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_write_r+0x1e>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	20000a00 	.word	0x20000a00

08007b28 <__errno>:
 8007b28:	4b01      	ldr	r3, [pc, #4]	@ (8007b30 <__errno+0x8>)
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20000048 	.word	0x20000048

08007b34 <__libc_init_array>:
 8007b34:	b570      	push	{r4, r5, r6, lr}
 8007b36:	4d0d      	ldr	r5, [pc, #52]	@ (8007b6c <__libc_init_array+0x38>)
 8007b38:	4c0d      	ldr	r4, [pc, #52]	@ (8007b70 <__libc_init_array+0x3c>)
 8007b3a:	1b64      	subs	r4, r4, r5
 8007b3c:	10a4      	asrs	r4, r4, #2
 8007b3e:	2600      	movs	r6, #0
 8007b40:	42a6      	cmp	r6, r4
 8007b42:	d109      	bne.n	8007b58 <__libc_init_array+0x24>
 8007b44:	4d0b      	ldr	r5, [pc, #44]	@ (8007b74 <__libc_init_array+0x40>)
 8007b46:	4c0c      	ldr	r4, [pc, #48]	@ (8007b78 <__libc_init_array+0x44>)
 8007b48:	f002 fc6c 	bl	800a424 <_init>
 8007b4c:	1b64      	subs	r4, r4, r5
 8007b4e:	10a4      	asrs	r4, r4, #2
 8007b50:	2600      	movs	r6, #0
 8007b52:	42a6      	cmp	r6, r4
 8007b54:	d105      	bne.n	8007b62 <__libc_init_array+0x2e>
 8007b56:	bd70      	pop	{r4, r5, r6, pc}
 8007b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b5c:	4798      	blx	r3
 8007b5e:	3601      	adds	r6, #1
 8007b60:	e7ee      	b.n	8007b40 <__libc_init_array+0xc>
 8007b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b66:	4798      	blx	r3
 8007b68:	3601      	adds	r6, #1
 8007b6a:	e7f2      	b.n	8007b52 <__libc_init_array+0x1e>
 8007b6c:	0800aabc 	.word	0x0800aabc
 8007b70:	0800aabc 	.word	0x0800aabc
 8007b74:	0800aabc 	.word	0x0800aabc
 8007b78:	0800aac0 	.word	0x0800aac0

08007b7c <__retarget_lock_init_recursive>:
 8007b7c:	4770      	bx	lr

08007b7e <__retarget_lock_acquire_recursive>:
 8007b7e:	4770      	bx	lr

08007b80 <__retarget_lock_release_recursive>:
 8007b80:	4770      	bx	lr

08007b82 <strcpy>:
 8007b82:	4603      	mov	r3, r0
 8007b84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b88:	f803 2b01 	strb.w	r2, [r3], #1
 8007b8c:	2a00      	cmp	r2, #0
 8007b8e:	d1f9      	bne.n	8007b84 <strcpy+0x2>
 8007b90:	4770      	bx	lr

08007b92 <quorem>:
 8007b92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b96:	6903      	ldr	r3, [r0, #16]
 8007b98:	690c      	ldr	r4, [r1, #16]
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	db7e      	blt.n	8007c9e <quorem+0x10c>
 8007ba0:	3c01      	subs	r4, #1
 8007ba2:	f101 0814 	add.w	r8, r1, #20
 8007ba6:	00a3      	lsls	r3, r4, #2
 8007ba8:	f100 0514 	add.w	r5, r0, #20
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bc8:	d32e      	bcc.n	8007c28 <quorem+0x96>
 8007bca:	f04f 0a00 	mov.w	sl, #0
 8007bce:	46c4      	mov	ip, r8
 8007bd0:	46ae      	mov	lr, r5
 8007bd2:	46d3      	mov	fp, sl
 8007bd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bd8:	b298      	uxth	r0, r3
 8007bda:	fb06 a000 	mla	r0, r6, r0, sl
 8007bde:	0c02      	lsrs	r2, r0, #16
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	fb06 2303 	mla	r3, r6, r3, r2
 8007be6:	f8de 2000 	ldr.w	r2, [lr]
 8007bea:	b280      	uxth	r0, r0
 8007bec:	b292      	uxth	r2, r2
 8007bee:	1a12      	subs	r2, r2, r0
 8007bf0:	445a      	add	r2, fp
 8007bf2:	f8de 0000 	ldr.w	r0, [lr]
 8007bf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c04:	b292      	uxth	r2, r2
 8007c06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c0a:	45e1      	cmp	r9, ip
 8007c0c:	f84e 2b04 	str.w	r2, [lr], #4
 8007c10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c14:	d2de      	bcs.n	8007bd4 <quorem+0x42>
 8007c16:	9b00      	ldr	r3, [sp, #0]
 8007c18:	58eb      	ldr	r3, [r5, r3]
 8007c1a:	b92b      	cbnz	r3, 8007c28 <quorem+0x96>
 8007c1c:	9b01      	ldr	r3, [sp, #4]
 8007c1e:	3b04      	subs	r3, #4
 8007c20:	429d      	cmp	r5, r3
 8007c22:	461a      	mov	r2, r3
 8007c24:	d32f      	bcc.n	8007c86 <quorem+0xf4>
 8007c26:	613c      	str	r4, [r7, #16]
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f001 f97b 	bl	8008f24 <__mcmp>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	db25      	blt.n	8007c7e <quorem+0xec>
 8007c32:	4629      	mov	r1, r5
 8007c34:	2000      	movs	r0, #0
 8007c36:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c3a:	f8d1 c000 	ldr.w	ip, [r1]
 8007c3e:	fa1f fe82 	uxth.w	lr, r2
 8007c42:	fa1f f38c 	uxth.w	r3, ip
 8007c46:	eba3 030e 	sub.w	r3, r3, lr
 8007c4a:	4403      	add	r3, r0
 8007c4c:	0c12      	lsrs	r2, r2, #16
 8007c4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c5c:	45c1      	cmp	r9, r8
 8007c5e:	f841 3b04 	str.w	r3, [r1], #4
 8007c62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c66:	d2e6      	bcs.n	8007c36 <quorem+0xa4>
 8007c68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c70:	b922      	cbnz	r2, 8007c7c <quorem+0xea>
 8007c72:	3b04      	subs	r3, #4
 8007c74:	429d      	cmp	r5, r3
 8007c76:	461a      	mov	r2, r3
 8007c78:	d30b      	bcc.n	8007c92 <quorem+0x100>
 8007c7a:	613c      	str	r4, [r7, #16]
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	4630      	mov	r0, r6
 8007c80:	b003      	add	sp, #12
 8007c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	3b04      	subs	r3, #4
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d1cb      	bne.n	8007c26 <quorem+0x94>
 8007c8e:	3c01      	subs	r4, #1
 8007c90:	e7c6      	b.n	8007c20 <quorem+0x8e>
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d1ef      	bne.n	8007c7a <quorem+0xe8>
 8007c9a:	3c01      	subs	r4, #1
 8007c9c:	e7ea      	b.n	8007c74 <quorem+0xe2>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	e7ee      	b.n	8007c80 <quorem+0xee>
 8007ca2:	0000      	movs	r0, r0
 8007ca4:	0000      	movs	r0, r0
	...

08007ca8 <_dtoa_r>:
 8007ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	69c7      	ldr	r7, [r0, #28]
 8007cae:	b099      	sub	sp, #100	@ 0x64
 8007cb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007cb4:	ec55 4b10 	vmov	r4, r5, d0
 8007cb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007cba:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cbc:	4683      	mov	fp, r0
 8007cbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cc2:	b97f      	cbnz	r7, 8007ce4 <_dtoa_r+0x3c>
 8007cc4:	2010      	movs	r0, #16
 8007cc6:	f000 fdfd 	bl	80088c4 <malloc>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007cd0:	b920      	cbnz	r0, 8007cdc <_dtoa_r+0x34>
 8007cd2:	4ba7      	ldr	r3, [pc, #668]	@ (8007f70 <_dtoa_r+0x2c8>)
 8007cd4:	21ef      	movs	r1, #239	@ 0xef
 8007cd6:	48a7      	ldr	r0, [pc, #668]	@ (8007f74 <_dtoa_r+0x2cc>)
 8007cd8:	f001 fff6 	bl	8009cc8 <__assert_func>
 8007cdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ce0:	6007      	str	r7, [r0, #0]
 8007ce2:	60c7      	str	r7, [r0, #12]
 8007ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ce8:	6819      	ldr	r1, [r3, #0]
 8007cea:	b159      	cbz	r1, 8007d04 <_dtoa_r+0x5c>
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	604a      	str	r2, [r1, #4]
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4093      	lsls	r3, r2
 8007cf4:	608b      	str	r3, [r1, #8]
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	f000 feda 	bl	8008ab0 <_Bfree>
 8007cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	1e2b      	subs	r3, r5, #0
 8007d06:	bfb9      	ittee	lt
 8007d08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d0c:	9303      	strlt	r3, [sp, #12]
 8007d0e:	2300      	movge	r3, #0
 8007d10:	6033      	strge	r3, [r6, #0]
 8007d12:	9f03      	ldr	r7, [sp, #12]
 8007d14:	4b98      	ldr	r3, [pc, #608]	@ (8007f78 <_dtoa_r+0x2d0>)
 8007d16:	bfbc      	itt	lt
 8007d18:	2201      	movlt	r2, #1
 8007d1a:	6032      	strlt	r2, [r6, #0]
 8007d1c:	43bb      	bics	r3, r7
 8007d1e:	d112      	bne.n	8007d46 <_dtoa_r+0x9e>
 8007d20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d2c:	4323      	orrs	r3, r4
 8007d2e:	f000 854d 	beq.w	80087cc <_dtoa_r+0xb24>
 8007d32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f8c <_dtoa_r+0x2e4>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 854f 	beq.w	80087dc <_dtoa_r+0xb34>
 8007d3e:	f10a 0303 	add.w	r3, sl, #3
 8007d42:	f000 bd49 	b.w	80087d8 <_dtoa_r+0xb30>
 8007d46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	ec51 0b17 	vmov	r0, r1, d7
 8007d50:	2300      	movs	r3, #0
 8007d52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d56:	f7f8 feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	b158      	cbz	r0, 8007d76 <_dtoa_r+0xce>
 8007d5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d60:	2301      	movs	r3, #1
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d66:	b113      	cbz	r3, 8007d6e <_dtoa_r+0xc6>
 8007d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d6a:	4b84      	ldr	r3, [pc, #528]	@ (8007f7c <_dtoa_r+0x2d4>)
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f90 <_dtoa_r+0x2e8>
 8007d72:	f000 bd33 	b.w	80087dc <_dtoa_r+0xb34>
 8007d76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d7a:	aa16      	add	r2, sp, #88	@ 0x58
 8007d7c:	a917      	add	r1, sp, #92	@ 0x5c
 8007d7e:	4658      	mov	r0, fp
 8007d80:	f001 f980 	bl	8009084 <__d2b>
 8007d84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d88:	4681      	mov	r9, r0
 8007d8a:	2e00      	cmp	r6, #0
 8007d8c:	d077      	beq.n	8007e7e <_dtoa_r+0x1d6>
 8007d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007da0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007da4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007da8:	4619      	mov	r1, r3
 8007daa:	2200      	movs	r2, #0
 8007dac:	4b74      	ldr	r3, [pc, #464]	@ (8007f80 <_dtoa_r+0x2d8>)
 8007dae:	f7f8 fa6b 	bl	8000288 <__aeabi_dsub>
 8007db2:	a369      	add	r3, pc, #420	@ (adr r3, 8007f58 <_dtoa_r+0x2b0>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fc1e 	bl	80005f8 <__aeabi_dmul>
 8007dbc:	a368      	add	r3, pc, #416	@ (adr r3, 8007f60 <_dtoa_r+0x2b8>)
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f7f8 fa63 	bl	800028c <__adddf3>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4630      	mov	r0, r6
 8007dca:	460d      	mov	r5, r1
 8007dcc:	f7f8 fbaa 	bl	8000524 <__aeabi_i2d>
 8007dd0:	a365      	add	r3, pc, #404	@ (adr r3, 8007f68 <_dtoa_r+0x2c0>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fc0f 	bl	80005f8 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fa53 	bl	800028c <__adddf3>
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	f7f8 feb5 	bl	8000b58 <__aeabi_d2iz>
 8007dee:	2200      	movs	r2, #0
 8007df0:	4607      	mov	r7, r0
 8007df2:	2300      	movs	r3, #0
 8007df4:	4620      	mov	r0, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	f7f8 fe70 	bl	8000adc <__aeabi_dcmplt>
 8007dfc:	b140      	cbz	r0, 8007e10 <_dtoa_r+0x168>
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f7f8 fb90 	bl	8000524 <__aeabi_i2d>
 8007e04:	4622      	mov	r2, r4
 8007e06:	462b      	mov	r3, r5
 8007e08:	f7f8 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e0c:	b900      	cbnz	r0, 8007e10 <_dtoa_r+0x168>
 8007e0e:	3f01      	subs	r7, #1
 8007e10:	2f16      	cmp	r7, #22
 8007e12:	d851      	bhi.n	8007eb8 <_dtoa_r+0x210>
 8007e14:	4b5b      	ldr	r3, [pc, #364]	@ (8007f84 <_dtoa_r+0x2dc>)
 8007e16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e22:	f7f8 fe5b 	bl	8000adc <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d048      	beq.n	8007ebc <_dtoa_r+0x214>
 8007e2a:	3f01      	subs	r7, #1
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e32:	1b9b      	subs	r3, r3, r6
 8007e34:	1e5a      	subs	r2, r3, #1
 8007e36:	bf44      	itt	mi
 8007e38:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e3c:	2300      	movmi	r3, #0
 8007e3e:	9208      	str	r2, [sp, #32]
 8007e40:	bf54      	ite	pl
 8007e42:	f04f 0800 	movpl.w	r8, #0
 8007e46:	9308      	strmi	r3, [sp, #32]
 8007e48:	2f00      	cmp	r7, #0
 8007e4a:	db39      	blt.n	8007ec0 <_dtoa_r+0x218>
 8007e4c:	9b08      	ldr	r3, [sp, #32]
 8007e4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e50:	443b      	add	r3, r7
 8007e52:	9308      	str	r3, [sp, #32]
 8007e54:	2300      	movs	r3, #0
 8007e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5a:	2b09      	cmp	r3, #9
 8007e5c:	d864      	bhi.n	8007f28 <_dtoa_r+0x280>
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	bfc4      	itt	gt
 8007e62:	3b04      	subgt	r3, #4
 8007e64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e68:	f1a3 0302 	sub.w	r3, r3, #2
 8007e6c:	bfcc      	ite	gt
 8007e6e:	2400      	movgt	r4, #0
 8007e70:	2401      	movle	r4, #1
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d863      	bhi.n	8007f3e <_dtoa_r+0x296>
 8007e76:	e8df f003 	tbb	[pc, r3]
 8007e7a:	372a      	.short	0x372a
 8007e7c:	5535      	.short	0x5535
 8007e7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e82:	441e      	add	r6, r3
 8007e84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e88:	2b20      	cmp	r3, #32
 8007e8a:	bfc1      	itttt	gt
 8007e8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e90:	409f      	lslgt	r7, r3
 8007e92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e9a:	bfd6      	itet	le
 8007e9c:	f1c3 0320 	rsble	r3, r3, #32
 8007ea0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ea4:	fa04 f003 	lslle.w	r0, r4, r3
 8007ea8:	f7f8 fb2c 	bl	8000504 <__aeabi_ui2d>
 8007eac:	2201      	movs	r2, #1
 8007eae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007eb2:	3e01      	subs	r6, #1
 8007eb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007eb6:	e777      	b.n	8007da8 <_dtoa_r+0x100>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e7b8      	b.n	8007e2e <_dtoa_r+0x186>
 8007ebc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ebe:	e7b7      	b.n	8007e30 <_dtoa_r+0x188>
 8007ec0:	427b      	negs	r3, r7
 8007ec2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	eba8 0807 	sub.w	r8, r8, r7
 8007eca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ecc:	e7c4      	b.n	8007e58 <_dtoa_r+0x1b0>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dc35      	bgt.n	8007f44 <_dtoa_r+0x29c>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	9307      	str	r3, [sp, #28]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ee2:	e00b      	b.n	8007efc <_dtoa_r+0x254>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e7f3      	b.n	8007ed0 <_dtoa_r+0x228>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	9307      	str	r3, [sp, #28]
 8007ef8:	bfb8      	it	lt
 8007efa:	2301      	movlt	r3, #1
 8007efc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f00:	2100      	movs	r1, #0
 8007f02:	2204      	movs	r2, #4
 8007f04:	f102 0514 	add.w	r5, r2, #20
 8007f08:	429d      	cmp	r5, r3
 8007f0a:	d91f      	bls.n	8007f4c <_dtoa_r+0x2a4>
 8007f0c:	6041      	str	r1, [r0, #4]
 8007f0e:	4658      	mov	r0, fp
 8007f10:	f000 fd8e 	bl	8008a30 <_Balloc>
 8007f14:	4682      	mov	sl, r0
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d13c      	bne.n	8007f94 <_dtoa_r+0x2ec>
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f88 <_dtoa_r+0x2e0>)
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f22:	e6d8      	b.n	8007cd6 <_dtoa_r+0x2e>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e7e0      	b.n	8007eea <_dtoa_r+0x242>
 8007f28:	2401      	movs	r4, #1
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	9307      	str	r3, [sp, #28]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2312      	movs	r3, #18
 8007f3c:	e7d0      	b.n	8007ee0 <_dtoa_r+0x238>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f42:	e7f5      	b.n	8007f30 <_dtoa_r+0x288>
 8007f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	9307      	str	r3, [sp, #28]
 8007f4a:	e7d7      	b.n	8007efc <_dtoa_r+0x254>
 8007f4c:	3101      	adds	r1, #1
 8007f4e:	0052      	lsls	r2, r2, #1
 8007f50:	e7d8      	b.n	8007f04 <_dtoa_r+0x25c>
 8007f52:	bf00      	nop
 8007f54:	f3af 8000 	nop.w
 8007f58:	636f4361 	.word	0x636f4361
 8007f5c:	3fd287a7 	.word	0x3fd287a7
 8007f60:	8b60c8b3 	.word	0x8b60c8b3
 8007f64:	3fc68a28 	.word	0x3fc68a28
 8007f68:	509f79fb 	.word	0x509f79fb
 8007f6c:	3fd34413 	.word	0x3fd34413
 8007f70:	0800a864 	.word	0x0800a864
 8007f74:	0800a87b 	.word	0x0800a87b
 8007f78:	7ff00000 	.word	0x7ff00000
 8007f7c:	0800aa68 	.word	0x0800aa68
 8007f80:	3ff80000 	.word	0x3ff80000
 8007f84:	0800a978 	.word	0x0800a978
 8007f88:	0800a8d3 	.word	0x0800a8d3
 8007f8c:	0800a860 	.word	0x0800a860
 8007f90:	0800aa67 	.word	0x0800aa67
 8007f94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f98:	6018      	str	r0, [r3, #0]
 8007f9a:	9b07      	ldr	r3, [sp, #28]
 8007f9c:	2b0e      	cmp	r3, #14
 8007f9e:	f200 80a4 	bhi.w	80080ea <_dtoa_r+0x442>
 8007fa2:	2c00      	cmp	r4, #0
 8007fa4:	f000 80a1 	beq.w	80080ea <_dtoa_r+0x442>
 8007fa8:	2f00      	cmp	r7, #0
 8007faa:	dd33      	ble.n	8008014 <_dtoa_r+0x36c>
 8007fac:	4bad      	ldr	r3, [pc, #692]	@ (8008264 <_dtoa_r+0x5bc>)
 8007fae:	f007 020f 	and.w	r2, r7, #15
 8007fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fb6:	ed93 7b00 	vldr	d7, [r3]
 8007fba:	05f8      	lsls	r0, r7, #23
 8007fbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007fc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fc4:	d516      	bpl.n	8007ff4 <_dtoa_r+0x34c>
 8007fc6:	4ba8      	ldr	r3, [pc, #672]	@ (8008268 <_dtoa_r+0x5c0>)
 8007fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fd0:	f7f8 fc3c 	bl	800084c <__aeabi_ddiv>
 8007fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fd8:	f004 040f 	and.w	r4, r4, #15
 8007fdc:	2603      	movs	r6, #3
 8007fde:	4da2      	ldr	r5, [pc, #648]	@ (8008268 <_dtoa_r+0x5c0>)
 8007fe0:	b954      	cbnz	r4, 8007ff8 <_dtoa_r+0x350>
 8007fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fea:	f7f8 fc2f 	bl	800084c <__aeabi_ddiv>
 8007fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ff2:	e028      	b.n	8008046 <_dtoa_r+0x39e>
 8007ff4:	2602      	movs	r6, #2
 8007ff6:	e7f2      	b.n	8007fde <_dtoa_r+0x336>
 8007ff8:	07e1      	lsls	r1, r4, #31
 8007ffa:	d508      	bpl.n	800800e <_dtoa_r+0x366>
 8007ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008000:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008004:	f7f8 faf8 	bl	80005f8 <__aeabi_dmul>
 8008008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800800c:	3601      	adds	r6, #1
 800800e:	1064      	asrs	r4, r4, #1
 8008010:	3508      	adds	r5, #8
 8008012:	e7e5      	b.n	8007fe0 <_dtoa_r+0x338>
 8008014:	f000 80d2 	beq.w	80081bc <_dtoa_r+0x514>
 8008018:	427c      	negs	r4, r7
 800801a:	4b92      	ldr	r3, [pc, #584]	@ (8008264 <_dtoa_r+0x5bc>)
 800801c:	4d92      	ldr	r5, [pc, #584]	@ (8008268 <_dtoa_r+0x5c0>)
 800801e:	f004 020f 	and.w	r2, r4, #15
 8008022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800802e:	f7f8 fae3 	bl	80005f8 <__aeabi_dmul>
 8008032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008036:	1124      	asrs	r4, r4, #4
 8008038:	2300      	movs	r3, #0
 800803a:	2602      	movs	r6, #2
 800803c:	2c00      	cmp	r4, #0
 800803e:	f040 80b2 	bne.w	80081a6 <_dtoa_r+0x4fe>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1d3      	bne.n	8007fee <_dtoa_r+0x346>
 8008046:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008048:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 80b7 	beq.w	80081c0 <_dtoa_r+0x518>
 8008052:	4b86      	ldr	r3, [pc, #536]	@ (800826c <_dtoa_r+0x5c4>)
 8008054:	2200      	movs	r2, #0
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fd3f 	bl	8000adc <__aeabi_dcmplt>
 800805e:	2800      	cmp	r0, #0
 8008060:	f000 80ae 	beq.w	80081c0 <_dtoa_r+0x518>
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 80aa 	beq.w	80081c0 <_dtoa_r+0x518>
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	dd37      	ble.n	80080e2 <_dtoa_r+0x43a>
 8008072:	1e7b      	subs	r3, r7, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	4620      	mov	r0, r4
 8008078:	4b7d      	ldr	r3, [pc, #500]	@ (8008270 <_dtoa_r+0x5c8>)
 800807a:	2200      	movs	r2, #0
 800807c:	4629      	mov	r1, r5
 800807e:	f7f8 fabb 	bl	80005f8 <__aeabi_dmul>
 8008082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008086:	9c00      	ldr	r4, [sp, #0]
 8008088:	3601      	adds	r6, #1
 800808a:	4630      	mov	r0, r6
 800808c:	f7f8 fa4a 	bl	8000524 <__aeabi_i2d>
 8008090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008094:	f7f8 fab0 	bl	80005f8 <__aeabi_dmul>
 8008098:	4b76      	ldr	r3, [pc, #472]	@ (8008274 <_dtoa_r+0x5cc>)
 800809a:	2200      	movs	r2, #0
 800809c:	f7f8 f8f6 	bl	800028c <__adddf3>
 80080a0:	4605      	mov	r5, r0
 80080a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080a6:	2c00      	cmp	r4, #0
 80080a8:	f040 808d 	bne.w	80081c6 <_dtoa_r+0x51e>
 80080ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b0:	4b71      	ldr	r3, [pc, #452]	@ (8008278 <_dtoa_r+0x5d0>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	f7f8 f8e8 	bl	8000288 <__aeabi_dsub>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080c0:	462a      	mov	r2, r5
 80080c2:	4633      	mov	r3, r6
 80080c4:	f7f8 fd28 	bl	8000b18 <__aeabi_dcmpgt>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	f040 828b 	bne.w	80085e4 <_dtoa_r+0x93c>
 80080ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d2:	462a      	mov	r2, r5
 80080d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080d8:	f7f8 fd00 	bl	8000adc <__aeabi_dcmplt>
 80080dc:	2800      	cmp	r0, #0
 80080de:	f040 8128 	bne.w	8008332 <_dtoa_r+0x68a>
 80080e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f2c0 815a 	blt.w	80083a6 <_dtoa_r+0x6fe>
 80080f2:	2f0e      	cmp	r7, #14
 80080f4:	f300 8157 	bgt.w	80083a6 <_dtoa_r+0x6fe>
 80080f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008264 <_dtoa_r+0x5bc>)
 80080fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080fe:	ed93 7b00 	vldr	d7, [r3]
 8008102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008104:	2b00      	cmp	r3, #0
 8008106:	ed8d 7b00 	vstr	d7, [sp]
 800810a:	da03      	bge.n	8008114 <_dtoa_r+0x46c>
 800810c:	9b07      	ldr	r3, [sp, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f340 8101 	ble.w	8008316 <_dtoa_r+0x66e>
 8008114:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008118:	4656      	mov	r6, sl
 800811a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800811e:	4620      	mov	r0, r4
 8008120:	4629      	mov	r1, r5
 8008122:	f7f8 fb93 	bl	800084c <__aeabi_ddiv>
 8008126:	f7f8 fd17 	bl	8000b58 <__aeabi_d2iz>
 800812a:	4680      	mov	r8, r0
 800812c:	f7f8 f9fa 	bl	8000524 <__aeabi_i2d>
 8008130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008134:	f7f8 fa60 	bl	80005f8 <__aeabi_dmul>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008144:	f7f8 f8a0 	bl	8000288 <__aeabi_dsub>
 8008148:	f806 4b01 	strb.w	r4, [r6], #1
 800814c:	9d07      	ldr	r5, [sp, #28]
 800814e:	eba6 040a 	sub.w	r4, r6, sl
 8008152:	42a5      	cmp	r5, r4
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	f040 8117 	bne.w	800838a <_dtoa_r+0x6e2>
 800815c:	f7f8 f896 	bl	800028c <__adddf3>
 8008160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008164:	4604      	mov	r4, r0
 8008166:	460d      	mov	r5, r1
 8008168:	f7f8 fcd6 	bl	8000b18 <__aeabi_dcmpgt>
 800816c:	2800      	cmp	r0, #0
 800816e:	f040 80f9 	bne.w	8008364 <_dtoa_r+0x6bc>
 8008172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800817e:	b118      	cbz	r0, 8008188 <_dtoa_r+0x4e0>
 8008180:	f018 0f01 	tst.w	r8, #1
 8008184:	f040 80ee 	bne.w	8008364 <_dtoa_r+0x6bc>
 8008188:	4649      	mov	r1, r9
 800818a:	4658      	mov	r0, fp
 800818c:	f000 fc90 	bl	8008ab0 <_Bfree>
 8008190:	2300      	movs	r3, #0
 8008192:	7033      	strb	r3, [r6, #0]
 8008194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008196:	3701      	adds	r7, #1
 8008198:	601f      	str	r7, [r3, #0]
 800819a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 831d 	beq.w	80087dc <_dtoa_r+0xb34>
 80081a2:	601e      	str	r6, [r3, #0]
 80081a4:	e31a      	b.n	80087dc <_dtoa_r+0xb34>
 80081a6:	07e2      	lsls	r2, r4, #31
 80081a8:	d505      	bpl.n	80081b6 <_dtoa_r+0x50e>
 80081aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081ae:	f7f8 fa23 	bl	80005f8 <__aeabi_dmul>
 80081b2:	3601      	adds	r6, #1
 80081b4:	2301      	movs	r3, #1
 80081b6:	1064      	asrs	r4, r4, #1
 80081b8:	3508      	adds	r5, #8
 80081ba:	e73f      	b.n	800803c <_dtoa_r+0x394>
 80081bc:	2602      	movs	r6, #2
 80081be:	e742      	b.n	8008046 <_dtoa_r+0x39e>
 80081c0:	9c07      	ldr	r4, [sp, #28]
 80081c2:	9704      	str	r7, [sp, #16]
 80081c4:	e761      	b.n	800808a <_dtoa_r+0x3e2>
 80081c6:	4b27      	ldr	r3, [pc, #156]	@ (8008264 <_dtoa_r+0x5bc>)
 80081c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081d2:	4454      	add	r4, sl
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d053      	beq.n	8008280 <_dtoa_r+0x5d8>
 80081d8:	4928      	ldr	r1, [pc, #160]	@ (800827c <_dtoa_r+0x5d4>)
 80081da:	2000      	movs	r0, #0
 80081dc:	f7f8 fb36 	bl	800084c <__aeabi_ddiv>
 80081e0:	4633      	mov	r3, r6
 80081e2:	462a      	mov	r2, r5
 80081e4:	f7f8 f850 	bl	8000288 <__aeabi_dsub>
 80081e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081ec:	4656      	mov	r6, sl
 80081ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f2:	f7f8 fcb1 	bl	8000b58 <__aeabi_d2iz>
 80081f6:	4605      	mov	r5, r0
 80081f8:	f7f8 f994 	bl	8000524 <__aeabi_i2d>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008204:	f7f8 f840 	bl	8000288 <__aeabi_dsub>
 8008208:	3530      	adds	r5, #48	@ 0x30
 800820a:	4602      	mov	r2, r0
 800820c:	460b      	mov	r3, r1
 800820e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008212:	f806 5b01 	strb.w	r5, [r6], #1
 8008216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800821a:	f7f8 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800821e:	2800      	cmp	r0, #0
 8008220:	d171      	bne.n	8008306 <_dtoa_r+0x65e>
 8008222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008226:	4911      	ldr	r1, [pc, #68]	@ (800826c <_dtoa_r+0x5c4>)
 8008228:	2000      	movs	r0, #0
 800822a:	f7f8 f82d 	bl	8000288 <__aeabi_dsub>
 800822e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008232:	f7f8 fc53 	bl	8000adc <__aeabi_dcmplt>
 8008236:	2800      	cmp	r0, #0
 8008238:	f040 8095 	bne.w	8008366 <_dtoa_r+0x6be>
 800823c:	42a6      	cmp	r6, r4
 800823e:	f43f af50 	beq.w	80080e2 <_dtoa_r+0x43a>
 8008242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008246:	4b0a      	ldr	r3, [pc, #40]	@ (8008270 <_dtoa_r+0x5c8>)
 8008248:	2200      	movs	r2, #0
 800824a:	f7f8 f9d5 	bl	80005f8 <__aeabi_dmul>
 800824e:	4b08      	ldr	r3, [pc, #32]	@ (8008270 <_dtoa_r+0x5c8>)
 8008250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008254:	2200      	movs	r2, #0
 8008256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800825a:	f7f8 f9cd 	bl	80005f8 <__aeabi_dmul>
 800825e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008262:	e7c4      	b.n	80081ee <_dtoa_r+0x546>
 8008264:	0800a978 	.word	0x0800a978
 8008268:	0800a950 	.word	0x0800a950
 800826c:	3ff00000 	.word	0x3ff00000
 8008270:	40240000 	.word	0x40240000
 8008274:	401c0000 	.word	0x401c0000
 8008278:	40140000 	.word	0x40140000
 800827c:	3fe00000 	.word	0x3fe00000
 8008280:	4631      	mov	r1, r6
 8008282:	4628      	mov	r0, r5
 8008284:	f7f8 f9b8 	bl	80005f8 <__aeabi_dmul>
 8008288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800828c:	9415      	str	r4, [sp, #84]	@ 0x54
 800828e:	4656      	mov	r6, sl
 8008290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008294:	f7f8 fc60 	bl	8000b58 <__aeabi_d2iz>
 8008298:	4605      	mov	r5, r0
 800829a:	f7f8 f943 	bl	8000524 <__aeabi_i2d>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a6:	f7f7 ffef 	bl	8000288 <__aeabi_dsub>
 80082aa:	3530      	adds	r5, #48	@ 0x30
 80082ac:	f806 5b01 	strb.w	r5, [r6], #1
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	42a6      	cmp	r6, r4
 80082b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082ba:	f04f 0200 	mov.w	r2, #0
 80082be:	d124      	bne.n	800830a <_dtoa_r+0x662>
 80082c0:	4bac      	ldr	r3, [pc, #688]	@ (8008574 <_dtoa_r+0x8cc>)
 80082c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082c6:	f7f7 ffe1 	bl	800028c <__adddf3>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d2:	f7f8 fc21 	bl	8000b18 <__aeabi_dcmpgt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d145      	bne.n	8008366 <_dtoa_r+0x6be>
 80082da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082de:	49a5      	ldr	r1, [pc, #660]	@ (8008574 <_dtoa_r+0x8cc>)
 80082e0:	2000      	movs	r0, #0
 80082e2:	f7f7 ffd1 	bl	8000288 <__aeabi_dsub>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ee:	f7f8 fbf5 	bl	8000adc <__aeabi_dcmplt>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f43f aef5 	beq.w	80080e2 <_dtoa_r+0x43a>
 80082f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80082fa:	1e73      	subs	r3, r6, #1
 80082fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80082fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008302:	2b30      	cmp	r3, #48	@ 0x30
 8008304:	d0f8      	beq.n	80082f8 <_dtoa_r+0x650>
 8008306:	9f04      	ldr	r7, [sp, #16]
 8008308:	e73e      	b.n	8008188 <_dtoa_r+0x4e0>
 800830a:	4b9b      	ldr	r3, [pc, #620]	@ (8008578 <_dtoa_r+0x8d0>)
 800830c:	f7f8 f974 	bl	80005f8 <__aeabi_dmul>
 8008310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008314:	e7bc      	b.n	8008290 <_dtoa_r+0x5e8>
 8008316:	d10c      	bne.n	8008332 <_dtoa_r+0x68a>
 8008318:	4b98      	ldr	r3, [pc, #608]	@ (800857c <_dtoa_r+0x8d4>)
 800831a:	2200      	movs	r2, #0
 800831c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008320:	f7f8 f96a 	bl	80005f8 <__aeabi_dmul>
 8008324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008328:	f7f8 fbec 	bl	8000b04 <__aeabi_dcmpge>
 800832c:	2800      	cmp	r0, #0
 800832e:	f000 8157 	beq.w	80085e0 <_dtoa_r+0x938>
 8008332:	2400      	movs	r4, #0
 8008334:	4625      	mov	r5, r4
 8008336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008338:	43db      	mvns	r3, r3
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	4656      	mov	r6, sl
 800833e:	2700      	movs	r7, #0
 8008340:	4621      	mov	r1, r4
 8008342:	4658      	mov	r0, fp
 8008344:	f000 fbb4 	bl	8008ab0 <_Bfree>
 8008348:	2d00      	cmp	r5, #0
 800834a:	d0dc      	beq.n	8008306 <_dtoa_r+0x65e>
 800834c:	b12f      	cbz	r7, 800835a <_dtoa_r+0x6b2>
 800834e:	42af      	cmp	r7, r5
 8008350:	d003      	beq.n	800835a <_dtoa_r+0x6b2>
 8008352:	4639      	mov	r1, r7
 8008354:	4658      	mov	r0, fp
 8008356:	f000 fbab 	bl	8008ab0 <_Bfree>
 800835a:	4629      	mov	r1, r5
 800835c:	4658      	mov	r0, fp
 800835e:	f000 fba7 	bl	8008ab0 <_Bfree>
 8008362:	e7d0      	b.n	8008306 <_dtoa_r+0x65e>
 8008364:	9704      	str	r7, [sp, #16]
 8008366:	4633      	mov	r3, r6
 8008368:	461e      	mov	r6, r3
 800836a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836e:	2a39      	cmp	r2, #57	@ 0x39
 8008370:	d107      	bne.n	8008382 <_dtoa_r+0x6da>
 8008372:	459a      	cmp	sl, r3
 8008374:	d1f8      	bne.n	8008368 <_dtoa_r+0x6c0>
 8008376:	9a04      	ldr	r2, [sp, #16]
 8008378:	3201      	adds	r2, #1
 800837a:	9204      	str	r2, [sp, #16]
 800837c:	2230      	movs	r2, #48	@ 0x30
 800837e:	f88a 2000 	strb.w	r2, [sl]
 8008382:	781a      	ldrb	r2, [r3, #0]
 8008384:	3201      	adds	r2, #1
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e7bd      	b.n	8008306 <_dtoa_r+0x65e>
 800838a:	4b7b      	ldr	r3, [pc, #492]	@ (8008578 <_dtoa_r+0x8d0>)
 800838c:	2200      	movs	r2, #0
 800838e:	f7f8 f933 	bl	80005f8 <__aeabi_dmul>
 8008392:	2200      	movs	r2, #0
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	460d      	mov	r5, r1
 800839a:	f7f8 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800839e:	2800      	cmp	r0, #0
 80083a0:	f43f aebb 	beq.w	800811a <_dtoa_r+0x472>
 80083a4:	e6f0      	b.n	8008188 <_dtoa_r+0x4e0>
 80083a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083a8:	2a00      	cmp	r2, #0
 80083aa:	f000 80db 	beq.w	8008564 <_dtoa_r+0x8bc>
 80083ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083b0:	2a01      	cmp	r2, #1
 80083b2:	f300 80bf 	bgt.w	8008534 <_dtoa_r+0x88c>
 80083b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80083b8:	2a00      	cmp	r2, #0
 80083ba:	f000 80b7 	beq.w	800852c <_dtoa_r+0x884>
 80083be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083c4:	4646      	mov	r6, r8
 80083c6:	9a08      	ldr	r2, [sp, #32]
 80083c8:	2101      	movs	r1, #1
 80083ca:	441a      	add	r2, r3
 80083cc:	4658      	mov	r0, fp
 80083ce:	4498      	add	r8, r3
 80083d0:	9208      	str	r2, [sp, #32]
 80083d2:	f000 fc21 	bl	8008c18 <__i2b>
 80083d6:	4605      	mov	r5, r0
 80083d8:	b15e      	cbz	r6, 80083f2 <_dtoa_r+0x74a>
 80083da:	9b08      	ldr	r3, [sp, #32]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd08      	ble.n	80083f2 <_dtoa_r+0x74a>
 80083e0:	42b3      	cmp	r3, r6
 80083e2:	9a08      	ldr	r2, [sp, #32]
 80083e4:	bfa8      	it	ge
 80083e6:	4633      	movge	r3, r6
 80083e8:	eba8 0803 	sub.w	r8, r8, r3
 80083ec:	1af6      	subs	r6, r6, r3
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	9308      	str	r3, [sp, #32]
 80083f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f4:	b1f3      	cbz	r3, 8008434 <_dtoa_r+0x78c>
 80083f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80b7 	beq.w	800856c <_dtoa_r+0x8c4>
 80083fe:	b18c      	cbz	r4, 8008424 <_dtoa_r+0x77c>
 8008400:	4629      	mov	r1, r5
 8008402:	4622      	mov	r2, r4
 8008404:	4658      	mov	r0, fp
 8008406:	f000 fcc7 	bl	8008d98 <__pow5mult>
 800840a:	464a      	mov	r2, r9
 800840c:	4601      	mov	r1, r0
 800840e:	4605      	mov	r5, r0
 8008410:	4658      	mov	r0, fp
 8008412:	f000 fc17 	bl	8008c44 <__multiply>
 8008416:	4649      	mov	r1, r9
 8008418:	9004      	str	r0, [sp, #16]
 800841a:	4658      	mov	r0, fp
 800841c:	f000 fb48 	bl	8008ab0 <_Bfree>
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	4699      	mov	r9, r3
 8008424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008426:	1b1a      	subs	r2, r3, r4
 8008428:	d004      	beq.n	8008434 <_dtoa_r+0x78c>
 800842a:	4649      	mov	r1, r9
 800842c:	4658      	mov	r0, fp
 800842e:	f000 fcb3 	bl	8008d98 <__pow5mult>
 8008432:	4681      	mov	r9, r0
 8008434:	2101      	movs	r1, #1
 8008436:	4658      	mov	r0, fp
 8008438:	f000 fbee 	bl	8008c18 <__i2b>
 800843c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800843e:	4604      	mov	r4, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 81cf 	beq.w	80087e4 <_dtoa_r+0xb3c>
 8008446:	461a      	mov	r2, r3
 8008448:	4601      	mov	r1, r0
 800844a:	4658      	mov	r0, fp
 800844c:	f000 fca4 	bl	8008d98 <__pow5mult>
 8008450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008452:	2b01      	cmp	r3, #1
 8008454:	4604      	mov	r4, r0
 8008456:	f300 8095 	bgt.w	8008584 <_dtoa_r+0x8dc>
 800845a:	9b02      	ldr	r3, [sp, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f040 8087 	bne.w	8008570 <_dtoa_r+0x8c8>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008468:	2b00      	cmp	r3, #0
 800846a:	f040 8089 	bne.w	8008580 <_dtoa_r+0x8d8>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008474:	0d1b      	lsrs	r3, r3, #20
 8008476:	051b      	lsls	r3, r3, #20
 8008478:	b12b      	cbz	r3, 8008486 <_dtoa_r+0x7de>
 800847a:	9b08      	ldr	r3, [sp, #32]
 800847c:	3301      	adds	r3, #1
 800847e:	9308      	str	r3, [sp, #32]
 8008480:	f108 0801 	add.w	r8, r8, #1
 8008484:	2301      	movs	r3, #1
 8008486:	930a      	str	r3, [sp, #40]	@ 0x28
 8008488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 81b0 	beq.w	80087f0 <_dtoa_r+0xb48>
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008496:	6918      	ldr	r0, [r3, #16]
 8008498:	f000 fb72 	bl	8008b80 <__hi0bits>
 800849c:	f1c0 0020 	rsb	r0, r0, #32
 80084a0:	9b08      	ldr	r3, [sp, #32]
 80084a2:	4418      	add	r0, r3
 80084a4:	f010 001f 	ands.w	r0, r0, #31
 80084a8:	d077      	beq.n	800859a <_dtoa_r+0x8f2>
 80084aa:	f1c0 0320 	rsb	r3, r0, #32
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	dd6b      	ble.n	800858a <_dtoa_r+0x8e2>
 80084b2:	9b08      	ldr	r3, [sp, #32]
 80084b4:	f1c0 001c 	rsb	r0, r0, #28
 80084b8:	4403      	add	r3, r0
 80084ba:	4480      	add	r8, r0
 80084bc:	4406      	add	r6, r0
 80084be:	9308      	str	r3, [sp, #32]
 80084c0:	f1b8 0f00 	cmp.w	r8, #0
 80084c4:	dd05      	ble.n	80084d2 <_dtoa_r+0x82a>
 80084c6:	4649      	mov	r1, r9
 80084c8:	4642      	mov	r2, r8
 80084ca:	4658      	mov	r0, fp
 80084cc:	f000 fcbe 	bl	8008e4c <__lshift>
 80084d0:	4681      	mov	r9, r0
 80084d2:	9b08      	ldr	r3, [sp, #32]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dd05      	ble.n	80084e4 <_dtoa_r+0x83c>
 80084d8:	4621      	mov	r1, r4
 80084da:	461a      	mov	r2, r3
 80084dc:	4658      	mov	r0, fp
 80084de:	f000 fcb5 	bl	8008e4c <__lshift>
 80084e2:	4604      	mov	r4, r0
 80084e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d059      	beq.n	800859e <_dtoa_r+0x8f6>
 80084ea:	4621      	mov	r1, r4
 80084ec:	4648      	mov	r0, r9
 80084ee:	f000 fd19 	bl	8008f24 <__mcmp>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	da53      	bge.n	800859e <_dtoa_r+0x8f6>
 80084f6:	1e7b      	subs	r3, r7, #1
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	4649      	mov	r1, r9
 80084fc:	2300      	movs	r3, #0
 80084fe:	220a      	movs	r2, #10
 8008500:	4658      	mov	r0, fp
 8008502:	f000 faf7 	bl	8008af4 <__multadd>
 8008506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008508:	4681      	mov	r9, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8172 	beq.w	80087f4 <_dtoa_r+0xb4c>
 8008510:	2300      	movs	r3, #0
 8008512:	4629      	mov	r1, r5
 8008514:	220a      	movs	r2, #10
 8008516:	4658      	mov	r0, fp
 8008518:	f000 faec 	bl	8008af4 <__multadd>
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	4605      	mov	r5, r0
 8008522:	dc67      	bgt.n	80085f4 <_dtoa_r+0x94c>
 8008524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008526:	2b02      	cmp	r3, #2
 8008528:	dc41      	bgt.n	80085ae <_dtoa_r+0x906>
 800852a:	e063      	b.n	80085f4 <_dtoa_r+0x94c>
 800852c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800852e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008532:	e746      	b.n	80083c2 <_dtoa_r+0x71a>
 8008534:	9b07      	ldr	r3, [sp, #28]
 8008536:	1e5c      	subs	r4, r3, #1
 8008538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800853a:	42a3      	cmp	r3, r4
 800853c:	bfbf      	itttt	lt
 800853e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008540:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008542:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008544:	1ae3      	sublt	r3, r4, r3
 8008546:	bfb4      	ite	lt
 8008548:	18d2      	addlt	r2, r2, r3
 800854a:	1b1c      	subge	r4, r3, r4
 800854c:	9b07      	ldr	r3, [sp, #28]
 800854e:	bfbc      	itt	lt
 8008550:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008552:	2400      	movlt	r4, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfb5      	itete	lt
 8008558:	eba8 0603 	sublt.w	r6, r8, r3
 800855c:	9b07      	ldrge	r3, [sp, #28]
 800855e:	2300      	movlt	r3, #0
 8008560:	4646      	movge	r6, r8
 8008562:	e730      	b.n	80083c6 <_dtoa_r+0x71e>
 8008564:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008566:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008568:	4646      	mov	r6, r8
 800856a:	e735      	b.n	80083d8 <_dtoa_r+0x730>
 800856c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800856e:	e75c      	b.n	800842a <_dtoa_r+0x782>
 8008570:	2300      	movs	r3, #0
 8008572:	e788      	b.n	8008486 <_dtoa_r+0x7de>
 8008574:	3fe00000 	.word	0x3fe00000
 8008578:	40240000 	.word	0x40240000
 800857c:	40140000 	.word	0x40140000
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	e780      	b.n	8008486 <_dtoa_r+0x7de>
 8008584:	2300      	movs	r3, #0
 8008586:	930a      	str	r3, [sp, #40]	@ 0x28
 8008588:	e782      	b.n	8008490 <_dtoa_r+0x7e8>
 800858a:	d099      	beq.n	80084c0 <_dtoa_r+0x818>
 800858c:	9a08      	ldr	r2, [sp, #32]
 800858e:	331c      	adds	r3, #28
 8008590:	441a      	add	r2, r3
 8008592:	4498      	add	r8, r3
 8008594:	441e      	add	r6, r3
 8008596:	9208      	str	r2, [sp, #32]
 8008598:	e792      	b.n	80084c0 <_dtoa_r+0x818>
 800859a:	4603      	mov	r3, r0
 800859c:	e7f6      	b.n	800858c <_dtoa_r+0x8e4>
 800859e:	9b07      	ldr	r3, [sp, #28]
 80085a0:	9704      	str	r7, [sp, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dc20      	bgt.n	80085e8 <_dtoa_r+0x940>
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	dd1e      	ble.n	80085ec <_dtoa_r+0x944>
 80085ae:	9b00      	ldr	r3, [sp, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f47f aec0 	bne.w	8008336 <_dtoa_r+0x68e>
 80085b6:	4621      	mov	r1, r4
 80085b8:	2205      	movs	r2, #5
 80085ba:	4658      	mov	r0, fp
 80085bc:	f000 fa9a 	bl	8008af4 <__multadd>
 80085c0:	4601      	mov	r1, r0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4648      	mov	r0, r9
 80085c6:	f000 fcad 	bl	8008f24 <__mcmp>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f77f aeb3 	ble.w	8008336 <_dtoa_r+0x68e>
 80085d0:	4656      	mov	r6, sl
 80085d2:	2331      	movs	r3, #49	@ 0x31
 80085d4:	f806 3b01 	strb.w	r3, [r6], #1
 80085d8:	9b04      	ldr	r3, [sp, #16]
 80085da:	3301      	adds	r3, #1
 80085dc:	9304      	str	r3, [sp, #16]
 80085de:	e6ae      	b.n	800833e <_dtoa_r+0x696>
 80085e0:	9c07      	ldr	r4, [sp, #28]
 80085e2:	9704      	str	r7, [sp, #16]
 80085e4:	4625      	mov	r5, r4
 80085e6:	e7f3      	b.n	80085d0 <_dtoa_r+0x928>
 80085e8:	9b07      	ldr	r3, [sp, #28]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8104 	beq.w	80087fc <_dtoa_r+0xb54>
 80085f4:	2e00      	cmp	r6, #0
 80085f6:	dd05      	ble.n	8008604 <_dtoa_r+0x95c>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4632      	mov	r2, r6
 80085fc:	4658      	mov	r0, fp
 80085fe:	f000 fc25 	bl	8008e4c <__lshift>
 8008602:	4605      	mov	r5, r0
 8008604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008606:	2b00      	cmp	r3, #0
 8008608:	d05a      	beq.n	80086c0 <_dtoa_r+0xa18>
 800860a:	6869      	ldr	r1, [r5, #4]
 800860c:	4658      	mov	r0, fp
 800860e:	f000 fa0f 	bl	8008a30 <_Balloc>
 8008612:	4606      	mov	r6, r0
 8008614:	b928      	cbnz	r0, 8008622 <_dtoa_r+0x97a>
 8008616:	4b84      	ldr	r3, [pc, #528]	@ (8008828 <_dtoa_r+0xb80>)
 8008618:	4602      	mov	r2, r0
 800861a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800861e:	f7ff bb5a 	b.w	8007cd6 <_dtoa_r+0x2e>
 8008622:	692a      	ldr	r2, [r5, #16]
 8008624:	3202      	adds	r2, #2
 8008626:	0092      	lsls	r2, r2, #2
 8008628:	f105 010c 	add.w	r1, r5, #12
 800862c:	300c      	adds	r0, #12
 800862e:	f001 fb3d 	bl	8009cac <memcpy>
 8008632:	2201      	movs	r2, #1
 8008634:	4631      	mov	r1, r6
 8008636:	4658      	mov	r0, fp
 8008638:	f000 fc08 	bl	8008e4c <__lshift>
 800863c:	f10a 0301 	add.w	r3, sl, #1
 8008640:	9307      	str	r3, [sp, #28]
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	4453      	add	r3, sl
 8008646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008648:	9b02      	ldr	r3, [sp, #8]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	462f      	mov	r7, r5
 8008650:	930a      	str	r3, [sp, #40]	@ 0x28
 8008652:	4605      	mov	r5, r0
 8008654:	9b07      	ldr	r3, [sp, #28]
 8008656:	4621      	mov	r1, r4
 8008658:	3b01      	subs	r3, #1
 800865a:	4648      	mov	r0, r9
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	f7ff fa98 	bl	8007b92 <quorem>
 8008662:	4639      	mov	r1, r7
 8008664:	9002      	str	r0, [sp, #8]
 8008666:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800866a:	4648      	mov	r0, r9
 800866c:	f000 fc5a 	bl	8008f24 <__mcmp>
 8008670:	462a      	mov	r2, r5
 8008672:	9008      	str	r0, [sp, #32]
 8008674:	4621      	mov	r1, r4
 8008676:	4658      	mov	r0, fp
 8008678:	f000 fc70 	bl	8008f5c <__mdiff>
 800867c:	68c2      	ldr	r2, [r0, #12]
 800867e:	4606      	mov	r6, r0
 8008680:	bb02      	cbnz	r2, 80086c4 <_dtoa_r+0xa1c>
 8008682:	4601      	mov	r1, r0
 8008684:	4648      	mov	r0, r9
 8008686:	f000 fc4d 	bl	8008f24 <__mcmp>
 800868a:	4602      	mov	r2, r0
 800868c:	4631      	mov	r1, r6
 800868e:	4658      	mov	r0, fp
 8008690:	920e      	str	r2, [sp, #56]	@ 0x38
 8008692:	f000 fa0d 	bl	8008ab0 <_Bfree>
 8008696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800869a:	9e07      	ldr	r6, [sp, #28]
 800869c:	ea43 0102 	orr.w	r1, r3, r2
 80086a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086a2:	4319      	orrs	r1, r3
 80086a4:	d110      	bne.n	80086c8 <_dtoa_r+0xa20>
 80086a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086aa:	d029      	beq.n	8008700 <_dtoa_r+0xa58>
 80086ac:	9b08      	ldr	r3, [sp, #32]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dd02      	ble.n	80086b8 <_dtoa_r+0xa10>
 80086b2:	9b02      	ldr	r3, [sp, #8]
 80086b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80086b8:	9b00      	ldr	r3, [sp, #0]
 80086ba:	f883 8000 	strb.w	r8, [r3]
 80086be:	e63f      	b.n	8008340 <_dtoa_r+0x698>
 80086c0:	4628      	mov	r0, r5
 80086c2:	e7bb      	b.n	800863c <_dtoa_r+0x994>
 80086c4:	2201      	movs	r2, #1
 80086c6:	e7e1      	b.n	800868c <_dtoa_r+0x9e4>
 80086c8:	9b08      	ldr	r3, [sp, #32]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	db04      	blt.n	80086d8 <_dtoa_r+0xa30>
 80086ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086d0:	430b      	orrs	r3, r1
 80086d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086d4:	430b      	orrs	r3, r1
 80086d6:	d120      	bne.n	800871a <_dtoa_r+0xa72>
 80086d8:	2a00      	cmp	r2, #0
 80086da:	dded      	ble.n	80086b8 <_dtoa_r+0xa10>
 80086dc:	4649      	mov	r1, r9
 80086de:	2201      	movs	r2, #1
 80086e0:	4658      	mov	r0, fp
 80086e2:	f000 fbb3 	bl	8008e4c <__lshift>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4681      	mov	r9, r0
 80086ea:	f000 fc1b 	bl	8008f24 <__mcmp>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	dc03      	bgt.n	80086fa <_dtoa_r+0xa52>
 80086f2:	d1e1      	bne.n	80086b8 <_dtoa_r+0xa10>
 80086f4:	f018 0f01 	tst.w	r8, #1
 80086f8:	d0de      	beq.n	80086b8 <_dtoa_r+0xa10>
 80086fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086fe:	d1d8      	bne.n	80086b2 <_dtoa_r+0xa0a>
 8008700:	9a00      	ldr	r2, [sp, #0]
 8008702:	2339      	movs	r3, #57	@ 0x39
 8008704:	7013      	strb	r3, [r2, #0]
 8008706:	4633      	mov	r3, r6
 8008708:	461e      	mov	r6, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008710:	2a39      	cmp	r2, #57	@ 0x39
 8008712:	d052      	beq.n	80087ba <_dtoa_r+0xb12>
 8008714:	3201      	adds	r2, #1
 8008716:	701a      	strb	r2, [r3, #0]
 8008718:	e612      	b.n	8008340 <_dtoa_r+0x698>
 800871a:	2a00      	cmp	r2, #0
 800871c:	dd07      	ble.n	800872e <_dtoa_r+0xa86>
 800871e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008722:	d0ed      	beq.n	8008700 <_dtoa_r+0xa58>
 8008724:	9a00      	ldr	r2, [sp, #0]
 8008726:	f108 0301 	add.w	r3, r8, #1
 800872a:	7013      	strb	r3, [r2, #0]
 800872c:	e608      	b.n	8008340 <_dtoa_r+0x698>
 800872e:	9b07      	ldr	r3, [sp, #28]
 8008730:	9a07      	ldr	r2, [sp, #28]
 8008732:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008738:	4293      	cmp	r3, r2
 800873a:	d028      	beq.n	800878e <_dtoa_r+0xae6>
 800873c:	4649      	mov	r1, r9
 800873e:	2300      	movs	r3, #0
 8008740:	220a      	movs	r2, #10
 8008742:	4658      	mov	r0, fp
 8008744:	f000 f9d6 	bl	8008af4 <__multadd>
 8008748:	42af      	cmp	r7, r5
 800874a:	4681      	mov	r9, r0
 800874c:	f04f 0300 	mov.w	r3, #0
 8008750:	f04f 020a 	mov.w	r2, #10
 8008754:	4639      	mov	r1, r7
 8008756:	4658      	mov	r0, fp
 8008758:	d107      	bne.n	800876a <_dtoa_r+0xac2>
 800875a:	f000 f9cb 	bl	8008af4 <__multadd>
 800875e:	4607      	mov	r7, r0
 8008760:	4605      	mov	r5, r0
 8008762:	9b07      	ldr	r3, [sp, #28]
 8008764:	3301      	adds	r3, #1
 8008766:	9307      	str	r3, [sp, #28]
 8008768:	e774      	b.n	8008654 <_dtoa_r+0x9ac>
 800876a:	f000 f9c3 	bl	8008af4 <__multadd>
 800876e:	4629      	mov	r1, r5
 8008770:	4607      	mov	r7, r0
 8008772:	2300      	movs	r3, #0
 8008774:	220a      	movs	r2, #10
 8008776:	4658      	mov	r0, fp
 8008778:	f000 f9bc 	bl	8008af4 <__multadd>
 800877c:	4605      	mov	r5, r0
 800877e:	e7f0      	b.n	8008762 <_dtoa_r+0xaba>
 8008780:	9b00      	ldr	r3, [sp, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfcc      	ite	gt
 8008786:	461e      	movgt	r6, r3
 8008788:	2601      	movle	r6, #1
 800878a:	4456      	add	r6, sl
 800878c:	2700      	movs	r7, #0
 800878e:	4649      	mov	r1, r9
 8008790:	2201      	movs	r2, #1
 8008792:	4658      	mov	r0, fp
 8008794:	f000 fb5a 	bl	8008e4c <__lshift>
 8008798:	4621      	mov	r1, r4
 800879a:	4681      	mov	r9, r0
 800879c:	f000 fbc2 	bl	8008f24 <__mcmp>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	dcb0      	bgt.n	8008706 <_dtoa_r+0xa5e>
 80087a4:	d102      	bne.n	80087ac <_dtoa_r+0xb04>
 80087a6:	f018 0f01 	tst.w	r8, #1
 80087aa:	d1ac      	bne.n	8008706 <_dtoa_r+0xa5e>
 80087ac:	4633      	mov	r3, r6
 80087ae:	461e      	mov	r6, r3
 80087b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087b4:	2a30      	cmp	r2, #48	@ 0x30
 80087b6:	d0fa      	beq.n	80087ae <_dtoa_r+0xb06>
 80087b8:	e5c2      	b.n	8008340 <_dtoa_r+0x698>
 80087ba:	459a      	cmp	sl, r3
 80087bc:	d1a4      	bne.n	8008708 <_dtoa_r+0xa60>
 80087be:	9b04      	ldr	r3, [sp, #16]
 80087c0:	3301      	adds	r3, #1
 80087c2:	9304      	str	r3, [sp, #16]
 80087c4:	2331      	movs	r3, #49	@ 0x31
 80087c6:	f88a 3000 	strb.w	r3, [sl]
 80087ca:	e5b9      	b.n	8008340 <_dtoa_r+0x698>
 80087cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800882c <_dtoa_r+0xb84>
 80087d2:	b11b      	cbz	r3, 80087dc <_dtoa_r+0xb34>
 80087d4:	f10a 0308 	add.w	r3, sl, #8
 80087d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	4650      	mov	r0, sl
 80087de:	b019      	add	sp, #100	@ 0x64
 80087e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	f77f ae37 	ble.w	800845a <_dtoa_r+0x7b2>
 80087ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f0:	2001      	movs	r0, #1
 80087f2:	e655      	b.n	80084a0 <_dtoa_r+0x7f8>
 80087f4:	9b00      	ldr	r3, [sp, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f77f aed6 	ble.w	80085a8 <_dtoa_r+0x900>
 80087fc:	4656      	mov	r6, sl
 80087fe:	4621      	mov	r1, r4
 8008800:	4648      	mov	r0, r9
 8008802:	f7ff f9c6 	bl	8007b92 <quorem>
 8008806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800880a:	f806 8b01 	strb.w	r8, [r6], #1
 800880e:	9b00      	ldr	r3, [sp, #0]
 8008810:	eba6 020a 	sub.w	r2, r6, sl
 8008814:	4293      	cmp	r3, r2
 8008816:	ddb3      	ble.n	8008780 <_dtoa_r+0xad8>
 8008818:	4649      	mov	r1, r9
 800881a:	2300      	movs	r3, #0
 800881c:	220a      	movs	r2, #10
 800881e:	4658      	mov	r0, fp
 8008820:	f000 f968 	bl	8008af4 <__multadd>
 8008824:	4681      	mov	r9, r0
 8008826:	e7ea      	b.n	80087fe <_dtoa_r+0xb56>
 8008828:	0800a8d3 	.word	0x0800a8d3
 800882c:	0800a857 	.word	0x0800a857

08008830 <_free_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4605      	mov	r5, r0
 8008834:	2900      	cmp	r1, #0
 8008836:	d041      	beq.n	80088bc <_free_r+0x8c>
 8008838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800883c:	1f0c      	subs	r4, r1, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfb8      	it	lt
 8008842:	18e4      	addlt	r4, r4, r3
 8008844:	f000 f8e8 	bl	8008a18 <__malloc_lock>
 8008848:	4a1d      	ldr	r2, [pc, #116]	@ (80088c0 <_free_r+0x90>)
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	b933      	cbnz	r3, 800885c <_free_r+0x2c>
 800884e:	6063      	str	r3, [r4, #4]
 8008850:	6014      	str	r4, [r2, #0]
 8008852:	4628      	mov	r0, r5
 8008854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008858:	f000 b8e4 	b.w	8008a24 <__malloc_unlock>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d908      	bls.n	8008872 <_free_r+0x42>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	1821      	adds	r1, r4, r0
 8008864:	428b      	cmp	r3, r1
 8008866:	bf01      	itttt	eq
 8008868:	6819      	ldreq	r1, [r3, #0]
 800886a:	685b      	ldreq	r3, [r3, #4]
 800886c:	1809      	addeq	r1, r1, r0
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	e7ed      	b.n	800884e <_free_r+0x1e>
 8008872:	461a      	mov	r2, r3
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	b10b      	cbz	r3, 800887c <_free_r+0x4c>
 8008878:	42a3      	cmp	r3, r4
 800887a:	d9fa      	bls.n	8008872 <_free_r+0x42>
 800887c:	6811      	ldr	r1, [r2, #0]
 800887e:	1850      	adds	r0, r2, r1
 8008880:	42a0      	cmp	r0, r4
 8008882:	d10b      	bne.n	800889c <_free_r+0x6c>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	4401      	add	r1, r0
 8008888:	1850      	adds	r0, r2, r1
 800888a:	4283      	cmp	r3, r0
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	d1e0      	bne.n	8008852 <_free_r+0x22>
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	6053      	str	r3, [r2, #4]
 8008896:	4408      	add	r0, r1
 8008898:	6010      	str	r0, [r2, #0]
 800889a:	e7da      	b.n	8008852 <_free_r+0x22>
 800889c:	d902      	bls.n	80088a4 <_free_r+0x74>
 800889e:	230c      	movs	r3, #12
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	e7d6      	b.n	8008852 <_free_r+0x22>
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	1821      	adds	r1, r4, r0
 80088a8:	428b      	cmp	r3, r1
 80088aa:	bf04      	itt	eq
 80088ac:	6819      	ldreq	r1, [r3, #0]
 80088ae:	685b      	ldreq	r3, [r3, #4]
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	bf04      	itt	eq
 80088b4:	1809      	addeq	r1, r1, r0
 80088b6:	6021      	streq	r1, [r4, #0]
 80088b8:	6054      	str	r4, [r2, #4]
 80088ba:	e7ca      	b.n	8008852 <_free_r+0x22>
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	20000a0c 	.word	0x20000a0c

080088c4 <malloc>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	@ (80088d0 <malloc+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f000 b825 	b.w	8008918 <_malloc_r>
 80088ce:	bf00      	nop
 80088d0:	20000048 	.word	0x20000048

080088d4 <sbrk_aligned>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008914 <sbrk_aligned+0x40>)
 80088d8:	460c      	mov	r4, r1
 80088da:	6831      	ldr	r1, [r6, #0]
 80088dc:	4605      	mov	r5, r0
 80088de:	b911      	cbnz	r1, 80088e6 <sbrk_aligned+0x12>
 80088e0:	f001 f9d4 	bl	8009c8c <_sbrk_r>
 80088e4:	6030      	str	r0, [r6, #0]
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	f001 f9cf 	bl	8009c8c <_sbrk_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	d103      	bne.n	80088fa <sbrk_aligned+0x26>
 80088f2:	f04f 34ff 	mov.w	r4, #4294967295
 80088f6:	4620      	mov	r0, r4
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	1cc4      	adds	r4, r0, #3
 80088fc:	f024 0403 	bic.w	r4, r4, #3
 8008900:	42a0      	cmp	r0, r4
 8008902:	d0f8      	beq.n	80088f6 <sbrk_aligned+0x22>
 8008904:	1a21      	subs	r1, r4, r0
 8008906:	4628      	mov	r0, r5
 8008908:	f001 f9c0 	bl	8009c8c <_sbrk_r>
 800890c:	3001      	adds	r0, #1
 800890e:	d1f2      	bne.n	80088f6 <sbrk_aligned+0x22>
 8008910:	e7ef      	b.n	80088f2 <sbrk_aligned+0x1e>
 8008912:	bf00      	nop
 8008914:	20000a08 	.word	0x20000a08

08008918 <_malloc_r>:
 8008918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800891c:	1ccd      	adds	r5, r1, #3
 800891e:	f025 0503 	bic.w	r5, r5, #3
 8008922:	3508      	adds	r5, #8
 8008924:	2d0c      	cmp	r5, #12
 8008926:	bf38      	it	cc
 8008928:	250c      	movcc	r5, #12
 800892a:	2d00      	cmp	r5, #0
 800892c:	4606      	mov	r6, r0
 800892e:	db01      	blt.n	8008934 <_malloc_r+0x1c>
 8008930:	42a9      	cmp	r1, r5
 8008932:	d904      	bls.n	800893e <_malloc_r+0x26>
 8008934:	230c      	movs	r3, #12
 8008936:	6033      	str	r3, [r6, #0]
 8008938:	2000      	movs	r0, #0
 800893a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a14 <_malloc_r+0xfc>
 8008942:	f000 f869 	bl	8008a18 <__malloc_lock>
 8008946:	f8d8 3000 	ldr.w	r3, [r8]
 800894a:	461c      	mov	r4, r3
 800894c:	bb44      	cbnz	r4, 80089a0 <_malloc_r+0x88>
 800894e:	4629      	mov	r1, r5
 8008950:	4630      	mov	r0, r6
 8008952:	f7ff ffbf 	bl	80088d4 <sbrk_aligned>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	4604      	mov	r4, r0
 800895a:	d158      	bne.n	8008a0e <_malloc_r+0xf6>
 800895c:	f8d8 4000 	ldr.w	r4, [r8]
 8008960:	4627      	mov	r7, r4
 8008962:	2f00      	cmp	r7, #0
 8008964:	d143      	bne.n	80089ee <_malloc_r+0xd6>
 8008966:	2c00      	cmp	r4, #0
 8008968:	d04b      	beq.n	8008a02 <_malloc_r+0xea>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	4639      	mov	r1, r7
 800896e:	4630      	mov	r0, r6
 8008970:	eb04 0903 	add.w	r9, r4, r3
 8008974:	f001 f98a 	bl	8009c8c <_sbrk_r>
 8008978:	4581      	cmp	r9, r0
 800897a:	d142      	bne.n	8008a02 <_malloc_r+0xea>
 800897c:	6821      	ldr	r1, [r4, #0]
 800897e:	1a6d      	subs	r5, r5, r1
 8008980:	4629      	mov	r1, r5
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff ffa6 	bl	80088d4 <sbrk_aligned>
 8008988:	3001      	adds	r0, #1
 800898a:	d03a      	beq.n	8008a02 <_malloc_r+0xea>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	442b      	add	r3, r5
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	f8d8 3000 	ldr.w	r3, [r8]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	bb62      	cbnz	r2, 80089f4 <_malloc_r+0xdc>
 800899a:	f8c8 7000 	str.w	r7, [r8]
 800899e:	e00f      	b.n	80089c0 <_malloc_r+0xa8>
 80089a0:	6822      	ldr	r2, [r4, #0]
 80089a2:	1b52      	subs	r2, r2, r5
 80089a4:	d420      	bmi.n	80089e8 <_malloc_r+0xd0>
 80089a6:	2a0b      	cmp	r2, #11
 80089a8:	d917      	bls.n	80089da <_malloc_r+0xc2>
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	6025      	str	r5, [r4, #0]
 80089b0:	bf18      	it	ne
 80089b2:	6059      	strne	r1, [r3, #4]
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	bf08      	it	eq
 80089b8:	f8c8 1000 	streq.w	r1, [r8]
 80089bc:	5162      	str	r2, [r4, r5]
 80089be:	604b      	str	r3, [r1, #4]
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 f82f 	bl	8008a24 <__malloc_unlock>
 80089c6:	f104 000b 	add.w	r0, r4, #11
 80089ca:	1d23      	adds	r3, r4, #4
 80089cc:	f020 0007 	bic.w	r0, r0, #7
 80089d0:	1ac2      	subs	r2, r0, r3
 80089d2:	bf1c      	itt	ne
 80089d4:	1a1b      	subne	r3, r3, r0
 80089d6:	50a3      	strne	r3, [r4, r2]
 80089d8:	e7af      	b.n	800893a <_malloc_r+0x22>
 80089da:	6862      	ldr	r2, [r4, #4]
 80089dc:	42a3      	cmp	r3, r4
 80089de:	bf0c      	ite	eq
 80089e0:	f8c8 2000 	streq.w	r2, [r8]
 80089e4:	605a      	strne	r2, [r3, #4]
 80089e6:	e7eb      	b.n	80089c0 <_malloc_r+0xa8>
 80089e8:	4623      	mov	r3, r4
 80089ea:	6864      	ldr	r4, [r4, #4]
 80089ec:	e7ae      	b.n	800894c <_malloc_r+0x34>
 80089ee:	463c      	mov	r4, r7
 80089f0:	687f      	ldr	r7, [r7, #4]
 80089f2:	e7b6      	b.n	8008962 <_malloc_r+0x4a>
 80089f4:	461a      	mov	r2, r3
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d1fb      	bne.n	80089f4 <_malloc_r+0xdc>
 80089fc:	2300      	movs	r3, #0
 80089fe:	6053      	str	r3, [r2, #4]
 8008a00:	e7de      	b.n	80089c0 <_malloc_r+0xa8>
 8008a02:	230c      	movs	r3, #12
 8008a04:	6033      	str	r3, [r6, #0]
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f80c 	bl	8008a24 <__malloc_unlock>
 8008a0c:	e794      	b.n	8008938 <_malloc_r+0x20>
 8008a0e:	6005      	str	r5, [r0, #0]
 8008a10:	e7d6      	b.n	80089c0 <_malloc_r+0xa8>
 8008a12:	bf00      	nop
 8008a14:	20000a0c 	.word	0x20000a0c

08008a18 <__malloc_lock>:
 8008a18:	4801      	ldr	r0, [pc, #4]	@ (8008a20 <__malloc_lock+0x8>)
 8008a1a:	f7ff b8b0 	b.w	8007b7e <__retarget_lock_acquire_recursive>
 8008a1e:	bf00      	nop
 8008a20:	20000a04 	.word	0x20000a04

08008a24 <__malloc_unlock>:
 8008a24:	4801      	ldr	r0, [pc, #4]	@ (8008a2c <__malloc_unlock+0x8>)
 8008a26:	f7ff b8ab 	b.w	8007b80 <__retarget_lock_release_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	20000a04 	.word	0x20000a04

08008a30 <_Balloc>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	69c6      	ldr	r6, [r0, #28]
 8008a34:	4604      	mov	r4, r0
 8008a36:	460d      	mov	r5, r1
 8008a38:	b976      	cbnz	r6, 8008a58 <_Balloc+0x28>
 8008a3a:	2010      	movs	r0, #16
 8008a3c:	f7ff ff42 	bl	80088c4 <malloc>
 8008a40:	4602      	mov	r2, r0
 8008a42:	61e0      	str	r0, [r4, #28]
 8008a44:	b920      	cbnz	r0, 8008a50 <_Balloc+0x20>
 8008a46:	4b18      	ldr	r3, [pc, #96]	@ (8008aa8 <_Balloc+0x78>)
 8008a48:	4818      	ldr	r0, [pc, #96]	@ (8008aac <_Balloc+0x7c>)
 8008a4a:	216b      	movs	r1, #107	@ 0x6b
 8008a4c:	f001 f93c 	bl	8009cc8 <__assert_func>
 8008a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a54:	6006      	str	r6, [r0, #0]
 8008a56:	60c6      	str	r6, [r0, #12]
 8008a58:	69e6      	ldr	r6, [r4, #28]
 8008a5a:	68f3      	ldr	r3, [r6, #12]
 8008a5c:	b183      	cbz	r3, 8008a80 <_Balloc+0x50>
 8008a5e:	69e3      	ldr	r3, [r4, #28]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a66:	b9b8      	cbnz	r0, 8008a98 <_Balloc+0x68>
 8008a68:	2101      	movs	r1, #1
 8008a6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a6e:	1d72      	adds	r2, r6, #5
 8008a70:	0092      	lsls	r2, r2, #2
 8008a72:	4620      	mov	r0, r4
 8008a74:	f001 f946 	bl	8009d04 <_calloc_r>
 8008a78:	b160      	cbz	r0, 8008a94 <_Balloc+0x64>
 8008a7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a7e:	e00e      	b.n	8008a9e <_Balloc+0x6e>
 8008a80:	2221      	movs	r2, #33	@ 0x21
 8008a82:	2104      	movs	r1, #4
 8008a84:	4620      	mov	r0, r4
 8008a86:	f001 f93d 	bl	8009d04 <_calloc_r>
 8008a8a:	69e3      	ldr	r3, [r4, #28]
 8008a8c:	60f0      	str	r0, [r6, #12]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e4      	bne.n	8008a5e <_Balloc+0x2e>
 8008a94:	2000      	movs	r0, #0
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	6802      	ldr	r2, [r0, #0]
 8008a9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008aa4:	e7f7      	b.n	8008a96 <_Balloc+0x66>
 8008aa6:	bf00      	nop
 8008aa8:	0800a864 	.word	0x0800a864
 8008aac:	0800a8e4 	.word	0x0800a8e4

08008ab0 <_Bfree>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	69c6      	ldr	r6, [r0, #28]
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	b976      	cbnz	r6, 8008ad8 <_Bfree+0x28>
 8008aba:	2010      	movs	r0, #16
 8008abc:	f7ff ff02 	bl	80088c4 <malloc>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	61e8      	str	r0, [r5, #28]
 8008ac4:	b920      	cbnz	r0, 8008ad0 <_Bfree+0x20>
 8008ac6:	4b09      	ldr	r3, [pc, #36]	@ (8008aec <_Bfree+0x3c>)
 8008ac8:	4809      	ldr	r0, [pc, #36]	@ (8008af0 <_Bfree+0x40>)
 8008aca:	218f      	movs	r1, #143	@ 0x8f
 8008acc:	f001 f8fc 	bl	8009cc8 <__assert_func>
 8008ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ad4:	6006      	str	r6, [r0, #0]
 8008ad6:	60c6      	str	r6, [r0, #12]
 8008ad8:	b13c      	cbz	r4, 8008aea <_Bfree+0x3a>
 8008ada:	69eb      	ldr	r3, [r5, #28]
 8008adc:	6862      	ldr	r2, [r4, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ae4:	6021      	str	r1, [r4, #0]
 8008ae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	0800a864 	.word	0x0800a864
 8008af0:	0800a8e4 	.word	0x0800a8e4

08008af4 <__multadd>:
 8008af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af8:	690d      	ldr	r5, [r1, #16]
 8008afa:	4607      	mov	r7, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	461e      	mov	r6, r3
 8008b00:	f101 0c14 	add.w	ip, r1, #20
 8008b04:	2000      	movs	r0, #0
 8008b06:	f8dc 3000 	ldr.w	r3, [ip]
 8008b0a:	b299      	uxth	r1, r3
 8008b0c:	fb02 6101 	mla	r1, r2, r1, r6
 8008b10:	0c1e      	lsrs	r6, r3, #16
 8008b12:	0c0b      	lsrs	r3, r1, #16
 8008b14:	fb02 3306 	mla	r3, r2, r6, r3
 8008b18:	b289      	uxth	r1, r1
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b20:	4285      	cmp	r5, r0
 8008b22:	f84c 1b04 	str.w	r1, [ip], #4
 8008b26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b2a:	dcec      	bgt.n	8008b06 <__multadd+0x12>
 8008b2c:	b30e      	cbz	r6, 8008b72 <__multadd+0x7e>
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	42ab      	cmp	r3, r5
 8008b32:	dc19      	bgt.n	8008b68 <__multadd+0x74>
 8008b34:	6861      	ldr	r1, [r4, #4]
 8008b36:	4638      	mov	r0, r7
 8008b38:	3101      	adds	r1, #1
 8008b3a:	f7ff ff79 	bl	8008a30 <_Balloc>
 8008b3e:	4680      	mov	r8, r0
 8008b40:	b928      	cbnz	r0, 8008b4e <__multadd+0x5a>
 8008b42:	4602      	mov	r2, r0
 8008b44:	4b0c      	ldr	r3, [pc, #48]	@ (8008b78 <__multadd+0x84>)
 8008b46:	480d      	ldr	r0, [pc, #52]	@ (8008b7c <__multadd+0x88>)
 8008b48:	21ba      	movs	r1, #186	@ 0xba
 8008b4a:	f001 f8bd 	bl	8009cc8 <__assert_func>
 8008b4e:	6922      	ldr	r2, [r4, #16]
 8008b50:	3202      	adds	r2, #2
 8008b52:	f104 010c 	add.w	r1, r4, #12
 8008b56:	0092      	lsls	r2, r2, #2
 8008b58:	300c      	adds	r0, #12
 8008b5a:	f001 f8a7 	bl	8009cac <memcpy>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7ff ffa5 	bl	8008ab0 <_Bfree>
 8008b66:	4644      	mov	r4, r8
 8008b68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	615e      	str	r6, [r3, #20]
 8008b70:	6125      	str	r5, [r4, #16]
 8008b72:	4620      	mov	r0, r4
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b78:	0800a8d3 	.word	0x0800a8d3
 8008b7c:	0800a8e4 	.word	0x0800a8e4

08008b80 <__hi0bits>:
 8008b80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b84:	4603      	mov	r3, r0
 8008b86:	bf36      	itet	cc
 8008b88:	0403      	lslcc	r3, r0, #16
 8008b8a:	2000      	movcs	r0, #0
 8008b8c:	2010      	movcc	r0, #16
 8008b8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b92:	bf3c      	itt	cc
 8008b94:	021b      	lslcc	r3, r3, #8
 8008b96:	3008      	addcc	r0, #8
 8008b98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b9c:	bf3c      	itt	cc
 8008b9e:	011b      	lslcc	r3, r3, #4
 8008ba0:	3004      	addcc	r0, #4
 8008ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ba6:	bf3c      	itt	cc
 8008ba8:	009b      	lslcc	r3, r3, #2
 8008baa:	3002      	addcc	r0, #2
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	db05      	blt.n	8008bbc <__hi0bits+0x3c>
 8008bb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008bb4:	f100 0001 	add.w	r0, r0, #1
 8008bb8:	bf08      	it	eq
 8008bba:	2020      	moveq	r0, #32
 8008bbc:	4770      	bx	lr

08008bbe <__lo0bits>:
 8008bbe:	6803      	ldr	r3, [r0, #0]
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	f013 0007 	ands.w	r0, r3, #7
 8008bc6:	d00b      	beq.n	8008be0 <__lo0bits+0x22>
 8008bc8:	07d9      	lsls	r1, r3, #31
 8008bca:	d421      	bmi.n	8008c10 <__lo0bits+0x52>
 8008bcc:	0798      	lsls	r0, r3, #30
 8008bce:	bf49      	itett	mi
 8008bd0:	085b      	lsrmi	r3, r3, #1
 8008bd2:	089b      	lsrpl	r3, r3, #2
 8008bd4:	2001      	movmi	r0, #1
 8008bd6:	6013      	strmi	r3, [r2, #0]
 8008bd8:	bf5c      	itt	pl
 8008bda:	6013      	strpl	r3, [r2, #0]
 8008bdc:	2002      	movpl	r0, #2
 8008bde:	4770      	bx	lr
 8008be0:	b299      	uxth	r1, r3
 8008be2:	b909      	cbnz	r1, 8008be8 <__lo0bits+0x2a>
 8008be4:	0c1b      	lsrs	r3, r3, #16
 8008be6:	2010      	movs	r0, #16
 8008be8:	b2d9      	uxtb	r1, r3
 8008bea:	b909      	cbnz	r1, 8008bf0 <__lo0bits+0x32>
 8008bec:	3008      	adds	r0, #8
 8008bee:	0a1b      	lsrs	r3, r3, #8
 8008bf0:	0719      	lsls	r1, r3, #28
 8008bf2:	bf04      	itt	eq
 8008bf4:	091b      	lsreq	r3, r3, #4
 8008bf6:	3004      	addeq	r0, #4
 8008bf8:	0799      	lsls	r1, r3, #30
 8008bfa:	bf04      	itt	eq
 8008bfc:	089b      	lsreq	r3, r3, #2
 8008bfe:	3002      	addeq	r0, #2
 8008c00:	07d9      	lsls	r1, r3, #31
 8008c02:	d403      	bmi.n	8008c0c <__lo0bits+0x4e>
 8008c04:	085b      	lsrs	r3, r3, #1
 8008c06:	f100 0001 	add.w	r0, r0, #1
 8008c0a:	d003      	beq.n	8008c14 <__lo0bits+0x56>
 8008c0c:	6013      	str	r3, [r2, #0]
 8008c0e:	4770      	bx	lr
 8008c10:	2000      	movs	r0, #0
 8008c12:	4770      	bx	lr
 8008c14:	2020      	movs	r0, #32
 8008c16:	4770      	bx	lr

08008c18 <__i2b>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	f7ff ff07 	bl	8008a30 <_Balloc>
 8008c22:	4602      	mov	r2, r0
 8008c24:	b928      	cbnz	r0, 8008c32 <__i2b+0x1a>
 8008c26:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <__i2b+0x24>)
 8008c28:	4805      	ldr	r0, [pc, #20]	@ (8008c40 <__i2b+0x28>)
 8008c2a:	f240 1145 	movw	r1, #325	@ 0x145
 8008c2e:	f001 f84b 	bl	8009cc8 <__assert_func>
 8008c32:	2301      	movs	r3, #1
 8008c34:	6144      	str	r4, [r0, #20]
 8008c36:	6103      	str	r3, [r0, #16]
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	bf00      	nop
 8008c3c:	0800a8d3 	.word	0x0800a8d3
 8008c40:	0800a8e4 	.word	0x0800a8e4

08008c44 <__multiply>:
 8008c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c48:	4614      	mov	r4, r2
 8008c4a:	690a      	ldr	r2, [r1, #16]
 8008c4c:	6923      	ldr	r3, [r4, #16]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	bfa8      	it	ge
 8008c52:	4623      	movge	r3, r4
 8008c54:	460f      	mov	r7, r1
 8008c56:	bfa4      	itt	ge
 8008c58:	460c      	movge	r4, r1
 8008c5a:	461f      	movge	r7, r3
 8008c5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008c60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008c64:	68a3      	ldr	r3, [r4, #8]
 8008c66:	6861      	ldr	r1, [r4, #4]
 8008c68:	eb0a 0609 	add.w	r6, sl, r9
 8008c6c:	42b3      	cmp	r3, r6
 8008c6e:	b085      	sub	sp, #20
 8008c70:	bfb8      	it	lt
 8008c72:	3101      	addlt	r1, #1
 8008c74:	f7ff fedc 	bl	8008a30 <_Balloc>
 8008c78:	b930      	cbnz	r0, 8008c88 <__multiply+0x44>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	4b44      	ldr	r3, [pc, #272]	@ (8008d90 <__multiply+0x14c>)
 8008c7e:	4845      	ldr	r0, [pc, #276]	@ (8008d94 <__multiply+0x150>)
 8008c80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c84:	f001 f820 	bl	8009cc8 <__assert_func>
 8008c88:	f100 0514 	add.w	r5, r0, #20
 8008c8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c90:	462b      	mov	r3, r5
 8008c92:	2200      	movs	r2, #0
 8008c94:	4543      	cmp	r3, r8
 8008c96:	d321      	bcc.n	8008cdc <__multiply+0x98>
 8008c98:	f107 0114 	add.w	r1, r7, #20
 8008c9c:	f104 0214 	add.w	r2, r4, #20
 8008ca0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ca4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ca8:	9302      	str	r3, [sp, #8]
 8008caa:	1b13      	subs	r3, r2, r4
 8008cac:	3b15      	subs	r3, #21
 8008cae:	f023 0303 	bic.w	r3, r3, #3
 8008cb2:	3304      	adds	r3, #4
 8008cb4:	f104 0715 	add.w	r7, r4, #21
 8008cb8:	42ba      	cmp	r2, r7
 8008cba:	bf38      	it	cc
 8008cbc:	2304      	movcc	r3, #4
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	9b02      	ldr	r3, [sp, #8]
 8008cc2:	9103      	str	r1, [sp, #12]
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	d80c      	bhi.n	8008ce2 <__multiply+0x9e>
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	dd03      	ble.n	8008cd4 <__multiply+0x90>
 8008ccc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d05b      	beq.n	8008d8c <__multiply+0x148>
 8008cd4:	6106      	str	r6, [r0, #16]
 8008cd6:	b005      	add	sp, #20
 8008cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cdc:	f843 2b04 	str.w	r2, [r3], #4
 8008ce0:	e7d8      	b.n	8008c94 <__multiply+0x50>
 8008ce2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ce6:	f1ba 0f00 	cmp.w	sl, #0
 8008cea:	d024      	beq.n	8008d36 <__multiply+0xf2>
 8008cec:	f104 0e14 	add.w	lr, r4, #20
 8008cf0:	46a9      	mov	r9, r5
 8008cf2:	f04f 0c00 	mov.w	ip, #0
 8008cf6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cfa:	f8d9 3000 	ldr.w	r3, [r9]
 8008cfe:	fa1f fb87 	uxth.w	fp, r7
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008d0c:	f8d9 7000 	ldr.w	r7, [r9]
 8008d10:	4463      	add	r3, ip
 8008d12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d16:	fb0a c70b 	mla	r7, sl, fp, ip
 8008d1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d24:	4572      	cmp	r2, lr
 8008d26:	f849 3b04 	str.w	r3, [r9], #4
 8008d2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008d2e:	d8e2      	bhi.n	8008cf6 <__multiply+0xb2>
 8008d30:	9b01      	ldr	r3, [sp, #4]
 8008d32:	f845 c003 	str.w	ip, [r5, r3]
 8008d36:	9b03      	ldr	r3, [sp, #12]
 8008d38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008d3c:	3104      	adds	r1, #4
 8008d3e:	f1b9 0f00 	cmp.w	r9, #0
 8008d42:	d021      	beq.n	8008d88 <__multiply+0x144>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	f104 0c14 	add.w	ip, r4, #20
 8008d4a:	46ae      	mov	lr, r5
 8008d4c:	f04f 0a00 	mov.w	sl, #0
 8008d50:	f8bc b000 	ldrh.w	fp, [ip]
 8008d54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008d58:	fb09 770b 	mla	r7, r9, fp, r7
 8008d5c:	4457      	add	r7, sl
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008d64:	f84e 3b04 	str.w	r3, [lr], #4
 8008d68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d70:	f8be 3000 	ldrh.w	r3, [lr]
 8008d74:	fb09 330a 	mla	r3, r9, sl, r3
 8008d78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d7c:	4562      	cmp	r2, ip
 8008d7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d82:	d8e5      	bhi.n	8008d50 <__multiply+0x10c>
 8008d84:	9f01      	ldr	r7, [sp, #4]
 8008d86:	51eb      	str	r3, [r5, r7]
 8008d88:	3504      	adds	r5, #4
 8008d8a:	e799      	b.n	8008cc0 <__multiply+0x7c>
 8008d8c:	3e01      	subs	r6, #1
 8008d8e:	e79b      	b.n	8008cc8 <__multiply+0x84>
 8008d90:	0800a8d3 	.word	0x0800a8d3
 8008d94:	0800a8e4 	.word	0x0800a8e4

08008d98 <__pow5mult>:
 8008d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d9c:	4615      	mov	r5, r2
 8008d9e:	f012 0203 	ands.w	r2, r2, #3
 8008da2:	4607      	mov	r7, r0
 8008da4:	460e      	mov	r6, r1
 8008da6:	d007      	beq.n	8008db8 <__pow5mult+0x20>
 8008da8:	4c25      	ldr	r4, [pc, #148]	@ (8008e40 <__pow5mult+0xa8>)
 8008daa:	3a01      	subs	r2, #1
 8008dac:	2300      	movs	r3, #0
 8008dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008db2:	f7ff fe9f 	bl	8008af4 <__multadd>
 8008db6:	4606      	mov	r6, r0
 8008db8:	10ad      	asrs	r5, r5, #2
 8008dba:	d03d      	beq.n	8008e38 <__pow5mult+0xa0>
 8008dbc:	69fc      	ldr	r4, [r7, #28]
 8008dbe:	b97c      	cbnz	r4, 8008de0 <__pow5mult+0x48>
 8008dc0:	2010      	movs	r0, #16
 8008dc2:	f7ff fd7f 	bl	80088c4 <malloc>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	61f8      	str	r0, [r7, #28]
 8008dca:	b928      	cbnz	r0, 8008dd8 <__pow5mult+0x40>
 8008dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8008e44 <__pow5mult+0xac>)
 8008dce:	481e      	ldr	r0, [pc, #120]	@ (8008e48 <__pow5mult+0xb0>)
 8008dd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008dd4:	f000 ff78 	bl	8009cc8 <__assert_func>
 8008dd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ddc:	6004      	str	r4, [r0, #0]
 8008dde:	60c4      	str	r4, [r0, #12]
 8008de0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008de4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008de8:	b94c      	cbnz	r4, 8008dfe <__pow5mult+0x66>
 8008dea:	f240 2171 	movw	r1, #625	@ 0x271
 8008dee:	4638      	mov	r0, r7
 8008df0:	f7ff ff12 	bl	8008c18 <__i2b>
 8008df4:	2300      	movs	r3, #0
 8008df6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	6003      	str	r3, [r0, #0]
 8008dfe:	f04f 0900 	mov.w	r9, #0
 8008e02:	07eb      	lsls	r3, r5, #31
 8008e04:	d50a      	bpl.n	8008e1c <__pow5mult+0x84>
 8008e06:	4631      	mov	r1, r6
 8008e08:	4622      	mov	r2, r4
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	f7ff ff1a 	bl	8008c44 <__multiply>
 8008e10:	4631      	mov	r1, r6
 8008e12:	4680      	mov	r8, r0
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff fe4b 	bl	8008ab0 <_Bfree>
 8008e1a:	4646      	mov	r6, r8
 8008e1c:	106d      	asrs	r5, r5, #1
 8008e1e:	d00b      	beq.n	8008e38 <__pow5mult+0xa0>
 8008e20:	6820      	ldr	r0, [r4, #0]
 8008e22:	b938      	cbnz	r0, 8008e34 <__pow5mult+0x9c>
 8008e24:	4622      	mov	r2, r4
 8008e26:	4621      	mov	r1, r4
 8008e28:	4638      	mov	r0, r7
 8008e2a:	f7ff ff0b 	bl	8008c44 <__multiply>
 8008e2e:	6020      	str	r0, [r4, #0]
 8008e30:	f8c0 9000 	str.w	r9, [r0]
 8008e34:	4604      	mov	r4, r0
 8008e36:	e7e4      	b.n	8008e02 <__pow5mult+0x6a>
 8008e38:	4630      	mov	r0, r6
 8008e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e3e:	bf00      	nop
 8008e40:	0800a940 	.word	0x0800a940
 8008e44:	0800a864 	.word	0x0800a864
 8008e48:	0800a8e4 	.word	0x0800a8e4

08008e4c <__lshift>:
 8008e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e50:	460c      	mov	r4, r1
 8008e52:	6849      	ldr	r1, [r1, #4]
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e5a:	68a3      	ldr	r3, [r4, #8]
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	4691      	mov	r9, r2
 8008e60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e64:	f108 0601 	add.w	r6, r8, #1
 8008e68:	42b3      	cmp	r3, r6
 8008e6a:	db0b      	blt.n	8008e84 <__lshift+0x38>
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f7ff fddf 	bl	8008a30 <_Balloc>
 8008e72:	4605      	mov	r5, r0
 8008e74:	b948      	cbnz	r0, 8008e8a <__lshift+0x3e>
 8008e76:	4602      	mov	r2, r0
 8008e78:	4b28      	ldr	r3, [pc, #160]	@ (8008f1c <__lshift+0xd0>)
 8008e7a:	4829      	ldr	r0, [pc, #164]	@ (8008f20 <__lshift+0xd4>)
 8008e7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e80:	f000 ff22 	bl	8009cc8 <__assert_func>
 8008e84:	3101      	adds	r1, #1
 8008e86:	005b      	lsls	r3, r3, #1
 8008e88:	e7ee      	b.n	8008e68 <__lshift+0x1c>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f100 0114 	add.w	r1, r0, #20
 8008e90:	f100 0210 	add.w	r2, r0, #16
 8008e94:	4618      	mov	r0, r3
 8008e96:	4553      	cmp	r3, sl
 8008e98:	db33      	blt.n	8008f02 <__lshift+0xb6>
 8008e9a:	6920      	ldr	r0, [r4, #16]
 8008e9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ea0:	f104 0314 	add.w	r3, r4, #20
 8008ea4:	f019 091f 	ands.w	r9, r9, #31
 8008ea8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008eac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008eb0:	d02b      	beq.n	8008f0a <__lshift+0xbe>
 8008eb2:	f1c9 0e20 	rsb	lr, r9, #32
 8008eb6:	468a      	mov	sl, r1
 8008eb8:	2200      	movs	r2, #0
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	fa00 f009 	lsl.w	r0, r0, r9
 8008ec0:	4310      	orrs	r0, r2
 8008ec2:	f84a 0b04 	str.w	r0, [sl], #4
 8008ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eca:	459c      	cmp	ip, r3
 8008ecc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ed0:	d8f3      	bhi.n	8008eba <__lshift+0x6e>
 8008ed2:	ebac 0304 	sub.w	r3, ip, r4
 8008ed6:	3b15      	subs	r3, #21
 8008ed8:	f023 0303 	bic.w	r3, r3, #3
 8008edc:	3304      	adds	r3, #4
 8008ede:	f104 0015 	add.w	r0, r4, #21
 8008ee2:	4584      	cmp	ip, r0
 8008ee4:	bf38      	it	cc
 8008ee6:	2304      	movcc	r3, #4
 8008ee8:	50ca      	str	r2, [r1, r3]
 8008eea:	b10a      	cbz	r2, 8008ef0 <__lshift+0xa4>
 8008eec:	f108 0602 	add.w	r6, r8, #2
 8008ef0:	3e01      	subs	r6, #1
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	612e      	str	r6, [r5, #16]
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	f7ff fdda 	bl	8008ab0 <_Bfree>
 8008efc:	4628      	mov	r0, r5
 8008efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f02:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f06:	3301      	adds	r3, #1
 8008f08:	e7c5      	b.n	8008e96 <__lshift+0x4a>
 8008f0a:	3904      	subs	r1, #4
 8008f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f10:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f14:	459c      	cmp	ip, r3
 8008f16:	d8f9      	bhi.n	8008f0c <__lshift+0xc0>
 8008f18:	e7ea      	b.n	8008ef0 <__lshift+0xa4>
 8008f1a:	bf00      	nop
 8008f1c:	0800a8d3 	.word	0x0800a8d3
 8008f20:	0800a8e4 	.word	0x0800a8e4

08008f24 <__mcmp>:
 8008f24:	690a      	ldr	r2, [r1, #16]
 8008f26:	4603      	mov	r3, r0
 8008f28:	6900      	ldr	r0, [r0, #16]
 8008f2a:	1a80      	subs	r0, r0, r2
 8008f2c:	b530      	push	{r4, r5, lr}
 8008f2e:	d10e      	bne.n	8008f4e <__mcmp+0x2a>
 8008f30:	3314      	adds	r3, #20
 8008f32:	3114      	adds	r1, #20
 8008f34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008f38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008f3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f44:	4295      	cmp	r5, r2
 8008f46:	d003      	beq.n	8008f50 <__mcmp+0x2c>
 8008f48:	d205      	bcs.n	8008f56 <__mcmp+0x32>
 8008f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4e:	bd30      	pop	{r4, r5, pc}
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	d3f3      	bcc.n	8008f3c <__mcmp+0x18>
 8008f54:	e7fb      	b.n	8008f4e <__mcmp+0x2a>
 8008f56:	2001      	movs	r0, #1
 8008f58:	e7f9      	b.n	8008f4e <__mcmp+0x2a>
	...

08008f5c <__mdiff>:
 8008f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f60:	4689      	mov	r9, r1
 8008f62:	4606      	mov	r6, r0
 8008f64:	4611      	mov	r1, r2
 8008f66:	4648      	mov	r0, r9
 8008f68:	4614      	mov	r4, r2
 8008f6a:	f7ff ffdb 	bl	8008f24 <__mcmp>
 8008f6e:	1e05      	subs	r5, r0, #0
 8008f70:	d112      	bne.n	8008f98 <__mdiff+0x3c>
 8008f72:	4629      	mov	r1, r5
 8008f74:	4630      	mov	r0, r6
 8008f76:	f7ff fd5b 	bl	8008a30 <_Balloc>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	b928      	cbnz	r0, 8008f8a <__mdiff+0x2e>
 8008f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800907c <__mdiff+0x120>)
 8008f80:	f240 2137 	movw	r1, #567	@ 0x237
 8008f84:	483e      	ldr	r0, [pc, #248]	@ (8009080 <__mdiff+0x124>)
 8008f86:	f000 fe9f 	bl	8009cc8 <__assert_func>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f90:	4610      	mov	r0, r2
 8008f92:	b003      	add	sp, #12
 8008f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f98:	bfbc      	itt	lt
 8008f9a:	464b      	movlt	r3, r9
 8008f9c:	46a1      	movlt	r9, r4
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008fa4:	bfba      	itte	lt
 8008fa6:	461c      	movlt	r4, r3
 8008fa8:	2501      	movlt	r5, #1
 8008faa:	2500      	movge	r5, #0
 8008fac:	f7ff fd40 	bl	8008a30 <_Balloc>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	b918      	cbnz	r0, 8008fbc <__mdiff+0x60>
 8008fb4:	4b31      	ldr	r3, [pc, #196]	@ (800907c <__mdiff+0x120>)
 8008fb6:	f240 2145 	movw	r1, #581	@ 0x245
 8008fba:	e7e3      	b.n	8008f84 <__mdiff+0x28>
 8008fbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008fc0:	6926      	ldr	r6, [r4, #16]
 8008fc2:	60c5      	str	r5, [r0, #12]
 8008fc4:	f109 0310 	add.w	r3, r9, #16
 8008fc8:	f109 0514 	add.w	r5, r9, #20
 8008fcc:	f104 0e14 	add.w	lr, r4, #20
 8008fd0:	f100 0b14 	add.w	fp, r0, #20
 8008fd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008fd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	46d9      	mov	r9, fp
 8008fe0:	f04f 0c00 	mov.w	ip, #0
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008fea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008fee:	9301      	str	r3, [sp, #4]
 8008ff0:	fa1f f38a 	uxth.w	r3, sl
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	b283      	uxth	r3, r0
 8008ff8:	1acb      	subs	r3, r1, r3
 8008ffa:	0c00      	lsrs	r0, r0, #16
 8008ffc:	4463      	add	r3, ip
 8008ffe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009002:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009006:	b29b      	uxth	r3, r3
 8009008:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800900c:	4576      	cmp	r6, lr
 800900e:	f849 3b04 	str.w	r3, [r9], #4
 8009012:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009016:	d8e5      	bhi.n	8008fe4 <__mdiff+0x88>
 8009018:	1b33      	subs	r3, r6, r4
 800901a:	3b15      	subs	r3, #21
 800901c:	f023 0303 	bic.w	r3, r3, #3
 8009020:	3415      	adds	r4, #21
 8009022:	3304      	adds	r3, #4
 8009024:	42a6      	cmp	r6, r4
 8009026:	bf38      	it	cc
 8009028:	2304      	movcc	r3, #4
 800902a:	441d      	add	r5, r3
 800902c:	445b      	add	r3, fp
 800902e:	461e      	mov	r6, r3
 8009030:	462c      	mov	r4, r5
 8009032:	4544      	cmp	r4, r8
 8009034:	d30e      	bcc.n	8009054 <__mdiff+0xf8>
 8009036:	f108 0103 	add.w	r1, r8, #3
 800903a:	1b49      	subs	r1, r1, r5
 800903c:	f021 0103 	bic.w	r1, r1, #3
 8009040:	3d03      	subs	r5, #3
 8009042:	45a8      	cmp	r8, r5
 8009044:	bf38      	it	cc
 8009046:	2100      	movcc	r1, #0
 8009048:	440b      	add	r3, r1
 800904a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800904e:	b191      	cbz	r1, 8009076 <__mdiff+0x11a>
 8009050:	6117      	str	r7, [r2, #16]
 8009052:	e79d      	b.n	8008f90 <__mdiff+0x34>
 8009054:	f854 1b04 	ldr.w	r1, [r4], #4
 8009058:	46e6      	mov	lr, ip
 800905a:	0c08      	lsrs	r0, r1, #16
 800905c:	fa1c fc81 	uxtah	ip, ip, r1
 8009060:	4471      	add	r1, lr
 8009062:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009066:	b289      	uxth	r1, r1
 8009068:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800906c:	f846 1b04 	str.w	r1, [r6], #4
 8009070:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009074:	e7dd      	b.n	8009032 <__mdiff+0xd6>
 8009076:	3f01      	subs	r7, #1
 8009078:	e7e7      	b.n	800904a <__mdiff+0xee>
 800907a:	bf00      	nop
 800907c:	0800a8d3 	.word	0x0800a8d3
 8009080:	0800a8e4 	.word	0x0800a8e4

08009084 <__d2b>:
 8009084:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009088:	460f      	mov	r7, r1
 800908a:	2101      	movs	r1, #1
 800908c:	ec59 8b10 	vmov	r8, r9, d0
 8009090:	4616      	mov	r6, r2
 8009092:	f7ff fccd 	bl	8008a30 <_Balloc>
 8009096:	4604      	mov	r4, r0
 8009098:	b930      	cbnz	r0, 80090a8 <__d2b+0x24>
 800909a:	4602      	mov	r2, r0
 800909c:	4b23      	ldr	r3, [pc, #140]	@ (800912c <__d2b+0xa8>)
 800909e:	4824      	ldr	r0, [pc, #144]	@ (8009130 <__d2b+0xac>)
 80090a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80090a4:	f000 fe10 	bl	8009cc8 <__assert_func>
 80090a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090b0:	b10d      	cbz	r5, 80090b6 <__d2b+0x32>
 80090b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	f1b8 0300 	subs.w	r3, r8, #0
 80090bc:	d023      	beq.n	8009106 <__d2b+0x82>
 80090be:	4668      	mov	r0, sp
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	f7ff fd7c 	bl	8008bbe <__lo0bits>
 80090c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80090ca:	b1d0      	cbz	r0, 8009102 <__d2b+0x7e>
 80090cc:	f1c0 0320 	rsb	r3, r0, #32
 80090d0:	fa02 f303 	lsl.w	r3, r2, r3
 80090d4:	430b      	orrs	r3, r1
 80090d6:	40c2      	lsrs	r2, r0
 80090d8:	6163      	str	r3, [r4, #20]
 80090da:	9201      	str	r2, [sp, #4]
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	61a3      	str	r3, [r4, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	bf0c      	ite	eq
 80090e4:	2201      	moveq	r2, #1
 80090e6:	2202      	movne	r2, #2
 80090e8:	6122      	str	r2, [r4, #16]
 80090ea:	b1a5      	cbz	r5, 8009116 <__d2b+0x92>
 80090ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80090f0:	4405      	add	r5, r0
 80090f2:	603d      	str	r5, [r7, #0]
 80090f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80090f8:	6030      	str	r0, [r6, #0]
 80090fa:	4620      	mov	r0, r4
 80090fc:	b003      	add	sp, #12
 80090fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009102:	6161      	str	r1, [r4, #20]
 8009104:	e7ea      	b.n	80090dc <__d2b+0x58>
 8009106:	a801      	add	r0, sp, #4
 8009108:	f7ff fd59 	bl	8008bbe <__lo0bits>
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	6163      	str	r3, [r4, #20]
 8009110:	3020      	adds	r0, #32
 8009112:	2201      	movs	r2, #1
 8009114:	e7e8      	b.n	80090e8 <__d2b+0x64>
 8009116:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800911a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800911e:	6038      	str	r0, [r7, #0]
 8009120:	6918      	ldr	r0, [r3, #16]
 8009122:	f7ff fd2d 	bl	8008b80 <__hi0bits>
 8009126:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800912a:	e7e5      	b.n	80090f8 <__d2b+0x74>
 800912c:	0800a8d3 	.word	0x0800a8d3
 8009130:	0800a8e4 	.word	0x0800a8e4

08009134 <__ssputs_r>:
 8009134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009138:	688e      	ldr	r6, [r1, #8]
 800913a:	461f      	mov	r7, r3
 800913c:	42be      	cmp	r6, r7
 800913e:	680b      	ldr	r3, [r1, #0]
 8009140:	4682      	mov	sl, r0
 8009142:	460c      	mov	r4, r1
 8009144:	4690      	mov	r8, r2
 8009146:	d82d      	bhi.n	80091a4 <__ssputs_r+0x70>
 8009148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800914c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009150:	d026      	beq.n	80091a0 <__ssputs_r+0x6c>
 8009152:	6965      	ldr	r5, [r4, #20]
 8009154:	6909      	ldr	r1, [r1, #16]
 8009156:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800915a:	eba3 0901 	sub.w	r9, r3, r1
 800915e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009162:	1c7b      	adds	r3, r7, #1
 8009164:	444b      	add	r3, r9
 8009166:	106d      	asrs	r5, r5, #1
 8009168:	429d      	cmp	r5, r3
 800916a:	bf38      	it	cc
 800916c:	461d      	movcc	r5, r3
 800916e:	0553      	lsls	r3, r2, #21
 8009170:	d527      	bpl.n	80091c2 <__ssputs_r+0x8e>
 8009172:	4629      	mov	r1, r5
 8009174:	f7ff fbd0 	bl	8008918 <_malloc_r>
 8009178:	4606      	mov	r6, r0
 800917a:	b360      	cbz	r0, 80091d6 <__ssputs_r+0xa2>
 800917c:	6921      	ldr	r1, [r4, #16]
 800917e:	464a      	mov	r2, r9
 8009180:	f000 fd94 	bl	8009cac <memcpy>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800918a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	6126      	str	r6, [r4, #16]
 8009192:	6165      	str	r5, [r4, #20]
 8009194:	444e      	add	r6, r9
 8009196:	eba5 0509 	sub.w	r5, r5, r9
 800919a:	6026      	str	r6, [r4, #0]
 800919c:	60a5      	str	r5, [r4, #8]
 800919e:	463e      	mov	r6, r7
 80091a0:	42be      	cmp	r6, r7
 80091a2:	d900      	bls.n	80091a6 <__ssputs_r+0x72>
 80091a4:	463e      	mov	r6, r7
 80091a6:	6820      	ldr	r0, [r4, #0]
 80091a8:	4632      	mov	r2, r6
 80091aa:	4641      	mov	r1, r8
 80091ac:	f000 fd53 	bl	8009c56 <memmove>
 80091b0:	68a3      	ldr	r3, [r4, #8]
 80091b2:	1b9b      	subs	r3, r3, r6
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	4433      	add	r3, r6
 80091ba:	6023      	str	r3, [r4, #0]
 80091bc:	2000      	movs	r0, #0
 80091be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c2:	462a      	mov	r2, r5
 80091c4:	f000 fdc4 	bl	8009d50 <_realloc_r>
 80091c8:	4606      	mov	r6, r0
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d1e0      	bne.n	8009190 <__ssputs_r+0x5c>
 80091ce:	6921      	ldr	r1, [r4, #16]
 80091d0:	4650      	mov	r0, sl
 80091d2:	f7ff fb2d 	bl	8008830 <_free_r>
 80091d6:	230c      	movs	r3, #12
 80091d8:	f8ca 3000 	str.w	r3, [sl]
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	f04f 30ff 	mov.w	r0, #4294967295
 80091e8:	e7e9      	b.n	80091be <__ssputs_r+0x8a>
	...

080091ec <_svfiprintf_r>:
 80091ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f0:	4698      	mov	r8, r3
 80091f2:	898b      	ldrh	r3, [r1, #12]
 80091f4:	061b      	lsls	r3, r3, #24
 80091f6:	b09d      	sub	sp, #116	@ 0x74
 80091f8:	4607      	mov	r7, r0
 80091fa:	460d      	mov	r5, r1
 80091fc:	4614      	mov	r4, r2
 80091fe:	d510      	bpl.n	8009222 <_svfiprintf_r+0x36>
 8009200:	690b      	ldr	r3, [r1, #16]
 8009202:	b973      	cbnz	r3, 8009222 <_svfiprintf_r+0x36>
 8009204:	2140      	movs	r1, #64	@ 0x40
 8009206:	f7ff fb87 	bl	8008918 <_malloc_r>
 800920a:	6028      	str	r0, [r5, #0]
 800920c:	6128      	str	r0, [r5, #16]
 800920e:	b930      	cbnz	r0, 800921e <_svfiprintf_r+0x32>
 8009210:	230c      	movs	r3, #12
 8009212:	603b      	str	r3, [r7, #0]
 8009214:	f04f 30ff 	mov.w	r0, #4294967295
 8009218:	b01d      	add	sp, #116	@ 0x74
 800921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921e:	2340      	movs	r3, #64	@ 0x40
 8009220:	616b      	str	r3, [r5, #20]
 8009222:	2300      	movs	r3, #0
 8009224:	9309      	str	r3, [sp, #36]	@ 0x24
 8009226:	2320      	movs	r3, #32
 8009228:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800922c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009230:	2330      	movs	r3, #48	@ 0x30
 8009232:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80093d0 <_svfiprintf_r+0x1e4>
 8009236:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800923a:	f04f 0901 	mov.w	r9, #1
 800923e:	4623      	mov	r3, r4
 8009240:	469a      	mov	sl, r3
 8009242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009246:	b10a      	cbz	r2, 800924c <_svfiprintf_r+0x60>
 8009248:	2a25      	cmp	r2, #37	@ 0x25
 800924a:	d1f9      	bne.n	8009240 <_svfiprintf_r+0x54>
 800924c:	ebba 0b04 	subs.w	fp, sl, r4
 8009250:	d00b      	beq.n	800926a <_svfiprintf_r+0x7e>
 8009252:	465b      	mov	r3, fp
 8009254:	4622      	mov	r2, r4
 8009256:	4629      	mov	r1, r5
 8009258:	4638      	mov	r0, r7
 800925a:	f7ff ff6b 	bl	8009134 <__ssputs_r>
 800925e:	3001      	adds	r0, #1
 8009260:	f000 80a7 	beq.w	80093b2 <_svfiprintf_r+0x1c6>
 8009264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009266:	445a      	add	r2, fp
 8009268:	9209      	str	r2, [sp, #36]	@ 0x24
 800926a:	f89a 3000 	ldrb.w	r3, [sl]
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 809f 	beq.w	80093b2 <_svfiprintf_r+0x1c6>
 8009274:	2300      	movs	r3, #0
 8009276:	f04f 32ff 	mov.w	r2, #4294967295
 800927a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800927e:	f10a 0a01 	add.w	sl, sl, #1
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	9307      	str	r3, [sp, #28]
 8009286:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800928a:	931a      	str	r3, [sp, #104]	@ 0x68
 800928c:	4654      	mov	r4, sl
 800928e:	2205      	movs	r2, #5
 8009290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009294:	484e      	ldr	r0, [pc, #312]	@ (80093d0 <_svfiprintf_r+0x1e4>)
 8009296:	f7f6 ff9b 	bl	80001d0 <memchr>
 800929a:	9a04      	ldr	r2, [sp, #16]
 800929c:	b9d8      	cbnz	r0, 80092d6 <_svfiprintf_r+0xea>
 800929e:	06d0      	lsls	r0, r2, #27
 80092a0:	bf44      	itt	mi
 80092a2:	2320      	movmi	r3, #32
 80092a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092a8:	0711      	lsls	r1, r2, #28
 80092aa:	bf44      	itt	mi
 80092ac:	232b      	movmi	r3, #43	@ 0x2b
 80092ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092b2:	f89a 3000 	ldrb.w	r3, [sl]
 80092b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80092b8:	d015      	beq.n	80092e6 <_svfiprintf_r+0xfa>
 80092ba:	9a07      	ldr	r2, [sp, #28]
 80092bc:	4654      	mov	r4, sl
 80092be:	2000      	movs	r0, #0
 80092c0:	f04f 0c0a 	mov.w	ip, #10
 80092c4:	4621      	mov	r1, r4
 80092c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092ca:	3b30      	subs	r3, #48	@ 0x30
 80092cc:	2b09      	cmp	r3, #9
 80092ce:	d94b      	bls.n	8009368 <_svfiprintf_r+0x17c>
 80092d0:	b1b0      	cbz	r0, 8009300 <_svfiprintf_r+0x114>
 80092d2:	9207      	str	r2, [sp, #28]
 80092d4:	e014      	b.n	8009300 <_svfiprintf_r+0x114>
 80092d6:	eba0 0308 	sub.w	r3, r0, r8
 80092da:	fa09 f303 	lsl.w	r3, r9, r3
 80092de:	4313      	orrs	r3, r2
 80092e0:	9304      	str	r3, [sp, #16]
 80092e2:	46a2      	mov	sl, r4
 80092e4:	e7d2      	b.n	800928c <_svfiprintf_r+0xa0>
 80092e6:	9b03      	ldr	r3, [sp, #12]
 80092e8:	1d19      	adds	r1, r3, #4
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	9103      	str	r1, [sp, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	bfbb      	ittet	lt
 80092f2:	425b      	neglt	r3, r3
 80092f4:	f042 0202 	orrlt.w	r2, r2, #2
 80092f8:	9307      	strge	r3, [sp, #28]
 80092fa:	9307      	strlt	r3, [sp, #28]
 80092fc:	bfb8      	it	lt
 80092fe:	9204      	strlt	r2, [sp, #16]
 8009300:	7823      	ldrb	r3, [r4, #0]
 8009302:	2b2e      	cmp	r3, #46	@ 0x2e
 8009304:	d10a      	bne.n	800931c <_svfiprintf_r+0x130>
 8009306:	7863      	ldrb	r3, [r4, #1]
 8009308:	2b2a      	cmp	r3, #42	@ 0x2a
 800930a:	d132      	bne.n	8009372 <_svfiprintf_r+0x186>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	1d1a      	adds	r2, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	9203      	str	r2, [sp, #12]
 8009314:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009318:	3402      	adds	r4, #2
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80093e0 <_svfiprintf_r+0x1f4>
 8009320:	7821      	ldrb	r1, [r4, #0]
 8009322:	2203      	movs	r2, #3
 8009324:	4650      	mov	r0, sl
 8009326:	f7f6 ff53 	bl	80001d0 <memchr>
 800932a:	b138      	cbz	r0, 800933c <_svfiprintf_r+0x150>
 800932c:	9b04      	ldr	r3, [sp, #16]
 800932e:	eba0 000a 	sub.w	r0, r0, sl
 8009332:	2240      	movs	r2, #64	@ 0x40
 8009334:	4082      	lsls	r2, r0
 8009336:	4313      	orrs	r3, r2
 8009338:	3401      	adds	r4, #1
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009340:	4824      	ldr	r0, [pc, #144]	@ (80093d4 <_svfiprintf_r+0x1e8>)
 8009342:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009346:	2206      	movs	r2, #6
 8009348:	f7f6 ff42 	bl	80001d0 <memchr>
 800934c:	2800      	cmp	r0, #0
 800934e:	d036      	beq.n	80093be <_svfiprintf_r+0x1d2>
 8009350:	4b21      	ldr	r3, [pc, #132]	@ (80093d8 <_svfiprintf_r+0x1ec>)
 8009352:	bb1b      	cbnz	r3, 800939c <_svfiprintf_r+0x1b0>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	3307      	adds	r3, #7
 8009358:	f023 0307 	bic.w	r3, r3, #7
 800935c:	3308      	adds	r3, #8
 800935e:	9303      	str	r3, [sp, #12]
 8009360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009362:	4433      	add	r3, r6
 8009364:	9309      	str	r3, [sp, #36]	@ 0x24
 8009366:	e76a      	b.n	800923e <_svfiprintf_r+0x52>
 8009368:	fb0c 3202 	mla	r2, ip, r2, r3
 800936c:	460c      	mov	r4, r1
 800936e:	2001      	movs	r0, #1
 8009370:	e7a8      	b.n	80092c4 <_svfiprintf_r+0xd8>
 8009372:	2300      	movs	r3, #0
 8009374:	3401      	adds	r4, #1
 8009376:	9305      	str	r3, [sp, #20]
 8009378:	4619      	mov	r1, r3
 800937a:	f04f 0c0a 	mov.w	ip, #10
 800937e:	4620      	mov	r0, r4
 8009380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009384:	3a30      	subs	r2, #48	@ 0x30
 8009386:	2a09      	cmp	r2, #9
 8009388:	d903      	bls.n	8009392 <_svfiprintf_r+0x1a6>
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0c6      	beq.n	800931c <_svfiprintf_r+0x130>
 800938e:	9105      	str	r1, [sp, #20]
 8009390:	e7c4      	b.n	800931c <_svfiprintf_r+0x130>
 8009392:	fb0c 2101 	mla	r1, ip, r1, r2
 8009396:	4604      	mov	r4, r0
 8009398:	2301      	movs	r3, #1
 800939a:	e7f0      	b.n	800937e <_svfiprintf_r+0x192>
 800939c:	ab03      	add	r3, sp, #12
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	462a      	mov	r2, r5
 80093a2:	4b0e      	ldr	r3, [pc, #56]	@ (80093dc <_svfiprintf_r+0x1f0>)
 80093a4:	a904      	add	r1, sp, #16
 80093a6:	4638      	mov	r0, r7
 80093a8:	f7fd fe02 	bl	8006fb0 <_printf_float>
 80093ac:	1c42      	adds	r2, r0, #1
 80093ae:	4606      	mov	r6, r0
 80093b0:	d1d6      	bne.n	8009360 <_svfiprintf_r+0x174>
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	065b      	lsls	r3, r3, #25
 80093b6:	f53f af2d 	bmi.w	8009214 <_svfiprintf_r+0x28>
 80093ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093bc:	e72c      	b.n	8009218 <_svfiprintf_r+0x2c>
 80093be:	ab03      	add	r3, sp, #12
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	462a      	mov	r2, r5
 80093c4:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <_svfiprintf_r+0x1f0>)
 80093c6:	a904      	add	r1, sp, #16
 80093c8:	4638      	mov	r0, r7
 80093ca:	f7fe f889 	bl	80074e0 <_printf_i>
 80093ce:	e7ed      	b.n	80093ac <_svfiprintf_r+0x1c0>
 80093d0:	0800aa40 	.word	0x0800aa40
 80093d4:	0800aa4a 	.word	0x0800aa4a
 80093d8:	08006fb1 	.word	0x08006fb1
 80093dc:	08009135 	.word	0x08009135
 80093e0:	0800aa46 	.word	0x0800aa46

080093e4 <_sungetc_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	1c4b      	adds	r3, r1, #1
 80093e8:	4614      	mov	r4, r2
 80093ea:	d103      	bne.n	80093f4 <_sungetc_r+0x10>
 80093ec:	f04f 35ff 	mov.w	r5, #4294967295
 80093f0:	4628      	mov	r0, r5
 80093f2:	bd38      	pop	{r3, r4, r5, pc}
 80093f4:	8993      	ldrh	r3, [r2, #12]
 80093f6:	f023 0320 	bic.w	r3, r3, #32
 80093fa:	8193      	strh	r3, [r2, #12]
 80093fc:	6853      	ldr	r3, [r2, #4]
 80093fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009400:	b2cd      	uxtb	r5, r1
 8009402:	b18a      	cbz	r2, 8009428 <_sungetc_r+0x44>
 8009404:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009406:	429a      	cmp	r2, r3
 8009408:	dd08      	ble.n	800941c <_sungetc_r+0x38>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	1e5a      	subs	r2, r3, #1
 800940e:	6022      	str	r2, [r4, #0]
 8009410:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009414:	6863      	ldr	r3, [r4, #4]
 8009416:	3301      	adds	r3, #1
 8009418:	6063      	str	r3, [r4, #4]
 800941a:	e7e9      	b.n	80093f0 <_sungetc_r+0xc>
 800941c:	4621      	mov	r1, r4
 800941e:	f000 fbe0 	bl	8009be2 <__submore>
 8009422:	2800      	cmp	r0, #0
 8009424:	d0f1      	beq.n	800940a <_sungetc_r+0x26>
 8009426:	e7e1      	b.n	80093ec <_sungetc_r+0x8>
 8009428:	6921      	ldr	r1, [r4, #16]
 800942a:	6822      	ldr	r2, [r4, #0]
 800942c:	b141      	cbz	r1, 8009440 <_sungetc_r+0x5c>
 800942e:	4291      	cmp	r1, r2
 8009430:	d206      	bcs.n	8009440 <_sungetc_r+0x5c>
 8009432:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009436:	42a9      	cmp	r1, r5
 8009438:	d102      	bne.n	8009440 <_sungetc_r+0x5c>
 800943a:	3a01      	subs	r2, #1
 800943c:	6022      	str	r2, [r4, #0]
 800943e:	e7ea      	b.n	8009416 <_sungetc_r+0x32>
 8009440:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009444:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009448:	6363      	str	r3, [r4, #52]	@ 0x34
 800944a:	2303      	movs	r3, #3
 800944c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800944e:	4623      	mov	r3, r4
 8009450:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	2301      	movs	r3, #1
 8009458:	e7de      	b.n	8009418 <_sungetc_r+0x34>

0800945a <__ssrefill_r>:
 800945a:	b510      	push	{r4, lr}
 800945c:	460c      	mov	r4, r1
 800945e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009460:	b169      	cbz	r1, 800947e <__ssrefill_r+0x24>
 8009462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009466:	4299      	cmp	r1, r3
 8009468:	d001      	beq.n	800946e <__ssrefill_r+0x14>
 800946a:	f7ff f9e1 	bl	8008830 <_free_r>
 800946e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	2000      	movs	r0, #0
 8009474:	6360      	str	r0, [r4, #52]	@ 0x34
 8009476:	b113      	cbz	r3, 800947e <__ssrefill_r+0x24>
 8009478:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800947a:	6023      	str	r3, [r4, #0]
 800947c:	bd10      	pop	{r4, pc}
 800947e:	6923      	ldr	r3, [r4, #16]
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	2300      	movs	r3, #0
 8009484:	6063      	str	r3, [r4, #4]
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f043 0320 	orr.w	r3, r3, #32
 800948c:	81a3      	strh	r3, [r4, #12]
 800948e:	f04f 30ff 	mov.w	r0, #4294967295
 8009492:	e7f3      	b.n	800947c <__ssrefill_r+0x22>

08009494 <__ssvfiscanf_r>:
 8009494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009498:	460c      	mov	r4, r1
 800949a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800949e:	2100      	movs	r1, #0
 80094a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80094a4:	49a5      	ldr	r1, [pc, #660]	@ (800973c <__ssvfiscanf_r+0x2a8>)
 80094a6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80094a8:	f10d 0804 	add.w	r8, sp, #4
 80094ac:	49a4      	ldr	r1, [pc, #656]	@ (8009740 <__ssvfiscanf_r+0x2ac>)
 80094ae:	4fa5      	ldr	r7, [pc, #660]	@ (8009744 <__ssvfiscanf_r+0x2b0>)
 80094b0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80094b4:	4606      	mov	r6, r0
 80094b6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	7813      	ldrb	r3, [r2, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 8158 	beq.w	8009772 <__ssvfiscanf_r+0x2de>
 80094c2:	5cf9      	ldrb	r1, [r7, r3]
 80094c4:	f011 0108 	ands.w	r1, r1, #8
 80094c8:	f102 0501 	add.w	r5, r2, #1
 80094cc:	d019      	beq.n	8009502 <__ssvfiscanf_r+0x6e>
 80094ce:	6863      	ldr	r3, [r4, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	dd0f      	ble.n	80094f4 <__ssvfiscanf_r+0x60>
 80094d4:	6823      	ldr	r3, [r4, #0]
 80094d6:	781a      	ldrb	r2, [r3, #0]
 80094d8:	5cba      	ldrb	r2, [r7, r2]
 80094da:	0712      	lsls	r2, r2, #28
 80094dc:	d401      	bmi.n	80094e2 <__ssvfiscanf_r+0x4e>
 80094de:	462a      	mov	r2, r5
 80094e0:	e7eb      	b.n	80094ba <__ssvfiscanf_r+0x26>
 80094e2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80094e4:	3201      	adds	r2, #1
 80094e6:	9245      	str	r2, [sp, #276]	@ 0x114
 80094e8:	6862      	ldr	r2, [r4, #4]
 80094ea:	3301      	adds	r3, #1
 80094ec:	3a01      	subs	r2, #1
 80094ee:	6062      	str	r2, [r4, #4]
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	e7ec      	b.n	80094ce <__ssvfiscanf_r+0x3a>
 80094f4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80094f6:	4621      	mov	r1, r4
 80094f8:	4630      	mov	r0, r6
 80094fa:	4798      	blx	r3
 80094fc:	2800      	cmp	r0, #0
 80094fe:	d0e9      	beq.n	80094d4 <__ssvfiscanf_r+0x40>
 8009500:	e7ed      	b.n	80094de <__ssvfiscanf_r+0x4a>
 8009502:	2b25      	cmp	r3, #37	@ 0x25
 8009504:	d012      	beq.n	800952c <__ssvfiscanf_r+0x98>
 8009506:	4699      	mov	r9, r3
 8009508:	6863      	ldr	r3, [r4, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f340 8093 	ble.w	8009636 <__ssvfiscanf_r+0x1a2>
 8009510:	6822      	ldr	r2, [r4, #0]
 8009512:	7813      	ldrb	r3, [r2, #0]
 8009514:	454b      	cmp	r3, r9
 8009516:	f040 812c 	bne.w	8009772 <__ssvfiscanf_r+0x2de>
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	3b01      	subs	r3, #1
 800951e:	6063      	str	r3, [r4, #4]
 8009520:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009522:	3201      	adds	r2, #1
 8009524:	3301      	adds	r3, #1
 8009526:	6022      	str	r2, [r4, #0]
 8009528:	9345      	str	r3, [sp, #276]	@ 0x114
 800952a:	e7d8      	b.n	80094de <__ssvfiscanf_r+0x4a>
 800952c:	9141      	str	r1, [sp, #260]	@ 0x104
 800952e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009530:	7853      	ldrb	r3, [r2, #1]
 8009532:	2b2a      	cmp	r3, #42	@ 0x2a
 8009534:	bf02      	ittt	eq
 8009536:	2310      	moveq	r3, #16
 8009538:	1c95      	addeq	r5, r2, #2
 800953a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800953c:	220a      	movs	r2, #10
 800953e:	46a9      	mov	r9, r5
 8009540:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009544:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009548:	2b09      	cmp	r3, #9
 800954a:	d91e      	bls.n	800958a <__ssvfiscanf_r+0xf6>
 800954c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009748 <__ssvfiscanf_r+0x2b4>
 8009550:	2203      	movs	r2, #3
 8009552:	4650      	mov	r0, sl
 8009554:	f7f6 fe3c 	bl	80001d0 <memchr>
 8009558:	b138      	cbz	r0, 800956a <__ssvfiscanf_r+0xd6>
 800955a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800955c:	eba0 000a 	sub.w	r0, r0, sl
 8009560:	2301      	movs	r3, #1
 8009562:	4083      	lsls	r3, r0
 8009564:	4313      	orrs	r3, r2
 8009566:	9341      	str	r3, [sp, #260]	@ 0x104
 8009568:	464d      	mov	r5, r9
 800956a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800956e:	2b78      	cmp	r3, #120	@ 0x78
 8009570:	d806      	bhi.n	8009580 <__ssvfiscanf_r+0xec>
 8009572:	2b57      	cmp	r3, #87	@ 0x57
 8009574:	d810      	bhi.n	8009598 <__ssvfiscanf_r+0x104>
 8009576:	2b25      	cmp	r3, #37	@ 0x25
 8009578:	d0c5      	beq.n	8009506 <__ssvfiscanf_r+0x72>
 800957a:	d857      	bhi.n	800962c <__ssvfiscanf_r+0x198>
 800957c:	2b00      	cmp	r3, #0
 800957e:	d065      	beq.n	800964c <__ssvfiscanf_r+0x1b8>
 8009580:	2303      	movs	r3, #3
 8009582:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009584:	230a      	movs	r3, #10
 8009586:	9342      	str	r3, [sp, #264]	@ 0x108
 8009588:	e078      	b.n	800967c <__ssvfiscanf_r+0x1e8>
 800958a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800958c:	fb02 1103 	mla	r1, r2, r3, r1
 8009590:	3930      	subs	r1, #48	@ 0x30
 8009592:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009594:	464d      	mov	r5, r9
 8009596:	e7d2      	b.n	800953e <__ssvfiscanf_r+0xaa>
 8009598:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800959c:	2a20      	cmp	r2, #32
 800959e:	d8ef      	bhi.n	8009580 <__ssvfiscanf_r+0xec>
 80095a0:	a101      	add	r1, pc, #4	@ (adr r1, 80095a8 <__ssvfiscanf_r+0x114>)
 80095a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80095a6:	bf00      	nop
 80095a8:	0800965b 	.word	0x0800965b
 80095ac:	08009581 	.word	0x08009581
 80095b0:	08009581 	.word	0x08009581
 80095b4:	080096b5 	.word	0x080096b5
 80095b8:	08009581 	.word	0x08009581
 80095bc:	08009581 	.word	0x08009581
 80095c0:	08009581 	.word	0x08009581
 80095c4:	08009581 	.word	0x08009581
 80095c8:	08009581 	.word	0x08009581
 80095cc:	08009581 	.word	0x08009581
 80095d0:	08009581 	.word	0x08009581
 80095d4:	080096cb 	.word	0x080096cb
 80095d8:	080096b1 	.word	0x080096b1
 80095dc:	08009633 	.word	0x08009633
 80095e0:	08009633 	.word	0x08009633
 80095e4:	08009633 	.word	0x08009633
 80095e8:	08009581 	.word	0x08009581
 80095ec:	0800966d 	.word	0x0800966d
 80095f0:	08009581 	.word	0x08009581
 80095f4:	08009581 	.word	0x08009581
 80095f8:	08009581 	.word	0x08009581
 80095fc:	08009581 	.word	0x08009581
 8009600:	080096db 	.word	0x080096db
 8009604:	08009675 	.word	0x08009675
 8009608:	08009653 	.word	0x08009653
 800960c:	08009581 	.word	0x08009581
 8009610:	08009581 	.word	0x08009581
 8009614:	080096d7 	.word	0x080096d7
 8009618:	08009581 	.word	0x08009581
 800961c:	080096b1 	.word	0x080096b1
 8009620:	08009581 	.word	0x08009581
 8009624:	08009581 	.word	0x08009581
 8009628:	0800965b 	.word	0x0800965b
 800962c:	3b45      	subs	r3, #69	@ 0x45
 800962e:	2b02      	cmp	r3, #2
 8009630:	d8a6      	bhi.n	8009580 <__ssvfiscanf_r+0xec>
 8009632:	2305      	movs	r3, #5
 8009634:	e021      	b.n	800967a <__ssvfiscanf_r+0x1e6>
 8009636:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009638:	4621      	mov	r1, r4
 800963a:	4630      	mov	r0, r6
 800963c:	4798      	blx	r3
 800963e:	2800      	cmp	r0, #0
 8009640:	f43f af66 	beq.w	8009510 <__ssvfiscanf_r+0x7c>
 8009644:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009646:	2800      	cmp	r0, #0
 8009648:	f040 808b 	bne.w	8009762 <__ssvfiscanf_r+0x2ce>
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	e08b      	b.n	800976a <__ssvfiscanf_r+0x2d6>
 8009652:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009654:	f042 0220 	orr.w	r2, r2, #32
 8009658:	9241      	str	r2, [sp, #260]	@ 0x104
 800965a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800965c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009660:	9241      	str	r2, [sp, #260]	@ 0x104
 8009662:	2210      	movs	r2, #16
 8009664:	2b6e      	cmp	r3, #110	@ 0x6e
 8009666:	9242      	str	r2, [sp, #264]	@ 0x108
 8009668:	d902      	bls.n	8009670 <__ssvfiscanf_r+0x1dc>
 800966a:	e005      	b.n	8009678 <__ssvfiscanf_r+0x1e4>
 800966c:	2300      	movs	r3, #0
 800966e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009670:	2303      	movs	r3, #3
 8009672:	e002      	b.n	800967a <__ssvfiscanf_r+0x1e6>
 8009674:	2308      	movs	r3, #8
 8009676:	9342      	str	r3, [sp, #264]	@ 0x108
 8009678:	2304      	movs	r3, #4
 800967a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800967c:	6863      	ldr	r3, [r4, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	dd39      	ble.n	80096f6 <__ssvfiscanf_r+0x262>
 8009682:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009684:	0659      	lsls	r1, r3, #25
 8009686:	d404      	bmi.n	8009692 <__ssvfiscanf_r+0x1fe>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	781a      	ldrb	r2, [r3, #0]
 800968c:	5cba      	ldrb	r2, [r7, r2]
 800968e:	0712      	lsls	r2, r2, #28
 8009690:	d438      	bmi.n	8009704 <__ssvfiscanf_r+0x270>
 8009692:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009694:	2b02      	cmp	r3, #2
 8009696:	dc47      	bgt.n	8009728 <__ssvfiscanf_r+0x294>
 8009698:	466b      	mov	r3, sp
 800969a:	4622      	mov	r2, r4
 800969c:	a941      	add	r1, sp, #260	@ 0x104
 800969e:	4630      	mov	r0, r6
 80096a0:	f000 f86c 	bl	800977c <_scanf_chars>
 80096a4:	2801      	cmp	r0, #1
 80096a6:	d064      	beq.n	8009772 <__ssvfiscanf_r+0x2de>
 80096a8:	2802      	cmp	r0, #2
 80096aa:	f47f af18 	bne.w	80094de <__ssvfiscanf_r+0x4a>
 80096ae:	e7c9      	b.n	8009644 <__ssvfiscanf_r+0x1b0>
 80096b0:	220a      	movs	r2, #10
 80096b2:	e7d7      	b.n	8009664 <__ssvfiscanf_r+0x1d0>
 80096b4:	4629      	mov	r1, r5
 80096b6:	4640      	mov	r0, r8
 80096b8:	f000 fa5a 	bl	8009b70 <__sccl>
 80096bc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80096be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096c2:	9341      	str	r3, [sp, #260]	@ 0x104
 80096c4:	4605      	mov	r5, r0
 80096c6:	2301      	movs	r3, #1
 80096c8:	e7d7      	b.n	800967a <__ssvfiscanf_r+0x1e6>
 80096ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80096cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096d0:	9341      	str	r3, [sp, #260]	@ 0x104
 80096d2:	2300      	movs	r3, #0
 80096d4:	e7d1      	b.n	800967a <__ssvfiscanf_r+0x1e6>
 80096d6:	2302      	movs	r3, #2
 80096d8:	e7cf      	b.n	800967a <__ssvfiscanf_r+0x1e6>
 80096da:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80096dc:	06c3      	lsls	r3, r0, #27
 80096de:	f53f aefe 	bmi.w	80094de <__ssvfiscanf_r+0x4a>
 80096e2:	9b00      	ldr	r3, [sp, #0]
 80096e4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80096e6:	1d19      	adds	r1, r3, #4
 80096e8:	9100      	str	r1, [sp, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	07c0      	lsls	r0, r0, #31
 80096ee:	bf4c      	ite	mi
 80096f0:	801a      	strhmi	r2, [r3, #0]
 80096f2:	601a      	strpl	r2, [r3, #0]
 80096f4:	e6f3      	b.n	80094de <__ssvfiscanf_r+0x4a>
 80096f6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80096f8:	4621      	mov	r1, r4
 80096fa:	4630      	mov	r0, r6
 80096fc:	4798      	blx	r3
 80096fe:	2800      	cmp	r0, #0
 8009700:	d0bf      	beq.n	8009682 <__ssvfiscanf_r+0x1ee>
 8009702:	e79f      	b.n	8009644 <__ssvfiscanf_r+0x1b0>
 8009704:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009706:	3201      	adds	r2, #1
 8009708:	9245      	str	r2, [sp, #276]	@ 0x114
 800970a:	6862      	ldr	r2, [r4, #4]
 800970c:	3a01      	subs	r2, #1
 800970e:	2a00      	cmp	r2, #0
 8009710:	6062      	str	r2, [r4, #4]
 8009712:	dd02      	ble.n	800971a <__ssvfiscanf_r+0x286>
 8009714:	3301      	adds	r3, #1
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	e7b6      	b.n	8009688 <__ssvfiscanf_r+0x1f4>
 800971a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800971c:	4621      	mov	r1, r4
 800971e:	4630      	mov	r0, r6
 8009720:	4798      	blx	r3
 8009722:	2800      	cmp	r0, #0
 8009724:	d0b0      	beq.n	8009688 <__ssvfiscanf_r+0x1f4>
 8009726:	e78d      	b.n	8009644 <__ssvfiscanf_r+0x1b0>
 8009728:	2b04      	cmp	r3, #4
 800972a:	dc0f      	bgt.n	800974c <__ssvfiscanf_r+0x2b8>
 800972c:	466b      	mov	r3, sp
 800972e:	4622      	mov	r2, r4
 8009730:	a941      	add	r1, sp, #260	@ 0x104
 8009732:	4630      	mov	r0, r6
 8009734:	f000 f87c 	bl	8009830 <_scanf_i>
 8009738:	e7b4      	b.n	80096a4 <__ssvfiscanf_r+0x210>
 800973a:	bf00      	nop
 800973c:	080093e5 	.word	0x080093e5
 8009740:	0800945b 	.word	0x0800945b
 8009744:	0800a725 	.word	0x0800a725
 8009748:	0800aa46 	.word	0x0800aa46
 800974c:	4b0a      	ldr	r3, [pc, #40]	@ (8009778 <__ssvfiscanf_r+0x2e4>)
 800974e:	2b00      	cmp	r3, #0
 8009750:	f43f aec5 	beq.w	80094de <__ssvfiscanf_r+0x4a>
 8009754:	466b      	mov	r3, sp
 8009756:	4622      	mov	r2, r4
 8009758:	a941      	add	r1, sp, #260	@ 0x104
 800975a:	4630      	mov	r0, r6
 800975c:	f3af 8000 	nop.w
 8009760:	e7a0      	b.n	80096a4 <__ssvfiscanf_r+0x210>
 8009762:	89a3      	ldrh	r3, [r4, #12]
 8009764:	065b      	lsls	r3, r3, #25
 8009766:	f53f af71 	bmi.w	800964c <__ssvfiscanf_r+0x1b8>
 800976a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800976e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009772:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009774:	e7f9      	b.n	800976a <__ssvfiscanf_r+0x2d6>
 8009776:	bf00      	nop
 8009778:	00000000 	.word	0x00000000

0800977c <_scanf_chars>:
 800977c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009780:	4615      	mov	r5, r2
 8009782:	688a      	ldr	r2, [r1, #8]
 8009784:	4680      	mov	r8, r0
 8009786:	460c      	mov	r4, r1
 8009788:	b932      	cbnz	r2, 8009798 <_scanf_chars+0x1c>
 800978a:	698a      	ldr	r2, [r1, #24]
 800978c:	2a00      	cmp	r2, #0
 800978e:	bf14      	ite	ne
 8009790:	f04f 32ff 	movne.w	r2, #4294967295
 8009794:	2201      	moveq	r2, #1
 8009796:	608a      	str	r2, [r1, #8]
 8009798:	6822      	ldr	r2, [r4, #0]
 800979a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800982c <_scanf_chars+0xb0>
 800979e:	06d1      	lsls	r1, r2, #27
 80097a0:	bf5f      	itttt	pl
 80097a2:	681a      	ldrpl	r2, [r3, #0]
 80097a4:	1d11      	addpl	r1, r2, #4
 80097a6:	6019      	strpl	r1, [r3, #0]
 80097a8:	6816      	ldrpl	r6, [r2, #0]
 80097aa:	2700      	movs	r7, #0
 80097ac:	69a0      	ldr	r0, [r4, #24]
 80097ae:	b188      	cbz	r0, 80097d4 <_scanf_chars+0x58>
 80097b0:	2801      	cmp	r0, #1
 80097b2:	d107      	bne.n	80097c4 <_scanf_chars+0x48>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	6963      	ldr	r3, [r4, #20]
 80097ba:	5c9b      	ldrb	r3, [r3, r2]
 80097bc:	b953      	cbnz	r3, 80097d4 <_scanf_chars+0x58>
 80097be:	2f00      	cmp	r7, #0
 80097c0:	d031      	beq.n	8009826 <_scanf_chars+0xaa>
 80097c2:	e022      	b.n	800980a <_scanf_chars+0x8e>
 80097c4:	2802      	cmp	r0, #2
 80097c6:	d120      	bne.n	800980a <_scanf_chars+0x8e>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80097d0:	071b      	lsls	r3, r3, #28
 80097d2:	d41a      	bmi.n	800980a <_scanf_chars+0x8e>
 80097d4:	6823      	ldr	r3, [r4, #0]
 80097d6:	06da      	lsls	r2, r3, #27
 80097d8:	bf5e      	ittt	pl
 80097da:	682b      	ldrpl	r3, [r5, #0]
 80097dc:	781b      	ldrbpl	r3, [r3, #0]
 80097de:	f806 3b01 	strbpl.w	r3, [r6], #1
 80097e2:	682a      	ldr	r2, [r5, #0]
 80097e4:	686b      	ldr	r3, [r5, #4]
 80097e6:	3201      	adds	r2, #1
 80097e8:	602a      	str	r2, [r5, #0]
 80097ea:	68a2      	ldr	r2, [r4, #8]
 80097ec:	3b01      	subs	r3, #1
 80097ee:	3a01      	subs	r2, #1
 80097f0:	606b      	str	r3, [r5, #4]
 80097f2:	3701      	adds	r7, #1
 80097f4:	60a2      	str	r2, [r4, #8]
 80097f6:	b142      	cbz	r2, 800980a <_scanf_chars+0x8e>
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	dcd7      	bgt.n	80097ac <_scanf_chars+0x30>
 80097fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009800:	4629      	mov	r1, r5
 8009802:	4640      	mov	r0, r8
 8009804:	4798      	blx	r3
 8009806:	2800      	cmp	r0, #0
 8009808:	d0d0      	beq.n	80097ac <_scanf_chars+0x30>
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	f013 0310 	ands.w	r3, r3, #16
 8009810:	d105      	bne.n	800981e <_scanf_chars+0xa2>
 8009812:	68e2      	ldr	r2, [r4, #12]
 8009814:	3201      	adds	r2, #1
 8009816:	60e2      	str	r2, [r4, #12]
 8009818:	69a2      	ldr	r2, [r4, #24]
 800981a:	b102      	cbz	r2, 800981e <_scanf_chars+0xa2>
 800981c:	7033      	strb	r3, [r6, #0]
 800981e:	6923      	ldr	r3, [r4, #16]
 8009820:	443b      	add	r3, r7
 8009822:	6123      	str	r3, [r4, #16]
 8009824:	2000      	movs	r0, #0
 8009826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800982a:	bf00      	nop
 800982c:	0800a725 	.word	0x0800a725

08009830 <_scanf_i>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	4698      	mov	r8, r3
 8009836:	4b74      	ldr	r3, [pc, #464]	@ (8009a08 <_scanf_i+0x1d8>)
 8009838:	460c      	mov	r4, r1
 800983a:	4682      	mov	sl, r0
 800983c:	4616      	mov	r6, r2
 800983e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009842:	b087      	sub	sp, #28
 8009844:	ab03      	add	r3, sp, #12
 8009846:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800984a:	4b70      	ldr	r3, [pc, #448]	@ (8009a0c <_scanf_i+0x1dc>)
 800984c:	69a1      	ldr	r1, [r4, #24]
 800984e:	4a70      	ldr	r2, [pc, #448]	@ (8009a10 <_scanf_i+0x1e0>)
 8009850:	2903      	cmp	r1, #3
 8009852:	bf08      	it	eq
 8009854:	461a      	moveq	r2, r3
 8009856:	68a3      	ldr	r3, [r4, #8]
 8009858:	9201      	str	r2, [sp, #4]
 800985a:	1e5a      	subs	r2, r3, #1
 800985c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009860:	bf88      	it	hi
 8009862:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009866:	4627      	mov	r7, r4
 8009868:	bf82      	ittt	hi
 800986a:	eb03 0905 	addhi.w	r9, r3, r5
 800986e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009872:	60a3      	strhi	r3, [r4, #8]
 8009874:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009878:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800987c:	bf98      	it	ls
 800987e:	f04f 0900 	movls.w	r9, #0
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	463d      	mov	r5, r7
 8009886:	f04f 0b00 	mov.w	fp, #0
 800988a:	6831      	ldr	r1, [r6, #0]
 800988c:	ab03      	add	r3, sp, #12
 800988e:	7809      	ldrb	r1, [r1, #0]
 8009890:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009894:	2202      	movs	r2, #2
 8009896:	f7f6 fc9b 	bl	80001d0 <memchr>
 800989a:	b328      	cbz	r0, 80098e8 <_scanf_i+0xb8>
 800989c:	f1bb 0f01 	cmp.w	fp, #1
 80098a0:	d159      	bne.n	8009956 <_scanf_i+0x126>
 80098a2:	6862      	ldr	r2, [r4, #4]
 80098a4:	b92a      	cbnz	r2, 80098b2 <_scanf_i+0x82>
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	2108      	movs	r1, #8
 80098aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098ae:	6061      	str	r1, [r4, #4]
 80098b0:	6022      	str	r2, [r4, #0]
 80098b2:	6822      	ldr	r2, [r4, #0]
 80098b4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80098b8:	6022      	str	r2, [r4, #0]
 80098ba:	68a2      	ldr	r2, [r4, #8]
 80098bc:	1e51      	subs	r1, r2, #1
 80098be:	60a1      	str	r1, [r4, #8]
 80098c0:	b192      	cbz	r2, 80098e8 <_scanf_i+0xb8>
 80098c2:	6832      	ldr	r2, [r6, #0]
 80098c4:	1c51      	adds	r1, r2, #1
 80098c6:	6031      	str	r1, [r6, #0]
 80098c8:	7812      	ldrb	r2, [r2, #0]
 80098ca:	f805 2b01 	strb.w	r2, [r5], #1
 80098ce:	6872      	ldr	r2, [r6, #4]
 80098d0:	3a01      	subs	r2, #1
 80098d2:	2a00      	cmp	r2, #0
 80098d4:	6072      	str	r2, [r6, #4]
 80098d6:	dc07      	bgt.n	80098e8 <_scanf_i+0xb8>
 80098d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80098dc:	4631      	mov	r1, r6
 80098de:	4650      	mov	r0, sl
 80098e0:	4790      	blx	r2
 80098e2:	2800      	cmp	r0, #0
 80098e4:	f040 8085 	bne.w	80099f2 <_scanf_i+0x1c2>
 80098e8:	f10b 0b01 	add.w	fp, fp, #1
 80098ec:	f1bb 0f03 	cmp.w	fp, #3
 80098f0:	d1cb      	bne.n	800988a <_scanf_i+0x5a>
 80098f2:	6863      	ldr	r3, [r4, #4]
 80098f4:	b90b      	cbnz	r3, 80098fa <_scanf_i+0xca>
 80098f6:	230a      	movs	r3, #10
 80098f8:	6063      	str	r3, [r4, #4]
 80098fa:	6863      	ldr	r3, [r4, #4]
 80098fc:	4945      	ldr	r1, [pc, #276]	@ (8009a14 <_scanf_i+0x1e4>)
 80098fe:	6960      	ldr	r0, [r4, #20]
 8009900:	1ac9      	subs	r1, r1, r3
 8009902:	f000 f935 	bl	8009b70 <__sccl>
 8009906:	f04f 0b00 	mov.w	fp, #0
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	6822      	ldr	r2, [r4, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d03d      	beq.n	800998e <_scanf_i+0x15e>
 8009912:	6831      	ldr	r1, [r6, #0]
 8009914:	6960      	ldr	r0, [r4, #20]
 8009916:	f891 c000 	ldrb.w	ip, [r1]
 800991a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800991e:	2800      	cmp	r0, #0
 8009920:	d035      	beq.n	800998e <_scanf_i+0x15e>
 8009922:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009926:	d124      	bne.n	8009972 <_scanf_i+0x142>
 8009928:	0510      	lsls	r0, r2, #20
 800992a:	d522      	bpl.n	8009972 <_scanf_i+0x142>
 800992c:	f10b 0b01 	add.w	fp, fp, #1
 8009930:	f1b9 0f00 	cmp.w	r9, #0
 8009934:	d003      	beq.n	800993e <_scanf_i+0x10e>
 8009936:	3301      	adds	r3, #1
 8009938:	f109 39ff 	add.w	r9, r9, #4294967295
 800993c:	60a3      	str	r3, [r4, #8]
 800993e:	6873      	ldr	r3, [r6, #4]
 8009940:	3b01      	subs	r3, #1
 8009942:	2b00      	cmp	r3, #0
 8009944:	6073      	str	r3, [r6, #4]
 8009946:	dd1b      	ble.n	8009980 <_scanf_i+0x150>
 8009948:	6833      	ldr	r3, [r6, #0]
 800994a:	3301      	adds	r3, #1
 800994c:	6033      	str	r3, [r6, #0]
 800994e:	68a3      	ldr	r3, [r4, #8]
 8009950:	3b01      	subs	r3, #1
 8009952:	60a3      	str	r3, [r4, #8]
 8009954:	e7d9      	b.n	800990a <_scanf_i+0xda>
 8009956:	f1bb 0f02 	cmp.w	fp, #2
 800995a:	d1ae      	bne.n	80098ba <_scanf_i+0x8a>
 800995c:	6822      	ldr	r2, [r4, #0]
 800995e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009962:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009966:	d1bf      	bne.n	80098e8 <_scanf_i+0xb8>
 8009968:	2110      	movs	r1, #16
 800996a:	6061      	str	r1, [r4, #4]
 800996c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009970:	e7a2      	b.n	80098b8 <_scanf_i+0x88>
 8009972:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009976:	6022      	str	r2, [r4, #0]
 8009978:	780b      	ldrb	r3, [r1, #0]
 800997a:	f805 3b01 	strb.w	r3, [r5], #1
 800997e:	e7de      	b.n	800993e <_scanf_i+0x10e>
 8009980:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009984:	4631      	mov	r1, r6
 8009986:	4650      	mov	r0, sl
 8009988:	4798      	blx	r3
 800998a:	2800      	cmp	r0, #0
 800998c:	d0df      	beq.n	800994e <_scanf_i+0x11e>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	05d9      	lsls	r1, r3, #23
 8009992:	d50d      	bpl.n	80099b0 <_scanf_i+0x180>
 8009994:	42bd      	cmp	r5, r7
 8009996:	d909      	bls.n	80099ac <_scanf_i+0x17c>
 8009998:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800999c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099a0:	4632      	mov	r2, r6
 80099a2:	4650      	mov	r0, sl
 80099a4:	4798      	blx	r3
 80099a6:	f105 39ff 	add.w	r9, r5, #4294967295
 80099aa:	464d      	mov	r5, r9
 80099ac:	42bd      	cmp	r5, r7
 80099ae:	d028      	beq.n	8009a02 <_scanf_i+0x1d2>
 80099b0:	6822      	ldr	r2, [r4, #0]
 80099b2:	f012 0210 	ands.w	r2, r2, #16
 80099b6:	d113      	bne.n	80099e0 <_scanf_i+0x1b0>
 80099b8:	702a      	strb	r2, [r5, #0]
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	9e01      	ldr	r6, [sp, #4]
 80099be:	4639      	mov	r1, r7
 80099c0:	4650      	mov	r0, sl
 80099c2:	47b0      	blx	r6
 80099c4:	f8d8 3000 	ldr.w	r3, [r8]
 80099c8:	6821      	ldr	r1, [r4, #0]
 80099ca:	1d1a      	adds	r2, r3, #4
 80099cc:	f8c8 2000 	str.w	r2, [r8]
 80099d0:	f011 0f20 	tst.w	r1, #32
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	d00f      	beq.n	80099f8 <_scanf_i+0x1c8>
 80099d8:	6018      	str	r0, [r3, #0]
 80099da:	68e3      	ldr	r3, [r4, #12]
 80099dc:	3301      	adds	r3, #1
 80099de:	60e3      	str	r3, [r4, #12]
 80099e0:	6923      	ldr	r3, [r4, #16]
 80099e2:	1bed      	subs	r5, r5, r7
 80099e4:	445d      	add	r5, fp
 80099e6:	442b      	add	r3, r5
 80099e8:	6123      	str	r3, [r4, #16]
 80099ea:	2000      	movs	r0, #0
 80099ec:	b007      	add	sp, #28
 80099ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f2:	f04f 0b00 	mov.w	fp, #0
 80099f6:	e7ca      	b.n	800998e <_scanf_i+0x15e>
 80099f8:	07ca      	lsls	r2, r1, #31
 80099fa:	bf4c      	ite	mi
 80099fc:	8018      	strhmi	r0, [r3, #0]
 80099fe:	6018      	strpl	r0, [r3, #0]
 8009a00:	e7eb      	b.n	80099da <_scanf_i+0x1aa>
 8009a02:	2001      	movs	r0, #1
 8009a04:	e7f2      	b.n	80099ec <_scanf_i+0x1bc>
 8009a06:	bf00      	nop
 8009a08:	0800a6d0 	.word	0x0800a6d0
 8009a0c:	08006e59 	.word	0x08006e59
 8009a10:	08009e89 	.word	0x08009e89
 8009a14:	0800aa61 	.word	0x0800aa61

08009a18 <__sflush_r>:
 8009a18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a20:	0716      	lsls	r6, r2, #28
 8009a22:	4605      	mov	r5, r0
 8009a24:	460c      	mov	r4, r1
 8009a26:	d454      	bmi.n	8009ad2 <__sflush_r+0xba>
 8009a28:	684b      	ldr	r3, [r1, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dc02      	bgt.n	8009a34 <__sflush_r+0x1c>
 8009a2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dd48      	ble.n	8009ac6 <__sflush_r+0xae>
 8009a34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a36:	2e00      	cmp	r6, #0
 8009a38:	d045      	beq.n	8009ac6 <__sflush_r+0xae>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a40:	682f      	ldr	r7, [r5, #0]
 8009a42:	6a21      	ldr	r1, [r4, #32]
 8009a44:	602b      	str	r3, [r5, #0]
 8009a46:	d030      	beq.n	8009aaa <__sflush_r+0x92>
 8009a48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	0759      	lsls	r1, r3, #29
 8009a4e:	d505      	bpl.n	8009a5c <__sflush_r+0x44>
 8009a50:	6863      	ldr	r3, [r4, #4]
 8009a52:	1ad2      	subs	r2, r2, r3
 8009a54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a56:	b10b      	cbz	r3, 8009a5c <__sflush_r+0x44>
 8009a58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a5a:	1ad2      	subs	r2, r2, r3
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a60:	6a21      	ldr	r1, [r4, #32]
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b0      	blx	r6
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	d106      	bne.n	8009a7a <__sflush_r+0x62>
 8009a6c:	6829      	ldr	r1, [r5, #0]
 8009a6e:	291d      	cmp	r1, #29
 8009a70:	d82b      	bhi.n	8009aca <__sflush_r+0xb2>
 8009a72:	4a2a      	ldr	r2, [pc, #168]	@ (8009b1c <__sflush_r+0x104>)
 8009a74:	410a      	asrs	r2, r1
 8009a76:	07d6      	lsls	r6, r2, #31
 8009a78:	d427      	bmi.n	8009aca <__sflush_r+0xb2>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	6062      	str	r2, [r4, #4]
 8009a7e:	04d9      	lsls	r1, r3, #19
 8009a80:	6922      	ldr	r2, [r4, #16]
 8009a82:	6022      	str	r2, [r4, #0]
 8009a84:	d504      	bpl.n	8009a90 <__sflush_r+0x78>
 8009a86:	1c42      	adds	r2, r0, #1
 8009a88:	d101      	bne.n	8009a8e <__sflush_r+0x76>
 8009a8a:	682b      	ldr	r3, [r5, #0]
 8009a8c:	b903      	cbnz	r3, 8009a90 <__sflush_r+0x78>
 8009a8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a92:	602f      	str	r7, [r5, #0]
 8009a94:	b1b9      	cbz	r1, 8009ac6 <__sflush_r+0xae>
 8009a96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a9a:	4299      	cmp	r1, r3
 8009a9c:	d002      	beq.n	8009aa4 <__sflush_r+0x8c>
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f7fe fec6 	bl	8008830 <_free_r>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009aa8:	e00d      	b.n	8009ac6 <__sflush_r+0xae>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4628      	mov	r0, r5
 8009aae:	47b0      	blx	r6
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	1c50      	adds	r0, r2, #1
 8009ab4:	d1c9      	bne.n	8009a4a <__sflush_r+0x32>
 8009ab6:	682b      	ldr	r3, [r5, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0c6      	beq.n	8009a4a <__sflush_r+0x32>
 8009abc:	2b1d      	cmp	r3, #29
 8009abe:	d001      	beq.n	8009ac4 <__sflush_r+0xac>
 8009ac0:	2b16      	cmp	r3, #22
 8009ac2:	d11e      	bne.n	8009b02 <__sflush_r+0xea>
 8009ac4:	602f      	str	r7, [r5, #0]
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e022      	b.n	8009b10 <__sflush_r+0xf8>
 8009aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ace:	b21b      	sxth	r3, r3
 8009ad0:	e01b      	b.n	8009b0a <__sflush_r+0xf2>
 8009ad2:	690f      	ldr	r7, [r1, #16]
 8009ad4:	2f00      	cmp	r7, #0
 8009ad6:	d0f6      	beq.n	8009ac6 <__sflush_r+0xae>
 8009ad8:	0793      	lsls	r3, r2, #30
 8009ada:	680e      	ldr	r6, [r1, #0]
 8009adc:	bf08      	it	eq
 8009ade:	694b      	ldreq	r3, [r1, #20]
 8009ae0:	600f      	str	r7, [r1, #0]
 8009ae2:	bf18      	it	ne
 8009ae4:	2300      	movne	r3, #0
 8009ae6:	eba6 0807 	sub.w	r8, r6, r7
 8009aea:	608b      	str	r3, [r1, #8]
 8009aec:	f1b8 0f00 	cmp.w	r8, #0
 8009af0:	dde9      	ble.n	8009ac6 <__sflush_r+0xae>
 8009af2:	6a21      	ldr	r1, [r4, #32]
 8009af4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009af6:	4643      	mov	r3, r8
 8009af8:	463a      	mov	r2, r7
 8009afa:	4628      	mov	r0, r5
 8009afc:	47b0      	blx	r6
 8009afe:	2800      	cmp	r0, #0
 8009b00:	dc08      	bgt.n	8009b14 <__sflush_r+0xfc>
 8009b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b0a:	81a3      	strh	r3, [r4, #12]
 8009b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b14:	4407      	add	r7, r0
 8009b16:	eba8 0800 	sub.w	r8, r8, r0
 8009b1a:	e7e7      	b.n	8009aec <__sflush_r+0xd4>
 8009b1c:	dfbffffe 	.word	0xdfbffffe

08009b20 <_fflush_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	690b      	ldr	r3, [r1, #16]
 8009b24:	4605      	mov	r5, r0
 8009b26:	460c      	mov	r4, r1
 8009b28:	b913      	cbnz	r3, 8009b30 <_fflush_r+0x10>
 8009b2a:	2500      	movs	r5, #0
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	bd38      	pop	{r3, r4, r5, pc}
 8009b30:	b118      	cbz	r0, 8009b3a <_fflush_r+0x1a>
 8009b32:	6a03      	ldr	r3, [r0, #32]
 8009b34:	b90b      	cbnz	r3, 8009b3a <_fflush_r+0x1a>
 8009b36:	f7fd fe7f 	bl	8007838 <__sinit>
 8009b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0f3      	beq.n	8009b2a <_fflush_r+0xa>
 8009b42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b44:	07d0      	lsls	r0, r2, #31
 8009b46:	d404      	bmi.n	8009b52 <_fflush_r+0x32>
 8009b48:	0599      	lsls	r1, r3, #22
 8009b4a:	d402      	bmi.n	8009b52 <_fflush_r+0x32>
 8009b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b4e:	f7fe f816 	bl	8007b7e <__retarget_lock_acquire_recursive>
 8009b52:	4628      	mov	r0, r5
 8009b54:	4621      	mov	r1, r4
 8009b56:	f7ff ff5f 	bl	8009a18 <__sflush_r>
 8009b5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b5c:	07da      	lsls	r2, r3, #31
 8009b5e:	4605      	mov	r5, r0
 8009b60:	d4e4      	bmi.n	8009b2c <_fflush_r+0xc>
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	059b      	lsls	r3, r3, #22
 8009b66:	d4e1      	bmi.n	8009b2c <_fflush_r+0xc>
 8009b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b6a:	f7fe f809 	bl	8007b80 <__retarget_lock_release_recursive>
 8009b6e:	e7dd      	b.n	8009b2c <_fflush_r+0xc>

08009b70 <__sccl>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	780b      	ldrb	r3, [r1, #0]
 8009b74:	4604      	mov	r4, r0
 8009b76:	2b5e      	cmp	r3, #94	@ 0x5e
 8009b78:	bf0b      	itete	eq
 8009b7a:	784b      	ldrbeq	r3, [r1, #1]
 8009b7c:	1c4a      	addne	r2, r1, #1
 8009b7e:	1c8a      	addeq	r2, r1, #2
 8009b80:	2100      	movne	r1, #0
 8009b82:	bf08      	it	eq
 8009b84:	2101      	moveq	r1, #1
 8009b86:	3801      	subs	r0, #1
 8009b88:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009b8c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009b90:	42a8      	cmp	r0, r5
 8009b92:	d1fb      	bne.n	8009b8c <__sccl+0x1c>
 8009b94:	b90b      	cbnz	r3, 8009b9a <__sccl+0x2a>
 8009b96:	1e50      	subs	r0, r2, #1
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	f081 0101 	eor.w	r1, r1, #1
 8009b9e:	54e1      	strb	r1, [r4, r3]
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ba8:	2d2d      	cmp	r5, #45	@ 0x2d
 8009baa:	d005      	beq.n	8009bb8 <__sccl+0x48>
 8009bac:	2d5d      	cmp	r5, #93	@ 0x5d
 8009bae:	d016      	beq.n	8009bde <__sccl+0x6e>
 8009bb0:	2d00      	cmp	r5, #0
 8009bb2:	d0f1      	beq.n	8009b98 <__sccl+0x28>
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	e7f2      	b.n	8009b9e <__sccl+0x2e>
 8009bb8:	7846      	ldrb	r6, [r0, #1]
 8009bba:	2e5d      	cmp	r6, #93	@ 0x5d
 8009bbc:	d0fa      	beq.n	8009bb4 <__sccl+0x44>
 8009bbe:	42b3      	cmp	r3, r6
 8009bc0:	dcf8      	bgt.n	8009bb4 <__sccl+0x44>
 8009bc2:	3002      	adds	r0, #2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	3201      	adds	r2, #1
 8009bc8:	4296      	cmp	r6, r2
 8009bca:	54a1      	strb	r1, [r4, r2]
 8009bcc:	dcfb      	bgt.n	8009bc6 <__sccl+0x56>
 8009bce:	1af2      	subs	r2, r6, r3
 8009bd0:	3a01      	subs	r2, #1
 8009bd2:	1c5d      	adds	r5, r3, #1
 8009bd4:	42b3      	cmp	r3, r6
 8009bd6:	bfa8      	it	ge
 8009bd8:	2200      	movge	r2, #0
 8009bda:	18ab      	adds	r3, r5, r2
 8009bdc:	e7e1      	b.n	8009ba2 <__sccl+0x32>
 8009bde:	4610      	mov	r0, r2
 8009be0:	e7da      	b.n	8009b98 <__sccl+0x28>

08009be2 <__submore>:
 8009be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009be6:	460c      	mov	r4, r1
 8009be8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009bea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bee:	4299      	cmp	r1, r3
 8009bf0:	d11d      	bne.n	8009c2e <__submore+0x4c>
 8009bf2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009bf6:	f7fe fe8f 	bl	8008918 <_malloc_r>
 8009bfa:	b918      	cbnz	r0, 8009c04 <__submore+0x22>
 8009bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c08:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009c0a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009c0e:	6360      	str	r0, [r4, #52]	@ 0x34
 8009c10:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009c14:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009c18:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009c1c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009c20:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009c24:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009c28:	6020      	str	r0, [r4, #0]
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e7e8      	b.n	8009c00 <__submore+0x1e>
 8009c2e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009c30:	0077      	lsls	r7, r6, #1
 8009c32:	463a      	mov	r2, r7
 8009c34:	f000 f88c 	bl	8009d50 <_realloc_r>
 8009c38:	4605      	mov	r5, r0
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d0de      	beq.n	8009bfc <__submore+0x1a>
 8009c3e:	eb00 0806 	add.w	r8, r0, r6
 8009c42:	4601      	mov	r1, r0
 8009c44:	4632      	mov	r2, r6
 8009c46:	4640      	mov	r0, r8
 8009c48:	f000 f830 	bl	8009cac <memcpy>
 8009c4c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009c50:	f8c4 8000 	str.w	r8, [r4]
 8009c54:	e7e9      	b.n	8009c2a <__submore+0x48>

08009c56 <memmove>:
 8009c56:	4288      	cmp	r0, r1
 8009c58:	b510      	push	{r4, lr}
 8009c5a:	eb01 0402 	add.w	r4, r1, r2
 8009c5e:	d902      	bls.n	8009c66 <memmove+0x10>
 8009c60:	4284      	cmp	r4, r0
 8009c62:	4623      	mov	r3, r4
 8009c64:	d807      	bhi.n	8009c76 <memmove+0x20>
 8009c66:	1e43      	subs	r3, r0, #1
 8009c68:	42a1      	cmp	r1, r4
 8009c6a:	d008      	beq.n	8009c7e <memmove+0x28>
 8009c6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c74:	e7f8      	b.n	8009c68 <memmove+0x12>
 8009c76:	4402      	add	r2, r0
 8009c78:	4601      	mov	r1, r0
 8009c7a:	428a      	cmp	r2, r1
 8009c7c:	d100      	bne.n	8009c80 <memmove+0x2a>
 8009c7e:	bd10      	pop	{r4, pc}
 8009c80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c84:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c88:	e7f7      	b.n	8009c7a <memmove+0x24>
	...

08009c8c <_sbrk_r>:
 8009c8c:	b538      	push	{r3, r4, r5, lr}
 8009c8e:	4d06      	ldr	r5, [pc, #24]	@ (8009ca8 <_sbrk_r+0x1c>)
 8009c90:	2300      	movs	r3, #0
 8009c92:	4604      	mov	r4, r0
 8009c94:	4608      	mov	r0, r1
 8009c96:	602b      	str	r3, [r5, #0]
 8009c98:	f7f8 f9cc 	bl	8002034 <_sbrk>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_sbrk_r+0x1a>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_sbrk_r+0x1a>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	20000a00 	.word	0x20000a00

08009cac <memcpy>:
 8009cac:	440a      	add	r2, r1
 8009cae:	4291      	cmp	r1, r2
 8009cb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009cb4:	d100      	bne.n	8009cb8 <memcpy+0xc>
 8009cb6:	4770      	bx	lr
 8009cb8:	b510      	push	{r4, lr}
 8009cba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cc2:	4291      	cmp	r1, r2
 8009cc4:	d1f9      	bne.n	8009cba <memcpy+0xe>
 8009cc6:	bd10      	pop	{r4, pc}

08009cc8 <__assert_func>:
 8009cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cca:	4614      	mov	r4, r2
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b09      	ldr	r3, [pc, #36]	@ (8009cf4 <__assert_func+0x2c>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	68d8      	ldr	r0, [r3, #12]
 8009cd6:	b954      	cbnz	r4, 8009cee <__assert_func+0x26>
 8009cd8:	4b07      	ldr	r3, [pc, #28]	@ (8009cf8 <__assert_func+0x30>)
 8009cda:	461c      	mov	r4, r3
 8009cdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ce0:	9100      	str	r1, [sp, #0]
 8009ce2:	462b      	mov	r3, r5
 8009ce4:	4905      	ldr	r1, [pc, #20]	@ (8009cfc <__assert_func+0x34>)
 8009ce6:	f000 f8df 	bl	8009ea8 <fiprintf>
 8009cea:	f000 f8ef 	bl	8009ecc <abort>
 8009cee:	4b04      	ldr	r3, [pc, #16]	@ (8009d00 <__assert_func+0x38>)
 8009cf0:	e7f4      	b.n	8009cdc <__assert_func+0x14>
 8009cf2:	bf00      	nop
 8009cf4:	20000048 	.word	0x20000048
 8009cf8:	0800aab1 	.word	0x0800aab1
 8009cfc:	0800aa83 	.word	0x0800aa83
 8009d00:	0800aa76 	.word	0x0800aa76

08009d04 <_calloc_r>:
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	fba1 5402 	umull	r5, r4, r1, r2
 8009d0a:	b93c      	cbnz	r4, 8009d1c <_calloc_r+0x18>
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	f7fe fe03 	bl	8008918 <_malloc_r>
 8009d12:	4606      	mov	r6, r0
 8009d14:	b928      	cbnz	r0, 8009d22 <_calloc_r+0x1e>
 8009d16:	2600      	movs	r6, #0
 8009d18:	4630      	mov	r0, r6
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}
 8009d1c:	220c      	movs	r2, #12
 8009d1e:	6002      	str	r2, [r0, #0]
 8009d20:	e7f9      	b.n	8009d16 <_calloc_r+0x12>
 8009d22:	462a      	mov	r2, r5
 8009d24:	4621      	mov	r1, r4
 8009d26:	f7fd fe60 	bl	80079ea <memset>
 8009d2a:	e7f5      	b.n	8009d18 <_calloc_r+0x14>

08009d2c <__ascii_mbtowc>:
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	b901      	cbnz	r1, 8009d32 <__ascii_mbtowc+0x6>
 8009d30:	a901      	add	r1, sp, #4
 8009d32:	b142      	cbz	r2, 8009d46 <__ascii_mbtowc+0x1a>
 8009d34:	b14b      	cbz	r3, 8009d4a <__ascii_mbtowc+0x1e>
 8009d36:	7813      	ldrb	r3, [r2, #0]
 8009d38:	600b      	str	r3, [r1, #0]
 8009d3a:	7812      	ldrb	r2, [r2, #0]
 8009d3c:	1e10      	subs	r0, r2, #0
 8009d3e:	bf18      	it	ne
 8009d40:	2001      	movne	r0, #1
 8009d42:	b002      	add	sp, #8
 8009d44:	4770      	bx	lr
 8009d46:	4610      	mov	r0, r2
 8009d48:	e7fb      	b.n	8009d42 <__ascii_mbtowc+0x16>
 8009d4a:	f06f 0001 	mvn.w	r0, #1
 8009d4e:	e7f8      	b.n	8009d42 <__ascii_mbtowc+0x16>

08009d50 <_realloc_r>:
 8009d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d54:	4680      	mov	r8, r0
 8009d56:	4615      	mov	r5, r2
 8009d58:	460c      	mov	r4, r1
 8009d5a:	b921      	cbnz	r1, 8009d66 <_realloc_r+0x16>
 8009d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d60:	4611      	mov	r1, r2
 8009d62:	f7fe bdd9 	b.w	8008918 <_malloc_r>
 8009d66:	b92a      	cbnz	r2, 8009d74 <_realloc_r+0x24>
 8009d68:	f7fe fd62 	bl	8008830 <_free_r>
 8009d6c:	2400      	movs	r4, #0
 8009d6e:	4620      	mov	r0, r4
 8009d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d74:	f000 f8b1 	bl	8009eda <_malloc_usable_size_r>
 8009d78:	4285      	cmp	r5, r0
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	d802      	bhi.n	8009d84 <_realloc_r+0x34>
 8009d7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009d82:	d8f4      	bhi.n	8009d6e <_realloc_r+0x1e>
 8009d84:	4629      	mov	r1, r5
 8009d86:	4640      	mov	r0, r8
 8009d88:	f7fe fdc6 	bl	8008918 <_malloc_r>
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d0ec      	beq.n	8009d6c <_realloc_r+0x1c>
 8009d92:	42b5      	cmp	r5, r6
 8009d94:	462a      	mov	r2, r5
 8009d96:	4621      	mov	r1, r4
 8009d98:	bf28      	it	cs
 8009d9a:	4632      	movcs	r2, r6
 8009d9c:	f7ff ff86 	bl	8009cac <memcpy>
 8009da0:	4621      	mov	r1, r4
 8009da2:	4640      	mov	r0, r8
 8009da4:	f7fe fd44 	bl	8008830 <_free_r>
 8009da8:	463c      	mov	r4, r7
 8009daa:	e7e0      	b.n	8009d6e <_realloc_r+0x1e>

08009dac <_strtoul_l.constprop.0>:
 8009dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009db0:	4e34      	ldr	r6, [pc, #208]	@ (8009e84 <_strtoul_l.constprop.0+0xd8>)
 8009db2:	4686      	mov	lr, r0
 8009db4:	460d      	mov	r5, r1
 8009db6:	4628      	mov	r0, r5
 8009db8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dbc:	5d37      	ldrb	r7, [r6, r4]
 8009dbe:	f017 0708 	ands.w	r7, r7, #8
 8009dc2:	d1f8      	bne.n	8009db6 <_strtoul_l.constprop.0+0xa>
 8009dc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009dc6:	d12f      	bne.n	8009e28 <_strtoul_l.constprop.0+0x7c>
 8009dc8:	782c      	ldrb	r4, [r5, #0]
 8009dca:	2701      	movs	r7, #1
 8009dcc:	1c85      	adds	r5, r0, #2
 8009dce:	f033 0010 	bics.w	r0, r3, #16
 8009dd2:	d109      	bne.n	8009de8 <_strtoul_l.constprop.0+0x3c>
 8009dd4:	2c30      	cmp	r4, #48	@ 0x30
 8009dd6:	d12c      	bne.n	8009e32 <_strtoul_l.constprop.0+0x86>
 8009dd8:	7828      	ldrb	r0, [r5, #0]
 8009dda:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009dde:	2858      	cmp	r0, #88	@ 0x58
 8009de0:	d127      	bne.n	8009e32 <_strtoul_l.constprop.0+0x86>
 8009de2:	786c      	ldrb	r4, [r5, #1]
 8009de4:	2310      	movs	r3, #16
 8009de6:	3502      	adds	r5, #2
 8009de8:	f04f 38ff 	mov.w	r8, #4294967295
 8009dec:	2600      	movs	r6, #0
 8009dee:	fbb8 f8f3 	udiv	r8, r8, r3
 8009df2:	fb03 f908 	mul.w	r9, r3, r8
 8009df6:	ea6f 0909 	mvn.w	r9, r9
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009e00:	f1bc 0f09 	cmp.w	ip, #9
 8009e04:	d81c      	bhi.n	8009e40 <_strtoul_l.constprop.0+0x94>
 8009e06:	4664      	mov	r4, ip
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	dd2a      	ble.n	8009e62 <_strtoul_l.constprop.0+0xb6>
 8009e0c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009e10:	d007      	beq.n	8009e22 <_strtoul_l.constprop.0+0x76>
 8009e12:	4580      	cmp	r8, r0
 8009e14:	d322      	bcc.n	8009e5c <_strtoul_l.constprop.0+0xb0>
 8009e16:	d101      	bne.n	8009e1c <_strtoul_l.constprop.0+0x70>
 8009e18:	45a1      	cmp	r9, r4
 8009e1a:	db1f      	blt.n	8009e5c <_strtoul_l.constprop.0+0xb0>
 8009e1c:	fb00 4003 	mla	r0, r0, r3, r4
 8009e20:	2601      	movs	r6, #1
 8009e22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e26:	e7e9      	b.n	8009dfc <_strtoul_l.constprop.0+0x50>
 8009e28:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e2a:	bf04      	itt	eq
 8009e2c:	782c      	ldrbeq	r4, [r5, #0]
 8009e2e:	1c85      	addeq	r5, r0, #2
 8009e30:	e7cd      	b.n	8009dce <_strtoul_l.constprop.0+0x22>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1d8      	bne.n	8009de8 <_strtoul_l.constprop.0+0x3c>
 8009e36:	2c30      	cmp	r4, #48	@ 0x30
 8009e38:	bf0c      	ite	eq
 8009e3a:	2308      	moveq	r3, #8
 8009e3c:	230a      	movne	r3, #10
 8009e3e:	e7d3      	b.n	8009de8 <_strtoul_l.constprop.0+0x3c>
 8009e40:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009e44:	f1bc 0f19 	cmp.w	ip, #25
 8009e48:	d801      	bhi.n	8009e4e <_strtoul_l.constprop.0+0xa2>
 8009e4a:	3c37      	subs	r4, #55	@ 0x37
 8009e4c:	e7dc      	b.n	8009e08 <_strtoul_l.constprop.0+0x5c>
 8009e4e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009e52:	f1bc 0f19 	cmp.w	ip, #25
 8009e56:	d804      	bhi.n	8009e62 <_strtoul_l.constprop.0+0xb6>
 8009e58:	3c57      	subs	r4, #87	@ 0x57
 8009e5a:	e7d5      	b.n	8009e08 <_strtoul_l.constprop.0+0x5c>
 8009e5c:	f04f 36ff 	mov.w	r6, #4294967295
 8009e60:	e7df      	b.n	8009e22 <_strtoul_l.constprop.0+0x76>
 8009e62:	1c73      	adds	r3, r6, #1
 8009e64:	d106      	bne.n	8009e74 <_strtoul_l.constprop.0+0xc8>
 8009e66:	2322      	movs	r3, #34	@ 0x22
 8009e68:	f8ce 3000 	str.w	r3, [lr]
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	b932      	cbnz	r2, 8009e7e <_strtoul_l.constprop.0+0xd2>
 8009e70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e74:	b107      	cbz	r7, 8009e78 <_strtoul_l.constprop.0+0xcc>
 8009e76:	4240      	negs	r0, r0
 8009e78:	2a00      	cmp	r2, #0
 8009e7a:	d0f9      	beq.n	8009e70 <_strtoul_l.constprop.0+0xc4>
 8009e7c:	b106      	cbz	r6, 8009e80 <_strtoul_l.constprop.0+0xd4>
 8009e7e:	1e69      	subs	r1, r5, #1
 8009e80:	6011      	str	r1, [r2, #0]
 8009e82:	e7f5      	b.n	8009e70 <_strtoul_l.constprop.0+0xc4>
 8009e84:	0800a725 	.word	0x0800a725

08009e88 <_strtoul_r>:
 8009e88:	f7ff bf90 	b.w	8009dac <_strtoul_l.constprop.0>

08009e8c <__ascii_wctomb>:
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	4608      	mov	r0, r1
 8009e90:	b141      	cbz	r1, 8009ea4 <__ascii_wctomb+0x18>
 8009e92:	2aff      	cmp	r2, #255	@ 0xff
 8009e94:	d904      	bls.n	8009ea0 <__ascii_wctomb+0x14>
 8009e96:	228a      	movs	r2, #138	@ 0x8a
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9e:	4770      	bx	lr
 8009ea0:	700a      	strb	r2, [r1, #0]
 8009ea2:	2001      	movs	r0, #1
 8009ea4:	4770      	bx	lr
	...

08009ea8 <fiprintf>:
 8009ea8:	b40e      	push	{r1, r2, r3}
 8009eaa:	b503      	push	{r0, r1, lr}
 8009eac:	4601      	mov	r1, r0
 8009eae:	ab03      	add	r3, sp, #12
 8009eb0:	4805      	ldr	r0, [pc, #20]	@ (8009ec8 <fiprintf+0x20>)
 8009eb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb6:	6800      	ldr	r0, [r0, #0]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	f000 f83f 	bl	8009f3c <_vfiprintf_r>
 8009ebe:	b002      	add	sp, #8
 8009ec0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec4:	b003      	add	sp, #12
 8009ec6:	4770      	bx	lr
 8009ec8:	20000048 	.word	0x20000048

08009ecc <abort>:
 8009ecc:	b508      	push	{r3, lr}
 8009ece:	2006      	movs	r0, #6
 8009ed0:	f000 fa08 	bl	800a2e4 <raise>
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	f7f8 f835 	bl	8001f44 <_exit>

08009eda <_malloc_usable_size_r>:
 8009eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ede:	1f18      	subs	r0, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	bfbc      	itt	lt
 8009ee4:	580b      	ldrlt	r3, [r1, r0]
 8009ee6:	18c0      	addlt	r0, r0, r3
 8009ee8:	4770      	bx	lr

08009eea <__sfputc_r>:
 8009eea:	6893      	ldr	r3, [r2, #8]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	b410      	push	{r4}
 8009ef2:	6093      	str	r3, [r2, #8]
 8009ef4:	da08      	bge.n	8009f08 <__sfputc_r+0x1e>
 8009ef6:	6994      	ldr	r4, [r2, #24]
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	db01      	blt.n	8009f00 <__sfputc_r+0x16>
 8009efc:	290a      	cmp	r1, #10
 8009efe:	d103      	bne.n	8009f08 <__sfputc_r+0x1e>
 8009f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f04:	f000 b932 	b.w	800a16c <__swbuf_r>
 8009f08:	6813      	ldr	r3, [r2, #0]
 8009f0a:	1c58      	adds	r0, r3, #1
 8009f0c:	6010      	str	r0, [r2, #0]
 8009f0e:	7019      	strb	r1, [r3, #0]
 8009f10:	4608      	mov	r0, r1
 8009f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <__sfputs_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	460f      	mov	r7, r1
 8009f1e:	4614      	mov	r4, r2
 8009f20:	18d5      	adds	r5, r2, r3
 8009f22:	42ac      	cmp	r4, r5
 8009f24:	d101      	bne.n	8009f2a <__sfputs_r+0x12>
 8009f26:	2000      	movs	r0, #0
 8009f28:	e007      	b.n	8009f3a <__sfputs_r+0x22>
 8009f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2e:	463a      	mov	r2, r7
 8009f30:	4630      	mov	r0, r6
 8009f32:	f7ff ffda 	bl	8009eea <__sfputc_r>
 8009f36:	1c43      	adds	r3, r0, #1
 8009f38:	d1f3      	bne.n	8009f22 <__sfputs_r+0xa>
 8009f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f3c <_vfiprintf_r>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	460d      	mov	r5, r1
 8009f42:	b09d      	sub	sp, #116	@ 0x74
 8009f44:	4614      	mov	r4, r2
 8009f46:	4698      	mov	r8, r3
 8009f48:	4606      	mov	r6, r0
 8009f4a:	b118      	cbz	r0, 8009f54 <_vfiprintf_r+0x18>
 8009f4c:	6a03      	ldr	r3, [r0, #32]
 8009f4e:	b90b      	cbnz	r3, 8009f54 <_vfiprintf_r+0x18>
 8009f50:	f7fd fc72 	bl	8007838 <__sinit>
 8009f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f56:	07d9      	lsls	r1, r3, #31
 8009f58:	d405      	bmi.n	8009f66 <_vfiprintf_r+0x2a>
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	059a      	lsls	r2, r3, #22
 8009f5e:	d402      	bmi.n	8009f66 <_vfiprintf_r+0x2a>
 8009f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f62:	f7fd fe0c 	bl	8007b7e <__retarget_lock_acquire_recursive>
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	071b      	lsls	r3, r3, #28
 8009f6a:	d501      	bpl.n	8009f70 <_vfiprintf_r+0x34>
 8009f6c:	692b      	ldr	r3, [r5, #16]
 8009f6e:	b99b      	cbnz	r3, 8009f98 <_vfiprintf_r+0x5c>
 8009f70:	4629      	mov	r1, r5
 8009f72:	4630      	mov	r0, r6
 8009f74:	f000 f938 	bl	800a1e8 <__swsetup_r>
 8009f78:	b170      	cbz	r0, 8009f98 <_vfiprintf_r+0x5c>
 8009f7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f7c:	07dc      	lsls	r4, r3, #31
 8009f7e:	d504      	bpl.n	8009f8a <_vfiprintf_r+0x4e>
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295
 8009f84:	b01d      	add	sp, #116	@ 0x74
 8009f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8a:	89ab      	ldrh	r3, [r5, #12]
 8009f8c:	0598      	lsls	r0, r3, #22
 8009f8e:	d4f7      	bmi.n	8009f80 <_vfiprintf_r+0x44>
 8009f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f92:	f7fd fdf5 	bl	8007b80 <__retarget_lock_release_recursive>
 8009f96:	e7f3      	b.n	8009f80 <_vfiprintf_r+0x44>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f9c:	2320      	movs	r3, #32
 8009f9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa6:	2330      	movs	r3, #48	@ 0x30
 8009fa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a158 <_vfiprintf_r+0x21c>
 8009fac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fb0:	f04f 0901 	mov.w	r9, #1
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	469a      	mov	sl, r3
 8009fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fbc:	b10a      	cbz	r2, 8009fc2 <_vfiprintf_r+0x86>
 8009fbe:	2a25      	cmp	r2, #37	@ 0x25
 8009fc0:	d1f9      	bne.n	8009fb6 <_vfiprintf_r+0x7a>
 8009fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc6:	d00b      	beq.n	8009fe0 <_vfiprintf_r+0xa4>
 8009fc8:	465b      	mov	r3, fp
 8009fca:	4622      	mov	r2, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f7ff ffa2 	bl	8009f18 <__sfputs_r>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f000 80a7 	beq.w	800a128 <_vfiprintf_r+0x1ec>
 8009fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fdc:	445a      	add	r2, fp
 8009fde:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 809f 	beq.w	800a128 <_vfiprintf_r+0x1ec>
 8009fea:	2300      	movs	r3, #0
 8009fec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff4:	f10a 0a01 	add.w	sl, sl, #1
 8009ff8:	9304      	str	r3, [sp, #16]
 8009ffa:	9307      	str	r3, [sp, #28]
 8009ffc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a000:	931a      	str	r3, [sp, #104]	@ 0x68
 800a002:	4654      	mov	r4, sl
 800a004:	2205      	movs	r2, #5
 800a006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00a:	4853      	ldr	r0, [pc, #332]	@ (800a158 <_vfiprintf_r+0x21c>)
 800a00c:	f7f6 f8e0 	bl	80001d0 <memchr>
 800a010:	9a04      	ldr	r2, [sp, #16]
 800a012:	b9d8      	cbnz	r0, 800a04c <_vfiprintf_r+0x110>
 800a014:	06d1      	lsls	r1, r2, #27
 800a016:	bf44      	itt	mi
 800a018:	2320      	movmi	r3, #32
 800a01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a01e:	0713      	lsls	r3, r2, #28
 800a020:	bf44      	itt	mi
 800a022:	232b      	movmi	r3, #43	@ 0x2b
 800a024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a028:	f89a 3000 	ldrb.w	r3, [sl]
 800a02c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a02e:	d015      	beq.n	800a05c <_vfiprintf_r+0x120>
 800a030:	9a07      	ldr	r2, [sp, #28]
 800a032:	4654      	mov	r4, sl
 800a034:	2000      	movs	r0, #0
 800a036:	f04f 0c0a 	mov.w	ip, #10
 800a03a:	4621      	mov	r1, r4
 800a03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a040:	3b30      	subs	r3, #48	@ 0x30
 800a042:	2b09      	cmp	r3, #9
 800a044:	d94b      	bls.n	800a0de <_vfiprintf_r+0x1a2>
 800a046:	b1b0      	cbz	r0, 800a076 <_vfiprintf_r+0x13a>
 800a048:	9207      	str	r2, [sp, #28]
 800a04a:	e014      	b.n	800a076 <_vfiprintf_r+0x13a>
 800a04c:	eba0 0308 	sub.w	r3, r0, r8
 800a050:	fa09 f303 	lsl.w	r3, r9, r3
 800a054:	4313      	orrs	r3, r2
 800a056:	9304      	str	r3, [sp, #16]
 800a058:	46a2      	mov	sl, r4
 800a05a:	e7d2      	b.n	800a002 <_vfiprintf_r+0xc6>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	1d19      	adds	r1, r3, #4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	9103      	str	r1, [sp, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	bfbb      	ittet	lt
 800a068:	425b      	neglt	r3, r3
 800a06a:	f042 0202 	orrlt.w	r2, r2, #2
 800a06e:	9307      	strge	r3, [sp, #28]
 800a070:	9307      	strlt	r3, [sp, #28]
 800a072:	bfb8      	it	lt
 800a074:	9204      	strlt	r2, [sp, #16]
 800a076:	7823      	ldrb	r3, [r4, #0]
 800a078:	2b2e      	cmp	r3, #46	@ 0x2e
 800a07a:	d10a      	bne.n	800a092 <_vfiprintf_r+0x156>
 800a07c:	7863      	ldrb	r3, [r4, #1]
 800a07e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a080:	d132      	bne.n	800a0e8 <_vfiprintf_r+0x1ac>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	1d1a      	adds	r2, r3, #4
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	9203      	str	r2, [sp, #12]
 800a08a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a08e:	3402      	adds	r4, #2
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a168 <_vfiprintf_r+0x22c>
 800a096:	7821      	ldrb	r1, [r4, #0]
 800a098:	2203      	movs	r2, #3
 800a09a:	4650      	mov	r0, sl
 800a09c:	f7f6 f898 	bl	80001d0 <memchr>
 800a0a0:	b138      	cbz	r0, 800a0b2 <_vfiprintf_r+0x176>
 800a0a2:	9b04      	ldr	r3, [sp, #16]
 800a0a4:	eba0 000a 	sub.w	r0, r0, sl
 800a0a8:	2240      	movs	r2, #64	@ 0x40
 800a0aa:	4082      	lsls	r2, r0
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	3401      	adds	r4, #1
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	4829      	ldr	r0, [pc, #164]	@ (800a15c <_vfiprintf_r+0x220>)
 800a0b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0bc:	2206      	movs	r2, #6
 800a0be:	f7f6 f887 	bl	80001d0 <memchr>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d03f      	beq.n	800a146 <_vfiprintf_r+0x20a>
 800a0c6:	4b26      	ldr	r3, [pc, #152]	@ (800a160 <_vfiprintf_r+0x224>)
 800a0c8:	bb1b      	cbnz	r3, 800a112 <_vfiprintf_r+0x1d6>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	3307      	adds	r3, #7
 800a0ce:	f023 0307 	bic.w	r3, r3, #7
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	9303      	str	r3, [sp, #12]
 800a0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d8:	443b      	add	r3, r7
 800a0da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0dc:	e76a      	b.n	8009fb4 <_vfiprintf_r+0x78>
 800a0de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	2001      	movs	r0, #1
 800a0e6:	e7a8      	b.n	800a03a <_vfiprintf_r+0xfe>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	3401      	adds	r4, #1
 800a0ec:	9305      	str	r3, [sp, #20]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	f04f 0c0a 	mov.w	ip, #10
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0fa:	3a30      	subs	r2, #48	@ 0x30
 800a0fc:	2a09      	cmp	r2, #9
 800a0fe:	d903      	bls.n	800a108 <_vfiprintf_r+0x1cc>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0c6      	beq.n	800a092 <_vfiprintf_r+0x156>
 800a104:	9105      	str	r1, [sp, #20]
 800a106:	e7c4      	b.n	800a092 <_vfiprintf_r+0x156>
 800a108:	fb0c 2101 	mla	r1, ip, r1, r2
 800a10c:	4604      	mov	r4, r0
 800a10e:	2301      	movs	r3, #1
 800a110:	e7f0      	b.n	800a0f4 <_vfiprintf_r+0x1b8>
 800a112:	ab03      	add	r3, sp, #12
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	462a      	mov	r2, r5
 800a118:	4b12      	ldr	r3, [pc, #72]	@ (800a164 <_vfiprintf_r+0x228>)
 800a11a:	a904      	add	r1, sp, #16
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7fc ff47 	bl	8006fb0 <_printf_float>
 800a122:	4607      	mov	r7, r0
 800a124:	1c78      	adds	r0, r7, #1
 800a126:	d1d6      	bne.n	800a0d6 <_vfiprintf_r+0x19a>
 800a128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a12a:	07d9      	lsls	r1, r3, #31
 800a12c:	d405      	bmi.n	800a13a <_vfiprintf_r+0x1fe>
 800a12e:	89ab      	ldrh	r3, [r5, #12]
 800a130:	059a      	lsls	r2, r3, #22
 800a132:	d402      	bmi.n	800a13a <_vfiprintf_r+0x1fe>
 800a134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a136:	f7fd fd23 	bl	8007b80 <__retarget_lock_release_recursive>
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	065b      	lsls	r3, r3, #25
 800a13e:	f53f af1f 	bmi.w	8009f80 <_vfiprintf_r+0x44>
 800a142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a144:	e71e      	b.n	8009f84 <_vfiprintf_r+0x48>
 800a146:	ab03      	add	r3, sp, #12
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4b05      	ldr	r3, [pc, #20]	@ (800a164 <_vfiprintf_r+0x228>)
 800a14e:	a904      	add	r1, sp, #16
 800a150:	4630      	mov	r0, r6
 800a152:	f7fd f9c5 	bl	80074e0 <_printf_i>
 800a156:	e7e4      	b.n	800a122 <_vfiprintf_r+0x1e6>
 800a158:	0800aa40 	.word	0x0800aa40
 800a15c:	0800aa4a 	.word	0x0800aa4a
 800a160:	08006fb1 	.word	0x08006fb1
 800a164:	08009f19 	.word	0x08009f19
 800a168:	0800aa46 	.word	0x0800aa46

0800a16c <__swbuf_r>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	460e      	mov	r6, r1
 800a170:	4614      	mov	r4, r2
 800a172:	4605      	mov	r5, r0
 800a174:	b118      	cbz	r0, 800a17e <__swbuf_r+0x12>
 800a176:	6a03      	ldr	r3, [r0, #32]
 800a178:	b90b      	cbnz	r3, 800a17e <__swbuf_r+0x12>
 800a17a:	f7fd fb5d 	bl	8007838 <__sinit>
 800a17e:	69a3      	ldr	r3, [r4, #24]
 800a180:	60a3      	str	r3, [r4, #8]
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	071a      	lsls	r2, r3, #28
 800a186:	d501      	bpl.n	800a18c <__swbuf_r+0x20>
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	b943      	cbnz	r3, 800a19e <__swbuf_r+0x32>
 800a18c:	4621      	mov	r1, r4
 800a18e:	4628      	mov	r0, r5
 800a190:	f000 f82a 	bl	800a1e8 <__swsetup_r>
 800a194:	b118      	cbz	r0, 800a19e <__swbuf_r+0x32>
 800a196:	f04f 37ff 	mov.w	r7, #4294967295
 800a19a:	4638      	mov	r0, r7
 800a19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	6922      	ldr	r2, [r4, #16]
 800a1a2:	1a98      	subs	r0, r3, r2
 800a1a4:	6963      	ldr	r3, [r4, #20]
 800a1a6:	b2f6      	uxtb	r6, r6
 800a1a8:	4283      	cmp	r3, r0
 800a1aa:	4637      	mov	r7, r6
 800a1ac:	dc05      	bgt.n	800a1ba <__swbuf_r+0x4e>
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	f7ff fcb5 	bl	8009b20 <_fflush_r>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d1ed      	bne.n	800a196 <__swbuf_r+0x2a>
 800a1ba:	68a3      	ldr	r3, [r4, #8]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	60a3      	str	r3, [r4, #8]
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	6022      	str	r2, [r4, #0]
 800a1c6:	701e      	strb	r6, [r3, #0]
 800a1c8:	6962      	ldr	r2, [r4, #20]
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d004      	beq.n	800a1da <__swbuf_r+0x6e>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	07db      	lsls	r3, r3, #31
 800a1d4:	d5e1      	bpl.n	800a19a <__swbuf_r+0x2e>
 800a1d6:	2e0a      	cmp	r6, #10
 800a1d8:	d1df      	bne.n	800a19a <__swbuf_r+0x2e>
 800a1da:	4621      	mov	r1, r4
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f7ff fc9f 	bl	8009b20 <_fflush_r>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d0d9      	beq.n	800a19a <__swbuf_r+0x2e>
 800a1e6:	e7d6      	b.n	800a196 <__swbuf_r+0x2a>

0800a1e8 <__swsetup_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4b29      	ldr	r3, [pc, #164]	@ (800a290 <__swsetup_r+0xa8>)
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	6818      	ldr	r0, [r3, #0]
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	b118      	cbz	r0, 800a1fc <__swsetup_r+0x14>
 800a1f4:	6a03      	ldr	r3, [r0, #32]
 800a1f6:	b90b      	cbnz	r3, 800a1fc <__swsetup_r+0x14>
 800a1f8:	f7fd fb1e 	bl	8007838 <__sinit>
 800a1fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a200:	0719      	lsls	r1, r3, #28
 800a202:	d422      	bmi.n	800a24a <__swsetup_r+0x62>
 800a204:	06da      	lsls	r2, r3, #27
 800a206:	d407      	bmi.n	800a218 <__swsetup_r+0x30>
 800a208:	2209      	movs	r2, #9
 800a20a:	602a      	str	r2, [r5, #0]
 800a20c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a210:	81a3      	strh	r3, [r4, #12]
 800a212:	f04f 30ff 	mov.w	r0, #4294967295
 800a216:	e033      	b.n	800a280 <__swsetup_r+0x98>
 800a218:	0758      	lsls	r0, r3, #29
 800a21a:	d512      	bpl.n	800a242 <__swsetup_r+0x5a>
 800a21c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a21e:	b141      	cbz	r1, 800a232 <__swsetup_r+0x4a>
 800a220:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a224:	4299      	cmp	r1, r3
 800a226:	d002      	beq.n	800a22e <__swsetup_r+0x46>
 800a228:	4628      	mov	r0, r5
 800a22a:	f7fe fb01 	bl	8008830 <_free_r>
 800a22e:	2300      	movs	r3, #0
 800a230:	6363      	str	r3, [r4, #52]	@ 0x34
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	2300      	movs	r3, #0
 800a23c:	6063      	str	r3, [r4, #4]
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	f043 0308 	orr.w	r3, r3, #8
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	6923      	ldr	r3, [r4, #16]
 800a24c:	b94b      	cbnz	r3, 800a262 <__swsetup_r+0x7a>
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a258:	d003      	beq.n	800a262 <__swsetup_r+0x7a>
 800a25a:	4621      	mov	r1, r4
 800a25c:	4628      	mov	r0, r5
 800a25e:	f000 f883 	bl	800a368 <__smakebuf_r>
 800a262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a266:	f013 0201 	ands.w	r2, r3, #1
 800a26a:	d00a      	beq.n	800a282 <__swsetup_r+0x9a>
 800a26c:	2200      	movs	r2, #0
 800a26e:	60a2      	str	r2, [r4, #8]
 800a270:	6962      	ldr	r2, [r4, #20]
 800a272:	4252      	negs	r2, r2
 800a274:	61a2      	str	r2, [r4, #24]
 800a276:	6922      	ldr	r2, [r4, #16]
 800a278:	b942      	cbnz	r2, 800a28c <__swsetup_r+0xa4>
 800a27a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a27e:	d1c5      	bne.n	800a20c <__swsetup_r+0x24>
 800a280:	bd38      	pop	{r3, r4, r5, pc}
 800a282:	0799      	lsls	r1, r3, #30
 800a284:	bf58      	it	pl
 800a286:	6962      	ldrpl	r2, [r4, #20]
 800a288:	60a2      	str	r2, [r4, #8]
 800a28a:	e7f4      	b.n	800a276 <__swsetup_r+0x8e>
 800a28c:	2000      	movs	r0, #0
 800a28e:	e7f7      	b.n	800a280 <__swsetup_r+0x98>
 800a290:	20000048 	.word	0x20000048

0800a294 <_raise_r>:
 800a294:	291f      	cmp	r1, #31
 800a296:	b538      	push	{r3, r4, r5, lr}
 800a298:	4605      	mov	r5, r0
 800a29a:	460c      	mov	r4, r1
 800a29c:	d904      	bls.n	800a2a8 <_raise_r+0x14>
 800a29e:	2316      	movs	r3, #22
 800a2a0:	6003      	str	r3, [r0, #0]
 800a2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2aa:	b112      	cbz	r2, 800a2b2 <_raise_r+0x1e>
 800a2ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2b0:	b94b      	cbnz	r3, 800a2c6 <_raise_r+0x32>
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	f000 f830 	bl	800a318 <_getpid_r>
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4601      	mov	r1, r0
 800a2bc:	4628      	mov	r0, r5
 800a2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2c2:	f000 b817 	b.w	800a2f4 <_kill_r>
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d00a      	beq.n	800a2e0 <_raise_r+0x4c>
 800a2ca:	1c59      	adds	r1, r3, #1
 800a2cc:	d103      	bne.n	800a2d6 <_raise_r+0x42>
 800a2ce:	2316      	movs	r3, #22
 800a2d0:	6003      	str	r3, [r0, #0]
 800a2d2:	2001      	movs	r0, #1
 800a2d4:	e7e7      	b.n	800a2a6 <_raise_r+0x12>
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a2dc:	4620      	mov	r0, r4
 800a2de:	4798      	blx	r3
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	e7e0      	b.n	800a2a6 <_raise_r+0x12>

0800a2e4 <raise>:
 800a2e4:	4b02      	ldr	r3, [pc, #8]	@ (800a2f0 <raise+0xc>)
 800a2e6:	4601      	mov	r1, r0
 800a2e8:	6818      	ldr	r0, [r3, #0]
 800a2ea:	f7ff bfd3 	b.w	800a294 <_raise_r>
 800a2ee:	bf00      	nop
 800a2f0:	20000048 	.word	0x20000048

0800a2f4 <_kill_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d07      	ldr	r5, [pc, #28]	@ (800a314 <_kill_r+0x20>)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4608      	mov	r0, r1
 800a2fe:	4611      	mov	r1, r2
 800a300:	602b      	str	r3, [r5, #0]
 800a302:	f7f7 fe0f 	bl	8001f24 <_kill>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	d102      	bne.n	800a310 <_kill_r+0x1c>
 800a30a:	682b      	ldr	r3, [r5, #0]
 800a30c:	b103      	cbz	r3, 800a310 <_kill_r+0x1c>
 800a30e:	6023      	str	r3, [r4, #0]
 800a310:	bd38      	pop	{r3, r4, r5, pc}
 800a312:	bf00      	nop
 800a314:	20000a00 	.word	0x20000a00

0800a318 <_getpid_r>:
 800a318:	f7f7 bdfc 	b.w	8001f14 <_getpid>

0800a31c <__swhatbuf_r>:
 800a31c:	b570      	push	{r4, r5, r6, lr}
 800a31e:	460c      	mov	r4, r1
 800a320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a324:	2900      	cmp	r1, #0
 800a326:	b096      	sub	sp, #88	@ 0x58
 800a328:	4615      	mov	r5, r2
 800a32a:	461e      	mov	r6, r3
 800a32c:	da0d      	bge.n	800a34a <__swhatbuf_r+0x2e>
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a334:	f04f 0100 	mov.w	r1, #0
 800a338:	bf14      	ite	ne
 800a33a:	2340      	movne	r3, #64	@ 0x40
 800a33c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a340:	2000      	movs	r0, #0
 800a342:	6031      	str	r1, [r6, #0]
 800a344:	602b      	str	r3, [r5, #0]
 800a346:	b016      	add	sp, #88	@ 0x58
 800a348:	bd70      	pop	{r4, r5, r6, pc}
 800a34a:	466a      	mov	r2, sp
 800a34c:	f000 f848 	bl	800a3e0 <_fstat_r>
 800a350:	2800      	cmp	r0, #0
 800a352:	dbec      	blt.n	800a32e <__swhatbuf_r+0x12>
 800a354:	9901      	ldr	r1, [sp, #4]
 800a356:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a35a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a35e:	4259      	negs	r1, r3
 800a360:	4159      	adcs	r1, r3
 800a362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a366:	e7eb      	b.n	800a340 <__swhatbuf_r+0x24>

0800a368 <__smakebuf_r>:
 800a368:	898b      	ldrh	r3, [r1, #12]
 800a36a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a36c:	079d      	lsls	r5, r3, #30
 800a36e:	4606      	mov	r6, r0
 800a370:	460c      	mov	r4, r1
 800a372:	d507      	bpl.n	800a384 <__smakebuf_r+0x1c>
 800a374:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	6123      	str	r3, [r4, #16]
 800a37c:	2301      	movs	r3, #1
 800a37e:	6163      	str	r3, [r4, #20]
 800a380:	b003      	add	sp, #12
 800a382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a384:	ab01      	add	r3, sp, #4
 800a386:	466a      	mov	r2, sp
 800a388:	f7ff ffc8 	bl	800a31c <__swhatbuf_r>
 800a38c:	9f00      	ldr	r7, [sp, #0]
 800a38e:	4605      	mov	r5, r0
 800a390:	4639      	mov	r1, r7
 800a392:	4630      	mov	r0, r6
 800a394:	f7fe fac0 	bl	8008918 <_malloc_r>
 800a398:	b948      	cbnz	r0, 800a3ae <__smakebuf_r+0x46>
 800a39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a39e:	059a      	lsls	r2, r3, #22
 800a3a0:	d4ee      	bmi.n	800a380 <__smakebuf_r+0x18>
 800a3a2:	f023 0303 	bic.w	r3, r3, #3
 800a3a6:	f043 0302 	orr.w	r3, r3, #2
 800a3aa:	81a3      	strh	r3, [r4, #12]
 800a3ac:	e7e2      	b.n	800a374 <__smakebuf_r+0xc>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	6020      	str	r0, [r4, #0]
 800a3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3be:	b15b      	cbz	r3, 800a3d8 <__smakebuf_r+0x70>
 800a3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	f000 f81d 	bl	800a404 <_isatty_r>
 800a3ca:	b128      	cbz	r0, 800a3d8 <__smakebuf_r+0x70>
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	f023 0303 	bic.w	r3, r3, #3
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	81a3      	strh	r3, [r4, #12]
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	431d      	orrs	r5, r3
 800a3dc:	81a5      	strh	r5, [r4, #12]
 800a3de:	e7cf      	b.n	800a380 <__smakebuf_r+0x18>

0800a3e0 <_fstat_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4d07      	ldr	r5, [pc, #28]	@ (800a400 <_fstat_r+0x20>)
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	f7f7 fdf9 	bl	8001fe4 <_fstat>
 800a3f2:	1c43      	adds	r3, r0, #1
 800a3f4:	d102      	bne.n	800a3fc <_fstat_r+0x1c>
 800a3f6:	682b      	ldr	r3, [r5, #0]
 800a3f8:	b103      	cbz	r3, 800a3fc <_fstat_r+0x1c>
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	bd38      	pop	{r3, r4, r5, pc}
 800a3fe:	bf00      	nop
 800a400:	20000a00 	.word	0x20000a00

0800a404 <_isatty_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d06      	ldr	r5, [pc, #24]	@ (800a420 <_isatty_r+0x1c>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	f7f7 fdf8 	bl	8002004 <_isatty>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_isatty_r+0x1a>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_isatty_r+0x1a>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	20000a00 	.word	0x20000a00

0800a424 <_init>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr

0800a430 <_fini>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	bf00      	nop
 800a434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a436:	bc08      	pop	{r3}
 800a438:	469e      	mov	lr, r3
 800a43a:	4770      	bx	lr
