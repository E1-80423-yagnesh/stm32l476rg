
gsmstm32l480.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a28c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800a420  0800a420  0000b420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aaec  0800aaec  0000c204  2**0
                  CONTENTS
  4 .ARM          00000008  0800aaec  0800aaec  0000baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaf4  0800aaf4  0000c204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaf4  0800aaf4  0000baf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aaf8  0800aaf8  0000baf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800aafc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  20000204  0800ad00  0000c204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a10  0800ad00  0000ca10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017605  00000000  00000000  0000c234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b89  00000000  00000000  00023839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  000263c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001180  00000000  00000000  00027a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029f76  00000000  00000000  00028b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e8d  00000000  00000000  00052afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a543  00000000  00000000  0006c98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176ece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007574  00000000  00000000  00176f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0017e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a404 	.word	0x0800a404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800a404 	.word	0x0800a404

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <GSM_Debug_Print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
SystemConfig_t systemConfig;
void GSM_Debug_Print(const char *data)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)data, strlen(data), HAL_MAX_DELAY);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff f9e5 	bl	8000270 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	4803      	ldr	r0, [pc, #12]	@ (8000ec0 <GSM_Debug_Print+0x28>)
 8000eb2:	f005 f923 	bl	80060fc <HAL_UART_Transmit>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200003ac 	.word	0x200003ac

08000ec4 <GSM_SendCommand>:

void GSM_SendCommand(const char *cmd, char *response, uint16_t resp_size)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	80fb      	strh	r3, [r7, #6]
    memset(response, 0, resp_size);
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	68b8      	ldr	r0, [r7, #8]
 8000eda:	f006 fcf0 	bl	80078be <memset>
    HAL_UART_Transmit(&huart4, (uint8_t*)cmd, strlen(cmd), 100);
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff f9c6 	bl	8000270 <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	2364      	movs	r3, #100	@ 0x64
 8000eea:	68f9      	ldr	r1, [r7, #12]
 8000eec:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <GSM_SendCommand+0x44>)
 8000eee:	f005 f905 	bl	80060fc <HAL_UART_Transmit>
    HAL_UART_Receive(&huart4, (uint8_t*)response, resp_size, 100);
 8000ef2:	88fa      	ldrh	r2, [r7, #6]
 8000ef4:	2364      	movs	r3, #100	@ 0x64
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <GSM_SendCommand+0x44>)
 8000efa:	f005 f988 	bl	800620e <HAL_UART_Receive>
//    GSM_Debug_Print("CMD: ");
//    GSM_Debug_Print(cmd);
//    GSM_Debug_Print("RESP: ");
//    GSM_Debug_Print(response);
//    GSM_Debug_Print("\r\n");
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000324 	.word	0x20000324

08000f0c <Config_Init>:

// Initialize default configuration
void Config_Init(void)
{
 8000f0c:	b490      	push	{r4, r7}
 8000f0e:	af00      	add	r7, sp, #0
    strcpy(systemConfig.serverIP, "69.62.83.250");
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <Config_Init+0x20>)
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <Config_Init+0x24>)
 8000f14:	4614      	mov	r4, r2
 8000f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f18:	c407      	stmia	r4!, {r0, r1, r2}
 8000f1a:	7023      	strb	r3, [r4, #0]
    systemConfig.serverPort = 4200;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <Config_Init+0x20>)
 8000f1e:	f241 0268 	movw	r2, #4200	@ 0x1068
 8000f22:	829a      	strh	r2, [r3, #20]
    //systemConfig.refreshTime = 5; // seconds
   // strcpy(systemConfig.password, "default123");
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc90      	pop	{r4, r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	200008a4 	.word	0x200008a4
 8000f30:	0800a420 	.word	0x0800a420

08000f34 <Read_ADC>:

void Read_ADC(uint16_t *values, uint32_t *channels, uint8_t num_channels)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	@ 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]

    for (uint8_t i = 0; i < num_channels; i++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f5a:	e03a      	b.n	8000fd2 <Read_ADC+0x9e>
    {
        sConfig.Channel = channels[i];
 8000f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	4413      	add	r3, r2
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	617b      	str	r3, [r7, #20]
        sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f6a:	2306      	movs	r3, #6
 8000f6c:	61bb      	str	r3, [r7, #24]
        sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]

        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	481b      	ldr	r0, [pc, #108]	@ (8000fe8 <Read_ADC+0xb4>)
 8000f7a:	f001 feb9 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <Read_ADC+0x54>
        {
            Error_Handler();
 8000f84:	f000 fdac 	bl	8001ae0 <Error_Handler>
        }

        if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000f88:	4817      	ldr	r0, [pc, #92]	@ (8000fe8 <Read_ADC+0xb4>)
 8000f8a:	f001 fcdd 	bl	8002948 <HAL_ADC_Start>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <Read_ADC+0x64>
        {
            Error_Handler();
 8000f94:	f000 fda4 	bl	8001ae0 <Error_Handler>
        }

        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	4812      	ldr	r0, [pc, #72]	@ (8000fe8 <Read_ADC+0xb4>)
 8000f9e:	f001 fdc1 	bl	8002b24 <HAL_ADC_PollForConversion>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <Read_ADC+0x78>
        {
            Error_Handler();
 8000fa8:	f000 fd9a 	bl	8001ae0 <Error_Handler>
        }

        values[i] = HAL_ADC_GetValue(&hadc1);
 8000fac:	480e      	ldr	r0, [pc, #56]	@ (8000fe8 <Read_ADC+0xb4>)
 8000fae:	f001 fe91 	bl	8002cd4 <HAL_ADC_GetValue>
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b28a      	uxth	r2, r1
 8000fc0:	801a      	strh	r2, [r3, #0]
        HAL_ADC_Stop(&hadc1);
 8000fc2:	4809      	ldr	r0, [pc, #36]	@ (8000fe8 <Read_ADC+0xb4>)
 8000fc4:	f001 fd7a 	bl	8002abc <HAL_ADC_Stop>
    for (uint8_t i = 0; i < num_channels; i++)
 8000fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fcc:	3301      	adds	r3, #1
 8000fce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000fd2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3bf      	bcc.n	8000f5c <Read_ADC+0x28>
    }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3730      	adds	r7, #48	@ 0x30
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000220 	.word	0x20000220

08000fec <gsm_get_time_from_module>:

void gsm_get_time_from_module(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b092      	sub	sp, #72	@ 0x48
 8000ff0:	af00      	add	r7, sp, #0
    char response[64] = {0};
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	223c      	movs	r2, #60	@ 0x3c
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f006 fc5e 	bl	80078be <memset>
    // Enable network time sync and save config
    GSM_SendCommand("AT+CLTS=1\r\n", response, sizeof(response));
 8001002:	463b      	mov	r3, r7
 8001004:	2240      	movs	r2, #64	@ 0x40
 8001006:	4619      	mov	r1, r3
 8001008:	481c      	ldr	r0, [pc, #112]	@ (800107c <gsm_get_time_from_module+0x90>)
 800100a:	f7ff ff5b 	bl	8000ec4 <GSM_SendCommand>
    GSM_SendCommand("AT&W\r\n", response, sizeof(response));
 800100e:	463b      	mov	r3, r7
 8001010:	2240      	movs	r2, #64	@ 0x40
 8001012:	4619      	mov	r1, r3
 8001014:	481a      	ldr	r0, [pc, #104]	@ (8001080 <gsm_get_time_from_module+0x94>)
 8001016:	f7ff ff55 	bl	8000ec4 <GSM_SendCommand>

    GSM_SendCommand("AT+CCLK?\r\n", response, sizeof(response));
 800101a:	463b      	mov	r3, r7
 800101c:	2240      	movs	r2, #64	@ 0x40
 800101e:	4619      	mov	r1, r3
 8001020:	4818      	ldr	r0, [pc, #96]	@ (8001084 <gsm_get_time_from_module+0x98>)
 8001022:	f7ff ff4f 	bl	8000ec4 <GSM_SendCommand>

    // Find the quote-delimited time string
    char *start = strchr(response, '\"');
 8001026:	463b      	mov	r3, r7
 8001028:	2122      	movs	r1, #34	@ 0x22
 800102a:	4618      	mov	r0, r3
 800102c:	f006 fc4f 	bl	80078ce <strchr>
 8001030:	6478      	str	r0, [r7, #68]	@ 0x44
    char *end = strrchr(response, '\"');
 8001032:	463b      	mov	r3, r7
 8001034:	2122      	movs	r1, #34	@ 0x22
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fc7b 	bl	8007932 <strrchr>
 800103c:	6438      	str	r0, [r7, #64]	@ 0x40
    if (start && end && (end > start)) {
 800103e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001040:	2b00      	cmp	r3, #0
 8001042:	d017      	beq.n	8001074 <gsm_get_time_from_module+0x88>
 8001044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001046:	2b00      	cmp	r3, #0
 8001048:	d014      	beq.n	8001074 <gsm_get_time_from_module+0x88>
 800104a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800104c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800104e:	429a      	cmp	r2, r3
 8001050:	d910      	bls.n	8001074 <gsm_get_time_from_module+0x88>
        strncpy(gsm_time, start + 1, end - start - 1);
 8001052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001054:	1c59      	adds	r1, r3, #1
 8001056:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	3b01      	subs	r3, #1
 800105e:	461a      	mov	r2, r3
 8001060:	4809      	ldr	r0, [pc, #36]	@ (8001088 <gsm_get_time_from_module+0x9c>)
 8001062:	f006 fc53 	bl	800790c <strncpy>
        gsm_time[end - start - 1] = '\0';
 8001066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	3b01      	subs	r3, #1
 800106e:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <gsm_get_time_from_module+0x9c>)
 8001070:	2100      	movs	r1, #0
 8001072:	54d1      	strb	r1, [r2, r3]
    }
}
 8001074:	bf00      	nop
 8001076:	3748      	adds	r7, #72	@ 0x48
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	0800a430 	.word	0x0800a430
 8001080:	0800a43c 	.word	0x0800a43c
 8001084:	0800a444 	.word	0x0800a444
 8001088:	20000484 	.word	0x20000484

0800108c <gsm_get_imei>:

void gsm_get_imei(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a4      	sub	sp, #144	@ 0x90
 8001090:	af00      	add	r7, sp, #0
    char resp[128] = {0};
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	227c      	movs	r2, #124	@ 0x7c
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f006 fc0d 	bl	80078be <memset>
    GSM_SendCommand("AT+CGSN\r\n", resp, sizeof(resp));
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2280      	movs	r2, #128	@ 0x80
 80010a8:	4619      	mov	r1, r3
 80010aa:	482a      	ldr	r0, [pc, #168]	@ (8001154 <gsm_get_imei+0xc8>)
 80010ac:	f7ff ff0a 	bl	8000ec4 <GSM_SendCommand>

    // Find the first digit sequence in the response
    char *p = resp;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (*p && !(*p >= '0' && *p <= '9')) {
 80010b6:	e004      	b.n	80010c2 <gsm_get_imei+0x36>
        p++;
 80010b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010bc:	3301      	adds	r3, #1
 80010be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    while (*p && !(*p >= '0' && *p <= '9')) {
 80010c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d009      	beq.n	80010e0 <gsm_get_imei+0x54>
 80010cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80010d4:	d9f0      	bls.n	80010b8 <gsm_get_imei+0x2c>
 80010d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b39      	cmp	r3, #57	@ 0x39
 80010de:	d8eb      	bhi.n	80010b8 <gsm_get_imei+0x2c>
    }

    if (*p) {
 80010e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d030      	beq.n	800114c <gsm_get_imei+0xc0>
        char *end = p;
 80010ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80010ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (*end >= '0' && *end <= '9') {
 80010f2:	e004      	b.n	80010fe <gsm_get_imei+0x72>
            end++;
 80010f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010f8:	3301      	adds	r3, #1
 80010fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (*end >= '0' && *end <= '9') {
 80010fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b2f      	cmp	r3, #47	@ 0x2f
 8001106:	d904      	bls.n	8001112 <gsm_get_imei+0x86>
 8001108:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b39      	cmp	r3, #57	@ 0x39
 8001110:	d9f0      	bls.n	80010f4 <gsm_get_imei+0x68>
        }

        int imei_len = end - p;
 8001112:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        if (imei_len > 0 && imei_len < sizeof(imei)) {
 8001120:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001124:	2b00      	cmp	r3, #0
 8001126:	dd11      	ble.n	800114c <gsm_get_imei+0xc0>
 8001128:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800112c:	2b3f      	cmp	r3, #63	@ 0x3f
 800112e:	d80d      	bhi.n	800114c <gsm_get_imei+0xc0>
            strncpy(imei, p, imei_len);
 8001130:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001134:	461a      	mov	r2, r3
 8001136:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800113a:	4807      	ldr	r0, [pc, #28]	@ (8001158 <gsm_get_imei+0xcc>)
 800113c:	f006 fbe6 	bl	800790c <strncpy>
            imei[imei_len] = '\0';
 8001140:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <gsm_get_imei+0xcc>)
 8001142:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001146:	4413      	add	r3, r2
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
        }
    }

}
 800114c:	bf00      	nop
 800114e:	3790      	adds	r7, #144	@ 0x90
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800a450 	.word	0x0800a450
 8001158:	20000444 	.word	0x20000444

0800115c <gsm_get_battery_voltage>:



int gsm_get_battery_voltage(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b096      	sub	sp, #88	@ 0x58
 8001160:	af02      	add	r7, sp, #8
    char response[64] = {0};
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	223c      	movs	r2, #60	@ 0x3c
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f006 fba5 	bl	80078be <memset>
    int battery_mv = -1;
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	60bb      	str	r3, [r7, #8]

    GSM_SendCommand("AT+CBC\r\n", response, sizeof(response));
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2240      	movs	r2, #64	@ 0x40
 8001180:	4619      	mov	r1, r3
 8001182:	4810      	ldr	r0, [pc, #64]	@ (80011c4 <gsm_get_battery_voltage+0x68>)
 8001184:	f7ff fe9e 	bl	8000ec4 <GSM_SendCommand>

    char *ptr = strstr(response, "+CBC:");
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	490e      	ldr	r1, [pc, #56]	@ (80011c8 <gsm_get_battery_voltage+0x6c>)
 800118e:	4618      	mov	r0, r3
 8001190:	f006 fbe5 	bl	800795e <strstr>
 8001194:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (ptr)
 8001196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00e      	beq.n	80011ba <gsm_get_battery_voltage+0x5e>
    {
        int bcs, bcl;
        if (sscanf(ptr, "+CBC: %d,%d,%d", &bcs, &bcl, &battery_mv) == 3)
 800119c:	4639      	mov	r1, r7
 800119e:	1d3a      	adds	r2, r7, #4
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	460b      	mov	r3, r1
 80011a8:	4908      	ldr	r1, [pc, #32]	@ (80011cc <gsm_get_battery_voltage+0x70>)
 80011aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80011ac:	f006 fb18 	bl	80077e0 <siscanf>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d101      	bne.n	80011ba <gsm_get_battery_voltage+0x5e>
        {
            return battery_mv;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	e000      	b.n	80011bc <gsm_get_battery_voltage+0x60>
        }
    }
    return battery_mv;
 80011ba:	68bb      	ldr	r3, [r7, #8]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3750      	adds	r7, #80	@ 0x50
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	0800a45c 	.word	0x0800a45c
 80011c8:	0800a468 	.word	0x0800a468
 80011cc:	0800a470 	.word	0x0800a470

080011d0 <signal_strength>:

int signal_strength(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	@ 0x50
 80011d4:	af00      	add	r7, sp, #0
    char response[64] = {0};
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	223c      	movs	r2, #60	@ 0x3c
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f006 fb6b 	bl	80078be <memset>
    int rssi = -1, ber = -1;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	607b      	str	r3, [r7, #4]

    GSM_SendCommand("AT+CSQ\r\n", response, sizeof(response));
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2240      	movs	r2, #64	@ 0x40
 80011fa:	4619      	mov	r1, r3
 80011fc:	4811      	ldr	r0, [pc, #68]	@ (8001244 <signal_strength+0x74>)
 80011fe:	f7ff fe61 	bl	8000ec4 <GSM_SendCommand>

    char *ptr = strstr(response, "+CSQ:");
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4910      	ldr	r1, [pc, #64]	@ (8001248 <signal_strength+0x78>)
 8001208:	4618      	mov	r0, r3
 800120a:	f006 fba8 	bl	800795e <strstr>
 800120e:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (ptr)
 8001210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00f      	beq.n	8001236 <signal_strength+0x66>
    {
        // Parse two integers: rssi and ber
        if (sscanf(ptr, "+CSQ: %d,%d", &rssi, &ber) == 2)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	f107 0208 	add.w	r2, r7, #8
 800121c:	490b      	ldr	r1, [pc, #44]	@ (800124c <signal_strength+0x7c>)
 800121e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001220:	f006 fade 	bl	80077e0 <siscanf>
 8001224:	4603      	mov	r3, r0
 8001226:	2b02      	cmp	r3, #2
 8001228:	d105      	bne.n	8001236 <signal_strength+0x66>
        {
            strength = rssi;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <signal_strength+0x80>)
 800122e:	6013      	str	r3, [r2, #0]
            return strength;
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <signal_strength+0x80>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	e001      	b.n	800123a <signal_strength+0x6a>
        }
    }
    return -1; // failed
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123a:	4618      	mov	r0, r3
 800123c:	3750      	adds	r7, #80	@ 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	0800a480 	.word	0x0800a480
 8001248:	0800a48c 	.word	0x0800a48c
 800124c:	0800a494 	.word	0x0800a494
 8001250:	20000000 	.word	0x20000000

08001254 <Create_JSON_String>:



void Create_JSON_String(void)
{
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	b093      	sub	sp, #76	@ 0x4c
 8001258:	af0c      	add	r7, sp, #48	@ 0x30
    // Read values
	gsm_get_imei();
 800125a:	f7ff ff17 	bl	800108c <gsm_get_imei>
    gsm_get_time_from_module();
 800125e:	f7ff fec5 	bl	8000fec <gsm_get_time_from_module>
    gsm_battery_voltage = gsm_get_battery_voltage();
 8001262:	f7ff ff7b 	bl	800115c <gsm_get_battery_voltage>
 8001266:	4603      	mov	r3, r0
 8001268:	4a20      	ldr	r2, [pc, #128]	@ (80012ec <Create_JSON_String+0x98>)
 800126a:	6013      	str	r3, [r2, #0]
    Read_ADC(adc_values, channels, 8);
 800126c:	2208      	movs	r2, #8
 800126e:	4920      	ldr	r1, [pc, #128]	@ (80012f0 <Create_JSON_String+0x9c>)
 8001270:	4820      	ldr	r0, [pc, #128]	@ (80012f4 <Create_JSON_String+0xa0>)
 8001272:	f7ff fe5f 	bl	8000f34 <Read_ADC>
    int sig_strength = signal_strength(); // get latest signal strength
 8001276:	f7ff ffab 	bl	80011d0 <signal_strength>
 800127a:	6178      	str	r0, [r7, #20]

    // Create JSON
    snprintf(json_string, sizeof(json_string),
 800127c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <Create_JSON_String+0x98>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a1d      	ldr	r2, [pc, #116]	@ (80012f8 <Create_JSON_String+0xa4>)
 8001282:	6812      	ldr	r2, [r2, #0]
        "}"
        "}",
        imei, gsm_time,
        sig_strength,
        gsm_battery_voltage, gsm_input_voltage,
        adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 8001284:	491b      	ldr	r1, [pc, #108]	@ (80012f4 <Create_JSON_String+0xa0>)
 8001286:	8809      	ldrh	r1, [r1, #0]
    snprintf(json_string, sizeof(json_string),
 8001288:	4608      	mov	r0, r1
        adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 800128a:	491a      	ldr	r1, [pc, #104]	@ (80012f4 <Create_JSON_String+0xa0>)
 800128c:	8849      	ldrh	r1, [r1, #2]
    snprintf(json_string, sizeof(json_string),
 800128e:	460c      	mov	r4, r1
        adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 8001290:	4918      	ldr	r1, [pc, #96]	@ (80012f4 <Create_JSON_String+0xa0>)
 8001292:	8889      	ldrh	r1, [r1, #4]
    snprintf(json_string, sizeof(json_string),
 8001294:	460d      	mov	r5, r1
        adc_values[0], adc_values[1], adc_values[2], adc_values[3],
 8001296:	4917      	ldr	r1, [pc, #92]	@ (80012f4 <Create_JSON_String+0xa0>)
 8001298:	88c9      	ldrh	r1, [r1, #6]
    snprintf(json_string, sizeof(json_string),
 800129a:	460e      	mov	r6, r1
        adc_values[4], adc_values[5], adc_values[6], adc_values[7]
 800129c:	4915      	ldr	r1, [pc, #84]	@ (80012f4 <Create_JSON_String+0xa0>)
 800129e:	8909      	ldrh	r1, [r1, #8]
    snprintf(json_string, sizeof(json_string),
 80012a0:	60f9      	str	r1, [r7, #12]
        adc_values[4], adc_values[5], adc_values[6], adc_values[7]
 80012a2:	4914      	ldr	r1, [pc, #80]	@ (80012f4 <Create_JSON_String+0xa0>)
 80012a4:	8949      	ldrh	r1, [r1, #10]
    snprintf(json_string, sizeof(json_string),
 80012a6:	60b9      	str	r1, [r7, #8]
        adc_values[4], adc_values[5], adc_values[6], adc_values[7]
 80012a8:	4912      	ldr	r1, [pc, #72]	@ (80012f4 <Create_JSON_String+0xa0>)
 80012aa:	8989      	ldrh	r1, [r1, #12]
    snprintf(json_string, sizeof(json_string),
 80012ac:	6079      	str	r1, [r7, #4]
        adc_values[4], adc_values[5], adc_values[6], adc_values[7]
 80012ae:	4911      	ldr	r1, [pc, #68]	@ (80012f4 <Create_JSON_String+0xa0>)
 80012b0:	89c9      	ldrh	r1, [r1, #14]
    snprintf(json_string, sizeof(json_string),
 80012b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80012bc:	68f9      	ldr	r1, [r7, #12]
 80012be:	9108      	str	r1, [sp, #32]
 80012c0:	9607      	str	r6, [sp, #28]
 80012c2:	9506      	str	r5, [sp, #24]
 80012c4:	9405      	str	r4, [sp, #20]
 80012c6:	9004      	str	r0, [sp, #16]
 80012c8:	9203      	str	r2, [sp, #12]
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <Create_JSON_String+0xa8>)
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <Create_JSON_String+0xac>)
 80012d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <Create_JSON_String+0xb0>)
 80012d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012dc:	480a      	ldr	r0, [pc, #40]	@ (8001308 <Create_JSON_String+0xb4>)
 80012de:	f006 fa4b 	bl	8007778 <sniprintf>
    );
}
 80012e2:	bf00      	nop
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	20000010 	.word	0x20000010
 80012f4:	20000434 	.word	0x20000434
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	20000484 	.word	0x20000484
 8001300:	20000444 	.word	0x20000444
 8001304:	0800a4a0 	.word	0x0800a4a0
 8001308:	200004a4 	.word	0x200004a4

0800130c <GPRS_Send_JSON>:




void GPRS_Send_JSON(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8001312:	af02      	add	r7, sp, #8
    char resp[512] = {0};
 8001314:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001318:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	3304      	adds	r3, #4
 8001322:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f006 fac8 	bl	80078be <memset>

    // Create fresh JSON data
    Create_JSON_String();
 800132e:	f7ff ff91 	bl	8001254 <Create_JSON_String>

    // 1. Basic init


    // 2. Set bearer profile
    GSM_SendCommand("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r\n", resp, sizeof(resp));
 8001332:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001336:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800133a:	4619      	mov	r1, r3
 800133c:	4858      	ldr	r0, [pc, #352]	@ (80014a0 <GPRS_Send_JSON+0x194>)
 800133e:	f7ff fdc1 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(5);
 8001342:	2005      	movs	r0, #5
 8001344:	f000 ff5a 	bl	80021fc <HAL_Delay>

    GSM_SendCommand("AT+SAPBR=3,1,\"APN\",\"internet\"\r\n", resp, sizeof(resp));
 8001348:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800134c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001350:	4619      	mov	r1, r3
 8001352:	4854      	ldr	r0, [pc, #336]	@ (80014a4 <GPRS_Send_JSON+0x198>)
 8001354:	f7ff fdb6 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(5);
 8001358:	2005      	movs	r0, #5
 800135a:	f000 ff4f 	bl	80021fc <HAL_Delay>



    GSM_SendCommand("AT+SAPBR=1,1\r\n", resp, sizeof(resp));
 800135e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001366:	4619      	mov	r1, r3
 8001368:	484f      	ldr	r0, [pc, #316]	@ (80014a8 <GPRS_Send_JSON+0x19c>)
 800136a:	f7ff fdab 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(5);
 800136e:	2005      	movs	r0, #5
 8001370:	f000 ff44 	bl	80021fc <HAL_Delay>

    GSM_SendCommand("AT+SAPBR=2,1\r\n", resp, sizeof(resp));
 8001374:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137c:	4619      	mov	r1, r3
 800137e:	484b      	ldr	r0, [pc, #300]	@ (80014ac <GPRS_Send_JSON+0x1a0>)
 8001380:	f7ff fda0 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(5);
 8001384:	2005      	movs	r0, #5
 8001386:	f000 ff39 	bl	80021fc <HAL_Delay>

    // 3. HTTP Init
//    GSM_SendCommand("AT+HTTPTERM\r\n", resp, sizeof(resp)); // ensure clean state
//    HAL_Delay(delay0);

    GSM_SendCommand("AT+HTTPINIT\r\n", resp, sizeof(resp));
 800138a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800138e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001392:	4619      	mov	r1, r3
 8001394:	4846      	ldr	r0, [pc, #280]	@ (80014b0 <GPRS_Send_JSON+0x1a4>)
 8001396:	f7ff fd95 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(5);
 800139a:	2005      	movs	r0, #5
 800139c:	f000 ff2e 	bl	80021fc <HAL_Delay>

    GSM_SendCommand("AT+HTTPPARA=\"CID\",1\r\n", resp, sizeof(resp));
 80013a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a8:	4619      	mov	r1, r3
 80013aa:	4842      	ldr	r0, [pc, #264]	@ (80014b4 <GPRS_Send_JSON+0x1a8>)
 80013ac:	f7ff fd8a 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(5);
 80013b0:	2005      	movs	r0, #5
 80013b2:	f000 ff23 	bl	80021fc <HAL_Delay>



    char http_url[256] = {0};
 80013b6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80013ba:	f5a3 7340 	sub.w	r3, r3, #768	@ 0x300
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	3304      	adds	r3, #4
 80013c4:	22fc      	movs	r2, #252	@ 0xfc
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f006 fa78 	bl	80078be <memset>
    snprintf(http_url, sizeof(http_url), "AT+HTTPPARA=\"URL\",\"http://%s:%d/api/test\"\r\n", systemConfig.serverIP, systemConfig.serverPort);
 80013ce:	4b3a      	ldr	r3, [pc, #232]	@ (80014b8 <GPRS_Send_JSON+0x1ac>)
 80013d0:	8a9b      	ldrh	r3, [r3, #20]
 80013d2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <GPRS_Send_JSON+0x1ac>)
 80013da:	4a38      	ldr	r2, [pc, #224]	@ (80014bc <GPRS_Send_JSON+0x1b0>)
 80013dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013e0:	f006 f9ca 	bl	8007778 <sniprintf>
    GSM_SendCommand(http_url, resp, sizeof(resp));
 80013e4:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80013e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fd67 	bl	8000ec4 <GSM_SendCommand>
       HAL_Delay(delay);
 80013f6:	4b32      	ldr	r3, [pc, #200]	@ (80014c0 <GPRS_Send_JSON+0x1b4>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fefe 	bl	80021fc <HAL_Delay>
//             "AT+HTTPPARA=\"URL\",\"http://69.62.83.251:4200/api/test\"\r\n");
//    GSM_SendCommand(http_url, resp, sizeof(resp));
//    HAL_Delay(delay);

    // 5. Set content type to JSON (or x-www-form-urlencoded)
    GSM_SendCommand("AT+HTTPPARA=\"CONTENT\",\"application/json\"\r\n", resp, sizeof(resp));
 8001400:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001408:	4619      	mov	r1, r3
 800140a:	482e      	ldr	r0, [pc, #184]	@ (80014c4 <GPRS_Send_JSON+0x1b8>)
 800140c:	f7ff fd5a 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(delay);
 8001410:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <GPRS_Send_JSON+0x1b4>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fef1 	bl	80021fc <HAL_Delay>

//    // 6. Send data length
    char data_len_cmd[64];
    snprintf(data_len_cmd, sizeof(data_len_cmd), "AT+HTTPDATA=%d,1000\r\n", (int)strlen(json_string));
 800141a:	482b      	ldr	r0, [pc, #172]	@ (80014c8 <GPRS_Send_JSON+0x1bc>)
 800141c:	f7fe ff28 	bl	8000270 <strlen>
 8001420:	4603      	mov	r3, r0
 8001422:	4638      	mov	r0, r7
 8001424:	4a29      	ldr	r2, [pc, #164]	@ (80014cc <GPRS_Send_JSON+0x1c0>)
 8001426:	2140      	movs	r1, #64	@ 0x40
 8001428:	f006 f9a6 	bl	8007778 <sniprintf>
    GSM_SendCommand(data_len_cmd, resp, sizeof(resp));
 800142c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8001430:	463b      	mov	r3, r7
 8001432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fd44 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(delay);
 800143c:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <GPRS_Send_JSON+0x1b4>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fedb 	bl	80021fc <HAL_Delay>

    // 7. Send actual JSON data
    HAL_UART_Transmit(&huart4, (uint8_t*)json_string, strlen(json_string), HAL_MAX_DELAY);
 8001446:	4820      	ldr	r0, [pc, #128]	@ (80014c8 <GPRS_Send_JSON+0x1bc>)
 8001448:	f7fe ff12 	bl	8000270 <strlen>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	491c      	ldr	r1, [pc, #112]	@ (80014c8 <GPRS_Send_JSON+0x1bc>)
 8001456:	481e      	ldr	r0, [pc, #120]	@ (80014d0 <GPRS_Send_JSON+0x1c4>)
 8001458:	f004 fe50 	bl	80060fc <HAL_UART_Transmit>
    HAL_Delay(delay);
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <GPRS_Send_JSON+0x1b4>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fecb 	bl	80021fc <HAL_Delay>

    // 8. HTTP POST
    GSM_SendCommand("AT+HTTPACTION=1\r\n", resp, sizeof(resp));
 8001466:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800146a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146e:	4619      	mov	r1, r3
 8001470:	4818      	ldr	r0, [pc, #96]	@ (80014d4 <GPRS_Send_JSON+0x1c8>)
 8001472:	f7ff fd27 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(300);
 8001476:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800147a:	f000 febf 	bl	80021fc <HAL_Delay>
//    // 9. Read server response
//    GSM_SendCommand("AT+HTTPREAD\r\n", resp, sizeof(resp));
//    HAL_Delay(delay);

    // 10. End HTTP
    GSM_SendCommand("AT+HTTPTERM\r\n", resp, sizeof(resp));
 800147e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001482:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001486:	4619      	mov	r1, r3
 8001488:	4813      	ldr	r0, [pc, #76]	@ (80014d8 <GPRS_Send_JSON+0x1cc>)
 800148a:	f7ff fd1b 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(10);
 800148e:	200a      	movs	r0, #10
 8001490:	f000 feb4 	bl	80021fc <HAL_Delay>

    // 11. Close bearer
//    GSM_SendCommand("AT+SAPBR=0,1\r\n", resp, sizeof(resp));
//    HAL_Delay(delay);
}
 8001494:	bf00      	nop
 8001496:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	0800a550 	.word	0x0800a550
 80014a4:	0800a570 	.word	0x0800a570
 80014a8:	0800a590 	.word	0x0800a590
 80014ac:	0800a5a0 	.word	0x0800a5a0
 80014b0:	0800a5b0 	.word	0x0800a5b0
 80014b4:	0800a5c0 	.word	0x0800a5c0
 80014b8:	200008a4 	.word	0x200008a4
 80014bc:	0800a5d8 	.word	0x0800a5d8
 80014c0:	20000004 	.word	0x20000004
 80014c4:	0800a604 	.word	0x0800a604
 80014c8:	200004a4 	.word	0x200004a4
 80014cc:	0800a630 	.word	0x0800a630
 80014d0:	20000324 	.word	0x20000324
 80014d4:	0800a648 	.word	0x0800a648
 80014d8:	0800a65c 	.word	0x0800a65c

080014dc <Check_Incoming_SMS>:


void Check_Incoming_SMS(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80014e2:	af00      	add	r7, sp, #0
    char response[512] = {0};
 80014e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	3304      	adds	r3, #4
 80014f2:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 f9e0 	bl	80078be <memset>

    // Set SMS text mode
    GSM_SendCommand("AT+CMGF=1\r\n", response, sizeof(response));
 80014fe:	463b      	mov	r3, r7
 8001500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	@ (800153c <Check_Incoming_SMS+0x60>)
 8001508:	f7ff fcdc 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(100);
 800150c:	2064      	movs	r0, #100	@ 0x64
 800150e:	f000 fe75 	bl	80021fc <HAL_Delay>

    // List all SMS messages (unread + read)
    GSM_SendCommand("AT+CMGL=\"ALL\"\r\n", response, sizeof(response));
 8001512:	463b      	mov	r3, r7
 8001514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001518:	4619      	mov	r1, r3
 800151a:	4809      	ldr	r0, [pc, #36]	@ (8001540 <Check_Incoming_SMS+0x64>)
 800151c:	f7ff fcd2 	bl	8000ec4 <GSM_SendCommand>
    HAL_Delay(500);
 8001520:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001524:	f000 fe6a 	bl	80021fc <HAL_Delay>

    // Parse SMS messages and look for configuration updates
    Parse_SMS_Messages(response);
 8001528:	463b      	mov	r3, r7
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f80a 	bl	8001544 <Parse_SMS_Messages>


}
 8001530:	bf00      	nop
 8001532:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800a66c 	.word	0x0800a66c
 8001540:	0800a678 	.word	0x0800a678

08001544 <Parse_SMS_Messages>:

// Function to parse SMS messages and extract configuration
void Parse_SMS_Messages(char* sms_data)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    char *line_start = sms_data;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	60fb      	str	r3, [r7, #12]
    char *line_end;

    while ((line_end = strstr(line_start, "\r\n")) != NULL)
 8001550:	e025      	b.n	800159e <Parse_SMS_Messages+0x5a>
    {
        *line_end = '\0'; // End the current line temporarily
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]

        // Skip SMS headers and empty lines
        if (strstr(line_start, "+CMGL:") == NULL && strlen(line_start) > 0)
 8001558:	4917      	ldr	r1, [pc, #92]	@ (80015b8 <Parse_SMS_Messages+0x74>)
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f006 f9ff 	bl	800795e <strstr>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d115      	bne.n	8001592 <Parse_SMS_Messages+0x4e>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d011      	beq.n	8001592 <Parse_SMS_Messages+0x4e>
        {
            // Only process lines that start with CONFIG:
            if (strncmp(line_start, "CONFIG:", 7) == 0)
 800156e:	2207      	movs	r2, #7
 8001570:	4912      	ldr	r1, [pc, #72]	@ (80015bc <Parse_SMS_Messages+0x78>)
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f006 f9b8 	bl	80078e8 <strncmp>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <Parse_SMS_Messages+0x4e>
            {
                if (Extract_IP_Port_From_SMS(line_start))
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 f822 	bl	80015c8 <Extract_IP_Port_From_SMS>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <Parse_SMS_Messages+0x4e>
                {
                    GSM_Debug_Print("Configuration updated from SMS.\r\n");
 800158a:	480d      	ldr	r0, [pc, #52]	@ (80015c0 <Parse_SMS_Messages+0x7c>)
 800158c:	f7ff fc84 	bl	8000e98 <GSM_Debug_Print>
                    break; // Stop after the first successful config
 8001590:	e00e      	b.n	80015b0 <Parse_SMS_Messages+0x6c>
                }
            }
        }

        *line_end = '\r';              // Restore original
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	220d      	movs	r2, #13
 8001596:	701a      	strb	r2, [r3, #0]
        line_start = line_end + 2;     // Move to next line
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	3302      	adds	r3, #2
 800159c:	60fb      	str	r3, [r7, #12]
    while ((line_end = strstr(line_start, "\r\n")) != NULL)
 800159e:	4909      	ldr	r1, [pc, #36]	@ (80015c4 <Parse_SMS_Messages+0x80>)
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f006 f9dc 	bl	800795e <strstr>
 80015a6:	60b8      	str	r0, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1d1      	bne.n	8001552 <Parse_SMS_Messages+0xe>
    }
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	0800a688 	.word	0x0800a688
 80015bc:	0800a690 	.word	0x0800a690
 80015c0:	0800a698 	.word	0x0800a698
 80015c4:	0800a6bc 	.word	0x0800a6bc

080015c8 <Extract_IP_Port_From_SMS>:


int Extract_IP_Port_From_SMS(char* sms_content)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b0a4      	sub	sp, #144	@ 0x90
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
    char temp_ip[20] = {0};
 80015d0:	2300      	movs	r3, #0
 80015d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80015d4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
    int temp_port = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Try to match CONFIG:IP=xxx.xxx.xxx.xxx,PORT=xxxx
    if (sscanf(sms_content, "CONFIG:IP=%19[^,],PORT=%d", temp_ip, &temp_port) == 2)
 80015e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80015ea:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80015ee:	4933      	ldr	r1, [pc, #204]	@ (80016bc <Extract_IP_Port_From_SMS+0xf4>)
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f006 f8f5 	bl	80077e0 <siscanf>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d159      	bne.n	80016b0 <Extract_IP_Port_From_SMS+0xe8>
    {
        // Basic validation
        int ip_parts[4];
        if (sscanf(temp_ip, "%d.%d.%d.%d",
 80015fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001600:	1d19      	adds	r1, r3, #4
 8001602:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8001606:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800160a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800160e:	330c      	adds	r3, #12
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001616:	3308      	adds	r3, #8
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	460b      	mov	r3, r1
 800161c:	4928      	ldr	r1, [pc, #160]	@ (80016c0 <Extract_IP_Port_From_SMS+0xf8>)
 800161e:	f006 f8df 	bl	80077e0 <siscanf>
 8001622:	4603      	mov	r3, r0
 8001624:	2b04      	cmp	r3, #4
 8001626:	d143      	bne.n	80016b0 <Extract_IP_Port_From_SMS+0xe8>
                   &ip_parts[0], &ip_parts[1], &ip_parts[2], &ip_parts[3]) == 4)
        {
            for (int i = 0; i < 4; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800162e:	e018      	b.n	8001662 <Extract_IP_Port_From_SMS+0x9a>
            {
                if (ip_parts[i] < 0 || ip_parts[i] > 255)
 8001630:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	3388      	adds	r3, #136	@ 0x88
 8001638:	443b      	add	r3, r7
 800163a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db08      	blt.n	8001654 <Extract_IP_Port_From_SMS+0x8c>
 8001642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	3388      	adds	r3, #136	@ 0x88
 800164a:	443b      	add	r3, r7
 800164c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001650:	2bff      	cmp	r3, #255	@ 0xff
 8001652:	dd01      	ble.n	8001658 <Extract_IP_Port_From_SMS+0x90>
                    return 0; // Invalid IP
 8001654:	2300      	movs	r3, #0
 8001656:	e02c      	b.n	80016b2 <Extract_IP_Port_From_SMS+0xea>
            for (int i = 0; i < 4; i++)
 8001658:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800165c:	3301      	adds	r3, #1
 800165e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001662:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001666:	2b03      	cmp	r3, #3
 8001668:	dde2      	ble.n	8001630 <Extract_IP_Port_From_SMS+0x68>
            }

            if (temp_port > 0 && temp_port <= 65535)
 800166a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800166c:	2b00      	cmp	r3, #0
 800166e:	dd1f      	ble.n	80016b0 <Extract_IP_Port_From_SMS+0xe8>
 8001670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001676:	da1b      	bge.n	80016b0 <Extract_IP_Port_From_SMS+0xe8>
            {
                strncpy(systemConfig.serverIP, temp_ip, sizeof(systemConfig.serverIP) - 1);
 8001678:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800167c:	2213      	movs	r2, #19
 800167e:	4619      	mov	r1, r3
 8001680:	4810      	ldr	r0, [pc, #64]	@ (80016c4 <Extract_IP_Port_From_SMS+0xfc>)
 8001682:	f006 f943 	bl	800790c <strncpy>
                systemConfig.serverPort = (uint16_t)temp_port;
 8001686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <Extract_IP_Port_From_SMS+0xfc>)
 800168c:	829a      	strh	r2, [r3, #20]

                // Debug print
                char debug_msg[80];
                snprintf(debug_msg, sizeof(debug_msg),
                         "Config Updated - IP: %s, Port: %d\r\n",
                         systemConfig.serverIP, systemConfig.serverPort);
 800168e:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <Extract_IP_Port_From_SMS+0xfc>)
 8001690:	8a9b      	ldrh	r3, [r3, #20]
                snprintf(debug_msg, sizeof(debug_msg),
 8001692:	f107 000c 	add.w	r0, r7, #12
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <Extract_IP_Port_From_SMS+0xfc>)
 800169a:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <Extract_IP_Port_From_SMS+0x100>)
 800169c:	2150      	movs	r1, #80	@ 0x50
 800169e:	f006 f86b 	bl	8007778 <sniprintf>
                GSM_Debug_Print(debug_msg);
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fbf6 	bl	8000e98 <GSM_Debug_Print>

                return 1; // Success
 80016ac:	2301      	movs	r3, #1
                    return 0; // Invalid IP
 80016ae:	e000      	b.n	80016b2 <Extract_IP_Port_From_SMS+0xea>
            }
        }
    }

    return 0; // No match
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3788      	adds	r7, #136	@ 0x88
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	0800a6c0 	.word	0x0800a6c0
 80016c0:	0800a6dc 	.word	0x0800a6dc
 80016c4:	200008a4 	.word	0x200008a4
 80016c8:	0800a6e8 	.word	0x0800a6e8

080016cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d0:	f000 fd18 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d4:	f000 f81c 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d8:	f000 f9d2 	bl	8001a80 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016dc:	f000 f8e0 	bl	80018a0 <MX_I2C1_Init>
  MX_UART4_Init();
 80016e0:	f000 f96e 	bl	80019c0 <MX_UART4_Init>
  MX_ADC1_Init();
 80016e4:	f000 f866 	bl	80017b4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016e8:	f000 f99a 	bl	8001a20 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80016ec:	f000 f918 	bl	8001920 <MX_TIM2_Init>
  Config_Init();
 80016f0:	f7ff fc0c 	bl	8000f0c <Config_Init>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		Check_Incoming_SMS();
 80016f4:	f7ff fef2 	bl	80014dc <Check_Incoming_SMS>
		GPRS_Send_JSON();
 80016f8:	f7ff fe08 	bl	800130c <GPRS_Send_JSON>
		HAL_Delay(Delay);
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <main+0x40>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fd7b 	bl	80021fc <HAL_Delay>
		Check_Incoming_SMS();
 8001706:	bf00      	nop
 8001708:	e7f4      	b.n	80016f4 <main+0x28>
 800170a:	bf00      	nop
 800170c:	20000006 	.word	0x20000006

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b096      	sub	sp, #88	@ 0x58
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	2244      	movs	r2, #68	@ 0x44
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f006 f8cd 	bl	80078be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001736:	f002 fd41 	bl	80041bc <HAL_PWREx_ControlVoltageScaling>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001740:	f000 f9ce 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001744:	2302      	movs	r3, #2
 8001746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800174c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800174e:	2310      	movs	r3, #16
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001752:	2302      	movs	r3, #2
 8001754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001756:	2302      	movs	r3, #2
 8001758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800175a:	2301      	movs	r3, #1
 800175c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800175e:	230a      	movs	r3, #10
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001762:	2307      	movs	r3, #7
 8001764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001766:	2302      	movs	r3, #2
 8001768:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800176a:	2302      	movs	r3, #2
 800176c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fd78 	bl	8004268 <HAL_RCC_OscConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800177e:	f000 f9af 	bl	8001ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001782:	230f      	movs	r3, #15
 8001784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001786:	2303      	movs	r3, #3
 8001788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001796:	463b      	mov	r3, r7
 8001798:	2104      	movs	r1, #4
 800179a:	4618      	mov	r0, r3
 800179c:	f003 f940 	bl	8004a20 <HAL_RCC_ClockConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017a6:	f000 f99b 	bl	8001ae0 <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3758      	adds	r7, #88	@ 0x58
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80017ba:	f107 031c 	add.w	r3, r7, #28
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <MX_ADC1_Init+0xe0>)
 80017d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001898 <MX_ADC1_Init+0xe4>)
 80017da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <MX_ADC1_Init+0xe0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <MX_ADC1_Init+0xe0>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <MX_ADC1_Init+0xe0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ee:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <MX_ADC1_Init+0xe0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f4:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <MX_ADC1_Init+0xe0>)
 80017f6:	2204      	movs	r2, #4
 80017f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017fa:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <MX_ADC1_Init+0xe0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001800:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <MX_ADC1_Init+0xe0>)
 8001802:	2200      	movs	r2, #0
 8001804:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001806:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <MX_ADC1_Init+0xe0>)
 8001808:	2201      	movs	r2, #1
 800180a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800180c:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <MX_ADC1_Init+0xe0>)
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b1f      	ldr	r3, [pc, #124]	@ (8001894 <MX_ADC1_Init+0xe0>)
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800181a:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <MX_ADC1_Init+0xe0>)
 800181c:	2200      	movs	r2, #0
 800181e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001820:	4b1c      	ldr	r3, [pc, #112]	@ (8001894 <MX_ADC1_Init+0xe0>)
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001828:	4b1a      	ldr	r3, [pc, #104]	@ (8001894 <MX_ADC1_Init+0xe0>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	@ (8001894 <MX_ADC1_Init+0xe0>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001836:	4817      	ldr	r0, [pc, #92]	@ (8001894 <MX_ADC1_Init+0xe0>)
 8001838:	f000 ff36 	bl	80026a8 <HAL_ADC_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001842:	f000 f94d 	bl	8001ae0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	4619      	mov	r1, r3
 8001850:	4810      	ldr	r0, [pc, #64]	@ (8001894 <MX_ADC1_Init+0xe0>)
 8001852:	f002 f807 	bl	8003864 <HAL_ADCEx_MultiModeConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800185c:	f000 f940 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <MX_ADC1_Init+0xe8>)
 8001862:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001864:	2306      	movs	r3, #6
 8001866:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800186c:	237f      	movs	r3, #127	@ 0x7f
 800186e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001870:	2304      	movs	r3, #4
 8001872:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <MX_ADC1_Init+0xe0>)
 800187e:	f001 fa37 	bl	8002cf0 <HAL_ADC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001888:	f000 f92a 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	@ 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000220 	.word	0x20000220
 8001898:	50040000 	.word	0x50040000
 800189c:	04300002 	.word	0x04300002

080018a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001918 <MX_I2C1_Init+0x78>)
 80018a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018ac:	4a1b      	ldr	r2, [pc, #108]	@ (800191c <MX_I2C1_Init+0x7c>)
 80018ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018b0:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b6:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b15      	ldr	r3, [pc, #84]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018c2:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ce:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018da:	480e      	ldr	r0, [pc, #56]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018dc:	f002 fb2e 	bl	8003f3c <HAL_I2C_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018e6:	f000 f8fb 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ea:	2100      	movs	r1, #0
 80018ec:	4809      	ldr	r0, [pc, #36]	@ (8001914 <MX_I2C1_Init+0x74>)
 80018ee:	f002 fbc0 	bl	8004072 <HAL_I2CEx_ConfigAnalogFilter>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018f8:	f000 f8f2 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018fc:	2100      	movs	r1, #0
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <MX_I2C1_Init+0x74>)
 8001900:	f002 fc02 	bl	8004108 <HAL_I2CEx_ConfigDigitalFilter>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800190a:	f000 f8e9 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000284 	.word	0x20000284
 8001918:	40005400 	.word	0x40005400
 800191c:	10d19ce4 	.word	0x10d19ce4

08001920 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_TIM2_Init+0x98>)
 8001940:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001944:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79999;
 8001946:	4b1c      	ldr	r3, [pc, #112]	@ (80019b8 <MX_TIM2_Init+0x98>)
 8001948:	4a1c      	ldr	r2, [pc, #112]	@ (80019bc <MX_TIM2_Init+0x9c>)
 800194a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_TIM2_Init+0x98>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29999;
 8001952:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <MX_TIM2_Init+0x98>)
 8001954:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001958:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <MX_TIM2_Init+0x98>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <MX_TIM2_Init+0x98>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001966:	4814      	ldr	r0, [pc, #80]	@ (80019b8 <MX_TIM2_Init+0x98>)
 8001968:	f003 ff3a 	bl	80057e0 <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001972:	f000 f8b5 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	@ (80019b8 <MX_TIM2_Init+0x98>)
 8001984:	f004 f88a 	bl	8005a9c <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800198e:	f000 f8a7 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <MX_TIM2_Init+0x98>)
 80019a0:	f004 fab8 	bl	8005f14 <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019aa:	f000 f899 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002d8 	.word	0x200002d8
 80019bc:	0001387f 	.word	0x0001387f

080019c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019c6:	4a15      	ldr	r2, [pc, #84]	@ (8001a1c <MX_UART4_Init+0x5c>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80019ca:	4b13      	ldr	r3, [pc, #76]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0e      	ldr	r3, [pc, #56]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f6:	4b08      	ldr	r3, [pc, #32]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <MX_UART4_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_UART4_Init+0x58>)
 8001a04:	f004 fb2c 	bl	8006060 <HAL_UART_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a0e:	f000 f867 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000324 	.word	0x20000324
 8001a1c:	40004c00 	.word	0x40004c00

08001a20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a24:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a26:	4a15      	ldr	r2, [pc, #84]	@ (8001a7c <MX_USART1_UART_Init+0x5c>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a62:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <MX_USART1_UART_Init+0x58>)
 8001a64:	f004 fafc 	bl	8006060 <HAL_UART_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a6e:	f000 f837 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200003ac 	.word	0x200003ac
 8001a7c:	40013800 	.word	0x40013800

08001a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <MX_GPIO_Init+0x5c>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8a:	4a14      	ldr	r2, [pc, #80]	@ (8001adc <MX_GPIO_Init+0x5c>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <MX_GPIO_Init+0x5c>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <MX_GPIO_Init+0x5c>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8001adc <MX_GPIO_Init+0x5c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <MX_GPIO_Init+0x5c>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	@ (8001adc <MX_GPIO_Init+0x5c>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <MX_GPIO_Init+0x5c>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <MX_GPIO_Init+0x5c>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
}
 8001ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ae8:	bf00      	nop
 8001aea:	e7fd      	b.n	8001ae8 <Error_Handler+0x8>

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_MspInit+0x44>)
 8001af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b30 <HAL_MspInit+0x44>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0ac      	sub	sp, #176	@ 0xb0
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2288      	movs	r2, #136	@ 0x88
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f005 feb2 	bl	80078be <memset>
  if(hadc->Instance==ADC1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a35      	ldr	r2, [pc, #212]	@ (8001c34 <HAL_ADC_MspInit+0x100>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d162      	bne.n	8001c2a <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b68:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b6a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001b7a:	2308      	movs	r3, #8
 8001b7c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b7e:	2307      	movs	r3, #7
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b86:	2302      	movs	r3, #2
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 f967 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001ba0:	f7ff ff9e 	bl	8001ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <HAL_ADC_MspInit+0x104>)
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba8:	4a23      	ldr	r2, [pc, #140]	@ (8001c38 <HAL_ADC_MspInit+0x104>)
 8001baa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb0:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <HAL_ADC_MspInit+0x104>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <HAL_ADC_MspInit+0x104>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_ADC_MspInit+0x104>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_ADC_MspInit+0x104>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_ADC_MspInit+0x104>)
 8001bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd8:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <HAL_ADC_MspInit+0x104>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be0:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_ADC_MspInit+0x104>)
 8001be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA2     ------> ADC1_IN7
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bec:	230f      	movs	r3, #15
 8001bee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bf2:	230b      	movs	r3, #11
 8001bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c02:	4619      	mov	r1, r3
 8001c04:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <HAL_ADC_MspInit+0x108>)
 8001c06:	f001 ffef 	bl	8003be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c0a:	230f      	movs	r3, #15
 8001c0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c10:	230b      	movs	r3, #11
 8001c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c20:	4619      	mov	r1, r3
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c26:	f001 ffdf 	bl	8003be8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c2a:	bf00      	nop
 8001c2c:	37b0      	adds	r7, #176	@ 0xb0
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	50040000 	.word	0x50040000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000800 	.word	0x48000800

08001c40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0ac      	sub	sp, #176	@ 0xb0
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2288      	movs	r2, #136	@ 0x88
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f005 fe2c 	bl	80078be <memset>
  if(hi2c->Instance==I2C1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a21      	ldr	r2, [pc, #132]	@ (8001cf0 <HAL_I2C_MspInit+0xb0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d13a      	bne.n	8001ce6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c70:	2340      	movs	r3, #64	@ 0x40
 8001c72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 f8f3 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c88:	f7ff ff2a 	bl	8001ae0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_I2C_MspInit+0xb4>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <HAL_I2C_MspInit+0xb4>)
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_I2C_MspInit+0xb4>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ca4:	23c0      	movs	r3, #192	@ 0xc0
 8001ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001caa:	2312      	movs	r3, #18
 8001cac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480b      	ldr	r0, [pc, #44]	@ (8001cf8 <HAL_I2C_MspInit+0xb8>)
 8001cca:	f001 ff8d 	bl	8003be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_I2C_MspInit+0xb4>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	4a08      	ldr	r2, [pc, #32]	@ (8001cf4 <HAL_I2C_MspInit+0xb4>)
 8001cd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_I2C_MspInit+0xb4>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ce6:	bf00      	nop
 8001ce8:	37b0      	adds	r7, #176	@ 0xb0
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40005400 	.word	0x40005400
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	48000400 	.word	0x48000400

08001cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0c:	d113      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	4a0b      	ldr	r2, [pc, #44]	@ (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	201c      	movs	r0, #28
 8001d2c:	f001 ff25 	bl	8003b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d30:	201c      	movs	r0, #28
 8001d32:	f001 ff3e 	bl	8003bb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0ae      	sub	sp, #184	@ 0xb8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	2288      	movs	r2, #136	@ 0x88
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f005 fdaa 	bl	80078be <memset>
  if(huart->Instance==UART4)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a43      	ldr	r2, [pc, #268]	@ (8001e7c <HAL_UART_MspInit+0x138>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d13c      	bne.n	8001dee <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001d74:	2308      	movs	r3, #8
 8001d76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 f871 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d8c:	f7ff fea8 	bl	8001ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d90:	4b3b      	ldr	r3, [pc, #236]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	4a3a      	ldr	r2, [pc, #232]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001d96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d9c:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da8:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dac:	4a34      	ldr	r2, [pc, #208]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db4:	4b32      	ldr	r3, [pc, #200]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001dc0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001dc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001dda:	2308      	movs	r3, #8
 8001ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4827      	ldr	r0, [pc, #156]	@ (8001e84 <HAL_UART_MspInit+0x140>)
 8001de8:	f001 fefe 	bl	8003be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dec:	e041      	b.n	8001e72 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a25      	ldr	r2, [pc, #148]	@ (8001e88 <HAL_UART_MspInit+0x144>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d13c      	bne.n	8001e72 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 f82f 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001e10:	f7ff fe66 	bl	8001ae0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e14:	4b1a      	ldr	r3, [pc, #104]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e18:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001e1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e1e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e20:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e30:	4a13      	ldr	r2, [pc, #76]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e38:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <HAL_UART_MspInit+0x13c>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e5e:	2307      	movs	r3, #7
 8001e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e6e:	f001 febb 	bl	8003be8 <HAL_GPIO_Init>
}
 8001e72:	bf00      	nop
 8001e74:	37b8      	adds	r7, #184	@ 0xb8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40004c00 	.word	0x40004c00
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48000800 	.word	0x48000800
 8001e88:	40013800 	.word	0x40013800

08001e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <NMI_Handler+0x4>

08001e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <HardFault_Handler+0x4>

08001e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <MemManage_Handler+0x4>

08001ea4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <BusFault_Handler+0x4>

08001eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <UsageFault_Handler+0x4>

08001eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee2:	f000 f96b 	bl	80021bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <TIM2_IRQHandler+0x10>)
 8001ef2:	f003 fccc 	bl	800588e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200002d8 	.word	0x200002d8

08001f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return 1;
 8001f04:	2301      	movs	r3, #1
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <_kill>:

int _kill(int pid, int sig)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f1a:	f005 fd81 	bl	8007a20 <__errno>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2216      	movs	r2, #22
 8001f22:	601a      	str	r2, [r3, #0]
  return -1;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_exit>:

void _exit (int status)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff ffe7 	bl	8001f10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f42:	bf00      	nop
 8001f44:	e7fd      	b.n	8001f42 <_exit+0x12>

08001f46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e00a      	b.n	8001f6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f58:	f3af 8000 	nop.w
 8001f5c:	4601      	mov	r1, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	60ba      	str	r2, [r7, #8]
 8001f64:	b2ca      	uxtb	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	dbf0      	blt.n	8001f58 <_read+0x12>
  }

  return len;
 8001f76:	687b      	ldr	r3, [r7, #4]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e009      	b.n	8001fa6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	60ba      	str	r2, [r7, #8]
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dbf1      	blt.n	8001f92 <_write+0x12>
  }
  return len;
 8001fae:	687b      	ldr	r3, [r7, #4]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_close>:

int _close(int file)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fe0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_isatty>:

int _isatty(int file)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ff8:	2301      	movs	r3, #1
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002028:	4a14      	ldr	r2, [pc, #80]	@ (800207c <_sbrk+0x5c>)
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <_sbrk+0x60>)
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002034:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d102      	bne.n	8002042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800203c:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <_sbrk+0x64>)
 800203e:	4a12      	ldr	r2, [pc, #72]	@ (8002088 <_sbrk+0x68>)
 8002040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d207      	bcs.n	8002060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002050:	f005 fce6 	bl	8007a20 <__errno>
 8002054:	4603      	mov	r3, r0
 8002056:	220c      	movs	r2, #12
 8002058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
 800205e:	e009      	b.n	8002074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002066:	4b07      	ldr	r3, [pc, #28]	@ (8002084 <_sbrk+0x64>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	4a05      	ldr	r2, [pc, #20]	@ (8002084 <_sbrk+0x64>)
 8002070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20018000 	.word	0x20018000
 8002080:	00000400 	.word	0x00000400
 8002084:	200008bc 	.word	0x200008bc
 8002088:	20000a10 	.word	0x20000a10

0800208c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002090:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <SystemInit+0x20>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002096:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <SystemInit+0x20>)
 8002098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800209c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020b4:	f7ff ffea 	bl	800208c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b8:	480c      	ldr	r0, [pc, #48]	@ (80020ec <LoopForever+0x6>)
  ldr r1, =_edata
 80020ba:	490d      	ldr	r1, [pc, #52]	@ (80020f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020bc:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <LoopForever+0xe>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d0:	4c0a      	ldr	r4, [pc, #40]	@ (80020fc <LoopForever+0x16>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020de:	f005 fca5 	bl	8007a2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020e2:	f7ff faf3 	bl	80016cc <main>

080020e6 <LoopForever>:

LoopForever:
    b LoopForever
 80020e6:	e7fe      	b.n	80020e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f0:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80020f4:	0800aafc 	.word	0x0800aafc
  ldr r2, =_sbss
 80020f8:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80020fc:	20000a10 	.word	0x20000a10

08002100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC1_2_IRQHandler>
	...

08002104 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210e:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <HAL_Init+0x3c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a0b      	ldr	r2, [pc, #44]	@ (8002140 <HAL_Init+0x3c>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002118:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211a:	2003      	movs	r0, #3
 800211c:	f001 fd22 	bl	8003b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002120:	2000      	movs	r0, #0
 8002122:	f000 f80f 	bl	8002144 <HAL_InitTick>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	71fb      	strb	r3, [r7, #7]
 8002130:	e001      	b.n	8002136 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002132:	f7ff fcdb 	bl	8001aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002136:	79fb      	ldrb	r3, [r7, #7]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40022000 	.word	0x40022000

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002150:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <HAL_InitTick+0x6c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d023      	beq.n	80021a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002158:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <HAL_InitTick+0x70>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <HAL_InitTick+0x6c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002166:	fbb3 f3f1 	udiv	r3, r3, r1
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f001 fd2d 	bl	8003bce <HAL_SYSTICK_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10f      	bne.n	800219a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d809      	bhi.n	8002194 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f001 fcf7 	bl	8003b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800218c:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <HAL_InitTick+0x74>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e007      	b.n	80021a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e004      	b.n	80021a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e001      	b.n	80021a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000038 	.word	0x20000038
 80021b4:	20000030 	.word	0x20000030
 80021b8:	20000034 	.word	0x20000034

080021bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_IncTick+0x20>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_IncTick+0x24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <HAL_IncTick+0x24>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000038 	.word	0x20000038
 80021e0:	200008c0 	.word	0x200008c0

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_GetTick+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200008c0 	.word	0x200008c0

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff ffee 	bl	80021e4 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffde 	bl	80021e4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000038 	.word	0x20000038

08002244 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	609a      	str	r2, [r3, #8]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3360      	adds	r3, #96	@ 0x60
 80022be:	461a      	mov	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <LL_ADC_SetOffset+0x44>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	4313      	orrs	r3, r2
 80022dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022e4:	bf00      	nop
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	03fff000 	.word	0x03fff000

080022f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3360      	adds	r3, #96	@ 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3360      	adds	r3, #96	@ 0x60
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	431a      	orrs	r2, r3
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3330      	adds	r3, #48	@ 0x30
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	4413      	add	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	211f      	movs	r1, #31
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 011f 	and.w	r1, r3, #31
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f003 031f 	and.w	r3, r3, #31
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	431a      	orrs	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3314      	adds	r3, #20
 80023e4:	461a      	mov	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	0e5b      	lsrs	r3, r3, #25
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0d1b      	lsrs	r3, r3, #20
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	2107      	movs	r1, #7
 8002402:	fa01 f303 	lsl.w	r3, r1, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	401a      	ands	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	0d1b      	lsrs	r3, r3, #20
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	431a      	orrs	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0318 	and.w	r3, r3, #24
 800244e:	4908      	ldr	r1, [pc, #32]	@ (8002470 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002450:	40d9      	lsrs	r1, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	400b      	ands	r3, r1
 8002456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800245a:	431a      	orrs	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	0007ffff 	.word	0x0007ffff

08002474 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 031f 	and.w	r3, r3, #31
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80024bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6093      	str	r3, [r2, #8]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024e4:	d101      	bne.n	80024ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002508:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800250c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002534:	d101      	bne.n	800253a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002558:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002580:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002584:	f043 0202 	orr.w	r2, r3, #2
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <LL_ADC_IsEnabled+0x18>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <LL_ADC_IsEnabled+0x1a>
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d101      	bne.n	80025d6 <LL_ADC_IsDisableOngoing+0x18>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <LL_ADC_IsDisableOngoing+0x1a>
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025f8:	f043 0204 	orr.w	r2, r3, #4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800261c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002620:	f043 0210 	orr.w	r2, r3, #16
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d101      	bne.n	800264c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800266a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800266e:	f043 0220 	orr.w	r2, r3, #32
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b08      	cmp	r3, #8
 8002694:	d101      	bne.n	800269a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b089      	sub	sp, #36	@ 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e130      	b.n	8002924 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fa2f 	bl	8001b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fef1 	bl	80024d0 <LL_ADC_IsDeepPowerDownEnabled>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fed7 	bl	80024ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff0c 	bl	8002520 <LL_ADC_IsInternalRegulatorEnabled>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d115      	bne.n	800273a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fef0 	bl	80024f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002718:	4b84      	ldr	r3, [pc, #528]	@ (800292c <HAL_ADC_Init+0x284>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	4a84      	ldr	r2, [pc, #528]	@ (8002930 <HAL_ADC_Init+0x288>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800272c:	e002      	b.n	8002734 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3b01      	subs	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f9      	bne.n	800272e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff feee 	bl	8002520 <LL_ADC_IsInternalRegulatorEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274e:	f043 0210 	orr.w	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff62 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 8002770:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 80c9 	bne.w	8002912 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80c5 	bne.w	8002912 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002790:	f043 0202 	orr.w	r2, r3, #2
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fefb 	bl	8002598 <LL_ADC_IsEnabled>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d115      	bne.n	80027d4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027a8:	4862      	ldr	r0, [pc, #392]	@ (8002934 <HAL_ADC_Init+0x28c>)
 80027aa:	f7ff fef5 	bl	8002598 <LL_ADC_IsEnabled>
 80027ae:	4604      	mov	r4, r0
 80027b0:	4861      	ldr	r0, [pc, #388]	@ (8002938 <HAL_ADC_Init+0x290>)
 80027b2:	f7ff fef1 	bl	8002598 <LL_ADC_IsEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	431c      	orrs	r4, r3
 80027ba:	4860      	ldr	r0, [pc, #384]	@ (800293c <HAL_ADC_Init+0x294>)
 80027bc:	f7ff feec 	bl	8002598 <LL_ADC_IsEnabled>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4323      	orrs	r3, r4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	4619      	mov	r1, r3
 80027ce:	485c      	ldr	r0, [pc, #368]	@ (8002940 <HAL_ADC_Init+0x298>)
 80027d0:	f7ff fd38 	bl	8002244 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7e5b      	ldrb	r3, [r3, #25]
 80027d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d106      	bne.n	8002810 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	3b01      	subs	r3, #1
 8002808:	045b      	lsls	r3, r3, #17
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	4b44      	ldr	r3, [pc, #272]	@ (8002944 <HAL_ADC_Init+0x29c>)
 8002834:	4013      	ands	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	69b9      	ldr	r1, [r7, #24]
 800283c:	430b      	orrs	r3, r1
 800283e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff1c 	bl	8002682 <LL_ADC_INJ_IsConversionOngoing>
 800284a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d13d      	bne.n	80028ce <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d13a      	bne.n	80028ce <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800285c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002864:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002874:	f023 0302 	bic.w	r3, r3, #2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	69b9      	ldr	r1, [r7, #24]
 800287e:	430b      	orrs	r3, r1
 8002880:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002888:	2b01      	cmp	r3, #1
 800288a:	d118      	bne.n	80028be <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002896:	f023 0304 	bic.w	r3, r3, #4
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028a2:	4311      	orrs	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028ae:	430a      	orrs	r2, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	611a      	str	r2, [r3, #16]
 80028bc:	e007      	b.n	80028ce <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d10c      	bne.n	80028f0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028dc:	f023 010f 	bic.w	r1, r3, #15
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80028ee:	e007      	b.n	8002900 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 020f 	bic.w	r2, r2, #15
 80028fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002904:	f023 0303 	bic.w	r3, r3, #3
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002910:	e007      	b.n	8002922 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	f043 0210 	orr.w	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002922:	7ffb      	ldrb	r3, [r7, #31]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3724      	adds	r7, #36	@ 0x24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}
 800292c:	20000030 	.word	0x20000030
 8002930:	053e2d63 	.word	0x053e2d63
 8002934:	50040000 	.word	0x50040000
 8002938:	50040100 	.word	0x50040100
 800293c:	50040200 	.word	0x50040200
 8002940:	50040300 	.word	0x50040300
 8002944:	fff0c007 	.word	0xfff0c007

08002948 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002950:	4857      	ldr	r0, [pc, #348]	@ (8002ab0 <HAL_ADC_Start+0x168>)
 8002952:	f7ff fd8f 	bl	8002474 <LL_ADC_GetMultimode>
 8002956:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fe69 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	f040 809c 	bne.w	8002aa2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_ADC_Start+0x30>
 8002974:	2302      	movs	r3, #2
 8002976:	e097      	b.n	8002aa8 <HAL_ADC_Start+0x160>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fe63 	bl	800364c <ADC_Enable>
 8002986:	4603      	mov	r3, r0
 8002988:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800298a:	7dfb      	ldrb	r3, [r7, #23]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f040 8083 	bne.w	8002a98 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002996:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a42      	ldr	r2, [pc, #264]	@ (8002ab4 <HAL_ADC_Start+0x16c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d002      	beq.n	80029b6 <HAL_ADC_Start+0x6e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	e000      	b.n	80029b8 <HAL_ADC_Start+0x70>
 80029b6:	4b40      	ldr	r3, [pc, #256]	@ (8002ab8 <HAL_ADC_Start+0x170>)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	4293      	cmp	r3, r2
 80029be:	d002      	beq.n	80029c6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029de:	d106      	bne.n	80029ee <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e4:	f023 0206 	bic.w	r2, r3, #6
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80029ec:	e002      	b.n	80029f4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	221c      	movs	r2, #28
 80029fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab4 <HAL_ADC_Start+0x16c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d002      	beq.n	8002a14 <HAL_ADC_Start+0xcc>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	e000      	b.n	8002a16 <HAL_ADC_Start+0xce>
 8002a14:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <HAL_ADC_Start+0x170>)
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d008      	beq.n	8002a30 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d002      	beq.n	8002a30 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b09      	cmp	r3, #9
 8002a2e:	d114      	bne.n	8002a5a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a42:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a46:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fdc6 	bl	80025e4 <LL_ADC_REG_StartConversion>
 8002a58:	e025      	b.n	8002aa6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a12      	ldr	r2, [pc, #72]	@ (8002ab4 <HAL_ADC_Start+0x16c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d002      	beq.n	8002a76 <HAL_ADC_Start+0x12e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	e000      	b.n	8002a78 <HAL_ADC_Start+0x130>
 8002a76:	4b10      	ldr	r3, [pc, #64]	@ (8002ab8 <HAL_ADC_Start+0x170>)
 8002a78:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00f      	beq.n	8002aa6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a8e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a96:	e006      	b.n	8002aa6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002aa0:	e001      	b.n	8002aa6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	50040300 	.word	0x50040300
 8002ab4:	50040100 	.word	0x50040100
 8002ab8:	50040000 	.word	0x50040000

08002abc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_Stop+0x16>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e023      	b.n	8002b1a <HAL_ADC_Stop+0x5e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ada:	2103      	movs	r1, #3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fcf9 	bl	80034d4 <ADC_ConversionStop>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d111      	bne.n	8002b10 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fe33 	bl	8003758 <ADC_Disable>
 8002af2:	4603      	mov	r3, r0
 8002af4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b00:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b2e:	4866      	ldr	r0, [pc, #408]	@ (8002cc8 <HAL_ADC_PollForConversion+0x1a4>)
 8002b30:	f7ff fca0 	bl	8002474 <LL_ADC_GetMultimode>
 8002b34:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d102      	bne.n	8002b44 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	e02a      	b.n	8002b9a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d002      	beq.n	8002b56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b09      	cmp	r3, #9
 8002b54:	d111      	bne.n	8002b7a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0a4      	b.n	8002cbe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b74:	2304      	movs	r3, #4
 8002b76:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b78:	e00f      	b.n	8002b9a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b7a:	4853      	ldr	r0, [pc, #332]	@ (8002cc8 <HAL_ADC_PollForConversion+0x1a4>)
 8002b7c:	f7ff fc88 	bl	8002490 <LL_ADC_GetMultiDMATransfer>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8a:	f043 0220 	orr.w	r2, r3, #32
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e093      	b.n	8002cbe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b96:	2304      	movs	r3, #4
 8002b98:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b9a:	f7ff fb23 	bl	80021e4 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ba0:	e021      	b.n	8002be6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d01d      	beq.n	8002be6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002baa:	f7ff fb1b 	bl	80021e4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <HAL_ADC_PollForConversion+0x9c>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d112      	bne.n	8002be6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e06b      	b.n	8002cbe <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0d6      	beq.n	8002ba2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fba6 	bl	8002356 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01c      	beq.n	8002c4a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7e5b      	ldrb	r3, [r3, #25]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d118      	bne.n	8002c4a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d111      	bne.n	8002c4a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <HAL_ADC_PollForConversion+0x1a8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d002      	beq.n	8002c5a <HAL_ADC_PollForConversion+0x136>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e000      	b.n	8002c5c <HAL_ADC_PollForConversion+0x138>
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <HAL_ADC_PollForConversion+0x1ac>)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d008      	beq.n	8002c76 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d002      	beq.n	8002c76 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	2b09      	cmp	r3, #9
 8002c74:	d104      	bne.n	8002c80 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e00c      	b.n	8002c9a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a11      	ldr	r2, [pc, #68]	@ (8002ccc <HAL_ADC_PollForConversion+0x1a8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d002      	beq.n	8002c90 <HAL_ADC_PollForConversion+0x16c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e000      	b.n	8002c92 <HAL_ADC_PollForConversion+0x16e>
 8002c90:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd0 <HAL_ADC_PollForConversion+0x1ac>)
 8002c92:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d104      	bne.n	8002caa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e008      	b.n	8002cbc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d103      	bne.n	8002cbc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	220c      	movs	r2, #12
 8002cba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3720      	adds	r7, #32
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	50040300 	.word	0x50040300
 8002ccc:	50040100 	.word	0x50040100
 8002cd0:	50040000 	.word	0x50040000

08002cd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b0b6      	sub	sp, #216	@ 0xd8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x22>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e3c9      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x7b6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fc88 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 83aa 	bne.w	8003480 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	d824      	bhi.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	3b02      	subs	r3, #2
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d81b      	bhi.n	8002d7e <HAL_ADC_ConfigChannel+0x8e>
 8002d46:	a201      	add	r2, pc, #4	@ (adr r2, 8002d4c <HAL_ADC_ConfigChannel+0x5c>)
 8002d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4c:	08002d5d 	.word	0x08002d5d
 8002d50:	08002d65 	.word	0x08002d65
 8002d54:	08002d6d 	.word	0x08002d6d
 8002d58:	08002d75 	.word	0x08002d75
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002d5c:	230c      	movs	r3, #12
 8002d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d62:	e010      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002d64:	2312      	movs	r3, #18
 8002d66:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d6a:	e00c      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d6c:	2318      	movs	r3, #24
 8002d6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d72:	e008      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d7c:	e003      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002d7e:	2306      	movs	r3, #6
 8002d80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d84:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d94:	f7ff faf2 	bl	800237c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fc49 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 8002da2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fc69 	bl	8002682 <LL_ADC_INJ_IsConversionOngoing>
 8002db0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002db4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 81a4 	bne.w	8003106 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 819f 	bne.w	8003106 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f7ff fafd 	bl	80023d4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	08db      	lsrs	r3, r3, #3
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d00a      	beq.n	8002e12 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6919      	ldr	r1, [r3, #16]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e0c:	f7ff fa4e 	bl	80022ac <LL_ADC_SetOffset>
 8002e10:	e179      	b.n	8003106 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fa6b 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x14e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fa60 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	e01e      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x18c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fa55 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e004      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x1a4>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	e018      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x1d6>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002eb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e004      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d106      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff fa24 	bl	8002320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fa08 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10a      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x214>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f9fd 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002efa:	4603      	mov	r3, r0
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	f003 021f 	and.w	r2, r3, #31
 8002f02:	e01e      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x252>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f9f2 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002f32:	2320      	movs	r3, #32
 8002f34:	e004      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002f36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d105      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x26a>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0e9b      	lsrs	r3, r3, #26
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	e018      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x29c>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f76:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002f7e:	2320      	movs	r3, #32
 8002f80:	e004      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002f82:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d106      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2101      	movs	r1, #1
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff f9c1 	bl	8002320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff f9a5 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x2da>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f99a 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	e01e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x318>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f98f 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002ff0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e004      	b.n	8003006 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x330>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	e014      	b.n	800304a <HAL_ADC_ConfigChannel+0x35a>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800302e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800303c:	2320      	movs	r3, #32
 800303e:	e004      	b.n	800304a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003040:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800304a:	429a      	cmp	r2, r3
 800304c:	d106      	bne.n	800305c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	2102      	movs	r1, #2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff f962 	bl	8002320 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2103      	movs	r1, #3
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f946 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x398>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2103      	movs	r1, #3
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f93b 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	e017      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x3c8>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2103      	movs	r1, #3
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f930 	bl	80022f4 <LL_ADC_GetOffsetChannel>
 8003094:	4603      	mov	r3, r0
 8003096:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80030a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80030a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e003      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80030ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x3e0>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	e011      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x404>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80030de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80030e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80030e8:	2320      	movs	r3, #32
 80030ea:	e003      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80030ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d106      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2103      	movs	r1, #3
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff f90d 	bl	8002320 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fa44 	bl	8002598 <LL_ADC_IsEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	f040 8140 	bne.w	8003398 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6819      	ldr	r1, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	461a      	mov	r2, r3
 8003126:	f7ff f981 	bl	800242c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4a8f      	ldr	r2, [pc, #572]	@ (800336c <HAL_ADC_ConfigChannel+0x67c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	f040 8131 	bne.w	8003398 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <HAL_ADC_ConfigChannel+0x46e>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	3301      	adds	r3, #1
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2b09      	cmp	r3, #9
 8003154:	bf94      	ite	ls
 8003156:	2301      	movls	r3, #1
 8003158:	2300      	movhi	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	e019      	b.n	8003192 <HAL_ADC_ConfigChannel+0x4a2>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800316c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e003      	b.n	8003182 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800317a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	2b09      	cmp	r3, #9
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003192:	2b00      	cmp	r3, #0
 8003194:	d079      	beq.n	800328a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x4c2>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	0e9b      	lsrs	r3, r3, #26
 80031a8:	3301      	adds	r3, #1
 80031aa:	069b      	lsls	r3, r3, #26
 80031ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031b0:	e015      	b.n	80031de <HAL_ADC_ConfigChannel+0x4ee>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80031c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80031c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e003      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80031ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	069b      	lsls	r3, r3, #26
 80031da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x50e>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	3301      	adds	r3, #1
 80031f2:	f003 031f 	and.w	r3, r3, #31
 80031f6:	2101      	movs	r1, #1
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	e017      	b.n	800322e <HAL_ADC_ConfigChannel+0x53e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800320c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003216:	2320      	movs	r3, #32
 8003218:	e003      	b.n	8003222 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800321a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2101      	movs	r1, #1
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	ea42 0103 	orr.w	r1, r2, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x564>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	0e9b      	lsrs	r3, r3, #26
 8003244:	3301      	adds	r3, #1
 8003246:	f003 021f 	and.w	r2, r3, #31
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	051b      	lsls	r3, r3, #20
 8003252:	e018      	b.n	8003286 <HAL_ADC_ConfigChannel+0x596>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325c:	fa93 f3a3 	rbit	r3, r3
 8003260:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800326c:	2320      	movs	r3, #32
 800326e:	e003      	b.n	8003278 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3301      	adds	r3, #1
 800327a:	f003 021f 	and.w	r2, r3, #31
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003286:	430b      	orrs	r3, r1
 8003288:	e081      	b.n	800338e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x5b6>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	0e9b      	lsrs	r3, r3, #26
 800329c:	3301      	adds	r3, #1
 800329e:	069b      	lsls	r3, r3, #26
 80032a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032a4:	e015      	b.n	80032d2 <HAL_ADC_ConfigChannel+0x5e2>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80032b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e003      	b.n	80032ca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80032c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	069b      	lsls	r3, r3, #26
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x602>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0e9b      	lsrs	r3, r3, #26
 80032e4:	3301      	adds	r3, #1
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2101      	movs	r1, #1
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	e017      	b.n	8003322 <HAL_ADC_ConfigChannel+0x632>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	61bb      	str	r3, [r7, #24]
  return result;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e003      	b.n	8003316 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	fab3 f383 	clz	r3, r3
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	ea42 0103 	orr.w	r1, r2, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_ADC_ConfigChannel+0x65e>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	0e9b      	lsrs	r3, r3, #26
 8003338:	3301      	adds	r3, #1
 800333a:	f003 021f 	and.w	r2, r3, #31
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	3b1e      	subs	r3, #30
 8003346:	051b      	lsls	r3, r3, #20
 8003348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800334c:	e01e      	b.n	800338c <HAL_ADC_ConfigChannel+0x69c>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	fa93 f3a3 	rbit	r3, r3
 800335a:	60fb      	str	r3, [r7, #12]
  return result;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d104      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003366:	2320      	movs	r3, #32
 8003368:	e006      	b.n	8003378 <HAL_ADC_ConfigChannel+0x688>
 800336a:	bf00      	nop
 800336c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3301      	adds	r3, #1
 800337a:	f003 021f 	and.w	r2, r3, #31
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	3b1e      	subs	r3, #30
 8003386:	051b      	lsls	r3, r3, #20
 8003388:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800338c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003392:	4619      	mov	r1, r3
 8003394:	f7ff f81e 	bl	80023d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4b44      	ldr	r3, [pc, #272]	@ (80034b0 <HAL_ADC_ConfigChannel+0x7c0>)
 800339e:	4013      	ands	r3, r2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d07a      	beq.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033a4:	4843      	ldr	r0, [pc, #268]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80033a6:	f7fe ff73 	bl	8002290 <LL_ADC_GetCommonPathInternalCh>
 80033aa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a41      	ldr	r2, [pc, #260]	@ (80034b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d12c      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d126      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a3c      	ldr	r2, [pc, #240]	@ (80034bc <HAL_ADC_ConfigChannel+0x7cc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_ADC_ConfigChannel+0x6e8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a3b      	ldr	r2, [pc, #236]	@ (80034c0 <HAL_ADC_ConfigChannel+0x7d0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d15d      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033e0:	4619      	mov	r1, r3
 80033e2:	4834      	ldr	r0, [pc, #208]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80033e4:	f7fe ff41 	bl	800226a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033e8:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <HAL_ADC_ConfigChannel+0x7d4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	4a36      	ldr	r2, [pc, #216]	@ (80034c8 <HAL_ADC_ConfigChannel+0x7d8>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	099b      	lsrs	r3, r3, #6
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003402:	e002      	b.n	800340a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3b01      	subs	r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f9      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003410:	e040      	b.n	8003494 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a2d      	ldr	r2, [pc, #180]	@ (80034cc <HAL_ADC_ConfigChannel+0x7dc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d118      	bne.n	800344e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800341c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d112      	bne.n	800344e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a23      	ldr	r2, [pc, #140]	@ (80034bc <HAL_ADC_ConfigChannel+0x7cc>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_ADC_ConfigChannel+0x74c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a22      	ldr	r2, [pc, #136]	@ (80034c0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d12d      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003440:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003444:	4619      	mov	r1, r3
 8003446:	481b      	ldr	r0, [pc, #108]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003448:	f7fe ff0f 	bl	800226a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800344c:	e024      	b.n	8003498 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1f      	ldr	r2, [pc, #124]	@ (80034d0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d120      	bne.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800345c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11a      	bne.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a14      	ldr	r2, [pc, #80]	@ (80034bc <HAL_ADC_ConfigChannel+0x7cc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d115      	bne.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003472:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003476:	4619      	mov	r1, r3
 8003478:	480e      	ldr	r0, [pc, #56]	@ (80034b4 <HAL_ADC_ConfigChannel+0x7c4>)
 800347a:	f7fe fef6 	bl	800226a <LL_ADC_SetCommonPathInternalCh>
 800347e:	e00c      	b.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003484:	f043 0220 	orr.w	r2, r3, #32
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003492:	e002      	b.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003494:	bf00      	nop
 8003496:	e000      	b.n	800349a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003498:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034a2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	37d8      	adds	r7, #216	@ 0xd8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	80080000 	.word	0x80080000
 80034b4:	50040300 	.word	0x50040300
 80034b8:	c7520000 	.word	0xc7520000
 80034bc:	50040000 	.word	0x50040000
 80034c0:	50040200 	.word	0x50040200
 80034c4:	20000030 	.word	0x20000030
 80034c8:	053e2d63 	.word	0x053e2d63
 80034cc:	cb840000 	.word	0xcb840000
 80034d0:	80000001 	.word	0x80000001

080034d4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f8a2 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 80034f0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff f8c3 	bl	8002682 <LL_ADC_INJ_IsConversionOngoing>
 80034fc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 8098 	beq.w	800363c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d02a      	beq.n	8003570 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7e5b      	ldrb	r3, [r3, #25]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d126      	bne.n	8003570 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7e1b      	ldrb	r3, [r3, #24]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d122      	bne.n	8003570 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800352a:	2301      	movs	r3, #1
 800352c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800352e:	e014      	b.n	800355a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4a45      	ldr	r2, [pc, #276]	@ (8003648 <ADC_ConversionStop+0x174>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d90d      	bls.n	8003554 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353c:	f043 0210 	orr.w	r2, r3, #16
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e074      	b.n	800363e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d1e3      	bne.n	8003530 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2240      	movs	r2, #64	@ 0x40
 800356e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d014      	beq.n	80035a0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff f85a 	bl	8002634 <LL_ADC_REG_IsConversionOngoing>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff f817 	bl	80025be <LL_ADC_IsDisableOngoing>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f836 	bl	800260c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d014      	beq.n	80035d0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f869 	bl	8002682 <LL_ADC_INJ_IsConversionOngoing>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe ffff 	bl	80025be <LL_ADC_IsDisableOngoing>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff f845 	bl	800265a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d005      	beq.n	80035e2 <ADC_ConversionStop+0x10e>
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d105      	bne.n	80035e8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80035dc:	230c      	movs	r3, #12
 80035de:	617b      	str	r3, [r7, #20]
        break;
 80035e0:	e005      	b.n	80035ee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80035e2:	2308      	movs	r3, #8
 80035e4:	617b      	str	r3, [r7, #20]
        break;
 80035e6:	e002      	b.n	80035ee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80035e8:	2304      	movs	r3, #4
 80035ea:	617b      	str	r3, [r7, #20]
        break;
 80035ec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80035ee:	f7fe fdf9 	bl	80021e4 <HAL_GetTick>
 80035f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035f4:	e01b      	b.n	800362e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80035f6:	f7fe fdf5 	bl	80021e4 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b05      	cmp	r3, #5
 8003602:	d914      	bls.n	800362e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003616:	f043 0210 	orr.w	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e007      	b.n	800363e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1dc      	bne.n	80035f6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	a33fffff 	.word	0xa33fffff

0800364c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe ff9b 	bl	8002598 <LL_ADC_IsEnabled>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d169      	bne.n	800373c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	4b36      	ldr	r3, [pc, #216]	@ (8003748 <ADC_Enable+0xfc>)
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367a:	f043 0210 	orr.w	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	f043 0201 	orr.w	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e055      	b.n	800373e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe ff56 	bl	8002548 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800369c:	482b      	ldr	r0, [pc, #172]	@ (800374c <ADC_Enable+0x100>)
 800369e:	f7fe fdf7 	bl	8002290 <LL_ADC_GetCommonPathInternalCh>
 80036a2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d013      	beq.n	80036d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ac:	4b28      	ldr	r3, [pc, #160]	@ (8003750 <ADC_Enable+0x104>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	4a28      	ldr	r2, [pc, #160]	@ (8003754 <ADC_Enable+0x108>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036c6:	e002      	b.n	80036ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f9      	bne.n	80036c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036d4:	f7fe fd86 	bl	80021e4 <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036da:	e028      	b.n	800372e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fe ff59 	bl	8002598 <LL_ADC_IsEnabled>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe ff29 	bl	8002548 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036f6:	f7fe fd75 	bl	80021e4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d914      	bls.n	800372e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d00d      	beq.n	800372e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003716:	f043 0210 	orr.w	r2, r3, #16
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003722:	f043 0201 	orr.w	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e007      	b.n	800373e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d1cf      	bne.n	80036dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	8000003f 	.word	0x8000003f
 800374c:	50040300 	.word	0x50040300
 8003750:	20000030 	.word	0x20000030
 8003754:	053e2d63 	.word	0x053e2d63

08003758 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe ff2a 	bl	80025be <LL_ADC_IsDisableOngoing>
 800376a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe ff11 	bl	8002598 <LL_ADC_IsEnabled>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d047      	beq.n	800380c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d144      	bne.n	800380c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030d 	and.w	r3, r3, #13
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10c      	bne.n	80037aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe feeb 	bl	8002570 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2203      	movs	r2, #3
 80037a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037a2:	f7fe fd1f 	bl	80021e4 <HAL_GetTick>
 80037a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037a8:	e029      	b.n	80037fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ae:	f043 0210 	orr.w	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e023      	b.n	800380e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037c6:	f7fe fd0d 	bl	80021e4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d914      	bls.n	80037fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e6:	f043 0210 	orr.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e007      	b.n	800380e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1dc      	bne.n	80037c6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <LL_ADC_IsEnabled>:
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <LL_ADC_IsEnabled+0x18>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <LL_ADC_IsEnabled+0x1a>
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_ADC_REG_IsConversionOngoing>:
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b04      	cmp	r3, #4
 800384e:	d101      	bne.n	8003854 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b09f      	sub	sp, #124	@ 0x7c
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800387e:	2302      	movs	r3, #2
 8003880:	e093      	b.n	80039aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800388a:	2300      	movs	r3, #0
 800388c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800388e:	2300      	movs	r3, #0
 8003890:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a47      	ldr	r2, [pc, #284]	@ (80039b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d102      	bne.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800389c:	4b46      	ldr	r3, [pc, #280]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	e001      	b.n	80038a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e072      	b.n	80039aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff ffb8 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 80038cc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ffb2 	bl	800383c <LL_ADC_REG_IsConversionOngoing>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d154      	bne.n	8003988 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80038de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d151      	bne.n	8003988 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038e4:	4b35      	ldr	r3, [pc, #212]	@ (80039bc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80038e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d02c      	beq.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80038f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003902:	035b      	lsls	r3, r3, #13
 8003904:	430b      	orrs	r3, r1
 8003906:	431a      	orrs	r2, r3
 8003908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800390a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800390c:	4829      	ldr	r0, [pc, #164]	@ (80039b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800390e:	f7ff ff82 	bl	8003816 <LL_ADC_IsEnabled>
 8003912:	4604      	mov	r4, r0
 8003914:	4828      	ldr	r0, [pc, #160]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003916:	f7ff ff7e 	bl	8003816 <LL_ADC_IsEnabled>
 800391a:	4603      	mov	r3, r0
 800391c:	431c      	orrs	r4, r3
 800391e:	4828      	ldr	r0, [pc, #160]	@ (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003920:	f7ff ff79 	bl	8003816 <LL_ADC_IsEnabled>
 8003924:	4603      	mov	r3, r0
 8003926:	4323      	orrs	r3, r4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d137      	bne.n	800399c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800392c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003934:	f023 030f 	bic.w	r3, r3, #15
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	6811      	ldr	r1, [r2, #0]
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	6892      	ldr	r2, [r2, #8]
 8003940:	430a      	orrs	r2, r1
 8003942:	431a      	orrs	r2, r3
 8003944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003946:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003948:	e028      	b.n	800399c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800394a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003954:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003956:	4817      	ldr	r0, [pc, #92]	@ (80039b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003958:	f7ff ff5d 	bl	8003816 <LL_ADC_IsEnabled>
 800395c:	4604      	mov	r4, r0
 800395e:	4816      	ldr	r0, [pc, #88]	@ (80039b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003960:	f7ff ff59 	bl	8003816 <LL_ADC_IsEnabled>
 8003964:	4603      	mov	r3, r0
 8003966:	431c      	orrs	r4, r3
 8003968:	4815      	ldr	r0, [pc, #84]	@ (80039c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800396a:	f7ff ff54 	bl	8003816 <LL_ADC_IsEnabled>
 800396e:	4603      	mov	r3, r0
 8003970:	4323      	orrs	r3, r4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d112      	bne.n	800399c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800397e:	f023 030f 	bic.w	r3, r3, #15
 8003982:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003984:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003986:	e009      	b.n	800399c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800399a:	e000      	b.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800399c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80039a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	377c      	adds	r7, #124	@ 0x7c
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd90      	pop	{r4, r7, pc}
 80039b2:	bf00      	nop
 80039b4:	50040000 	.word	0x50040000
 80039b8:	50040100 	.word	0x50040100
 80039bc:	50040300 	.word	0x50040300
 80039c0:	50040200 	.word	0x50040200

080039c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a08 <__NVIC_SetPriorityGrouping+0x44>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039e0:	4013      	ands	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039f6:	4a04      	ldr	r2, [pc, #16]	@ (8003a08 <__NVIC_SetPriorityGrouping+0x44>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	60d3      	str	r3, [r2, #12]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a10:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <__NVIC_GetPriorityGrouping+0x18>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	f003 0307 	and.w	r3, r3, #7
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	db0b      	blt.n	8003a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	f003 021f 	and.w	r2, r3, #31
 8003a40:	4907      	ldr	r1, [pc, #28]	@ (8003a60 <__NVIC_EnableIRQ+0x38>)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	2001      	movs	r0, #1
 8003a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	e000e100 	.word	0xe000e100

08003a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	db0a      	blt.n	8003a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	490c      	ldr	r1, [pc, #48]	@ (8003ab0 <__NVIC_SetPriority+0x4c>)
 8003a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a82:	0112      	lsls	r2, r2, #4
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	440b      	add	r3, r1
 8003a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a8c:	e00a      	b.n	8003aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	4908      	ldr	r1, [pc, #32]	@ (8003ab4 <__NVIC_SetPriority+0x50>)
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	3b04      	subs	r3, #4
 8003a9c:	0112      	lsls	r2, r2, #4
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	761a      	strb	r2, [r3, #24]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000e100 	.word	0xe000e100
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	@ 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f1c3 0307 	rsb	r3, r3, #7
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	bf28      	it	cs
 8003ad6:	2304      	movcs	r3, #4
 8003ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d902      	bls.n	8003ae8 <NVIC_EncodePriority+0x30>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3b03      	subs	r3, #3
 8003ae6:	e000      	b.n	8003aea <NVIC_EncodePriority+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43da      	mvns	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	401a      	ands	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b00:	f04f 31ff 	mov.w	r1, #4294967295
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	43d9      	mvns	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	4313      	orrs	r3, r2
         );
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	@ 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b30:	d301      	bcc.n	8003b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00f      	b.n	8003b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b36:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <SysTick_Config+0x40>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3e:	210f      	movs	r1, #15
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	f7ff ff8e 	bl	8003a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <SysTick_Config+0x40>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4e:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <SysTick_Config+0x40>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	e000e010 	.word	0xe000e010

08003b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff ff29 	bl	80039c4 <__NVIC_SetPriorityGrouping>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b8c:	f7ff ff3e 	bl	8003a0c <__NVIC_GetPriorityGrouping>
 8003b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	6978      	ldr	r0, [r7, #20]
 8003b98:	f7ff ff8e 	bl	8003ab8 <NVIC_EncodePriority>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff5d 	bl	8003a64 <__NVIC_SetPriority>
}
 8003baa:	bf00      	nop
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	4603      	mov	r3, r0
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff31 	bl	8003a28 <__NVIC_EnableIRQ>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff ffa2 	bl	8003b20 <SysTick_Config>
 8003bdc:	4603      	mov	r3, r0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf6:	e17f      	b.n	8003ef8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8171 	beq.w	8003ef2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d005      	beq.n	8003c28 <HAL_GPIO_Init+0x40>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d130      	bne.n	8003c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c5e:	2201      	movs	r2, #1
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f003 0201 	and.w	r2, r3, #1
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d118      	bne.n	8003cc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	08db      	lsrs	r3, r3, #3
 8003cb2:	f003 0201 	and.w	r2, r3, #1
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d017      	beq.n	8003d04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	2203      	movs	r2, #3
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d123      	bne.n	8003d58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	08da      	lsrs	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3208      	adds	r2, #8
 8003d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	220f      	movs	r2, #15
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	08da      	lsrs	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3208      	adds	r2, #8
 8003d52:	6939      	ldr	r1, [r7, #16]
 8003d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0203 	and.w	r2, r3, #3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 80ac 	beq.w	8003ef2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f18 <HAL_GPIO_Init+0x330>)
 8003d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d9e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f18 <HAL_GPIO_Init+0x330>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003da6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f18 <HAL_GPIO_Init+0x330>)
 8003da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003db2:	4a5a      	ldr	r2, [pc, #360]	@ (8003f1c <HAL_GPIO_Init+0x334>)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	3302      	adds	r3, #2
 8003dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	220f      	movs	r2, #15
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ddc:	d025      	beq.n	8003e2a <HAL_GPIO_Init+0x242>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a4f      	ldr	r2, [pc, #316]	@ (8003f20 <HAL_GPIO_Init+0x338>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01f      	beq.n	8003e26 <HAL_GPIO_Init+0x23e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a4e      	ldr	r2, [pc, #312]	@ (8003f24 <HAL_GPIO_Init+0x33c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d019      	beq.n	8003e22 <HAL_GPIO_Init+0x23a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a4d      	ldr	r2, [pc, #308]	@ (8003f28 <HAL_GPIO_Init+0x340>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d013      	beq.n	8003e1e <HAL_GPIO_Init+0x236>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a4c      	ldr	r2, [pc, #304]	@ (8003f2c <HAL_GPIO_Init+0x344>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00d      	beq.n	8003e1a <HAL_GPIO_Init+0x232>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a4b      	ldr	r2, [pc, #300]	@ (8003f30 <HAL_GPIO_Init+0x348>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d007      	beq.n	8003e16 <HAL_GPIO_Init+0x22e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4a      	ldr	r2, [pc, #296]	@ (8003f34 <HAL_GPIO_Init+0x34c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_GPIO_Init+0x22a>
 8003e0e:	2306      	movs	r3, #6
 8003e10:	e00c      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e12:	2307      	movs	r3, #7
 8003e14:	e00a      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e16:	2305      	movs	r3, #5
 8003e18:	e008      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e1a:	2304      	movs	r3, #4
 8003e1c:	e006      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e004      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e002      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_GPIO_Init+0x244>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	f002 0203 	and.w	r2, r2, #3
 8003e32:	0092      	lsls	r2, r2, #2
 8003e34:	4093      	lsls	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e3c:	4937      	ldr	r1, [pc, #220]	@ (8003f1c <HAL_GPIO_Init+0x334>)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	3302      	adds	r3, #2
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f38 <HAL_GPIO_Init+0x350>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e6e:	4a32      	ldr	r2, [pc, #200]	@ (8003f38 <HAL_GPIO_Init+0x350>)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e74:	4b30      	ldr	r3, [pc, #192]	@ (8003f38 <HAL_GPIO_Init+0x350>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e98:	4a27      	ldr	r2, [pc, #156]	@ (8003f38 <HAL_GPIO_Init+0x350>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e9e:	4b26      	ldr	r3, [pc, #152]	@ (8003f38 <HAL_GPIO_Init+0x350>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f38 <HAL_GPIO_Init+0x350>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f38 <HAL_GPIO_Init+0x350>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eec:	4a12      	ldr	r2, [pc, #72]	@ (8003f38 <HAL_GPIO_Init+0x350>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa22 f303 	lsr.w	r3, r2, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f47f ae78 	bne.w	8003bf8 <HAL_GPIO_Init+0x10>
  }
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	48000400 	.word	0x48000400
 8003f24:	48000800 	.word	0x48000800
 8003f28:	48000c00 	.word	0x48000c00
 8003f2c:	48001000 	.word	0x48001000
 8003f30:	48001400 	.word	0x48001400
 8003f34:	48001800 	.word	0x48001800
 8003f38:	40010400 	.word	0x40010400

08003f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e08d      	b.n	800406a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd fe6c 	bl	8001c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	@ 0x24
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d107      	bne.n	8003fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	e006      	b.n	8003fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d108      	bne.n	8003fde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	e007      	b.n	8003fee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6812      	ldr	r2, [r2, #0]
 8003ff8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69d9      	ldr	r1, [r3, #28]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b20      	cmp	r3, #32
 8004086:	d138      	bne.n	80040fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004092:	2302      	movs	r3, #2
 8004094:	e032      	b.n	80040fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2224      	movs	r2, #36	@ 0x24
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6819      	ldr	r1, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
  }
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b20      	cmp	r3, #32
 800411c:	d139      	bne.n	8004192 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004128:	2302      	movs	r3, #2
 800412a:	e033      	b.n	8004194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	@ 0x24
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800415a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041a4:	4b04      	ldr	r3, [pc, #16]	@ (80041b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40007000 	.word	0x40007000

080041bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ca:	d130      	bne.n	800422e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041cc:	4b23      	ldr	r3, [pc, #140]	@ (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d8:	d038      	beq.n	800424c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041e2:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004260 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2232      	movs	r2, #50	@ 0x32
 80041f0:	fb02 f303 	mul.w	r3, r2, r3
 80041f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004264 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	0c9b      	lsrs	r3, r3, #18
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004200:	e002      	b.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3b01      	subs	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004208:	4b14      	ldr	r3, [pc, #80]	@ (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004214:	d102      	bne.n	800421c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f2      	bne.n	8004202 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800421c:	4b0f      	ldr	r3, [pc, #60]	@ (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004228:	d110      	bne.n	800424c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e00f      	b.n	800424e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800422e:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423a:	d007      	beq.n	800424c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800423c:	4b07      	ldr	r3, [pc, #28]	@ (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004244:	4a05      	ldr	r2, [pc, #20]	@ (800425c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800424a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40007000 	.word	0x40007000
 8004260:	20000030 	.word	0x20000030
 8004264:	431bde83 	.word	0x431bde83

08004268 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e3ca      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800427a:	4b97      	ldr	r3, [pc, #604]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004284:	4b94      	ldr	r3, [pc, #592]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80e4 	beq.w	8004464 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <HAL_RCC_OscConfig+0x4a>
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2b0c      	cmp	r3, #12
 80042a6:	f040 808b 	bne.w	80043c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	f040 8087 	bne.w	80043c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042b2:	4b89      	ldr	r3, [pc, #548]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_RCC_OscConfig+0x62>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e3a2      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	4b82      	ldr	r3, [pc, #520]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_RCC_OscConfig+0x7c>
 80042da:	4b7f      	ldr	r3, [pc, #508]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042e2:	e005      	b.n	80042f0 <HAL_RCC_OscConfig+0x88>
 80042e4:	4b7c      	ldr	r3, [pc, #496]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80042e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d223      	bcs.n	800433c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fd55 	bl	8004da8 <RCC_SetFlashLatencyFromMSIRange>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e383      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004308:	4b73      	ldr	r3, [pc, #460]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a72      	ldr	r2, [pc, #456]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800430e:	f043 0308 	orr.w	r3, r3, #8
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b70      	ldr	r3, [pc, #448]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	496d      	ldr	r1, [pc, #436]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004326:	4b6c      	ldr	r3, [pc, #432]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	4968      	ldr	r1, [pc, #416]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
 800433a:	e025      	b.n	8004388 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800433c:	4b66      	ldr	r3, [pc, #408]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a65      	ldr	r2, [pc, #404]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004342:	f043 0308 	orr.w	r3, r3, #8
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	4b63      	ldr	r3, [pc, #396]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	4960      	ldr	r1, [pc, #384]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800435a:	4b5f      	ldr	r3, [pc, #380]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	495b      	ldr	r1, [pc, #364]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800436a:	4313      	orrs	r3, r2
 800436c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fd15 	bl	8004da8 <RCC_SetFlashLatencyFromMSIRange>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e343      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004388:	f000 fc4a 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b52      	ldr	r3, [pc, #328]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	4950      	ldr	r1, [pc, #320]	@ (80044dc <HAL_RCC_OscConfig+0x274>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	fa22 f303 	lsr.w	r3, r2, r3
 80043a4:	4a4e      	ldr	r2, [pc, #312]	@ (80044e0 <HAL_RCC_OscConfig+0x278>)
 80043a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043a8:	4b4e      	ldr	r3, [pc, #312]	@ (80044e4 <HAL_RCC_OscConfig+0x27c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fd fec9 	bl	8002144 <HAL_InitTick>
 80043b2:	4603      	mov	r3, r0
 80043b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d052      	beq.n	8004462 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	e327      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d032      	beq.n	800442e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043c8:	4b43      	ldr	r3, [pc, #268]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a42      	ldr	r2, [pc, #264]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043d4:	f7fd ff06 	bl	80021e4 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043dc:	f7fd ff02 	bl	80021e4 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e310      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ee:	4b3a      	ldr	r3, [pc, #232]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043fa:	4b37      	ldr	r3, [pc, #220]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a36      	ldr	r2, [pc, #216]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004400:	f043 0308 	orr.w	r3, r3, #8
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	4931      	ldr	r1, [pc, #196]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004418:	4b2f      	ldr	r3, [pc, #188]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	492c      	ldr	r1, [pc, #176]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004428:	4313      	orrs	r3, r2
 800442a:	604b      	str	r3, [r1, #4]
 800442c:	e01a      	b.n	8004464 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800442e:	4b2a      	ldr	r3, [pc, #168]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a29      	ldr	r2, [pc, #164]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800443a:	f7fd fed3 	bl	80021e4 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004442:	f7fd fecf 	bl	80021e4 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e2dd      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004454:	4b20      	ldr	r3, [pc, #128]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x1da>
 8004460:	e000      	b.n	8004464 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004462:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d074      	beq.n	800455a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b08      	cmp	r3, #8
 8004474:	d005      	beq.n	8004482 <HAL_RCC_OscConfig+0x21a>
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d10e      	bne.n	800449a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d10b      	bne.n	800449a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004482:	4b15      	ldr	r3, [pc, #84]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d064      	beq.n	8004558 <HAL_RCC_OscConfig+0x2f0>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d160      	bne.n	8004558 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e2ba      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x24a>
 80044a4:	4b0c      	ldr	r3, [pc, #48]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a0b      	ldr	r2, [pc, #44]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	e026      	b.n	8004500 <HAL_RCC_OscConfig+0x298>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044ba:	d115      	bne.n	80044e8 <HAL_RCC_OscConfig+0x280>
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a05      	ldr	r2, [pc, #20]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b03      	ldr	r3, [pc, #12]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a02      	ldr	r2, [pc, #8]	@ (80044d8 <HAL_RCC_OscConfig+0x270>)
 80044ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	e014      	b.n	8004500 <HAL_RCC_OscConfig+0x298>
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000
 80044dc:	0800a718 	.word	0x0800a718
 80044e0:	20000030 	.word	0x20000030
 80044e4:	20000034 	.word	0x20000034
 80044e8:	4ba0      	ldr	r3, [pc, #640]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a9f      	ldr	r2, [pc, #636]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80044ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
 80044f4:	4b9d      	ldr	r3, [pc, #628]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a9c      	ldr	r2, [pc, #624]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80044fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d013      	beq.n	8004530 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fd fe6c 	bl	80021e4 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004510:	f7fd fe68 	bl	80021e4 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	@ 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e276      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004522:	4b92      	ldr	r3, [pc, #584]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x2a8>
 800452e:	e014      	b.n	800455a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd fe58 	bl	80021e4 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004538:	f7fd fe54 	bl	80021e4 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b64      	cmp	r3, #100	@ 0x64
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e262      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800454a:	4b88      	ldr	r3, [pc, #544]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x2d0>
 8004556:	e000      	b.n	800455a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d060      	beq.n	8004628 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d005      	beq.n	8004578 <HAL_RCC_OscConfig+0x310>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b0c      	cmp	r3, #12
 8004570:	d119      	bne.n	80045a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d116      	bne.n	80045a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004578:	4b7c      	ldr	r3, [pc, #496]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_OscConfig+0x328>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d101      	bne.n	8004590 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e23f      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b76      	ldr	r3, [pc, #472]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	061b      	lsls	r3, r3, #24
 800459e:	4973      	ldr	r1, [pc, #460]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a4:	e040      	b.n	8004628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d023      	beq.n	80045f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ae:	4b6f      	ldr	r3, [pc, #444]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a6e      	ldr	r2, [pc, #440]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fd fe13 	bl	80021e4 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c2:	f7fd fe0f 	bl	80021e4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e21d      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d4:	4b65      	ldr	r3, [pc, #404]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e0:	4b62      	ldr	r3, [pc, #392]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	495f      	ldr	r1, [pc, #380]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	e018      	b.n	8004628 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f6:	4b5d      	ldr	r3, [pc, #372]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a5c      	ldr	r2, [pc, #368]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80045fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004602:	f7fd fdef 	bl	80021e4 <HAL_GetTick>
 8004606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460a:	f7fd fdeb 	bl	80021e4 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e1f9      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800461c:	4b53      	ldr	r3, [pc, #332]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d03c      	beq.n	80046ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01c      	beq.n	8004676 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463c:	4b4b      	ldr	r3, [pc, #300]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004642:	4a4a      	ldr	r2, [pc, #296]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fd fdca 	bl	80021e4 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004654:	f7fd fdc6 	bl	80021e4 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e1d4      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004666:	4b41      	ldr	r3, [pc, #260]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ef      	beq.n	8004654 <HAL_RCC_OscConfig+0x3ec>
 8004674:	e01b      	b.n	80046ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004676:	4b3d      	ldr	r3, [pc, #244]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800467c:	4a3b      	ldr	r2, [pc, #236]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fd fdad 	bl	80021e4 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468e:	f7fd fda9 	bl	80021e4 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e1b7      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a0:	4b32      	ldr	r3, [pc, #200]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ef      	bne.n	800468e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 80a6 	beq.w	8004808 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046bc:	2300      	movs	r3, #0
 80046be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046c0:	4b2a      	ldr	r3, [pc, #168]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046cc:	4b27      	ldr	r3, [pc, #156]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d0:	4a26      	ldr	r2, [pc, #152]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d8:	4b24      	ldr	r3, [pc, #144]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e4:	2301      	movs	r3, #1
 80046e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e8:	4b21      	ldr	r3, [pc, #132]	@ (8004770 <HAL_RCC_OscConfig+0x508>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d118      	bne.n	8004726 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004770 <HAL_RCC_OscConfig+0x508>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004770 <HAL_RCC_OscConfig+0x508>)
 80046fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004700:	f7fd fd70 	bl	80021e4 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004708:	f7fd fd6c 	bl	80021e4 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e17a      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471a:	4b15      	ldr	r3, [pc, #84]	@ (8004770 <HAL_RCC_OscConfig+0x508>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d108      	bne.n	8004740 <HAL_RCC_OscConfig+0x4d8>
 800472e:	4b0f      	ldr	r3, [pc, #60]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004734:	4a0d      	ldr	r2, [pc, #52]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800473e:	e029      	b.n	8004794 <HAL_RCC_OscConfig+0x52c>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d115      	bne.n	8004774 <HAL_RCC_OscConfig+0x50c>
 8004748:	4b08      	ldr	r3, [pc, #32]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474e:	4a07      	ldr	r2, [pc, #28]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004750:	f043 0304 	orr.w	r3, r3, #4
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475e:	4a03      	ldr	r2, [pc, #12]	@ (800476c <HAL_RCC_OscConfig+0x504>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004768:	e014      	b.n	8004794 <HAL_RCC_OscConfig+0x52c>
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000
 8004770:	40007000 	.word	0x40007000
 8004774:	4b9c      	ldr	r3, [pc, #624]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	4a9b      	ldr	r2, [pc, #620]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004784:	4b98      	ldr	r3, [pc, #608]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478a:	4a97      	ldr	r2, [pc, #604]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d016      	beq.n	80047ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd fd22 	bl	80021e4 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a2:	e00a      	b.n	80047ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd fd1e 	bl	80021e4 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e12a      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ba:	4b8b      	ldr	r3, [pc, #556]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0ed      	beq.n	80047a4 <HAL_RCC_OscConfig+0x53c>
 80047c8:	e015      	b.n	80047f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fd fd0b 	bl	80021e4 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fd fd07 	bl	80021e4 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e113      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047e8:	4b7f      	ldr	r3, [pc, #508]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ed      	bne.n	80047d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f6:	7ffb      	ldrb	r3, [r7, #31]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fc:	4b7a      	ldr	r3, [pc, #488]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	4a79      	ldr	r2, [pc, #484]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004802:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004806:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80fe 	beq.w	8004a0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	2b02      	cmp	r3, #2
 8004818:	f040 80d0 	bne.w	80049bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800481c:	4b72      	ldr	r3, [pc, #456]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 0203 	and.w	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	429a      	cmp	r2, r3
 800482e:	d130      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	3b01      	subs	r3, #1
 800483c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d127      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d11f      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800485c:	2a07      	cmp	r2, #7
 800485e:	bf14      	ite	ne
 8004860:	2201      	movne	r2, #1
 8004862:	2200      	moveq	r2, #0
 8004864:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004866:	4293      	cmp	r3, r2
 8004868:	d113      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	3b01      	subs	r3, #1
 8004878:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d109      	bne.n	8004892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	3b01      	subs	r3, #1
 800488c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d06e      	beq.n	8004970 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	d069      	beq.n	800496c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004898:	4b53      	ldr	r3, [pc, #332]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048a4:	4b50      	ldr	r3, [pc, #320]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0ad      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048b4:	4b4c      	ldr	r3, [pc, #304]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a4b      	ldr	r2, [pc, #300]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048c0:	f7fd fc90 	bl	80021e4 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fd fc8c 	bl	80021e4 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e09a      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048da:	4b43      	ldr	r3, [pc, #268]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e6:	4b40      	ldr	r3, [pc, #256]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	4b40      	ldr	r3, [pc, #256]	@ (80049ec <HAL_RCC_OscConfig+0x784>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048f6:	3a01      	subs	r2, #1
 80048f8:	0112      	lsls	r2, r2, #4
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004900:	0212      	lsls	r2, r2, #8
 8004902:	4311      	orrs	r1, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004908:	0852      	lsrs	r2, r2, #1
 800490a:	3a01      	subs	r2, #1
 800490c:	0552      	lsls	r2, r2, #21
 800490e:	4311      	orrs	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004914:	0852      	lsrs	r2, r2, #1
 8004916:	3a01      	subs	r2, #1
 8004918:	0652      	lsls	r2, r2, #25
 800491a:	4311      	orrs	r1, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004920:	0912      	lsrs	r2, r2, #4
 8004922:	0452      	lsls	r2, r2, #17
 8004924:	430a      	orrs	r2, r1
 8004926:	4930      	ldr	r1, [pc, #192]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004928:	4313      	orrs	r3, r2
 800492a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800492c:	4b2e      	ldr	r3, [pc, #184]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2d      	ldr	r2, [pc, #180]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004938:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	4a2a      	ldr	r2, [pc, #168]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800493e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004944:	f7fd fc4e 	bl	80021e4 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800494c:	f7fd fc4a 	bl	80021e4 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e058      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495e:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800496a:	e050      	b.n	8004a0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e04f      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004970:	4b1d      	ldr	r3, [pc, #116]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d148      	bne.n	8004a0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800497c:	4b1a      	ldr	r3, [pc, #104]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a19      	ldr	r2, [pc, #100]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 8004982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004988:	4b17      	ldr	r3, [pc, #92]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a16      	ldr	r2, [pc, #88]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 800498e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004994:	f7fd fc26 	bl	80021e4 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800499c:	f7fd fc22 	bl	80021e4 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e030      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	4b0e      	ldr	r3, [pc, #56]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x734>
 80049ba:	e028      	b.n	8004a0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d023      	beq.n	8004a0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b09      	ldr	r3, [pc, #36]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a08      	ldr	r2, [pc, #32]	@ (80049e8 <HAL_RCC_OscConfig+0x780>)
 80049c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ce:	f7fd fc09 	bl	80021e4 <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d4:	e00c      	b.n	80049f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d6:	f7fd fc05 	bl	80021e4 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d905      	bls.n	80049f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e013      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
 80049e8:	40021000 	.word	0x40021000
 80049ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f0:	4b09      	ldr	r3, [pc, #36]	@ (8004a18 <HAL_RCC_OscConfig+0x7b0>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1ec      	bne.n	80049d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCC_OscConfig+0x7b0>)
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	4905      	ldr	r1, [pc, #20]	@ (8004a18 <HAL_RCC_OscConfig+0x7b0>)
 8004a02:	4b06      	ldr	r3, [pc, #24]	@ (8004a1c <HAL_RCC_OscConfig+0x7b4>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	60cb      	str	r3, [r1, #12]
 8004a08:	e001      	b.n	8004a0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3720      	adds	r7, #32
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	feeefffc 	.word	0xfeeefffc

08004a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0e7      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b75      	ldr	r3, [pc, #468]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d910      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b72      	ldr	r3, [pc, #456]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4970      	ldr	r1, [pc, #448]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b6e      	ldr	r3, [pc, #440]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0cf      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d010      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	4b66      	ldr	r3, [pc, #408]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d908      	bls.n	8004a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a80:	4b63      	ldr	r3, [pc, #396]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4960      	ldr	r1, [pc, #384]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04c      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d107      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d121      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0a6      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004abe:	4b54      	ldr	r3, [pc, #336]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d115      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e09a      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e08e      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e086      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b46      	ldr	r3, [pc, #280]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4943      	ldr	r1, [pc, #268]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fd fb6c 	bl	80021e4 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fd fb68 	bl	80021e4 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e06e      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b3a      	ldr	r3, [pc, #232]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d010      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	4b31      	ldr	r3, [pc, #196]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d208      	bcs.n	8004b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b54:	4b2e      	ldr	r3, [pc, #184]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	492b      	ldr	r1, [pc, #172]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b66:	4b29      	ldr	r3, [pc, #164]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d210      	bcs.n	8004b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f023 0207 	bic.w	r2, r3, #7
 8004b7c:	4923      	ldr	r1, [pc, #140]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b84:	4b21      	ldr	r3, [pc, #132]	@ (8004c0c <HAL_RCC_ClockConfig+0x1ec>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e036      	b.n	8004c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	4918      	ldr	r1, [pc, #96]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc0:	4b13      	ldr	r3, [pc, #76]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4910      	ldr	r1, [pc, #64]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bd4:	f000 f824 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b0d      	ldr	r3, [pc, #52]	@ (8004c10 <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	490b      	ldr	r1, [pc, #44]	@ (8004c14 <HAL_RCC_ClockConfig+0x1f4>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf0:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <HAL_RCC_ClockConfig+0x1f8>)
 8004bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bf4:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <HAL_RCC_ClockConfig+0x1fc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fd faa3 	bl	8002144 <HAL_InitTick>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c02:	7afb      	ldrb	r3, [r7, #11]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40022000 	.word	0x40022000
 8004c10:	40021000 	.word	0x40021000
 8004c14:	0800a718 	.word	0x0800a718
 8004c18:	20000030 	.word	0x20000030
 8004c1c:	20000034 	.word	0x20000034

08004c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 030c 	and.w	r3, r3, #12
 8004c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c38:	4b3b      	ldr	r3, [pc, #236]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x34>
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d121      	bne.n	8004c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d11e      	bne.n	8004c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c54:	4b34      	ldr	r3, [pc, #208]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c60:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	e005      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c70:	4b2d      	ldr	r3, [pc, #180]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10d      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c90:	e00a      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d102      	bne.n	8004c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c98:	4b25      	ldr	r3, [pc, #148]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c9a:	61bb      	str	r3, [r7, #24]
 8004c9c:	e004      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d101      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ca4:	4b23      	ldr	r3, [pc, #140]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d134      	bne.n	8004d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cae:	4b1e      	ldr	r3, [pc, #120]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d003      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0xac>
 8004cc4:	e005      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cc8:	617b      	str	r3, [r7, #20]
      break;
 8004cca:	e005      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ccc:	4b19      	ldr	r3, [pc, #100]	@ (8004d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cce:	617b      	str	r3, [r7, #20]
      break;
 8004cd0:	e002      	b.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	617b      	str	r3, [r7, #20]
      break;
 8004cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cd8:	4b13      	ldr	r3, [pc, #76]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ce6:	4b10      	ldr	r3, [pc, #64]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	0a1b      	lsrs	r3, r3, #8
 8004cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	fb03 f202 	mul.w	r2, r3, r2
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	0e5b      	lsrs	r3, r3, #25
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d18:	69bb      	ldr	r3, [r7, #24]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3724      	adds	r7, #36	@ 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	0800a730 	.word	0x0800a730
 8004d30:	00f42400 	.word	0x00f42400
 8004d34:	007a1200 	.word	0x007a1200

08004d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d3c:	4b03      	ldr	r3, [pc, #12]	@ (8004d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000030 	.word	0x20000030

08004d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d54:	f7ff fff0 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	4904      	ldr	r1, [pc, #16]	@ (8004d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d66:	5ccb      	ldrb	r3, [r1, r3]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	0800a728 	.word	0x0800a728

08004d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d80:	f7ff ffda 	bl	8004d38 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0adb      	lsrs	r3, r3, #11
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4904      	ldr	r1, [pc, #16]	@ (8004da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	0800a728 	.word	0x0800a728

08004da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004db4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004dc0:	f7ff f9ee 	bl	80041a0 <HAL_PWREx_GetVoltageRange>
 8004dc4:	6178      	str	r0, [r7, #20]
 8004dc6:	e014      	b.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dc8:	4b25      	ldr	r3, [pc, #148]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dcc:	4a24      	ldr	r2, [pc, #144]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dd4:	4b22      	ldr	r3, [pc, #136]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004de0:	f7ff f9de 	bl	80041a0 <HAL_PWREx_GetVoltageRange>
 8004de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004de6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dea:	4a1d      	ldr	r2, [pc, #116]	@ (8004e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df8:	d10b      	bne.n	8004e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b80      	cmp	r3, #128	@ 0x80
 8004dfe:	d919      	bls.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e04:	d902      	bls.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e06:	2302      	movs	r3, #2
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	e013      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	e010      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b80      	cmp	r3, #128	@ 0x80
 8004e16:	d902      	bls.n	8004e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e18:	2303      	movs	r3, #3
 8004e1a:	613b      	str	r3, [r7, #16]
 8004e1c:	e00a      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b80      	cmp	r3, #128	@ 0x80
 8004e22:	d102      	bne.n	8004e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e24:	2302      	movs	r3, #2
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	e004      	b.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b70      	cmp	r3, #112	@ 0x70
 8004e2e:	d101      	bne.n	8004e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e30:	2301      	movs	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e34:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f023 0207 	bic.w	r2, r3, #7
 8004e3c:	4909      	ldr	r1, [pc, #36]	@ (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e44:	4b07      	ldr	r3, [pc, #28]	@ (8004e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d001      	beq.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40022000 	.word	0x40022000

08004e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e70:	2300      	movs	r3, #0
 8004e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e74:	2300      	movs	r3, #0
 8004e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d041      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e8c:	d02a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e92:	d824      	bhi.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e98:	d008      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e9e:	d81e      	bhi.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea8:	d010      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004eaa:	e018      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004eac:	4b86      	ldr	r3, [pc, #536]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a85      	ldr	r2, [pc, #532]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eb8:	e015      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fabb 	bl	800543c <RCCEx_PLLSAI1_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eca:	e00c      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3320      	adds	r3, #32
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fba6 	bl	8005624 <RCCEx_PLLSAI2_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004edc:	e003      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eec:	4b76      	ldr	r3, [pc, #472]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ef2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004efa:	4973      	ldr	r1, [pc, #460]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f02:	e001      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d041      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f1c:	d02a      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f1e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f22:	d824      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f28:	d008      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f2e:	d81e      	bhi.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f38:	d010      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f3a:	e018      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f3c:	4b62      	ldr	r3, [pc, #392]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a61      	ldr	r2, [pc, #388]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f48:	e015      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fa73 	bl	800543c <RCCEx_PLLSAI1_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f5a:	e00c      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3320      	adds	r3, #32
 8004f60:	2100      	movs	r1, #0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fb5e 	bl	8005624 <RCCEx_PLLSAI2_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f6c:	e003      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	74fb      	strb	r3, [r7, #19]
      break;
 8004f72:	e000      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10b      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f7c:	4b52      	ldr	r3, [pc, #328]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f82:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f8a:	494f      	ldr	r1, [pc, #316]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f92:	e001      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80a0 	beq.w	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004faa:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc0:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc4:	4a40      	ldr	r2, [pc, #256]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a3a      	ldr	r2, [pc, #232]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe8:	f7fd f8fc 	bl	80021e4 <HAL_GetTick>
 8004fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fee:	e009      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff0:	f7fd f8f8 	bl	80021e4 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d902      	bls.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	74fb      	strb	r3, [r7, #19]
        break;
 8005002:	e005      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005004:	4b31      	ldr	r3, [pc, #196]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ef      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005010:	7cfb      	ldrb	r3, [r7, #19]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d15c      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005016:	4b2c      	ldr	r3, [pc, #176]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01f      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	429a      	cmp	r2, r3
 8005032:	d019      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005034:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005040:	4b21      	ldr	r3, [pc, #132]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005046:	4a20      	ldr	r2, [pc, #128]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005050:	4b1d      	ldr	r3, [pc, #116]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005056:	4a1c      	ldr	r2, [pc, #112]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800505c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005060:	4a19      	ldr	r2, [pc, #100]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fd f8b7 	bl	80021e4 <HAL_GetTick>
 8005076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005078:	e00b      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fd f8b3 	bl	80021e4 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d902      	bls.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	74fb      	strb	r3, [r7, #19]
            break;
 8005090:	e006      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005092:	4b0d      	ldr	r3, [pc, #52]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0ec      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050a0:	7cfb      	ldrb	r3, [r7, #19]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a6:	4b08      	ldr	r3, [pc, #32]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b6:	4904      	ldr	r1, [pc, #16]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050be:	e009      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050c0:	7cfb      	ldrb	r3, [r7, #19]
 80050c2:	74bb      	strb	r3, [r7, #18]
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d4:	7c7b      	ldrb	r3, [r7, #17]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4b9e      	ldr	r3, [pc, #632]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050de:	4a9d      	ldr	r2, [pc, #628]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f2:	4b98      	ldr	r3, [pc, #608]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f8:	f023 0203 	bic.w	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	4994      	ldr	r1, [pc, #592]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005114:	4b8f      	ldr	r3, [pc, #572]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511a:	f023 020c 	bic.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005122:	498c      	ldr	r1, [pc, #560]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005136:	4b87      	ldr	r3, [pc, #540]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	4983      	ldr	r1, [pc, #524]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005158:	4b7e      	ldr	r3, [pc, #504]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800515e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	497b      	ldr	r1, [pc, #492]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800517a:	4b76      	ldr	r3, [pc, #472]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005180:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005188:	4972      	ldr	r1, [pc, #456]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800519c:	4b6d      	ldr	r3, [pc, #436]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051aa:	496a      	ldr	r1, [pc, #424]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051be:	4b65      	ldr	r3, [pc, #404]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051cc:	4961      	ldr	r1, [pc, #388]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051e0:	4b5c      	ldr	r3, [pc, #368]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ee:	4959      	ldr	r1, [pc, #356]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005202:	4b54      	ldr	r3, [pc, #336]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005208:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005210:	4950      	ldr	r1, [pc, #320]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005224:	4b4b      	ldr	r3, [pc, #300]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005232:	4948      	ldr	r1, [pc, #288]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005246:	4b43      	ldr	r3, [pc, #268]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005254:	493f      	ldr	r1, [pc, #252]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d028      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005268:	4b3a      	ldr	r3, [pc, #232]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005276:	4937      	ldr	r1, [pc, #220]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005286:	d106      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005288:	4b32      	ldr	r3, [pc, #200]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4a31      	ldr	r2, [pc, #196]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005292:	60d3      	str	r3, [r2, #12]
 8005294:	e011      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800529a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800529e:	d10c      	bne.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	2101      	movs	r1, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f8c8 	bl	800543c <RCCEx_PLLSAI1_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d028      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052c6:	4b23      	ldr	r3, [pc, #140]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052d4:	491f      	ldr	r1, [pc, #124]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052e4:	d106      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052f0:	60d3      	str	r3, [r2, #12]
 80052f2:	e011      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052fc:	d10c      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3304      	adds	r3, #4
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f899 	bl	800543c <RCCEx_PLLSAI1_Config>
 800530a:	4603      	mov	r3, r0
 800530c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800530e:	7cfb      	ldrb	r3, [r7, #19]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005314:	7cfb      	ldrb	r3, [r7, #19]
 8005316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d02b      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005332:	4908      	ldr	r1, [pc, #32]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800533e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005342:	d109      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005344:	4b03      	ldr	r3, [pc, #12]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	4a02      	ldr	r2, [pc, #8]	@ (8005354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800534e:	60d3      	str	r3, [r2, #12]
 8005350:	e014      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005352:	bf00      	nop
 8005354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800535c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005360:	d10c      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3304      	adds	r3, #4
 8005366:	2101      	movs	r1, #1
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f867 	bl	800543c <RCCEx_PLLSAI1_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d02f      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005388:	4b2b      	ldr	r3, [pc, #172]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005396:	4928      	ldr	r1, [pc, #160]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a6:	d10d      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	2102      	movs	r1, #2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f844 	bl	800543c <RCCEx_PLLSAI1_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d014      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053be:	7cfb      	ldrb	r3, [r7, #19]
 80053c0:	74bb      	strb	r3, [r7, #18]
 80053c2:	e011      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3320      	adds	r3, #32
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f925 	bl	8005624 <RCCEx_PLLSAI2_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053e4:	7cfb      	ldrb	r3, [r7, #19]
 80053e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053f4:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005402:	490d      	ldr	r1, [pc, #52]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00b      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005416:	4b08      	ldr	r3, [pc, #32]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005426:	4904      	ldr	r1, [pc, #16]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800542e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40021000 	.word	0x40021000

0800543c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800544a:	4b75      	ldr	r3, [pc, #468]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d018      	beq.n	8005488 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005456:	4b72      	ldr	r3, [pc, #456]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0203 	and.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d10d      	bne.n	8005482 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
       ||
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800546e:	4b6c      	ldr	r3, [pc, #432]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	091b      	lsrs	r3, r3, #4
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
       ||
 800547e:	429a      	cmp	r2, r3
 8005480:	d047      	beq.n	8005512 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	73fb      	strb	r3, [r7, #15]
 8005486:	e044      	b.n	8005512 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d018      	beq.n	80054c2 <RCCEx_PLLSAI1_Config+0x86>
 8005490:	2b03      	cmp	r3, #3
 8005492:	d825      	bhi.n	80054e0 <RCCEx_PLLSAI1_Config+0xa4>
 8005494:	2b01      	cmp	r3, #1
 8005496:	d002      	beq.n	800549e <RCCEx_PLLSAI1_Config+0x62>
 8005498:	2b02      	cmp	r3, #2
 800549a:	d009      	beq.n	80054b0 <RCCEx_PLLSAI1_Config+0x74>
 800549c:	e020      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800549e:	4b60      	ldr	r3, [pc, #384]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d11d      	bne.n	80054e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ae:	e01a      	b.n	80054e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d116      	bne.n	80054ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c0:	e013      	b.n	80054ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054c2:	4b57      	ldr	r3, [pc, #348]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10f      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054ce:	4b54      	ldr	r3, [pc, #336]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d109      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054de:	e006      	b.n	80054ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	73fb      	strb	r3, [r7, #15]
      break;
 80054e4:	e004      	b.n	80054f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054e6:	bf00      	nop
 80054e8:	e002      	b.n	80054f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10d      	bne.n	8005512 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6819      	ldr	r1, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	3b01      	subs	r3, #1
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	430b      	orrs	r3, r1
 800550c:	4944      	ldr	r1, [pc, #272]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800550e:	4313      	orrs	r3, r2
 8005510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d17d      	bne.n	8005614 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005518:	4b41      	ldr	r3, [pc, #260]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a40      	ldr	r2, [pc, #256]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005524:	f7fc fe5e 	bl	80021e4 <HAL_GetTick>
 8005528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800552a:	e009      	b.n	8005540 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800552c:	f7fc fe5a 	bl	80021e4 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d902      	bls.n	8005540 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	73fb      	strb	r3, [r7, #15]
        break;
 800553e:	e005      	b.n	800554c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005540:	4b37      	ldr	r3, [pc, #220]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1ef      	bne.n	800552c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d160      	bne.n	8005614 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d111      	bne.n	800557c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005558:	4b31      	ldr	r3, [pc, #196]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6892      	ldr	r2, [r2, #8]
 8005568:	0211      	lsls	r1, r2, #8
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	68d2      	ldr	r2, [r2, #12]
 800556e:	0912      	lsrs	r2, r2, #4
 8005570:	0452      	lsls	r2, r2, #17
 8005572:	430a      	orrs	r2, r1
 8005574:	492a      	ldr	r1, [pc, #168]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005576:	4313      	orrs	r3, r2
 8005578:	610b      	str	r3, [r1, #16]
 800557a:	e027      	b.n	80055cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d112      	bne.n	80055a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005582:	4b27      	ldr	r3, [pc, #156]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800558a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6892      	ldr	r2, [r2, #8]
 8005592:	0211      	lsls	r1, r2, #8
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6912      	ldr	r2, [r2, #16]
 8005598:	0852      	lsrs	r2, r2, #1
 800559a:	3a01      	subs	r2, #1
 800559c:	0552      	lsls	r2, r2, #21
 800559e:	430a      	orrs	r2, r1
 80055a0:	491f      	ldr	r1, [pc, #124]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	610b      	str	r3, [r1, #16]
 80055a6:	e011      	b.n	80055cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6892      	ldr	r2, [r2, #8]
 80055b8:	0211      	lsls	r1, r2, #8
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6952      	ldr	r2, [r2, #20]
 80055be:	0852      	lsrs	r2, r2, #1
 80055c0:	3a01      	subs	r2, #1
 80055c2:	0652      	lsls	r2, r2, #25
 80055c4:	430a      	orrs	r2, r1
 80055c6:	4916      	ldr	r1, [pc, #88]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055cc:	4b14      	ldr	r3, [pc, #80]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a13      	ldr	r2, [pc, #76]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fc fe04 	bl	80021e4 <HAL_GetTick>
 80055dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055de:	e009      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055e0:	f7fc fe00 	bl	80021e4 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d902      	bls.n	80055f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	73fb      	strb	r3, [r7, #15]
          break;
 80055f2:	e005      	b.n	8005600 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ef      	beq.n	80055e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005606:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	4904      	ldr	r1, [pc, #16]	@ (8005620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005610:	4313      	orrs	r3, r2
 8005612:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	40021000 	.word	0x40021000

08005624 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800562e:	2300      	movs	r3, #0
 8005630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005632:	4b6a      	ldr	r3, [pc, #424]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d018      	beq.n	8005670 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800563e:	4b67      	ldr	r3, [pc, #412]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f003 0203 	and.w	r2, r3, #3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d10d      	bne.n	800566a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
       ||
 8005652:	2b00      	cmp	r3, #0
 8005654:	d009      	beq.n	800566a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005656:	4b61      	ldr	r3, [pc, #388]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	091b      	lsrs	r3, r3, #4
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
       ||
 8005666:	429a      	cmp	r2, r3
 8005668:	d047      	beq.n	80056fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
 800566e:	e044      	b.n	80056fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b03      	cmp	r3, #3
 8005676:	d018      	beq.n	80056aa <RCCEx_PLLSAI2_Config+0x86>
 8005678:	2b03      	cmp	r3, #3
 800567a:	d825      	bhi.n	80056c8 <RCCEx_PLLSAI2_Config+0xa4>
 800567c:	2b01      	cmp	r3, #1
 800567e:	d002      	beq.n	8005686 <RCCEx_PLLSAI2_Config+0x62>
 8005680:	2b02      	cmp	r3, #2
 8005682:	d009      	beq.n	8005698 <RCCEx_PLLSAI2_Config+0x74>
 8005684:	e020      	b.n	80056c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005686:	4b55      	ldr	r3, [pc, #340]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d11d      	bne.n	80056ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005696:	e01a      	b.n	80056ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005698:	4b50      	ldr	r3, [pc, #320]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d116      	bne.n	80056d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a8:	e013      	b.n	80056d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056aa:	4b4c      	ldr	r3, [pc, #304]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10f      	bne.n	80056d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056b6:	4b49      	ldr	r3, [pc, #292]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056c6:	e006      	b.n	80056d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
      break;
 80056cc:	e004      	b.n	80056d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ce:	bf00      	nop
 80056d0:	e002      	b.n	80056d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10d      	bne.n	80056fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056de:	4b3f      	ldr	r3, [pc, #252]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6819      	ldr	r1, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	430b      	orrs	r3, r1
 80056f4:	4939      	ldr	r1, [pc, #228]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d167      	bne.n	80057d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005700:	4b36      	ldr	r3, [pc, #216]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a35      	ldr	r2, [pc, #212]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800570a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570c:	f7fc fd6a 	bl	80021e4 <HAL_GetTick>
 8005710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005712:	e009      	b.n	8005728 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005714:	f7fc fd66 	bl	80021e4 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d902      	bls.n	8005728 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	73fb      	strb	r3, [r7, #15]
        break;
 8005726:	e005      	b.n	8005734 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005728:	4b2c      	ldr	r3, [pc, #176]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1ef      	bne.n	8005714 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005734:	7bfb      	ldrb	r3, [r7, #15]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d14a      	bne.n	80057d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d111      	bne.n	8005764 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005740:	4b26      	ldr	r3, [pc, #152]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6892      	ldr	r2, [r2, #8]
 8005750:	0211      	lsls	r1, r2, #8
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68d2      	ldr	r2, [r2, #12]
 8005756:	0912      	lsrs	r2, r2, #4
 8005758:	0452      	lsls	r2, r2, #17
 800575a:	430a      	orrs	r2, r1
 800575c:	491f      	ldr	r1, [pc, #124]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800575e:	4313      	orrs	r3, r2
 8005760:	614b      	str	r3, [r1, #20]
 8005762:	e011      	b.n	8005788 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005764:	4b1d      	ldr	r3, [pc, #116]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800576c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6892      	ldr	r2, [r2, #8]
 8005774:	0211      	lsls	r1, r2, #8
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6912      	ldr	r2, [r2, #16]
 800577a:	0852      	lsrs	r2, r2, #1
 800577c:	3a01      	subs	r2, #1
 800577e:	0652      	lsls	r2, r2, #25
 8005780:	430a      	orrs	r2, r1
 8005782:	4916      	ldr	r1, [pc, #88]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005784:	4313      	orrs	r3, r2
 8005786:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005788:	4b14      	ldr	r3, [pc, #80]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a13      	ldr	r2, [pc, #76]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005792:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005794:	f7fc fd26 	bl	80021e4 <HAL_GetTick>
 8005798:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800579a:	e009      	b.n	80057b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800579c:	f7fc fd22 	bl	80021e4 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d902      	bls.n	80057b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	73fb      	strb	r3, [r7, #15]
          break;
 80057ae:	e005      	b.n	80057bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057b0:	4b0a      	ldr	r3, [pc, #40]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0ef      	beq.n	800579c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	4904      	ldr	r1, [pc, #16]	@ (80057dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000

080057e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e049      	b.n	8005886 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fc fa78 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f000 fa38 	bl	8005c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d020      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01b      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f06f 0202 	mvn.w	r2, #2
 80058c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f9bc 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 80058de:	e005      	b.n	80058ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f9ae 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9bf 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d020      	beq.n	800593e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01b      	beq.n	800593e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f06f 0204 	mvn.w	r2, #4
 800590e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f996 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 800592a:	e005      	b.n	8005938 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f988 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f999 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d020      	beq.n	800598a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01b      	beq.n	800598a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f06f 0208 	mvn.w	r2, #8
 800595a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2204      	movs	r2, #4
 8005960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f003 0303 	and.w	r3, r3, #3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f970 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 8005976:	e005      	b.n	8005984 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f962 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f973 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	d020      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01b      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f06f 0210 	mvn.w	r2, #16
 80059a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2208      	movs	r2, #8
 80059ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f94a 	bl	8005c56 <HAL_TIM_IC_CaptureCallback>
 80059c2:	e005      	b.n	80059d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f93c 	bl	8005c42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f94d 	bl	8005c6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0201 	mvn.w	r2, #1
 80059f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f91a 	bl	8005c2e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00c      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb08 	bl	8006038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00c      	beq.n	8005a4c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fb00 	bl	800604c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00c      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f907 	bl	8005c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00c      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0220 	mvn.w	r2, #32
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fac8 	bl	8006024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a94:	bf00      	nop
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e0b6      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x18a>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ad6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ae2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af4:	d03e      	beq.n	8005b74 <HAL_TIM_ConfigClockSource+0xd8>
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afa:	f200 8087 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x170>
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b02:	f000 8086 	beq.w	8005c12 <HAL_TIM_ConfigClockSource+0x176>
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0a:	d87f      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x170>
 8005b0c:	2b70      	cmp	r3, #112	@ 0x70
 8005b0e:	d01a      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0xaa>
 8005b10:	2b70      	cmp	r3, #112	@ 0x70
 8005b12:	d87b      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x170>
 8005b14:	2b60      	cmp	r3, #96	@ 0x60
 8005b16:	d050      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x11e>
 8005b18:	2b60      	cmp	r3, #96	@ 0x60
 8005b1a:	d877      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x170>
 8005b1c:	2b50      	cmp	r3, #80	@ 0x50
 8005b1e:	d03c      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0xfe>
 8005b20:	2b50      	cmp	r3, #80	@ 0x50
 8005b22:	d873      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x170>
 8005b24:	2b40      	cmp	r3, #64	@ 0x40
 8005b26:	d058      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x13e>
 8005b28:	2b40      	cmp	r3, #64	@ 0x40
 8005b2a:	d86f      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x170>
 8005b2c:	2b30      	cmp	r3, #48	@ 0x30
 8005b2e:	d064      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x15e>
 8005b30:	2b30      	cmp	r3, #48	@ 0x30
 8005b32:	d86b      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x170>
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d060      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x15e>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d867      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x170>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d05c      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x15e>
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d05a      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x15e>
 8005b44:	e062      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b56:	f000 f9bd 	bl	8005ed4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	609a      	str	r2, [r3, #8]
      break;
 8005b72:	e04f      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b84:	f000 f9a6 	bl	8005ed4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b96:	609a      	str	r2, [r3, #8]
      break;
 8005b98:	e03c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 f91a 	bl	8005de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2150      	movs	r1, #80	@ 0x50
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f973 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e02c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 f939 	bl	8005e3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2160      	movs	r1, #96	@ 0x60
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f963 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e01c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be6:	461a      	mov	r2, r3
 8005be8:	f000 f8fa 	bl	8005de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2140      	movs	r1, #64	@ 0x40
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f953 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e00c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f000 f94a 	bl	8005e9e <TIM_ITRx_SetConfig>
      break;
 8005c0a:	e003      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c10:	e000      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a46      	ldr	r2, [pc, #280]	@ (8005dc0 <TIM_Base_SetConfig+0x12c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb2:	d00f      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a43      	ldr	r2, [pc, #268]	@ (8005dc4 <TIM_Base_SetConfig+0x130>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00b      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a42      	ldr	r2, [pc, #264]	@ (8005dc8 <TIM_Base_SetConfig+0x134>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d007      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a41      	ldr	r2, [pc, #260]	@ (8005dcc <TIM_Base_SetConfig+0x138>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d003      	beq.n	8005cd4 <TIM_Base_SetConfig+0x40>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a40      	ldr	r2, [pc, #256]	@ (8005dd0 <TIM_Base_SetConfig+0x13c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d108      	bne.n	8005ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a35      	ldr	r2, [pc, #212]	@ (8005dc0 <TIM_Base_SetConfig+0x12c>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d01f      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf4:	d01b      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a32      	ldr	r2, [pc, #200]	@ (8005dc4 <TIM_Base_SetConfig+0x130>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d017      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a31      	ldr	r2, [pc, #196]	@ (8005dc8 <TIM_Base_SetConfig+0x134>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a30      	ldr	r2, [pc, #192]	@ (8005dcc <TIM_Base_SetConfig+0x138>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00f      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a2f      	ldr	r2, [pc, #188]	@ (8005dd0 <TIM_Base_SetConfig+0x13c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00b      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a2e      	ldr	r2, [pc, #184]	@ (8005dd4 <TIM_Base_SetConfig+0x140>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d007      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd8 <TIM_Base_SetConfig+0x144>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d003      	beq.n	8005d2e <TIM_Base_SetConfig+0x9a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2c      	ldr	r2, [pc, #176]	@ (8005ddc <TIM_Base_SetConfig+0x148>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d108      	bne.n	8005d40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a16      	ldr	r2, [pc, #88]	@ (8005dc0 <TIM_Base_SetConfig+0x12c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00f      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a18      	ldr	r2, [pc, #96]	@ (8005dd0 <TIM_Base_SetConfig+0x13c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a17      	ldr	r2, [pc, #92]	@ (8005dd4 <TIM_Base_SetConfig+0x140>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a16      	ldr	r2, [pc, #88]	@ (8005dd8 <TIM_Base_SetConfig+0x144>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0xf8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a15      	ldr	r2, [pc, #84]	@ (8005ddc <TIM_Base_SetConfig+0x148>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d105      	bne.n	8005db2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	611a      	str	r2, [r3, #16]
  }
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40013400 	.word	0x40013400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800

08005de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	f023 0201 	bic.w	r2, r3, #1
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 030a 	bic.w	r3, r3, #10
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	621a      	str	r2, [r3, #32]
}
 8005e32:	bf00      	nop
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b087      	sub	sp, #28
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f023 0210 	bic.w	r2, r3, #16
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	031b      	lsls	r3, r3, #12
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	011b      	lsls	r3, r3, #4
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	621a      	str	r2, [r3, #32]
}
 8005e92:	bf00      	nop
 8005e94:	371c      	adds	r7, #28
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	f043 0307 	orr.w	r3, r3, #7
 8005ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	021a      	lsls	r2, r3, #8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	609a      	str	r2, [r3, #8]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e068      	b.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2e      	ldr	r2, [pc, #184]	@ (800600c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d004      	beq.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d108      	bne.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1e      	ldr	r2, [pc, #120]	@ (800600c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01d      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9e:	d018      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8006014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1a      	ldr	r2, [pc, #104]	@ (8006018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a18      	ldr	r2, [pc, #96]	@ (800601c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a13      	ldr	r2, [pc, #76]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a14      	ldr	r2, [pc, #80]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d10c      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	40012c00 	.word	0x40012c00
 8006010:	40013400 	.word	0x40013400
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40014000 	.word	0x40014000

08006024 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e040      	b.n	80060f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fb fe5e 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2224      	movs	r2, #36	@ 0x24
 800608c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0201 	bic.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fc32 	bl	8006910 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f977 	bl	80063a0 <UART_SetConfig>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e01b      	b.n	80060f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fcb1 	bl	8006a54 <UART_CheckIdleState>
 80060f2:	4603      	mov	r3, r0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08a      	sub	sp, #40	@ 0x28
 8006100:	af02      	add	r7, sp, #8
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	4613      	mov	r3, r2
 800610a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006110:	2b20      	cmp	r3, #32
 8006112:	d177      	bne.n	8006204 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_UART_Transmit+0x24>
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e070      	b.n	8006206 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2221      	movs	r2, #33	@ 0x21
 8006130:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006132:	f7fc f857 	bl	80021e4 <HAL_GetTick>
 8006136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006150:	d108      	bne.n	8006164 <HAL_UART_Transmit+0x68>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	e003      	b.n	800616c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800616c:	e02f      	b.n	80061ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2200      	movs	r2, #0
 8006176:	2180      	movs	r1, #128	@ 0x80
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 fd13 	bl	8006ba4 <UART_WaitOnFlagUntilTimeout>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e03b      	b.n	8006206 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	881a      	ldrh	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a0:	b292      	uxth	r2, r2
 80061a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	3302      	adds	r3, #2
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	e007      	b.n	80061bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	781a      	ldrb	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	3301      	adds	r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1c9      	bne.n	800616e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2140      	movs	r1, #64	@ 0x40
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fcdd 	bl	8006ba4 <UART_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e005      	b.n	8006206 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b08a      	sub	sp, #40	@ 0x28
 8006212:	af02      	add	r7, sp, #8
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	603b      	str	r3, [r7, #0]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006224:	2b20      	cmp	r3, #32
 8006226:	f040 80b6 	bne.w	8006396 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <HAL_UART_Receive+0x28>
 8006230:	88fb      	ldrh	r3, [r7, #6]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e0ae      	b.n	8006398 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2222      	movs	r2, #34	@ 0x22
 8006246:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006250:	f7fb ffc8 	bl	80021e4 <HAL_GetTick>
 8006254:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	88fa      	ldrh	r2, [r7, #6]
 800625a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626e:	d10e      	bne.n	800628e <HAL_UART_Receive+0x80>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d105      	bne.n	8006284 <HAL_UART_Receive+0x76>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800627e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006282:	e02d      	b.n	80062e0 <HAL_UART_Receive+0xd2>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	22ff      	movs	r2, #255	@ 0xff
 8006288:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800628c:	e028      	b.n	80062e0 <HAL_UART_Receive+0xd2>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10d      	bne.n	80062b2 <HAL_UART_Receive+0xa4>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <HAL_UART_Receive+0x9a>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	22ff      	movs	r2, #255	@ 0xff
 80062a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062a6:	e01b      	b.n	80062e0 <HAL_UART_Receive+0xd2>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	227f      	movs	r2, #127	@ 0x7f
 80062ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062b0:	e016      	b.n	80062e0 <HAL_UART_Receive+0xd2>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062ba:	d10d      	bne.n	80062d8 <HAL_UART_Receive+0xca>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_UART_Receive+0xc0>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	227f      	movs	r2, #127	@ 0x7f
 80062c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062cc:	e008      	b.n	80062e0 <HAL_UART_Receive+0xd2>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	223f      	movs	r2, #63	@ 0x3f
 80062d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062d6:	e003      	b.n	80062e0 <HAL_UART_Receive+0xd2>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80062e6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f0:	d108      	bne.n	8006304 <HAL_UART_Receive+0xf6>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	e003      	b.n	800630c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006308:	2300      	movs	r3, #0
 800630a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800630c:	e037      	b.n	800637e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2200      	movs	r2, #0
 8006316:	2120      	movs	r1, #32
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fc43 	bl	8006ba4 <UART_WaitOnFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d005      	beq.n	8006330 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e033      	b.n	8006398 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10c      	bne.n	8006350 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800633c:	b29a      	uxth	r2, r3
 800633e:	8a7b      	ldrh	r3, [r7, #18]
 8006340:	4013      	ands	r3, r2
 8006342:	b29a      	uxth	r2, r3
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	3302      	adds	r3, #2
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e00d      	b.n	800636c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006356:	b29b      	uxth	r3, r3
 8006358:	b2da      	uxtb	r2, r3
 800635a:	8a7b      	ldrh	r3, [r7, #18]
 800635c:	b2db      	uxtb	r3, r3
 800635e:	4013      	ands	r3, r2
 8006360:	b2da      	uxtb	r2, r3
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3301      	adds	r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1c1      	bne.n	800630e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	e000      	b.n	8006398 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006396:	2302      	movs	r3, #2
  }
}
 8006398:	4618      	mov	r0, r3
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063a4:	b08a      	sub	sp, #40	@ 0x28
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	431a      	orrs	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	431a      	orrs	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4ba4      	ldr	r3, [pc, #656]	@ (8006660 <UART_SetConfig+0x2c0>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063d8:	430b      	orrs	r3, r1
 80063da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68da      	ldr	r2, [r3, #12]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a99      	ldr	r2, [pc, #612]	@ (8006664 <UART_SetConfig+0x2c4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d004      	beq.n	800640c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006408:	4313      	orrs	r3, r2
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800641c:	430a      	orrs	r2, r1
 800641e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a90      	ldr	r2, [pc, #576]	@ (8006668 <UART_SetConfig+0x2c8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d126      	bne.n	8006478 <UART_SetConfig+0xd8>
 800642a:	4b90      	ldr	r3, [pc, #576]	@ (800666c <UART_SetConfig+0x2cc>)
 800642c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	2b03      	cmp	r3, #3
 8006436:	d81b      	bhi.n	8006470 <UART_SetConfig+0xd0>
 8006438:	a201      	add	r2, pc, #4	@ (adr r2, 8006440 <UART_SetConfig+0xa0>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006451 	.word	0x08006451
 8006444:	08006461 	.word	0x08006461
 8006448:	08006459 	.word	0x08006459
 800644c:	08006469 	.word	0x08006469
 8006450:	2301      	movs	r3, #1
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006456:	e116      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006458:	2302      	movs	r3, #2
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645e:	e112      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006460:	2304      	movs	r3, #4
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006466:	e10e      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006468:	2308      	movs	r3, #8
 800646a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646e:	e10a      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006470:	2310      	movs	r3, #16
 8006472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006476:	e106      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a7c      	ldr	r2, [pc, #496]	@ (8006670 <UART_SetConfig+0x2d0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d138      	bne.n	80064f4 <UART_SetConfig+0x154>
 8006482:	4b7a      	ldr	r3, [pc, #488]	@ (800666c <UART_SetConfig+0x2cc>)
 8006484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006488:	f003 030c 	and.w	r3, r3, #12
 800648c:	2b0c      	cmp	r3, #12
 800648e:	d82d      	bhi.n	80064ec <UART_SetConfig+0x14c>
 8006490:	a201      	add	r2, pc, #4	@ (adr r2, 8006498 <UART_SetConfig+0xf8>)
 8006492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006496:	bf00      	nop
 8006498:	080064cd 	.word	0x080064cd
 800649c:	080064ed 	.word	0x080064ed
 80064a0:	080064ed 	.word	0x080064ed
 80064a4:	080064ed 	.word	0x080064ed
 80064a8:	080064dd 	.word	0x080064dd
 80064ac:	080064ed 	.word	0x080064ed
 80064b0:	080064ed 	.word	0x080064ed
 80064b4:	080064ed 	.word	0x080064ed
 80064b8:	080064d5 	.word	0x080064d5
 80064bc:	080064ed 	.word	0x080064ed
 80064c0:	080064ed 	.word	0x080064ed
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	2300      	movs	r3, #0
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d2:	e0d8      	b.n	8006686 <UART_SetConfig+0x2e6>
 80064d4:	2302      	movs	r3, #2
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064da:	e0d4      	b.n	8006686 <UART_SetConfig+0x2e6>
 80064dc:	2304      	movs	r3, #4
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e2:	e0d0      	b.n	8006686 <UART_SetConfig+0x2e6>
 80064e4:	2308      	movs	r3, #8
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ea:	e0cc      	b.n	8006686 <UART_SetConfig+0x2e6>
 80064ec:	2310      	movs	r3, #16
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f2:	e0c8      	b.n	8006686 <UART_SetConfig+0x2e6>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a5e      	ldr	r2, [pc, #376]	@ (8006674 <UART_SetConfig+0x2d4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d125      	bne.n	800654a <UART_SetConfig+0x1aa>
 80064fe:	4b5b      	ldr	r3, [pc, #364]	@ (800666c <UART_SetConfig+0x2cc>)
 8006500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006504:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006508:	2b30      	cmp	r3, #48	@ 0x30
 800650a:	d016      	beq.n	800653a <UART_SetConfig+0x19a>
 800650c:	2b30      	cmp	r3, #48	@ 0x30
 800650e:	d818      	bhi.n	8006542 <UART_SetConfig+0x1a2>
 8006510:	2b20      	cmp	r3, #32
 8006512:	d00a      	beq.n	800652a <UART_SetConfig+0x18a>
 8006514:	2b20      	cmp	r3, #32
 8006516:	d814      	bhi.n	8006542 <UART_SetConfig+0x1a2>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <UART_SetConfig+0x182>
 800651c:	2b10      	cmp	r3, #16
 800651e:	d008      	beq.n	8006532 <UART_SetConfig+0x192>
 8006520:	e00f      	b.n	8006542 <UART_SetConfig+0x1a2>
 8006522:	2300      	movs	r3, #0
 8006524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006528:	e0ad      	b.n	8006686 <UART_SetConfig+0x2e6>
 800652a:	2302      	movs	r3, #2
 800652c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006530:	e0a9      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006532:	2304      	movs	r3, #4
 8006534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006538:	e0a5      	b.n	8006686 <UART_SetConfig+0x2e6>
 800653a:	2308      	movs	r3, #8
 800653c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006540:	e0a1      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006542:	2310      	movs	r3, #16
 8006544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006548:	e09d      	b.n	8006686 <UART_SetConfig+0x2e6>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a4a      	ldr	r2, [pc, #296]	@ (8006678 <UART_SetConfig+0x2d8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d125      	bne.n	80065a0 <UART_SetConfig+0x200>
 8006554:	4b45      	ldr	r3, [pc, #276]	@ (800666c <UART_SetConfig+0x2cc>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800655e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006560:	d016      	beq.n	8006590 <UART_SetConfig+0x1f0>
 8006562:	2bc0      	cmp	r3, #192	@ 0xc0
 8006564:	d818      	bhi.n	8006598 <UART_SetConfig+0x1f8>
 8006566:	2b80      	cmp	r3, #128	@ 0x80
 8006568:	d00a      	beq.n	8006580 <UART_SetConfig+0x1e0>
 800656a:	2b80      	cmp	r3, #128	@ 0x80
 800656c:	d814      	bhi.n	8006598 <UART_SetConfig+0x1f8>
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <UART_SetConfig+0x1d8>
 8006572:	2b40      	cmp	r3, #64	@ 0x40
 8006574:	d008      	beq.n	8006588 <UART_SetConfig+0x1e8>
 8006576:	e00f      	b.n	8006598 <UART_SetConfig+0x1f8>
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657e:	e082      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006580:	2302      	movs	r3, #2
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006586:	e07e      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658e:	e07a      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006596:	e076      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659e:	e072      	b.n	8006686 <UART_SetConfig+0x2e6>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a35      	ldr	r2, [pc, #212]	@ (800667c <UART_SetConfig+0x2dc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d12a      	bne.n	8006600 <UART_SetConfig+0x260>
 80065aa:	4b30      	ldr	r3, [pc, #192]	@ (800666c <UART_SetConfig+0x2cc>)
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065b8:	d01a      	beq.n	80065f0 <UART_SetConfig+0x250>
 80065ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065be:	d81b      	bhi.n	80065f8 <UART_SetConfig+0x258>
 80065c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065c4:	d00c      	beq.n	80065e0 <UART_SetConfig+0x240>
 80065c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ca:	d815      	bhi.n	80065f8 <UART_SetConfig+0x258>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <UART_SetConfig+0x238>
 80065d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065d4:	d008      	beq.n	80065e8 <UART_SetConfig+0x248>
 80065d6:	e00f      	b.n	80065f8 <UART_SetConfig+0x258>
 80065d8:	2300      	movs	r3, #0
 80065da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065de:	e052      	b.n	8006686 <UART_SetConfig+0x2e6>
 80065e0:	2302      	movs	r3, #2
 80065e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e6:	e04e      	b.n	8006686 <UART_SetConfig+0x2e6>
 80065e8:	2304      	movs	r3, #4
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ee:	e04a      	b.n	8006686 <UART_SetConfig+0x2e6>
 80065f0:	2308      	movs	r3, #8
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f6:	e046      	b.n	8006686 <UART_SetConfig+0x2e6>
 80065f8:	2310      	movs	r3, #16
 80065fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fe:	e042      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a17      	ldr	r2, [pc, #92]	@ (8006664 <UART_SetConfig+0x2c4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d13a      	bne.n	8006680 <UART_SetConfig+0x2e0>
 800660a:	4b18      	ldr	r3, [pc, #96]	@ (800666c <UART_SetConfig+0x2cc>)
 800660c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006610:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006614:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006618:	d01a      	beq.n	8006650 <UART_SetConfig+0x2b0>
 800661a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800661e:	d81b      	bhi.n	8006658 <UART_SetConfig+0x2b8>
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006624:	d00c      	beq.n	8006640 <UART_SetConfig+0x2a0>
 8006626:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800662a:	d815      	bhi.n	8006658 <UART_SetConfig+0x2b8>
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <UART_SetConfig+0x298>
 8006630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006634:	d008      	beq.n	8006648 <UART_SetConfig+0x2a8>
 8006636:	e00f      	b.n	8006658 <UART_SetConfig+0x2b8>
 8006638:	2300      	movs	r3, #0
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663e:	e022      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006646:	e01e      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664e:	e01a      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006656:	e016      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665e:	e012      	b.n	8006686 <UART_SetConfig+0x2e6>
 8006660:	efff69f3 	.word	0xefff69f3
 8006664:	40008000 	.word	0x40008000
 8006668:	40013800 	.word	0x40013800
 800666c:	40021000 	.word	0x40021000
 8006670:	40004400 	.word	0x40004400
 8006674:	40004800 	.word	0x40004800
 8006678:	40004c00 	.word	0x40004c00
 800667c:	40005000 	.word	0x40005000
 8006680:	2310      	movs	r3, #16
 8006682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a9f      	ldr	r2, [pc, #636]	@ (8006908 <UART_SetConfig+0x568>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d17a      	bne.n	8006786 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006690:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006694:	2b08      	cmp	r3, #8
 8006696:	d824      	bhi.n	80066e2 <UART_SetConfig+0x342>
 8006698:	a201      	add	r2, pc, #4	@ (adr r2, 80066a0 <UART_SetConfig+0x300>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066c5 	.word	0x080066c5
 80066a4:	080066e3 	.word	0x080066e3
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	080066e3 	.word	0x080066e3
 80066b0:	080066d3 	.word	0x080066d3
 80066b4:	080066e3 	.word	0x080066e3
 80066b8:	080066e3 	.word	0x080066e3
 80066bc:	080066e3 	.word	0x080066e3
 80066c0:	080066db 	.word	0x080066db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c4:	f7fe fb44 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 80066c8:	61f8      	str	r0, [r7, #28]
        break;
 80066ca:	e010      	b.n	80066ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066cc:	4b8f      	ldr	r3, [pc, #572]	@ (800690c <UART_SetConfig+0x56c>)
 80066ce:	61fb      	str	r3, [r7, #28]
        break;
 80066d0:	e00d      	b.n	80066ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d2:	f7fe faa5 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 80066d6:	61f8      	str	r0, [r7, #28]
        break;
 80066d8:	e009      	b.n	80066ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066de:	61fb      	str	r3, [r7, #28]
        break;
 80066e0:	e005      	b.n	80066ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80fb 	beq.w	80068ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	4413      	add	r3, r2
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	429a      	cmp	r2, r3
 8006704:	d305      	bcc.n	8006712 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	429a      	cmp	r2, r3
 8006710:	d903      	bls.n	800671a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006718:	e0e8      	b.n	80068ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2200      	movs	r2, #0
 800671e:	461c      	mov	r4, r3
 8006720:	4615      	mov	r5, r2
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	022b      	lsls	r3, r5, #8
 800672c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006730:	0222      	lsls	r2, r4, #8
 8006732:	68f9      	ldr	r1, [r7, #12]
 8006734:	6849      	ldr	r1, [r1, #4]
 8006736:	0849      	lsrs	r1, r1, #1
 8006738:	2000      	movs	r0, #0
 800673a:	4688      	mov	r8, r1
 800673c:	4681      	mov	r9, r0
 800673e:	eb12 0a08 	adds.w	sl, r2, r8
 8006742:	eb43 0b09 	adc.w	fp, r3, r9
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	603b      	str	r3, [r7, #0]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006754:	4650      	mov	r0, sl
 8006756:	4659      	mov	r1, fp
 8006758:	f7fa fa26 	bl	8000ba8 <__aeabi_uldivmod>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4613      	mov	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800676a:	d308      	bcc.n	800677e <UART_SetConfig+0x3de>
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006772:	d204      	bcs.n	800677e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	60da      	str	r2, [r3, #12]
 800677c:	e0b6      	b.n	80068ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006784:	e0b2      	b.n	80068ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800678e:	d15e      	bne.n	800684e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006790:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006794:	2b08      	cmp	r3, #8
 8006796:	d828      	bhi.n	80067ea <UART_SetConfig+0x44a>
 8006798:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <UART_SetConfig+0x400>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067c5 	.word	0x080067c5
 80067a4:	080067cd 	.word	0x080067cd
 80067a8:	080067d5 	.word	0x080067d5
 80067ac:	080067eb 	.word	0x080067eb
 80067b0:	080067db 	.word	0x080067db
 80067b4:	080067eb 	.word	0x080067eb
 80067b8:	080067eb 	.word	0x080067eb
 80067bc:	080067eb 	.word	0x080067eb
 80067c0:	080067e3 	.word	0x080067e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067c4:	f7fe fac4 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 80067c8:	61f8      	str	r0, [r7, #28]
        break;
 80067ca:	e014      	b.n	80067f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067cc:	f7fe fad6 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 80067d0:	61f8      	str	r0, [r7, #28]
        break;
 80067d2:	e010      	b.n	80067f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067d4:	4b4d      	ldr	r3, [pc, #308]	@ (800690c <UART_SetConfig+0x56c>)
 80067d6:	61fb      	str	r3, [r7, #28]
        break;
 80067d8:	e00d      	b.n	80067f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067da:	f7fe fa21 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 80067de:	61f8      	str	r0, [r7, #28]
        break;
 80067e0:	e009      	b.n	80067f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067e6:	61fb      	str	r3, [r7, #28]
        break;
 80067e8:	e005      	b.n	80067f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d077      	beq.n	80068ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	005a      	lsls	r2, r3, #1
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	085b      	lsrs	r3, r3, #1
 8006806:	441a      	add	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b0f      	cmp	r3, #15
 8006816:	d916      	bls.n	8006846 <UART_SetConfig+0x4a6>
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800681e:	d212      	bcs.n	8006846 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f023 030f 	bic.w	r3, r3, #15
 8006828:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	b29b      	uxth	r3, r3
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	b29a      	uxth	r2, r3
 8006836:	8afb      	ldrh	r3, [r7, #22]
 8006838:	4313      	orrs	r3, r2
 800683a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	8afa      	ldrh	r2, [r7, #22]
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	e052      	b.n	80068ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800684c:	e04e      	b.n	80068ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800684e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006852:	2b08      	cmp	r3, #8
 8006854:	d827      	bhi.n	80068a6 <UART_SetConfig+0x506>
 8006856:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <UART_SetConfig+0x4bc>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006881 	.word	0x08006881
 8006860:	08006889 	.word	0x08006889
 8006864:	08006891 	.word	0x08006891
 8006868:	080068a7 	.word	0x080068a7
 800686c:	08006897 	.word	0x08006897
 8006870:	080068a7 	.word	0x080068a7
 8006874:	080068a7 	.word	0x080068a7
 8006878:	080068a7 	.word	0x080068a7
 800687c:	0800689f 	.word	0x0800689f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006880:	f7fe fa66 	bl	8004d50 <HAL_RCC_GetPCLK1Freq>
 8006884:	61f8      	str	r0, [r7, #28]
        break;
 8006886:	e014      	b.n	80068b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006888:	f7fe fa78 	bl	8004d7c <HAL_RCC_GetPCLK2Freq>
 800688c:	61f8      	str	r0, [r7, #28]
        break;
 800688e:	e010      	b.n	80068b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006890:	4b1e      	ldr	r3, [pc, #120]	@ (800690c <UART_SetConfig+0x56c>)
 8006892:	61fb      	str	r3, [r7, #28]
        break;
 8006894:	e00d      	b.n	80068b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006896:	f7fe f9c3 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 800689a:	61f8      	str	r0, [r7, #28]
        break;
 800689c:	e009      	b.n	80068b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800689e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068a2:	61fb      	str	r3, [r7, #28]
        break;
 80068a4:	e005      	b.n	80068b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068b0:	bf00      	nop
    }

    if (pclk != 0U)
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d019      	beq.n	80068ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	085a      	lsrs	r2, r3, #1
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	441a      	add	r2, r3
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	2b0f      	cmp	r3, #15
 80068d0:	d909      	bls.n	80068e6 <UART_SetConfig+0x546>
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d8:	d205      	bcs.n	80068e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60da      	str	r2, [r3, #12]
 80068e4:	e002      	b.n	80068ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3728      	adds	r7, #40	@ 0x28
 8006900:	46bd      	mov	sp, r7
 8006902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006906:	bf00      	nop
 8006908:	40008000 	.word	0x40008000
 800690c:	00f42400 	.word	0x00f42400

08006910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006960:	f003 0302 	and.w	r3, r3, #2
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01a      	beq.n	8006a26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a0e:	d10a      	bne.n	8006a26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]
  }
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b098      	sub	sp, #96	@ 0x60
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a64:	f7fb fbbe 	bl	80021e4 <HAL_GetTick>
 8006a68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0308 	and.w	r3, r3, #8
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	d12e      	bne.n	8006ad6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a80:	2200      	movs	r2, #0
 8006a82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f88c 	bl	8006ba4 <UART_WaitOnFlagUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d021      	beq.n	8006ad6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006aa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ab2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ab6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ab8:	e841 2300 	strex	r3, r2, [r1]
 8006abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e6      	bne.n	8006a92 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e062      	b.n	8006b9c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b04      	cmp	r3, #4
 8006ae2:	d149      	bne.n	8006b78 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aec:	2200      	movs	r2, #0
 8006aee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f856 	bl	8006ba4 <UART_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d03c      	beq.n	8006b78 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e6      	bne.n	8006afe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3308      	adds	r3, #8
 8006b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	e853 3f00 	ldrex	r3, [r3]
 8006b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b50:	61fa      	str	r2, [r7, #28]
 8006b52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b54:	69b9      	ldr	r1, [r7, #24]
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	e841 2300 	strex	r3, r2, [r1]
 8006b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1e5      	bne.n	8006b30 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e011      	b.n	8006b9c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2220      	movs	r2, #32
 8006b82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3758      	adds	r7, #88	@ 0x58
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb4:	e04f      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d04b      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bbe:	f7fb fb11 	bl	80021e4 <HAL_GetTick>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d302      	bcc.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e04e      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d037      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b80      	cmp	r3, #128	@ 0x80
 8006bea:	d034      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2b40      	cmp	r3, #64	@ 0x40
 8006bf0:	d031      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d110      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2208      	movs	r2, #8
 8006c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f838 	bl	8006c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2208      	movs	r2, #8
 8006c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e029      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c30:	d111      	bne.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f81e 	bl	8006c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e00f      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	bf0c      	ite	eq
 8006c66:	2301      	moveq	r3, #1
 8006c68:	2300      	movne	r3, #0
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d0a0      	beq.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b095      	sub	sp, #84	@ 0x54
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ca6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006caa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e6      	bne.n	8006c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f023 0301 	bic.w	r3, r3, #1
 8006cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e5      	bne.n	8006cb8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d118      	bne.n	8006d26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f023 0310 	bic.w	r3, r3, #16
 8006d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d12:	61bb      	str	r3, [r7, #24]
 8006d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6979      	ldr	r1, [r7, #20]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e6      	bne.n	8006cf4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d3a:	bf00      	nop
 8006d3c:	3754      	adds	r7, #84	@ 0x54
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <__cvt>:
 8006d46:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d4a:	ec57 6b10 	vmov	r6, r7, d0
 8006d4e:	2f00      	cmp	r7, #0
 8006d50:	460c      	mov	r4, r1
 8006d52:	4619      	mov	r1, r3
 8006d54:	463b      	mov	r3, r7
 8006d56:	bfbb      	ittet	lt
 8006d58:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d5c:	461f      	movlt	r7, r3
 8006d5e:	2300      	movge	r3, #0
 8006d60:	232d      	movlt	r3, #45	@ 0x2d
 8006d62:	700b      	strb	r3, [r1, #0]
 8006d64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d66:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006d6a:	4691      	mov	r9, r2
 8006d6c:	f023 0820 	bic.w	r8, r3, #32
 8006d70:	bfbc      	itt	lt
 8006d72:	4632      	movlt	r2, r6
 8006d74:	4616      	movlt	r6, r2
 8006d76:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006d7a:	d005      	beq.n	8006d88 <__cvt+0x42>
 8006d7c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006d80:	d100      	bne.n	8006d84 <__cvt+0x3e>
 8006d82:	3401      	adds	r4, #1
 8006d84:	2102      	movs	r1, #2
 8006d86:	e000      	b.n	8006d8a <__cvt+0x44>
 8006d88:	2103      	movs	r1, #3
 8006d8a:	ab03      	add	r3, sp, #12
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	ab02      	add	r3, sp, #8
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	ec47 6b10 	vmov	d0, r6, r7
 8006d96:	4653      	mov	r3, sl
 8006d98:	4622      	mov	r2, r4
 8006d9a:	f000 fef9 	bl	8007b90 <_dtoa_r>
 8006d9e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006da2:	4605      	mov	r5, r0
 8006da4:	d119      	bne.n	8006dda <__cvt+0x94>
 8006da6:	f019 0f01 	tst.w	r9, #1
 8006daa:	d00e      	beq.n	8006dca <__cvt+0x84>
 8006dac:	eb00 0904 	add.w	r9, r0, r4
 8006db0:	2200      	movs	r2, #0
 8006db2:	2300      	movs	r3, #0
 8006db4:	4630      	mov	r0, r6
 8006db6:	4639      	mov	r1, r7
 8006db8:	f7f9 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dbc:	b108      	cbz	r0, 8006dc2 <__cvt+0x7c>
 8006dbe:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dc2:	2230      	movs	r2, #48	@ 0x30
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	454b      	cmp	r3, r9
 8006dc8:	d31e      	bcc.n	8006e08 <__cvt+0xc2>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dce:	1b5b      	subs	r3, r3, r5
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	b004      	add	sp, #16
 8006dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dda:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006dde:	eb00 0904 	add.w	r9, r0, r4
 8006de2:	d1e5      	bne.n	8006db0 <__cvt+0x6a>
 8006de4:	7803      	ldrb	r3, [r0, #0]
 8006de6:	2b30      	cmp	r3, #48	@ 0x30
 8006de8:	d10a      	bne.n	8006e00 <__cvt+0xba>
 8006dea:	2200      	movs	r2, #0
 8006dec:	2300      	movs	r3, #0
 8006dee:	4630      	mov	r0, r6
 8006df0:	4639      	mov	r1, r7
 8006df2:	f7f9 fe69 	bl	8000ac8 <__aeabi_dcmpeq>
 8006df6:	b918      	cbnz	r0, 8006e00 <__cvt+0xba>
 8006df8:	f1c4 0401 	rsb	r4, r4, #1
 8006dfc:	f8ca 4000 	str.w	r4, [sl]
 8006e00:	f8da 3000 	ldr.w	r3, [sl]
 8006e04:	4499      	add	r9, r3
 8006e06:	e7d3      	b.n	8006db0 <__cvt+0x6a>
 8006e08:	1c59      	adds	r1, r3, #1
 8006e0a:	9103      	str	r1, [sp, #12]
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	e7d9      	b.n	8006dc4 <__cvt+0x7e>

08006e10 <__exponent>:
 8006e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e12:	2900      	cmp	r1, #0
 8006e14:	bfba      	itte	lt
 8006e16:	4249      	neglt	r1, r1
 8006e18:	232d      	movlt	r3, #45	@ 0x2d
 8006e1a:	232b      	movge	r3, #43	@ 0x2b
 8006e1c:	2909      	cmp	r1, #9
 8006e1e:	7002      	strb	r2, [r0, #0]
 8006e20:	7043      	strb	r3, [r0, #1]
 8006e22:	dd29      	ble.n	8006e78 <__exponent+0x68>
 8006e24:	f10d 0307 	add.w	r3, sp, #7
 8006e28:	461d      	mov	r5, r3
 8006e2a:	270a      	movs	r7, #10
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e32:	fb07 1416 	mls	r4, r7, r6, r1
 8006e36:	3430      	adds	r4, #48	@ 0x30
 8006e38:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	2c63      	cmp	r4, #99	@ 0x63
 8006e40:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e44:	4631      	mov	r1, r6
 8006e46:	dcf1      	bgt.n	8006e2c <__exponent+0x1c>
 8006e48:	3130      	adds	r1, #48	@ 0x30
 8006e4a:	1e94      	subs	r4, r2, #2
 8006e4c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e50:	1c41      	adds	r1, r0, #1
 8006e52:	4623      	mov	r3, r4
 8006e54:	42ab      	cmp	r3, r5
 8006e56:	d30a      	bcc.n	8006e6e <__exponent+0x5e>
 8006e58:	f10d 0309 	add.w	r3, sp, #9
 8006e5c:	1a9b      	subs	r3, r3, r2
 8006e5e:	42ac      	cmp	r4, r5
 8006e60:	bf88      	it	hi
 8006e62:	2300      	movhi	r3, #0
 8006e64:	3302      	adds	r3, #2
 8006e66:	4403      	add	r3, r0
 8006e68:	1a18      	subs	r0, r3, r0
 8006e6a:	b003      	add	sp, #12
 8006e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006e72:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006e76:	e7ed      	b.n	8006e54 <__exponent+0x44>
 8006e78:	2330      	movs	r3, #48	@ 0x30
 8006e7a:	3130      	adds	r1, #48	@ 0x30
 8006e7c:	7083      	strb	r3, [r0, #2]
 8006e7e:	70c1      	strb	r1, [r0, #3]
 8006e80:	1d03      	adds	r3, r0, #4
 8006e82:	e7f1      	b.n	8006e68 <__exponent+0x58>

08006e84 <_printf_float>:
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	b08d      	sub	sp, #52	@ 0x34
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006e90:	4616      	mov	r6, r2
 8006e92:	461f      	mov	r7, r3
 8006e94:	4605      	mov	r5, r0
 8006e96:	f000 fd79 	bl	800798c <_localeconv_r>
 8006e9a:	6803      	ldr	r3, [r0, #0]
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7f9 f9e6 	bl	8000270 <strlen>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ea8:	f8d8 3000 	ldr.w	r3, [r8]
 8006eac:	9005      	str	r0, [sp, #20]
 8006eae:	3307      	adds	r3, #7
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	f103 0208 	add.w	r2, r3, #8
 8006eb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ebc:	f8d4 b000 	ldr.w	fp, [r4]
 8006ec0:	f8c8 2000 	str.w	r2, [r8]
 8006ec4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ecc:	9307      	str	r3, [sp, #28]
 8006ece:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ed2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eda:	4b9c      	ldr	r3, [pc, #624]	@ (800714c <_printf_float+0x2c8>)
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee0:	f7f9 fe24 	bl	8000b2c <__aeabi_dcmpun>
 8006ee4:	bb70      	cbnz	r0, 8006f44 <_printf_float+0xc0>
 8006ee6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eea:	4b98      	ldr	r3, [pc, #608]	@ (800714c <_printf_float+0x2c8>)
 8006eec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef0:	f7f9 fdfe 	bl	8000af0 <__aeabi_dcmple>
 8006ef4:	bb30      	cbnz	r0, 8006f44 <_printf_float+0xc0>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4640      	mov	r0, r8
 8006efc:	4649      	mov	r1, r9
 8006efe:	f7f9 fded 	bl	8000adc <__aeabi_dcmplt>
 8006f02:	b110      	cbz	r0, 8006f0a <_printf_float+0x86>
 8006f04:	232d      	movs	r3, #45	@ 0x2d
 8006f06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f0a:	4a91      	ldr	r2, [pc, #580]	@ (8007150 <_printf_float+0x2cc>)
 8006f0c:	4b91      	ldr	r3, [pc, #580]	@ (8007154 <_printf_float+0x2d0>)
 8006f0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f12:	bf94      	ite	ls
 8006f14:	4690      	movls	r8, r2
 8006f16:	4698      	movhi	r8, r3
 8006f18:	2303      	movs	r3, #3
 8006f1a:	6123      	str	r3, [r4, #16]
 8006f1c:	f02b 0304 	bic.w	r3, fp, #4
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	f04f 0900 	mov.w	r9, #0
 8006f26:	9700      	str	r7, [sp, #0]
 8006f28:	4633      	mov	r3, r6
 8006f2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f000 f9d2 	bl	80072d8 <_printf_common>
 8006f34:	3001      	adds	r0, #1
 8006f36:	f040 808d 	bne.w	8007054 <_printf_float+0x1d0>
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	b00d      	add	sp, #52	@ 0x34
 8006f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f44:	4642      	mov	r2, r8
 8006f46:	464b      	mov	r3, r9
 8006f48:	4640      	mov	r0, r8
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	f7f9 fdee 	bl	8000b2c <__aeabi_dcmpun>
 8006f50:	b140      	cbz	r0, 8006f64 <_printf_float+0xe0>
 8006f52:	464b      	mov	r3, r9
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bfbc      	itt	lt
 8006f58:	232d      	movlt	r3, #45	@ 0x2d
 8006f5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8007158 <_printf_float+0x2d4>)
 8006f60:	4b7e      	ldr	r3, [pc, #504]	@ (800715c <_printf_float+0x2d8>)
 8006f62:	e7d4      	b.n	8006f0e <_printf_float+0x8a>
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006f6a:	9206      	str	r2, [sp, #24]
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	d13b      	bne.n	8006fe8 <_printf_float+0x164>
 8006f70:	2306      	movs	r3, #6
 8006f72:	6063      	str	r3, [r4, #4]
 8006f74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6022      	str	r2, [r4, #0]
 8006f7c:	9303      	str	r3, [sp, #12]
 8006f7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006f80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006f84:	ab09      	add	r3, sp, #36	@ 0x24
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	6861      	ldr	r1, [r4, #4]
 8006f8a:	ec49 8b10 	vmov	d0, r8, r9
 8006f8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7ff fed7 	bl	8006d46 <__cvt>
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006f9c:	2b47      	cmp	r3, #71	@ 0x47
 8006f9e:	4680      	mov	r8, r0
 8006fa0:	d129      	bne.n	8006ff6 <_printf_float+0x172>
 8006fa2:	1cc8      	adds	r0, r1, #3
 8006fa4:	db02      	blt.n	8006fac <_printf_float+0x128>
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	dd41      	ble.n	8007030 <_printf_float+0x1ac>
 8006fac:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fb0:	fa5f fa8a 	uxtb.w	sl, sl
 8006fb4:	3901      	subs	r1, #1
 8006fb6:	4652      	mov	r2, sl
 8006fb8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006fbc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fbe:	f7ff ff27 	bl	8006e10 <__exponent>
 8006fc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fc4:	1813      	adds	r3, r2, r0
 8006fc6:	2a01      	cmp	r2, #1
 8006fc8:	4681      	mov	r9, r0
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	dc02      	bgt.n	8006fd4 <_printf_float+0x150>
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	07d2      	lsls	r2, r2, #31
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_float+0x154>
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0a2      	beq.n	8006f26 <_printf_float+0xa2>
 8006fe0:	232d      	movs	r3, #45	@ 0x2d
 8006fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fe6:	e79e      	b.n	8006f26 <_printf_float+0xa2>
 8006fe8:	9a06      	ldr	r2, [sp, #24]
 8006fea:	2a47      	cmp	r2, #71	@ 0x47
 8006fec:	d1c2      	bne.n	8006f74 <_printf_float+0xf0>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1c0      	bne.n	8006f74 <_printf_float+0xf0>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e7bd      	b.n	8006f72 <_printf_float+0xee>
 8006ff6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ffa:	d9db      	bls.n	8006fb4 <_printf_float+0x130>
 8006ffc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007000:	d118      	bne.n	8007034 <_printf_float+0x1b0>
 8007002:	2900      	cmp	r1, #0
 8007004:	6863      	ldr	r3, [r4, #4]
 8007006:	dd0b      	ble.n	8007020 <_printf_float+0x19c>
 8007008:	6121      	str	r1, [r4, #16]
 800700a:	b913      	cbnz	r3, 8007012 <_printf_float+0x18e>
 800700c:	6822      	ldr	r2, [r4, #0]
 800700e:	07d0      	lsls	r0, r2, #31
 8007010:	d502      	bpl.n	8007018 <_printf_float+0x194>
 8007012:	3301      	adds	r3, #1
 8007014:	440b      	add	r3, r1
 8007016:	6123      	str	r3, [r4, #16]
 8007018:	65a1      	str	r1, [r4, #88]	@ 0x58
 800701a:	f04f 0900 	mov.w	r9, #0
 800701e:	e7db      	b.n	8006fd8 <_printf_float+0x154>
 8007020:	b913      	cbnz	r3, 8007028 <_printf_float+0x1a4>
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	07d2      	lsls	r2, r2, #31
 8007026:	d501      	bpl.n	800702c <_printf_float+0x1a8>
 8007028:	3302      	adds	r3, #2
 800702a:	e7f4      	b.n	8007016 <_printf_float+0x192>
 800702c:	2301      	movs	r3, #1
 800702e:	e7f2      	b.n	8007016 <_printf_float+0x192>
 8007030:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007036:	4299      	cmp	r1, r3
 8007038:	db05      	blt.n	8007046 <_printf_float+0x1c2>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	6121      	str	r1, [r4, #16]
 800703e:	07d8      	lsls	r0, r3, #31
 8007040:	d5ea      	bpl.n	8007018 <_printf_float+0x194>
 8007042:	1c4b      	adds	r3, r1, #1
 8007044:	e7e7      	b.n	8007016 <_printf_float+0x192>
 8007046:	2900      	cmp	r1, #0
 8007048:	bfd4      	ite	le
 800704a:	f1c1 0202 	rsble	r2, r1, #2
 800704e:	2201      	movgt	r2, #1
 8007050:	4413      	add	r3, r2
 8007052:	e7e0      	b.n	8007016 <_printf_float+0x192>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	055a      	lsls	r2, r3, #21
 8007058:	d407      	bmi.n	800706a <_printf_float+0x1e6>
 800705a:	6923      	ldr	r3, [r4, #16]
 800705c:	4642      	mov	r2, r8
 800705e:	4631      	mov	r1, r6
 8007060:	4628      	mov	r0, r5
 8007062:	47b8      	blx	r7
 8007064:	3001      	adds	r0, #1
 8007066:	d12b      	bne.n	80070c0 <_printf_float+0x23c>
 8007068:	e767      	b.n	8006f3a <_printf_float+0xb6>
 800706a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800706e:	f240 80dd 	bls.w	800722c <_printf_float+0x3a8>
 8007072:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007076:	2200      	movs	r2, #0
 8007078:	2300      	movs	r3, #0
 800707a:	f7f9 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800707e:	2800      	cmp	r0, #0
 8007080:	d033      	beq.n	80070ea <_printf_float+0x266>
 8007082:	4a37      	ldr	r2, [pc, #220]	@ (8007160 <_printf_float+0x2dc>)
 8007084:	2301      	movs	r3, #1
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	f43f af54 	beq.w	8006f3a <_printf_float+0xb6>
 8007092:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007096:	4543      	cmp	r3, r8
 8007098:	db02      	blt.n	80070a0 <_printf_float+0x21c>
 800709a:	6823      	ldr	r3, [r4, #0]
 800709c:	07d8      	lsls	r0, r3, #31
 800709e:	d50f      	bpl.n	80070c0 <_printf_float+0x23c>
 80070a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f af45 	beq.w	8006f3a <_printf_float+0xb6>
 80070b0:	f04f 0900 	mov.w	r9, #0
 80070b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80070b8:	f104 0a1a 	add.w	sl, r4, #26
 80070bc:	45c8      	cmp	r8, r9
 80070be:	dc09      	bgt.n	80070d4 <_printf_float+0x250>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	079b      	lsls	r3, r3, #30
 80070c4:	f100 8103 	bmi.w	80072ce <_printf_float+0x44a>
 80070c8:	68e0      	ldr	r0, [r4, #12]
 80070ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070cc:	4298      	cmp	r0, r3
 80070ce:	bfb8      	it	lt
 80070d0:	4618      	movlt	r0, r3
 80070d2:	e734      	b.n	8006f3e <_printf_float+0xba>
 80070d4:	2301      	movs	r3, #1
 80070d6:	4652      	mov	r2, sl
 80070d8:	4631      	mov	r1, r6
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	f43f af2b 	beq.w	8006f3a <_printf_float+0xb6>
 80070e4:	f109 0901 	add.w	r9, r9, #1
 80070e8:	e7e8      	b.n	80070bc <_printf_float+0x238>
 80070ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dc39      	bgt.n	8007164 <_printf_float+0x2e0>
 80070f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007160 <_printf_float+0x2dc>)
 80070f2:	2301      	movs	r3, #1
 80070f4:	4631      	mov	r1, r6
 80070f6:	4628      	mov	r0, r5
 80070f8:	47b8      	blx	r7
 80070fa:	3001      	adds	r0, #1
 80070fc:	f43f af1d 	beq.w	8006f3a <_printf_float+0xb6>
 8007100:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007104:	ea59 0303 	orrs.w	r3, r9, r3
 8007108:	d102      	bne.n	8007110 <_printf_float+0x28c>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	07d9      	lsls	r1, r3, #31
 800710e:	d5d7      	bpl.n	80070c0 <_printf_float+0x23c>
 8007110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	f43f af0d 	beq.w	8006f3a <_printf_float+0xb6>
 8007120:	f04f 0a00 	mov.w	sl, #0
 8007124:	f104 0b1a 	add.w	fp, r4, #26
 8007128:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800712a:	425b      	negs	r3, r3
 800712c:	4553      	cmp	r3, sl
 800712e:	dc01      	bgt.n	8007134 <_printf_float+0x2b0>
 8007130:	464b      	mov	r3, r9
 8007132:	e793      	b.n	800705c <_printf_float+0x1d8>
 8007134:	2301      	movs	r3, #1
 8007136:	465a      	mov	r2, fp
 8007138:	4631      	mov	r1, r6
 800713a:	4628      	mov	r0, r5
 800713c:	47b8      	blx	r7
 800713e:	3001      	adds	r0, #1
 8007140:	f43f aefb 	beq.w	8006f3a <_printf_float+0xb6>
 8007144:	f10a 0a01 	add.w	sl, sl, #1
 8007148:	e7ee      	b.n	8007128 <_printf_float+0x2a4>
 800714a:	bf00      	nop
 800714c:	7fefffff 	.word	0x7fefffff
 8007150:	0800a760 	.word	0x0800a760
 8007154:	0800a764 	.word	0x0800a764
 8007158:	0800a768 	.word	0x0800a768
 800715c:	0800a76c 	.word	0x0800a76c
 8007160:	0800a99f 	.word	0x0800a99f
 8007164:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007166:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800716a:	4553      	cmp	r3, sl
 800716c:	bfa8      	it	ge
 800716e:	4653      	movge	r3, sl
 8007170:	2b00      	cmp	r3, #0
 8007172:	4699      	mov	r9, r3
 8007174:	dc36      	bgt.n	80071e4 <_printf_float+0x360>
 8007176:	f04f 0b00 	mov.w	fp, #0
 800717a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800717e:	f104 021a 	add.w	r2, r4, #26
 8007182:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007184:	9306      	str	r3, [sp, #24]
 8007186:	eba3 0309 	sub.w	r3, r3, r9
 800718a:	455b      	cmp	r3, fp
 800718c:	dc31      	bgt.n	80071f2 <_printf_float+0x36e>
 800718e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007190:	459a      	cmp	sl, r3
 8007192:	dc3a      	bgt.n	800720a <_printf_float+0x386>
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	07da      	lsls	r2, r3, #31
 8007198:	d437      	bmi.n	800720a <_printf_float+0x386>
 800719a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719c:	ebaa 0903 	sub.w	r9, sl, r3
 80071a0:	9b06      	ldr	r3, [sp, #24]
 80071a2:	ebaa 0303 	sub.w	r3, sl, r3
 80071a6:	4599      	cmp	r9, r3
 80071a8:	bfa8      	it	ge
 80071aa:	4699      	movge	r9, r3
 80071ac:	f1b9 0f00 	cmp.w	r9, #0
 80071b0:	dc33      	bgt.n	800721a <_printf_float+0x396>
 80071b2:	f04f 0800 	mov.w	r8, #0
 80071b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071ba:	f104 0b1a 	add.w	fp, r4, #26
 80071be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c0:	ebaa 0303 	sub.w	r3, sl, r3
 80071c4:	eba3 0309 	sub.w	r3, r3, r9
 80071c8:	4543      	cmp	r3, r8
 80071ca:	f77f af79 	ble.w	80070c0 <_printf_float+0x23c>
 80071ce:	2301      	movs	r3, #1
 80071d0:	465a      	mov	r2, fp
 80071d2:	4631      	mov	r1, r6
 80071d4:	4628      	mov	r0, r5
 80071d6:	47b8      	blx	r7
 80071d8:	3001      	adds	r0, #1
 80071da:	f43f aeae 	beq.w	8006f3a <_printf_float+0xb6>
 80071de:	f108 0801 	add.w	r8, r8, #1
 80071e2:	e7ec      	b.n	80071be <_printf_float+0x33a>
 80071e4:	4642      	mov	r2, r8
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	d1c2      	bne.n	8007176 <_printf_float+0x2f2>
 80071f0:	e6a3      	b.n	8006f3a <_printf_float+0xb6>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4631      	mov	r1, r6
 80071f6:	4628      	mov	r0, r5
 80071f8:	9206      	str	r2, [sp, #24]
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f ae9c 	beq.w	8006f3a <_printf_float+0xb6>
 8007202:	9a06      	ldr	r2, [sp, #24]
 8007204:	f10b 0b01 	add.w	fp, fp, #1
 8007208:	e7bb      	b.n	8007182 <_printf_float+0x2fe>
 800720a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	d1c0      	bne.n	800719a <_printf_float+0x316>
 8007218:	e68f      	b.n	8006f3a <_printf_float+0xb6>
 800721a:	9a06      	ldr	r2, [sp, #24]
 800721c:	464b      	mov	r3, r9
 800721e:	4442      	add	r2, r8
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	d1c3      	bne.n	80071b2 <_printf_float+0x32e>
 800722a:	e686      	b.n	8006f3a <_printf_float+0xb6>
 800722c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007230:	f1ba 0f01 	cmp.w	sl, #1
 8007234:	dc01      	bgt.n	800723a <_printf_float+0x3b6>
 8007236:	07db      	lsls	r3, r3, #31
 8007238:	d536      	bpl.n	80072a8 <_printf_float+0x424>
 800723a:	2301      	movs	r3, #1
 800723c:	4642      	mov	r2, r8
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f ae78 	beq.w	8006f3a <_printf_float+0xb6>
 800724a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800724e:	4631      	mov	r1, r6
 8007250:	4628      	mov	r0, r5
 8007252:	47b8      	blx	r7
 8007254:	3001      	adds	r0, #1
 8007256:	f43f ae70 	beq.w	8006f3a <_printf_float+0xb6>
 800725a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800725e:	2200      	movs	r2, #0
 8007260:	2300      	movs	r3, #0
 8007262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007266:	f7f9 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800726a:	b9c0      	cbnz	r0, 800729e <_printf_float+0x41a>
 800726c:	4653      	mov	r3, sl
 800726e:	f108 0201 	add.w	r2, r8, #1
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	d10c      	bne.n	8007296 <_printf_float+0x412>
 800727c:	e65d      	b.n	8006f3a <_printf_float+0xb6>
 800727e:	2301      	movs	r3, #1
 8007280:	465a      	mov	r2, fp
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f ae56 	beq.w	8006f3a <_printf_float+0xb6>
 800728e:	f108 0801 	add.w	r8, r8, #1
 8007292:	45d0      	cmp	r8, sl
 8007294:	dbf3      	blt.n	800727e <_printf_float+0x3fa>
 8007296:	464b      	mov	r3, r9
 8007298:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800729c:	e6df      	b.n	800705e <_printf_float+0x1da>
 800729e:	f04f 0800 	mov.w	r8, #0
 80072a2:	f104 0b1a 	add.w	fp, r4, #26
 80072a6:	e7f4      	b.n	8007292 <_printf_float+0x40e>
 80072a8:	2301      	movs	r3, #1
 80072aa:	4642      	mov	r2, r8
 80072ac:	e7e1      	b.n	8007272 <_printf_float+0x3ee>
 80072ae:	2301      	movs	r3, #1
 80072b0:	464a      	mov	r2, r9
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	f43f ae3e 	beq.w	8006f3a <_printf_float+0xb6>
 80072be:	f108 0801 	add.w	r8, r8, #1
 80072c2:	68e3      	ldr	r3, [r4, #12]
 80072c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072c6:	1a5b      	subs	r3, r3, r1
 80072c8:	4543      	cmp	r3, r8
 80072ca:	dcf0      	bgt.n	80072ae <_printf_float+0x42a>
 80072cc:	e6fc      	b.n	80070c8 <_printf_float+0x244>
 80072ce:	f04f 0800 	mov.w	r8, #0
 80072d2:	f104 0919 	add.w	r9, r4, #25
 80072d6:	e7f4      	b.n	80072c2 <_printf_float+0x43e>

080072d8 <_printf_common>:
 80072d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072dc:	4616      	mov	r6, r2
 80072de:	4698      	mov	r8, r3
 80072e0:	688a      	ldr	r2, [r1, #8]
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80072e8:	4293      	cmp	r3, r2
 80072ea:	bfb8      	it	lt
 80072ec:	4613      	movlt	r3, r2
 80072ee:	6033      	str	r3, [r6, #0]
 80072f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80072f4:	4607      	mov	r7, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	b10a      	cbz	r2, 80072fe <_printf_common+0x26>
 80072fa:	3301      	adds	r3, #1
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	0699      	lsls	r1, r3, #26
 8007302:	bf42      	ittt	mi
 8007304:	6833      	ldrmi	r3, [r6, #0]
 8007306:	3302      	addmi	r3, #2
 8007308:	6033      	strmi	r3, [r6, #0]
 800730a:	6825      	ldr	r5, [r4, #0]
 800730c:	f015 0506 	ands.w	r5, r5, #6
 8007310:	d106      	bne.n	8007320 <_printf_common+0x48>
 8007312:	f104 0a19 	add.w	sl, r4, #25
 8007316:	68e3      	ldr	r3, [r4, #12]
 8007318:	6832      	ldr	r2, [r6, #0]
 800731a:	1a9b      	subs	r3, r3, r2
 800731c:	42ab      	cmp	r3, r5
 800731e:	dc26      	bgt.n	800736e <_printf_common+0x96>
 8007320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007324:	6822      	ldr	r2, [r4, #0]
 8007326:	3b00      	subs	r3, #0
 8007328:	bf18      	it	ne
 800732a:	2301      	movne	r3, #1
 800732c:	0692      	lsls	r2, r2, #26
 800732e:	d42b      	bmi.n	8007388 <_printf_common+0xb0>
 8007330:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007334:	4641      	mov	r1, r8
 8007336:	4638      	mov	r0, r7
 8007338:	47c8      	blx	r9
 800733a:	3001      	adds	r0, #1
 800733c:	d01e      	beq.n	800737c <_printf_common+0xa4>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	6922      	ldr	r2, [r4, #16]
 8007342:	f003 0306 	and.w	r3, r3, #6
 8007346:	2b04      	cmp	r3, #4
 8007348:	bf02      	ittt	eq
 800734a:	68e5      	ldreq	r5, [r4, #12]
 800734c:	6833      	ldreq	r3, [r6, #0]
 800734e:	1aed      	subeq	r5, r5, r3
 8007350:	68a3      	ldr	r3, [r4, #8]
 8007352:	bf0c      	ite	eq
 8007354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007358:	2500      	movne	r5, #0
 800735a:	4293      	cmp	r3, r2
 800735c:	bfc4      	itt	gt
 800735e:	1a9b      	subgt	r3, r3, r2
 8007360:	18ed      	addgt	r5, r5, r3
 8007362:	2600      	movs	r6, #0
 8007364:	341a      	adds	r4, #26
 8007366:	42b5      	cmp	r5, r6
 8007368:	d11a      	bne.n	80073a0 <_printf_common+0xc8>
 800736a:	2000      	movs	r0, #0
 800736c:	e008      	b.n	8007380 <_printf_common+0xa8>
 800736e:	2301      	movs	r3, #1
 8007370:	4652      	mov	r2, sl
 8007372:	4641      	mov	r1, r8
 8007374:	4638      	mov	r0, r7
 8007376:	47c8      	blx	r9
 8007378:	3001      	adds	r0, #1
 800737a:	d103      	bne.n	8007384 <_printf_common+0xac>
 800737c:	f04f 30ff 	mov.w	r0, #4294967295
 8007380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007384:	3501      	adds	r5, #1
 8007386:	e7c6      	b.n	8007316 <_printf_common+0x3e>
 8007388:	18e1      	adds	r1, r4, r3
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	2030      	movs	r0, #48	@ 0x30
 800738e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007392:	4422      	add	r2, r4
 8007394:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007398:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800739c:	3302      	adds	r3, #2
 800739e:	e7c7      	b.n	8007330 <_printf_common+0x58>
 80073a0:	2301      	movs	r3, #1
 80073a2:	4622      	mov	r2, r4
 80073a4:	4641      	mov	r1, r8
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c8      	blx	r9
 80073aa:	3001      	adds	r0, #1
 80073ac:	d0e6      	beq.n	800737c <_printf_common+0xa4>
 80073ae:	3601      	adds	r6, #1
 80073b0:	e7d9      	b.n	8007366 <_printf_common+0x8e>
	...

080073b4 <_printf_i>:
 80073b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	7e0f      	ldrb	r7, [r1, #24]
 80073ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073bc:	2f78      	cmp	r7, #120	@ 0x78
 80073be:	4691      	mov	r9, r2
 80073c0:	4680      	mov	r8, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	469a      	mov	sl, r3
 80073c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073ca:	d807      	bhi.n	80073dc <_printf_i+0x28>
 80073cc:	2f62      	cmp	r7, #98	@ 0x62
 80073ce:	d80a      	bhi.n	80073e6 <_printf_i+0x32>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	f000 80d2 	beq.w	800757a <_printf_i+0x1c6>
 80073d6:	2f58      	cmp	r7, #88	@ 0x58
 80073d8:	f000 80b9 	beq.w	800754e <_printf_i+0x19a>
 80073dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80073e4:	e03a      	b.n	800745c <_printf_i+0xa8>
 80073e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80073ea:	2b15      	cmp	r3, #21
 80073ec:	d8f6      	bhi.n	80073dc <_printf_i+0x28>
 80073ee:	a101      	add	r1, pc, #4	@ (adr r1, 80073f4 <_printf_i+0x40>)
 80073f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	08007461 	.word	0x08007461
 80073fc:	080073dd 	.word	0x080073dd
 8007400:	080073dd 	.word	0x080073dd
 8007404:	080073dd 	.word	0x080073dd
 8007408:	080073dd 	.word	0x080073dd
 800740c:	08007461 	.word	0x08007461
 8007410:	080073dd 	.word	0x080073dd
 8007414:	080073dd 	.word	0x080073dd
 8007418:	080073dd 	.word	0x080073dd
 800741c:	080073dd 	.word	0x080073dd
 8007420:	08007561 	.word	0x08007561
 8007424:	0800748b 	.word	0x0800748b
 8007428:	0800751b 	.word	0x0800751b
 800742c:	080073dd 	.word	0x080073dd
 8007430:	080073dd 	.word	0x080073dd
 8007434:	08007583 	.word	0x08007583
 8007438:	080073dd 	.word	0x080073dd
 800743c:	0800748b 	.word	0x0800748b
 8007440:	080073dd 	.word	0x080073dd
 8007444:	080073dd 	.word	0x080073dd
 8007448:	08007523 	.word	0x08007523
 800744c:	6833      	ldr	r3, [r6, #0]
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6032      	str	r2, [r6, #0]
 8007454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007458:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800745c:	2301      	movs	r3, #1
 800745e:	e09d      	b.n	800759c <_printf_i+0x1e8>
 8007460:	6833      	ldr	r3, [r6, #0]
 8007462:	6820      	ldr	r0, [r4, #0]
 8007464:	1d19      	adds	r1, r3, #4
 8007466:	6031      	str	r1, [r6, #0]
 8007468:	0606      	lsls	r6, r0, #24
 800746a:	d501      	bpl.n	8007470 <_printf_i+0xbc>
 800746c:	681d      	ldr	r5, [r3, #0]
 800746e:	e003      	b.n	8007478 <_printf_i+0xc4>
 8007470:	0645      	lsls	r5, r0, #25
 8007472:	d5fb      	bpl.n	800746c <_printf_i+0xb8>
 8007474:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007478:	2d00      	cmp	r5, #0
 800747a:	da03      	bge.n	8007484 <_printf_i+0xd0>
 800747c:	232d      	movs	r3, #45	@ 0x2d
 800747e:	426d      	negs	r5, r5
 8007480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007484:	4859      	ldr	r0, [pc, #356]	@ (80075ec <_printf_i+0x238>)
 8007486:	230a      	movs	r3, #10
 8007488:	e011      	b.n	80074ae <_printf_i+0xfa>
 800748a:	6821      	ldr	r1, [r4, #0]
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	0608      	lsls	r0, r1, #24
 8007490:	f853 5b04 	ldr.w	r5, [r3], #4
 8007494:	d402      	bmi.n	800749c <_printf_i+0xe8>
 8007496:	0649      	lsls	r1, r1, #25
 8007498:	bf48      	it	mi
 800749a:	b2ad      	uxthmi	r5, r5
 800749c:	2f6f      	cmp	r7, #111	@ 0x6f
 800749e:	4853      	ldr	r0, [pc, #332]	@ (80075ec <_printf_i+0x238>)
 80074a0:	6033      	str	r3, [r6, #0]
 80074a2:	bf14      	ite	ne
 80074a4:	230a      	movne	r3, #10
 80074a6:	2308      	moveq	r3, #8
 80074a8:	2100      	movs	r1, #0
 80074aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074ae:	6866      	ldr	r6, [r4, #4]
 80074b0:	60a6      	str	r6, [r4, #8]
 80074b2:	2e00      	cmp	r6, #0
 80074b4:	bfa2      	ittt	ge
 80074b6:	6821      	ldrge	r1, [r4, #0]
 80074b8:	f021 0104 	bicge.w	r1, r1, #4
 80074bc:	6021      	strge	r1, [r4, #0]
 80074be:	b90d      	cbnz	r5, 80074c4 <_printf_i+0x110>
 80074c0:	2e00      	cmp	r6, #0
 80074c2:	d04b      	beq.n	800755c <_printf_i+0x1a8>
 80074c4:	4616      	mov	r6, r2
 80074c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80074ca:	fb03 5711 	mls	r7, r3, r1, r5
 80074ce:	5dc7      	ldrb	r7, [r0, r7]
 80074d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074d4:	462f      	mov	r7, r5
 80074d6:	42bb      	cmp	r3, r7
 80074d8:	460d      	mov	r5, r1
 80074da:	d9f4      	bls.n	80074c6 <_printf_i+0x112>
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d10b      	bne.n	80074f8 <_printf_i+0x144>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	07df      	lsls	r7, r3, #31
 80074e4:	d508      	bpl.n	80074f8 <_printf_i+0x144>
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	6861      	ldr	r1, [r4, #4]
 80074ea:	4299      	cmp	r1, r3
 80074ec:	bfde      	ittt	le
 80074ee:	2330      	movle	r3, #48	@ 0x30
 80074f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074f8:	1b92      	subs	r2, r2, r6
 80074fa:	6122      	str	r2, [r4, #16]
 80074fc:	f8cd a000 	str.w	sl, [sp]
 8007500:	464b      	mov	r3, r9
 8007502:	aa03      	add	r2, sp, #12
 8007504:	4621      	mov	r1, r4
 8007506:	4640      	mov	r0, r8
 8007508:	f7ff fee6 	bl	80072d8 <_printf_common>
 800750c:	3001      	adds	r0, #1
 800750e:	d14a      	bne.n	80075a6 <_printf_i+0x1f2>
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	b004      	add	sp, #16
 8007516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	f043 0320 	orr.w	r3, r3, #32
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	4833      	ldr	r0, [pc, #204]	@ (80075f0 <_printf_i+0x23c>)
 8007524:	2778      	movs	r7, #120	@ 0x78
 8007526:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	6831      	ldr	r1, [r6, #0]
 800752e:	061f      	lsls	r7, r3, #24
 8007530:	f851 5b04 	ldr.w	r5, [r1], #4
 8007534:	d402      	bmi.n	800753c <_printf_i+0x188>
 8007536:	065f      	lsls	r7, r3, #25
 8007538:	bf48      	it	mi
 800753a:	b2ad      	uxthmi	r5, r5
 800753c:	6031      	str	r1, [r6, #0]
 800753e:	07d9      	lsls	r1, r3, #31
 8007540:	bf44      	itt	mi
 8007542:	f043 0320 	orrmi.w	r3, r3, #32
 8007546:	6023      	strmi	r3, [r4, #0]
 8007548:	b11d      	cbz	r5, 8007552 <_printf_i+0x19e>
 800754a:	2310      	movs	r3, #16
 800754c:	e7ac      	b.n	80074a8 <_printf_i+0xf4>
 800754e:	4827      	ldr	r0, [pc, #156]	@ (80075ec <_printf_i+0x238>)
 8007550:	e7e9      	b.n	8007526 <_printf_i+0x172>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	f023 0320 	bic.w	r3, r3, #32
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	e7f6      	b.n	800754a <_printf_i+0x196>
 800755c:	4616      	mov	r6, r2
 800755e:	e7bd      	b.n	80074dc <_printf_i+0x128>
 8007560:	6833      	ldr	r3, [r6, #0]
 8007562:	6825      	ldr	r5, [r4, #0]
 8007564:	6961      	ldr	r1, [r4, #20]
 8007566:	1d18      	adds	r0, r3, #4
 8007568:	6030      	str	r0, [r6, #0]
 800756a:	062e      	lsls	r6, r5, #24
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	d501      	bpl.n	8007574 <_printf_i+0x1c0>
 8007570:	6019      	str	r1, [r3, #0]
 8007572:	e002      	b.n	800757a <_printf_i+0x1c6>
 8007574:	0668      	lsls	r0, r5, #25
 8007576:	d5fb      	bpl.n	8007570 <_printf_i+0x1bc>
 8007578:	8019      	strh	r1, [r3, #0]
 800757a:	2300      	movs	r3, #0
 800757c:	6123      	str	r3, [r4, #16]
 800757e:	4616      	mov	r6, r2
 8007580:	e7bc      	b.n	80074fc <_printf_i+0x148>
 8007582:	6833      	ldr	r3, [r6, #0]
 8007584:	1d1a      	adds	r2, r3, #4
 8007586:	6032      	str	r2, [r6, #0]
 8007588:	681e      	ldr	r6, [r3, #0]
 800758a:	6862      	ldr	r2, [r4, #4]
 800758c:	2100      	movs	r1, #0
 800758e:	4630      	mov	r0, r6
 8007590:	f7f8 fe1e 	bl	80001d0 <memchr>
 8007594:	b108      	cbz	r0, 800759a <_printf_i+0x1e6>
 8007596:	1b80      	subs	r0, r0, r6
 8007598:	6060      	str	r0, [r4, #4]
 800759a:	6863      	ldr	r3, [r4, #4]
 800759c:	6123      	str	r3, [r4, #16]
 800759e:	2300      	movs	r3, #0
 80075a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075a4:	e7aa      	b.n	80074fc <_printf_i+0x148>
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	4632      	mov	r2, r6
 80075aa:	4649      	mov	r1, r9
 80075ac:	4640      	mov	r0, r8
 80075ae:	47d0      	blx	sl
 80075b0:	3001      	adds	r0, #1
 80075b2:	d0ad      	beq.n	8007510 <_printf_i+0x15c>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	079b      	lsls	r3, r3, #30
 80075b8:	d413      	bmi.n	80075e2 <_printf_i+0x22e>
 80075ba:	68e0      	ldr	r0, [r4, #12]
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	4298      	cmp	r0, r3
 80075c0:	bfb8      	it	lt
 80075c2:	4618      	movlt	r0, r3
 80075c4:	e7a6      	b.n	8007514 <_printf_i+0x160>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4632      	mov	r2, r6
 80075ca:	4649      	mov	r1, r9
 80075cc:	4640      	mov	r0, r8
 80075ce:	47d0      	blx	sl
 80075d0:	3001      	adds	r0, #1
 80075d2:	d09d      	beq.n	8007510 <_printf_i+0x15c>
 80075d4:	3501      	adds	r5, #1
 80075d6:	68e3      	ldr	r3, [r4, #12]
 80075d8:	9903      	ldr	r1, [sp, #12]
 80075da:	1a5b      	subs	r3, r3, r1
 80075dc:	42ab      	cmp	r3, r5
 80075de:	dcf2      	bgt.n	80075c6 <_printf_i+0x212>
 80075e0:	e7eb      	b.n	80075ba <_printf_i+0x206>
 80075e2:	2500      	movs	r5, #0
 80075e4:	f104 0619 	add.w	r6, r4, #25
 80075e8:	e7f5      	b.n	80075d6 <_printf_i+0x222>
 80075ea:	bf00      	nop
 80075ec:	0800a770 	.word	0x0800a770
 80075f0:	0800a781 	.word	0x0800a781

080075f4 <std>:
 80075f4:	2300      	movs	r3, #0
 80075f6:	b510      	push	{r4, lr}
 80075f8:	4604      	mov	r4, r0
 80075fa:	e9c0 3300 	strd	r3, r3, [r0]
 80075fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007602:	6083      	str	r3, [r0, #8]
 8007604:	8181      	strh	r1, [r0, #12]
 8007606:	6643      	str	r3, [r0, #100]	@ 0x64
 8007608:	81c2      	strh	r2, [r0, #14]
 800760a:	6183      	str	r3, [r0, #24]
 800760c:	4619      	mov	r1, r3
 800760e:	2208      	movs	r2, #8
 8007610:	305c      	adds	r0, #92	@ 0x5c
 8007612:	f000 f954 	bl	80078be <memset>
 8007616:	4b0d      	ldr	r3, [pc, #52]	@ (800764c <std+0x58>)
 8007618:	6263      	str	r3, [r4, #36]	@ 0x24
 800761a:	4b0d      	ldr	r3, [pc, #52]	@ (8007650 <std+0x5c>)
 800761c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800761e:	4b0d      	ldr	r3, [pc, #52]	@ (8007654 <std+0x60>)
 8007620:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007622:	4b0d      	ldr	r3, [pc, #52]	@ (8007658 <std+0x64>)
 8007624:	6323      	str	r3, [r4, #48]	@ 0x30
 8007626:	4b0d      	ldr	r3, [pc, #52]	@ (800765c <std+0x68>)
 8007628:	6224      	str	r4, [r4, #32]
 800762a:	429c      	cmp	r4, r3
 800762c:	d006      	beq.n	800763c <std+0x48>
 800762e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007632:	4294      	cmp	r4, r2
 8007634:	d002      	beq.n	800763c <std+0x48>
 8007636:	33d0      	adds	r3, #208	@ 0xd0
 8007638:	429c      	cmp	r4, r3
 800763a:	d105      	bne.n	8007648 <std+0x54>
 800763c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007644:	f000 ba16 	b.w	8007a74 <__retarget_lock_init_recursive>
 8007648:	bd10      	pop	{r4, pc}
 800764a:	bf00      	nop
 800764c:	08007835 	.word	0x08007835
 8007650:	0800785b 	.word	0x0800785b
 8007654:	08007893 	.word	0x08007893
 8007658:	080078b7 	.word	0x080078b7
 800765c:	200008c4 	.word	0x200008c4

08007660 <stdio_exit_handler>:
 8007660:	4a02      	ldr	r2, [pc, #8]	@ (800766c <stdio_exit_handler+0xc>)
 8007662:	4903      	ldr	r1, [pc, #12]	@ (8007670 <stdio_exit_handler+0x10>)
 8007664:	4803      	ldr	r0, [pc, #12]	@ (8007674 <stdio_exit_handler+0x14>)
 8007666:	f000 b869 	b.w	800773c <_fwalk_sglue>
 800766a:	bf00      	nop
 800766c:	2000003c 	.word	0x2000003c
 8007670:	08009a09 	.word	0x08009a09
 8007674:	2000004c 	.word	0x2000004c

08007678 <cleanup_stdio>:
 8007678:	6841      	ldr	r1, [r0, #4]
 800767a:	4b0c      	ldr	r3, [pc, #48]	@ (80076ac <cleanup_stdio+0x34>)
 800767c:	4299      	cmp	r1, r3
 800767e:	b510      	push	{r4, lr}
 8007680:	4604      	mov	r4, r0
 8007682:	d001      	beq.n	8007688 <cleanup_stdio+0x10>
 8007684:	f002 f9c0 	bl	8009a08 <_fflush_r>
 8007688:	68a1      	ldr	r1, [r4, #8]
 800768a:	4b09      	ldr	r3, [pc, #36]	@ (80076b0 <cleanup_stdio+0x38>)
 800768c:	4299      	cmp	r1, r3
 800768e:	d002      	beq.n	8007696 <cleanup_stdio+0x1e>
 8007690:	4620      	mov	r0, r4
 8007692:	f002 f9b9 	bl	8009a08 <_fflush_r>
 8007696:	68e1      	ldr	r1, [r4, #12]
 8007698:	4b06      	ldr	r3, [pc, #24]	@ (80076b4 <cleanup_stdio+0x3c>)
 800769a:	4299      	cmp	r1, r3
 800769c:	d004      	beq.n	80076a8 <cleanup_stdio+0x30>
 800769e:	4620      	mov	r0, r4
 80076a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a4:	f002 b9b0 	b.w	8009a08 <_fflush_r>
 80076a8:	bd10      	pop	{r4, pc}
 80076aa:	bf00      	nop
 80076ac:	200008c4 	.word	0x200008c4
 80076b0:	2000092c 	.word	0x2000092c
 80076b4:	20000994 	.word	0x20000994

080076b8 <global_stdio_init.part.0>:
 80076b8:	b510      	push	{r4, lr}
 80076ba:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <global_stdio_init.part.0+0x30>)
 80076bc:	4c0b      	ldr	r4, [pc, #44]	@ (80076ec <global_stdio_init.part.0+0x34>)
 80076be:	4a0c      	ldr	r2, [pc, #48]	@ (80076f0 <global_stdio_init.part.0+0x38>)
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	4620      	mov	r0, r4
 80076c4:	2200      	movs	r2, #0
 80076c6:	2104      	movs	r1, #4
 80076c8:	f7ff ff94 	bl	80075f4 <std>
 80076cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076d0:	2201      	movs	r2, #1
 80076d2:	2109      	movs	r1, #9
 80076d4:	f7ff ff8e 	bl	80075f4 <std>
 80076d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076dc:	2202      	movs	r2, #2
 80076de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e2:	2112      	movs	r1, #18
 80076e4:	f7ff bf86 	b.w	80075f4 <std>
 80076e8:	200009fc 	.word	0x200009fc
 80076ec:	200008c4 	.word	0x200008c4
 80076f0:	08007661 	.word	0x08007661

080076f4 <__sfp_lock_acquire>:
 80076f4:	4801      	ldr	r0, [pc, #4]	@ (80076fc <__sfp_lock_acquire+0x8>)
 80076f6:	f000 b9be 	b.w	8007a76 <__retarget_lock_acquire_recursive>
 80076fa:	bf00      	nop
 80076fc:	20000a05 	.word	0x20000a05

08007700 <__sfp_lock_release>:
 8007700:	4801      	ldr	r0, [pc, #4]	@ (8007708 <__sfp_lock_release+0x8>)
 8007702:	f000 b9b9 	b.w	8007a78 <__retarget_lock_release_recursive>
 8007706:	bf00      	nop
 8007708:	20000a05 	.word	0x20000a05

0800770c <__sinit>:
 800770c:	b510      	push	{r4, lr}
 800770e:	4604      	mov	r4, r0
 8007710:	f7ff fff0 	bl	80076f4 <__sfp_lock_acquire>
 8007714:	6a23      	ldr	r3, [r4, #32]
 8007716:	b11b      	cbz	r3, 8007720 <__sinit+0x14>
 8007718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800771c:	f7ff bff0 	b.w	8007700 <__sfp_lock_release>
 8007720:	4b04      	ldr	r3, [pc, #16]	@ (8007734 <__sinit+0x28>)
 8007722:	6223      	str	r3, [r4, #32]
 8007724:	4b04      	ldr	r3, [pc, #16]	@ (8007738 <__sinit+0x2c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f5      	bne.n	8007718 <__sinit+0xc>
 800772c:	f7ff ffc4 	bl	80076b8 <global_stdio_init.part.0>
 8007730:	e7f2      	b.n	8007718 <__sinit+0xc>
 8007732:	bf00      	nop
 8007734:	08007679 	.word	0x08007679
 8007738:	200009fc 	.word	0x200009fc

0800773c <_fwalk_sglue>:
 800773c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007740:	4607      	mov	r7, r0
 8007742:	4688      	mov	r8, r1
 8007744:	4614      	mov	r4, r2
 8007746:	2600      	movs	r6, #0
 8007748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800774c:	f1b9 0901 	subs.w	r9, r9, #1
 8007750:	d505      	bpl.n	800775e <_fwalk_sglue+0x22>
 8007752:	6824      	ldr	r4, [r4, #0]
 8007754:	2c00      	cmp	r4, #0
 8007756:	d1f7      	bne.n	8007748 <_fwalk_sglue+0xc>
 8007758:	4630      	mov	r0, r6
 800775a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800775e:	89ab      	ldrh	r3, [r5, #12]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d907      	bls.n	8007774 <_fwalk_sglue+0x38>
 8007764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007768:	3301      	adds	r3, #1
 800776a:	d003      	beq.n	8007774 <_fwalk_sglue+0x38>
 800776c:	4629      	mov	r1, r5
 800776e:	4638      	mov	r0, r7
 8007770:	47c0      	blx	r8
 8007772:	4306      	orrs	r6, r0
 8007774:	3568      	adds	r5, #104	@ 0x68
 8007776:	e7e9      	b.n	800774c <_fwalk_sglue+0x10>

08007778 <sniprintf>:
 8007778:	b40c      	push	{r2, r3}
 800777a:	b530      	push	{r4, r5, lr}
 800777c:	4b17      	ldr	r3, [pc, #92]	@ (80077dc <sniprintf+0x64>)
 800777e:	1e0c      	subs	r4, r1, #0
 8007780:	681d      	ldr	r5, [r3, #0]
 8007782:	b09d      	sub	sp, #116	@ 0x74
 8007784:	da08      	bge.n	8007798 <sniprintf+0x20>
 8007786:	238b      	movs	r3, #139	@ 0x8b
 8007788:	602b      	str	r3, [r5, #0]
 800778a:	f04f 30ff 	mov.w	r0, #4294967295
 800778e:	b01d      	add	sp, #116	@ 0x74
 8007790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007794:	b002      	add	sp, #8
 8007796:	4770      	bx	lr
 8007798:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800779c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80077a0:	bf14      	ite	ne
 80077a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077a6:	4623      	moveq	r3, r4
 80077a8:	9304      	str	r3, [sp, #16]
 80077aa:	9307      	str	r3, [sp, #28]
 80077ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077b0:	9002      	str	r0, [sp, #8]
 80077b2:	9006      	str	r0, [sp, #24]
 80077b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80077b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077ba:	ab21      	add	r3, sp, #132	@ 0x84
 80077bc:	a902      	add	r1, sp, #8
 80077be:	4628      	mov	r0, r5
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f001 fc87 	bl	80090d4 <_svfiprintf_r>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	bfbc      	itt	lt
 80077ca:	238b      	movlt	r3, #139	@ 0x8b
 80077cc:	602b      	strlt	r3, [r5, #0]
 80077ce:	2c00      	cmp	r4, #0
 80077d0:	d0dd      	beq.n	800778e <sniprintf+0x16>
 80077d2:	9b02      	ldr	r3, [sp, #8]
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
 80077d8:	e7d9      	b.n	800778e <sniprintf+0x16>
 80077da:	bf00      	nop
 80077dc:	20000048 	.word	0x20000048

080077e0 <siscanf>:
 80077e0:	b40e      	push	{r1, r2, r3}
 80077e2:	b530      	push	{r4, r5, lr}
 80077e4:	b09c      	sub	sp, #112	@ 0x70
 80077e6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80077e8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80077ec:	f854 5b04 	ldr.w	r5, [r4], #4
 80077f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80077f4:	9002      	str	r0, [sp, #8]
 80077f6:	9006      	str	r0, [sp, #24]
 80077f8:	f7f8 fd3a 	bl	8000270 <strlen>
 80077fc:	4b0b      	ldr	r3, [pc, #44]	@ (800782c <siscanf+0x4c>)
 80077fe:	9003      	str	r0, [sp, #12]
 8007800:	9007      	str	r0, [sp, #28]
 8007802:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007804:	480a      	ldr	r0, [pc, #40]	@ (8007830 <siscanf+0x50>)
 8007806:	9401      	str	r4, [sp, #4]
 8007808:	2300      	movs	r3, #0
 800780a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800780c:	9314      	str	r3, [sp, #80]	@ 0x50
 800780e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007812:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007816:	462a      	mov	r2, r5
 8007818:	4623      	mov	r3, r4
 800781a:	a902      	add	r1, sp, #8
 800781c:	6800      	ldr	r0, [r0, #0]
 800781e:	f001 fdad 	bl	800937c <__ssvfiscanf_r>
 8007822:	b01c      	add	sp, #112	@ 0x70
 8007824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007828:	b003      	add	sp, #12
 800782a:	4770      	bx	lr
 800782c:	08007857 	.word	0x08007857
 8007830:	20000048 	.word	0x20000048

08007834 <__sread>:
 8007834:	b510      	push	{r4, lr}
 8007836:	460c      	mov	r4, r1
 8007838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783c:	f000 f8cc 	bl	80079d8 <_read_r>
 8007840:	2800      	cmp	r0, #0
 8007842:	bfab      	itete	ge
 8007844:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007846:	89a3      	ldrhlt	r3, [r4, #12]
 8007848:	181b      	addge	r3, r3, r0
 800784a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800784e:	bfac      	ite	ge
 8007850:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007852:	81a3      	strhlt	r3, [r4, #12]
 8007854:	bd10      	pop	{r4, pc}

08007856 <__seofread>:
 8007856:	2000      	movs	r0, #0
 8007858:	4770      	bx	lr

0800785a <__swrite>:
 800785a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785e:	461f      	mov	r7, r3
 8007860:	898b      	ldrh	r3, [r1, #12]
 8007862:	05db      	lsls	r3, r3, #23
 8007864:	4605      	mov	r5, r0
 8007866:	460c      	mov	r4, r1
 8007868:	4616      	mov	r6, r2
 800786a:	d505      	bpl.n	8007878 <__swrite+0x1e>
 800786c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007870:	2302      	movs	r3, #2
 8007872:	2200      	movs	r2, #0
 8007874:	f000 f89e 	bl	80079b4 <_lseek_r>
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	4632      	mov	r2, r6
 8007886:	463b      	mov	r3, r7
 8007888:	4628      	mov	r0, r5
 800788a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800788e:	f000 b8b5 	b.w	80079fc <_write_r>

08007892 <__sseek>:
 8007892:	b510      	push	{r4, lr}
 8007894:	460c      	mov	r4, r1
 8007896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789a:	f000 f88b 	bl	80079b4 <_lseek_r>
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	bf15      	itete	ne
 80078a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078ae:	81a3      	strheq	r3, [r4, #12]
 80078b0:	bf18      	it	ne
 80078b2:	81a3      	strhne	r3, [r4, #12]
 80078b4:	bd10      	pop	{r4, pc}

080078b6 <__sclose>:
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 b86b 	b.w	8007994 <_close_r>

080078be <memset>:
 80078be:	4402      	add	r2, r0
 80078c0:	4603      	mov	r3, r0
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d100      	bne.n	80078c8 <memset+0xa>
 80078c6:	4770      	bx	lr
 80078c8:	f803 1b01 	strb.w	r1, [r3], #1
 80078cc:	e7f9      	b.n	80078c2 <memset+0x4>

080078ce <strchr>:
 80078ce:	b2c9      	uxtb	r1, r1
 80078d0:	4603      	mov	r3, r0
 80078d2:	4618      	mov	r0, r3
 80078d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078d8:	b112      	cbz	r2, 80078e0 <strchr+0x12>
 80078da:	428a      	cmp	r2, r1
 80078dc:	d1f9      	bne.n	80078d2 <strchr+0x4>
 80078de:	4770      	bx	lr
 80078e0:	2900      	cmp	r1, #0
 80078e2:	bf18      	it	ne
 80078e4:	2000      	movne	r0, #0
 80078e6:	4770      	bx	lr

080078e8 <strncmp>:
 80078e8:	b510      	push	{r4, lr}
 80078ea:	b16a      	cbz	r2, 8007908 <strncmp+0x20>
 80078ec:	3901      	subs	r1, #1
 80078ee:	1884      	adds	r4, r0, r2
 80078f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d103      	bne.n	8007904 <strncmp+0x1c>
 80078fc:	42a0      	cmp	r0, r4
 80078fe:	d001      	beq.n	8007904 <strncmp+0x1c>
 8007900:	2a00      	cmp	r2, #0
 8007902:	d1f5      	bne.n	80078f0 <strncmp+0x8>
 8007904:	1ad0      	subs	r0, r2, r3
 8007906:	bd10      	pop	{r4, pc}
 8007908:	4610      	mov	r0, r2
 800790a:	e7fc      	b.n	8007906 <strncmp+0x1e>

0800790c <strncpy>:
 800790c:	b510      	push	{r4, lr}
 800790e:	3901      	subs	r1, #1
 8007910:	4603      	mov	r3, r0
 8007912:	b132      	cbz	r2, 8007922 <strncpy+0x16>
 8007914:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007918:	f803 4b01 	strb.w	r4, [r3], #1
 800791c:	3a01      	subs	r2, #1
 800791e:	2c00      	cmp	r4, #0
 8007920:	d1f7      	bne.n	8007912 <strncpy+0x6>
 8007922:	441a      	add	r2, r3
 8007924:	2100      	movs	r1, #0
 8007926:	4293      	cmp	r3, r2
 8007928:	d100      	bne.n	800792c <strncpy+0x20>
 800792a:	bd10      	pop	{r4, pc}
 800792c:	f803 1b01 	strb.w	r1, [r3], #1
 8007930:	e7f9      	b.n	8007926 <strncpy+0x1a>

08007932 <strrchr>:
 8007932:	b538      	push	{r3, r4, r5, lr}
 8007934:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8007938:	4603      	mov	r3, r0
 800793a:	d10e      	bne.n	800795a <strrchr+0x28>
 800793c:	4621      	mov	r1, r4
 800793e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007942:	f7ff bfc4 	b.w	80078ce <strchr>
 8007946:	1c43      	adds	r3, r0, #1
 8007948:	4605      	mov	r5, r0
 800794a:	4621      	mov	r1, r4
 800794c:	4618      	mov	r0, r3
 800794e:	f7ff ffbe 	bl	80078ce <strchr>
 8007952:	2800      	cmp	r0, #0
 8007954:	d1f7      	bne.n	8007946 <strrchr+0x14>
 8007956:	4628      	mov	r0, r5
 8007958:	bd38      	pop	{r3, r4, r5, pc}
 800795a:	2500      	movs	r5, #0
 800795c:	e7f5      	b.n	800794a <strrchr+0x18>

0800795e <strstr>:
 800795e:	780a      	ldrb	r2, [r1, #0]
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	b96a      	cbnz	r2, 8007980 <strstr+0x22>
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	429a      	cmp	r2, r3
 8007968:	d109      	bne.n	800797e <strstr+0x20>
 800796a:	460c      	mov	r4, r1
 800796c:	4605      	mov	r5, r0
 800796e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0f6      	beq.n	8007964 <strstr+0x6>
 8007976:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800797a:	429e      	cmp	r6, r3
 800797c:	d0f7      	beq.n	800796e <strstr+0x10>
 800797e:	3001      	adds	r0, #1
 8007980:	7803      	ldrb	r3, [r0, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1ef      	bne.n	8007966 <strstr+0x8>
 8007986:	4618      	mov	r0, r3
 8007988:	e7ec      	b.n	8007964 <strstr+0x6>
	...

0800798c <_localeconv_r>:
 800798c:	4800      	ldr	r0, [pc, #0]	@ (8007990 <_localeconv_r+0x4>)
 800798e:	4770      	bx	lr
 8007990:	20000188 	.word	0x20000188

08007994 <_close_r>:
 8007994:	b538      	push	{r3, r4, r5, lr}
 8007996:	4d06      	ldr	r5, [pc, #24]	@ (80079b0 <_close_r+0x1c>)
 8007998:	2300      	movs	r3, #0
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	602b      	str	r3, [r5, #0]
 80079a0:	f7fa fb0a 	bl	8001fb8 <_close>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d102      	bne.n	80079ae <_close_r+0x1a>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	b103      	cbz	r3, 80079ae <_close_r+0x1a>
 80079ac:	6023      	str	r3, [r4, #0]
 80079ae:	bd38      	pop	{r3, r4, r5, pc}
 80079b0:	20000a00 	.word	0x20000a00

080079b4 <_lseek_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d07      	ldr	r5, [pc, #28]	@ (80079d4 <_lseek_r+0x20>)
 80079b8:	4604      	mov	r4, r0
 80079ba:	4608      	mov	r0, r1
 80079bc:	4611      	mov	r1, r2
 80079be:	2200      	movs	r2, #0
 80079c0:	602a      	str	r2, [r5, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f7fa fb1f 	bl	8002006 <_lseek>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_lseek_r+0x1e>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_lseek_r+0x1e>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	20000a00 	.word	0x20000a00

080079d8 <_read_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4d07      	ldr	r5, [pc, #28]	@ (80079f8 <_read_r+0x20>)
 80079dc:	4604      	mov	r4, r0
 80079de:	4608      	mov	r0, r1
 80079e0:	4611      	mov	r1, r2
 80079e2:	2200      	movs	r2, #0
 80079e4:	602a      	str	r2, [r5, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	f7fa faad 	bl	8001f46 <_read>
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d102      	bne.n	80079f6 <_read_r+0x1e>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	b103      	cbz	r3, 80079f6 <_read_r+0x1e>
 80079f4:	6023      	str	r3, [r4, #0]
 80079f6:	bd38      	pop	{r3, r4, r5, pc}
 80079f8:	20000a00 	.word	0x20000a00

080079fc <_write_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4d07      	ldr	r5, [pc, #28]	@ (8007a1c <_write_r+0x20>)
 8007a00:	4604      	mov	r4, r0
 8007a02:	4608      	mov	r0, r1
 8007a04:	4611      	mov	r1, r2
 8007a06:	2200      	movs	r2, #0
 8007a08:	602a      	str	r2, [r5, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	f7fa fab8 	bl	8001f80 <_write>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_write_r+0x1e>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_write_r+0x1e>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	20000a00 	.word	0x20000a00

08007a20 <__errno>:
 8007a20:	4b01      	ldr	r3, [pc, #4]	@ (8007a28 <__errno+0x8>)
 8007a22:	6818      	ldr	r0, [r3, #0]
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20000048 	.word	0x20000048

08007a2c <__libc_init_array>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8007a64 <__libc_init_array+0x38>)
 8007a30:	4c0d      	ldr	r4, [pc, #52]	@ (8007a68 <__libc_init_array+0x3c>)
 8007a32:	1b64      	subs	r4, r4, r5
 8007a34:	10a4      	asrs	r4, r4, #2
 8007a36:	2600      	movs	r6, #0
 8007a38:	42a6      	cmp	r6, r4
 8007a3a:	d109      	bne.n	8007a50 <__libc_init_array+0x24>
 8007a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8007a6c <__libc_init_array+0x40>)
 8007a3e:	4c0c      	ldr	r4, [pc, #48]	@ (8007a70 <__libc_init_array+0x44>)
 8007a40:	f002 fce0 	bl	800a404 <_init>
 8007a44:	1b64      	subs	r4, r4, r5
 8007a46:	10a4      	asrs	r4, r4, #2
 8007a48:	2600      	movs	r6, #0
 8007a4a:	42a6      	cmp	r6, r4
 8007a4c:	d105      	bne.n	8007a5a <__libc_init_array+0x2e>
 8007a4e:	bd70      	pop	{r4, r5, r6, pc}
 8007a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a54:	4798      	blx	r3
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7ee      	b.n	8007a38 <__libc_init_array+0xc>
 8007a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a5e:	4798      	blx	r3
 8007a60:	3601      	adds	r6, #1
 8007a62:	e7f2      	b.n	8007a4a <__libc_init_array+0x1e>
 8007a64:	0800aaf4 	.word	0x0800aaf4
 8007a68:	0800aaf4 	.word	0x0800aaf4
 8007a6c:	0800aaf4 	.word	0x0800aaf4
 8007a70:	0800aaf8 	.word	0x0800aaf8

08007a74 <__retarget_lock_init_recursive>:
 8007a74:	4770      	bx	lr

08007a76 <__retarget_lock_acquire_recursive>:
 8007a76:	4770      	bx	lr

08007a78 <__retarget_lock_release_recursive>:
 8007a78:	4770      	bx	lr

08007a7a <quorem>:
 8007a7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7e:	6903      	ldr	r3, [r0, #16]
 8007a80:	690c      	ldr	r4, [r1, #16]
 8007a82:	42a3      	cmp	r3, r4
 8007a84:	4607      	mov	r7, r0
 8007a86:	db7e      	blt.n	8007b86 <quorem+0x10c>
 8007a88:	3c01      	subs	r4, #1
 8007a8a:	f101 0814 	add.w	r8, r1, #20
 8007a8e:	00a3      	lsls	r3, r4, #2
 8007a90:	f100 0514 	add.w	r5, r0, #20
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007aa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007aac:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ab0:	d32e      	bcc.n	8007b10 <quorem+0x96>
 8007ab2:	f04f 0a00 	mov.w	sl, #0
 8007ab6:	46c4      	mov	ip, r8
 8007ab8:	46ae      	mov	lr, r5
 8007aba:	46d3      	mov	fp, sl
 8007abc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ac0:	b298      	uxth	r0, r3
 8007ac2:	fb06 a000 	mla	r0, r6, r0, sl
 8007ac6:	0c02      	lsrs	r2, r0, #16
 8007ac8:	0c1b      	lsrs	r3, r3, #16
 8007aca:	fb06 2303 	mla	r3, r6, r3, r2
 8007ace:	f8de 2000 	ldr.w	r2, [lr]
 8007ad2:	b280      	uxth	r0, r0
 8007ad4:	b292      	uxth	r2, r2
 8007ad6:	1a12      	subs	r2, r2, r0
 8007ad8:	445a      	add	r2, fp
 8007ada:	f8de 0000 	ldr.w	r0, [lr]
 8007ade:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ae8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007aec:	b292      	uxth	r2, r2
 8007aee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007af2:	45e1      	cmp	r9, ip
 8007af4:	f84e 2b04 	str.w	r2, [lr], #4
 8007af8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007afc:	d2de      	bcs.n	8007abc <quorem+0x42>
 8007afe:	9b00      	ldr	r3, [sp, #0]
 8007b00:	58eb      	ldr	r3, [r5, r3]
 8007b02:	b92b      	cbnz	r3, 8007b10 <quorem+0x96>
 8007b04:	9b01      	ldr	r3, [sp, #4]
 8007b06:	3b04      	subs	r3, #4
 8007b08:	429d      	cmp	r5, r3
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	d32f      	bcc.n	8007b6e <quorem+0xf4>
 8007b0e:	613c      	str	r4, [r7, #16]
 8007b10:	4638      	mov	r0, r7
 8007b12:	f001 f97b 	bl	8008e0c <__mcmp>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	db25      	blt.n	8007b66 <quorem+0xec>
 8007b1a:	4629      	mov	r1, r5
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b22:	f8d1 c000 	ldr.w	ip, [r1]
 8007b26:	fa1f fe82 	uxth.w	lr, r2
 8007b2a:	fa1f f38c 	uxth.w	r3, ip
 8007b2e:	eba3 030e 	sub.w	r3, r3, lr
 8007b32:	4403      	add	r3, r0
 8007b34:	0c12      	lsrs	r2, r2, #16
 8007b36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007b3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b44:	45c1      	cmp	r9, r8
 8007b46:	f841 3b04 	str.w	r3, [r1], #4
 8007b4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007b4e:	d2e6      	bcs.n	8007b1e <quorem+0xa4>
 8007b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b58:	b922      	cbnz	r2, 8007b64 <quorem+0xea>
 8007b5a:	3b04      	subs	r3, #4
 8007b5c:	429d      	cmp	r5, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	d30b      	bcc.n	8007b7a <quorem+0x100>
 8007b62:	613c      	str	r4, [r7, #16]
 8007b64:	3601      	adds	r6, #1
 8007b66:	4630      	mov	r0, r6
 8007b68:	b003      	add	sp, #12
 8007b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6e:	6812      	ldr	r2, [r2, #0]
 8007b70:	3b04      	subs	r3, #4
 8007b72:	2a00      	cmp	r2, #0
 8007b74:	d1cb      	bne.n	8007b0e <quorem+0x94>
 8007b76:	3c01      	subs	r4, #1
 8007b78:	e7c6      	b.n	8007b08 <quorem+0x8e>
 8007b7a:	6812      	ldr	r2, [r2, #0]
 8007b7c:	3b04      	subs	r3, #4
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	d1ef      	bne.n	8007b62 <quorem+0xe8>
 8007b82:	3c01      	subs	r4, #1
 8007b84:	e7ea      	b.n	8007b5c <quorem+0xe2>
 8007b86:	2000      	movs	r0, #0
 8007b88:	e7ee      	b.n	8007b68 <quorem+0xee>
 8007b8a:	0000      	movs	r0, r0
 8007b8c:	0000      	movs	r0, r0
	...

08007b90 <_dtoa_r>:
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	69c7      	ldr	r7, [r0, #28]
 8007b96:	b099      	sub	sp, #100	@ 0x64
 8007b98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b9c:	ec55 4b10 	vmov	r4, r5, d0
 8007ba0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007ba2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ba4:	4683      	mov	fp, r0
 8007ba6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ba8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007baa:	b97f      	cbnz	r7, 8007bcc <_dtoa_r+0x3c>
 8007bac:	2010      	movs	r0, #16
 8007bae:	f000 fdfd 	bl	80087ac <malloc>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	f8cb 001c 	str.w	r0, [fp, #28]
 8007bb8:	b920      	cbnz	r0, 8007bc4 <_dtoa_r+0x34>
 8007bba:	4ba7      	ldr	r3, [pc, #668]	@ (8007e58 <_dtoa_r+0x2c8>)
 8007bbc:	21ef      	movs	r1, #239	@ 0xef
 8007bbe:	48a7      	ldr	r0, [pc, #668]	@ (8007e5c <_dtoa_r+0x2cc>)
 8007bc0:	f001 fff6 	bl	8009bb0 <__assert_func>
 8007bc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007bc8:	6007      	str	r7, [r0, #0]
 8007bca:	60c7      	str	r7, [r0, #12]
 8007bcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bd0:	6819      	ldr	r1, [r3, #0]
 8007bd2:	b159      	cbz	r1, 8007bec <_dtoa_r+0x5c>
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	604a      	str	r2, [r1, #4]
 8007bd8:	2301      	movs	r3, #1
 8007bda:	4093      	lsls	r3, r2
 8007bdc:	608b      	str	r3, [r1, #8]
 8007bde:	4658      	mov	r0, fp
 8007be0:	f000 feda 	bl	8008998 <_Bfree>
 8007be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007be8:	2200      	movs	r2, #0
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	1e2b      	subs	r3, r5, #0
 8007bee:	bfb9      	ittee	lt
 8007bf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007bf4:	9303      	strlt	r3, [sp, #12]
 8007bf6:	2300      	movge	r3, #0
 8007bf8:	6033      	strge	r3, [r6, #0]
 8007bfa:	9f03      	ldr	r7, [sp, #12]
 8007bfc:	4b98      	ldr	r3, [pc, #608]	@ (8007e60 <_dtoa_r+0x2d0>)
 8007bfe:	bfbc      	itt	lt
 8007c00:	2201      	movlt	r2, #1
 8007c02:	6032      	strlt	r2, [r6, #0]
 8007c04:	43bb      	bics	r3, r7
 8007c06:	d112      	bne.n	8007c2e <_dtoa_r+0x9e>
 8007c08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c14:	4323      	orrs	r3, r4
 8007c16:	f000 854d 	beq.w	80086b4 <_dtoa_r+0xb24>
 8007c1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007e74 <_dtoa_r+0x2e4>
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 854f 	beq.w	80086c4 <_dtoa_r+0xb34>
 8007c26:	f10a 0303 	add.w	r3, sl, #3
 8007c2a:	f000 bd49 	b.w	80086c0 <_dtoa_r+0xb30>
 8007c2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	ec51 0b17 	vmov	r0, r1, d7
 8007c38:	2300      	movs	r3, #0
 8007c3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007c3e:	f7f8 ff43 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c42:	4680      	mov	r8, r0
 8007c44:	b158      	cbz	r0, 8007c5e <_dtoa_r+0xce>
 8007c46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007c48:	2301      	movs	r3, #1
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c4e:	b113      	cbz	r3, 8007c56 <_dtoa_r+0xc6>
 8007c50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c52:	4b84      	ldr	r3, [pc, #528]	@ (8007e64 <_dtoa_r+0x2d4>)
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007e78 <_dtoa_r+0x2e8>
 8007c5a:	f000 bd33 	b.w	80086c4 <_dtoa_r+0xb34>
 8007c5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c62:	aa16      	add	r2, sp, #88	@ 0x58
 8007c64:	a917      	add	r1, sp, #92	@ 0x5c
 8007c66:	4658      	mov	r0, fp
 8007c68:	f001 f980 	bl	8008f6c <__d2b>
 8007c6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007c70:	4681      	mov	r9, r0
 8007c72:	2e00      	cmp	r6, #0
 8007c74:	d077      	beq.n	8007d66 <_dtoa_r+0x1d6>
 8007c76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c90:	4619      	mov	r1, r3
 8007c92:	2200      	movs	r2, #0
 8007c94:	4b74      	ldr	r3, [pc, #464]	@ (8007e68 <_dtoa_r+0x2d8>)
 8007c96:	f7f8 faf7 	bl	8000288 <__aeabi_dsub>
 8007c9a:	a369      	add	r3, pc, #420	@ (adr r3, 8007e40 <_dtoa_r+0x2b0>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f7f8 fcaa 	bl	80005f8 <__aeabi_dmul>
 8007ca4:	a368      	add	r3, pc, #416	@ (adr r3, 8007e48 <_dtoa_r+0x2b8>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	f7f8 faef 	bl	800028c <__adddf3>
 8007cae:	4604      	mov	r4, r0
 8007cb0:	4630      	mov	r0, r6
 8007cb2:	460d      	mov	r5, r1
 8007cb4:	f7f8 fc36 	bl	8000524 <__aeabi_i2d>
 8007cb8:	a365      	add	r3, pc, #404	@ (adr r3, 8007e50 <_dtoa_r+0x2c0>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 fc9b 	bl	80005f8 <__aeabi_dmul>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f8 fadf 	bl	800028c <__adddf3>
 8007cce:	4604      	mov	r4, r0
 8007cd0:	460d      	mov	r5, r1
 8007cd2:	f7f8 ff41 	bl	8000b58 <__aeabi_d2iz>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	4607      	mov	r7, r0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4620      	mov	r0, r4
 8007cde:	4629      	mov	r1, r5
 8007ce0:	f7f8 fefc 	bl	8000adc <__aeabi_dcmplt>
 8007ce4:	b140      	cbz	r0, 8007cf8 <_dtoa_r+0x168>
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7f8 fc1c 	bl	8000524 <__aeabi_i2d>
 8007cec:	4622      	mov	r2, r4
 8007cee:	462b      	mov	r3, r5
 8007cf0:	f7f8 feea 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf4:	b900      	cbnz	r0, 8007cf8 <_dtoa_r+0x168>
 8007cf6:	3f01      	subs	r7, #1
 8007cf8:	2f16      	cmp	r7, #22
 8007cfa:	d851      	bhi.n	8007da0 <_dtoa_r+0x210>
 8007cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8007e6c <_dtoa_r+0x2dc>)
 8007cfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d0a:	f7f8 fee7 	bl	8000adc <__aeabi_dcmplt>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d048      	beq.n	8007da4 <_dtoa_r+0x214>
 8007d12:	3f01      	subs	r7, #1
 8007d14:	2300      	movs	r3, #0
 8007d16:	9312      	str	r3, [sp, #72]	@ 0x48
 8007d18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d1a:	1b9b      	subs	r3, r3, r6
 8007d1c:	1e5a      	subs	r2, r3, #1
 8007d1e:	bf44      	itt	mi
 8007d20:	f1c3 0801 	rsbmi	r8, r3, #1
 8007d24:	2300      	movmi	r3, #0
 8007d26:	9208      	str	r2, [sp, #32]
 8007d28:	bf54      	ite	pl
 8007d2a:	f04f 0800 	movpl.w	r8, #0
 8007d2e:	9308      	strmi	r3, [sp, #32]
 8007d30:	2f00      	cmp	r7, #0
 8007d32:	db39      	blt.n	8007da8 <_dtoa_r+0x218>
 8007d34:	9b08      	ldr	r3, [sp, #32]
 8007d36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007d38:	443b      	add	r3, r7
 8007d3a:	9308      	str	r3, [sp, #32]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d42:	2b09      	cmp	r3, #9
 8007d44:	d864      	bhi.n	8007e10 <_dtoa_r+0x280>
 8007d46:	2b05      	cmp	r3, #5
 8007d48:	bfc4      	itt	gt
 8007d4a:	3b04      	subgt	r3, #4
 8007d4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d50:	f1a3 0302 	sub.w	r3, r3, #2
 8007d54:	bfcc      	ite	gt
 8007d56:	2400      	movgt	r4, #0
 8007d58:	2401      	movle	r4, #1
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d863      	bhi.n	8007e26 <_dtoa_r+0x296>
 8007d5e:	e8df f003 	tbb	[pc, r3]
 8007d62:	372a      	.short	0x372a
 8007d64:	5535      	.short	0x5535
 8007d66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007d6a:	441e      	add	r6, r3
 8007d6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d70:	2b20      	cmp	r3, #32
 8007d72:	bfc1      	itttt	gt
 8007d74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d78:	409f      	lslgt	r7, r3
 8007d7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d82:	bfd6      	itet	le
 8007d84:	f1c3 0320 	rsble	r3, r3, #32
 8007d88:	ea47 0003 	orrgt.w	r0, r7, r3
 8007d8c:	fa04 f003 	lslle.w	r0, r4, r3
 8007d90:	f7f8 fbb8 	bl	8000504 <__aeabi_ui2d>
 8007d94:	2201      	movs	r2, #1
 8007d96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d9a:	3e01      	subs	r6, #1
 8007d9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007d9e:	e777      	b.n	8007c90 <_dtoa_r+0x100>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e7b8      	b.n	8007d16 <_dtoa_r+0x186>
 8007da4:	9012      	str	r0, [sp, #72]	@ 0x48
 8007da6:	e7b7      	b.n	8007d18 <_dtoa_r+0x188>
 8007da8:	427b      	negs	r3, r7
 8007daa:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dac:	2300      	movs	r3, #0
 8007dae:	eba8 0807 	sub.w	r8, r8, r7
 8007db2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007db4:	e7c4      	b.n	8007d40 <_dtoa_r+0x1b0>
 8007db6:	2300      	movs	r3, #0
 8007db8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	dc35      	bgt.n	8007e2c <_dtoa_r+0x29c>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	9307      	str	r3, [sp, #28]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dca:	e00b      	b.n	8007de4 <_dtoa_r+0x254>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e7f3      	b.n	8007db8 <_dtoa_r+0x228>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	9307      	str	r3, [sp, #28]
 8007de0:	bfb8      	it	lt
 8007de2:	2301      	movlt	r3, #1
 8007de4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007de8:	2100      	movs	r1, #0
 8007dea:	2204      	movs	r2, #4
 8007dec:	f102 0514 	add.w	r5, r2, #20
 8007df0:	429d      	cmp	r5, r3
 8007df2:	d91f      	bls.n	8007e34 <_dtoa_r+0x2a4>
 8007df4:	6041      	str	r1, [r0, #4]
 8007df6:	4658      	mov	r0, fp
 8007df8:	f000 fd8e 	bl	8008918 <_Balloc>
 8007dfc:	4682      	mov	sl, r0
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d13c      	bne.n	8007e7c <_dtoa_r+0x2ec>
 8007e02:	4b1b      	ldr	r3, [pc, #108]	@ (8007e70 <_dtoa_r+0x2e0>)
 8007e04:	4602      	mov	r2, r0
 8007e06:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e0a:	e6d8      	b.n	8007bbe <_dtoa_r+0x2e>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e7e0      	b.n	8007dd2 <_dtoa_r+0x242>
 8007e10:	2401      	movs	r4, #1
 8007e12:	2300      	movs	r3, #0
 8007e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e16:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	9307      	str	r3, [sp, #28]
 8007e20:	2200      	movs	r2, #0
 8007e22:	2312      	movs	r3, #18
 8007e24:	e7d0      	b.n	8007dc8 <_dtoa_r+0x238>
 8007e26:	2301      	movs	r3, #1
 8007e28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e2a:	e7f5      	b.n	8007e18 <_dtoa_r+0x288>
 8007e2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	9307      	str	r3, [sp, #28]
 8007e32:	e7d7      	b.n	8007de4 <_dtoa_r+0x254>
 8007e34:	3101      	adds	r1, #1
 8007e36:	0052      	lsls	r2, r2, #1
 8007e38:	e7d8      	b.n	8007dec <_dtoa_r+0x25c>
 8007e3a:	bf00      	nop
 8007e3c:	f3af 8000 	nop.w
 8007e40:	636f4361 	.word	0x636f4361
 8007e44:	3fd287a7 	.word	0x3fd287a7
 8007e48:	8b60c8b3 	.word	0x8b60c8b3
 8007e4c:	3fc68a28 	.word	0x3fc68a28
 8007e50:	509f79fb 	.word	0x509f79fb
 8007e54:	3fd34413 	.word	0x3fd34413
 8007e58:	0800a79f 	.word	0x0800a79f
 8007e5c:	0800a7b6 	.word	0x0800a7b6
 8007e60:	7ff00000 	.word	0x7ff00000
 8007e64:	0800a9a0 	.word	0x0800a9a0
 8007e68:	3ff80000 	.word	0x3ff80000
 8007e6c:	0800a8b0 	.word	0x0800a8b0
 8007e70:	0800a80e 	.word	0x0800a80e
 8007e74:	0800a79b 	.word	0x0800a79b
 8007e78:	0800a99f 	.word	0x0800a99f
 8007e7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e80:	6018      	str	r0, [r3, #0]
 8007e82:	9b07      	ldr	r3, [sp, #28]
 8007e84:	2b0e      	cmp	r3, #14
 8007e86:	f200 80a4 	bhi.w	8007fd2 <_dtoa_r+0x442>
 8007e8a:	2c00      	cmp	r4, #0
 8007e8c:	f000 80a1 	beq.w	8007fd2 <_dtoa_r+0x442>
 8007e90:	2f00      	cmp	r7, #0
 8007e92:	dd33      	ble.n	8007efc <_dtoa_r+0x36c>
 8007e94:	4bad      	ldr	r3, [pc, #692]	@ (800814c <_dtoa_r+0x5bc>)
 8007e96:	f007 020f 	and.w	r2, r7, #15
 8007e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e9e:	ed93 7b00 	vldr	d7, [r3]
 8007ea2:	05f8      	lsls	r0, r7, #23
 8007ea4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ea8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007eac:	d516      	bpl.n	8007edc <_dtoa_r+0x34c>
 8007eae:	4ba8      	ldr	r3, [pc, #672]	@ (8008150 <_dtoa_r+0x5c0>)
 8007eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007eb8:	f7f8 fcc8 	bl	800084c <__aeabi_ddiv>
 8007ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec0:	f004 040f 	and.w	r4, r4, #15
 8007ec4:	2603      	movs	r6, #3
 8007ec6:	4da2      	ldr	r5, [pc, #648]	@ (8008150 <_dtoa_r+0x5c0>)
 8007ec8:	b954      	cbnz	r4, 8007ee0 <_dtoa_r+0x350>
 8007eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed2:	f7f8 fcbb 	bl	800084c <__aeabi_ddiv>
 8007ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eda:	e028      	b.n	8007f2e <_dtoa_r+0x39e>
 8007edc:	2602      	movs	r6, #2
 8007ede:	e7f2      	b.n	8007ec6 <_dtoa_r+0x336>
 8007ee0:	07e1      	lsls	r1, r4, #31
 8007ee2:	d508      	bpl.n	8007ef6 <_dtoa_r+0x366>
 8007ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007eec:	f7f8 fb84 	bl	80005f8 <__aeabi_dmul>
 8007ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ef4:	3601      	adds	r6, #1
 8007ef6:	1064      	asrs	r4, r4, #1
 8007ef8:	3508      	adds	r5, #8
 8007efa:	e7e5      	b.n	8007ec8 <_dtoa_r+0x338>
 8007efc:	f000 80d2 	beq.w	80080a4 <_dtoa_r+0x514>
 8007f00:	427c      	negs	r4, r7
 8007f02:	4b92      	ldr	r3, [pc, #584]	@ (800814c <_dtoa_r+0x5bc>)
 8007f04:	4d92      	ldr	r5, [pc, #584]	@ (8008150 <_dtoa_r+0x5c0>)
 8007f06:	f004 020f 	and.w	r2, r4, #15
 8007f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f16:	f7f8 fb6f 	bl	80005f8 <__aeabi_dmul>
 8007f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f1e:	1124      	asrs	r4, r4, #4
 8007f20:	2300      	movs	r3, #0
 8007f22:	2602      	movs	r6, #2
 8007f24:	2c00      	cmp	r4, #0
 8007f26:	f040 80b2 	bne.w	800808e <_dtoa_r+0x4fe>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1d3      	bne.n	8007ed6 <_dtoa_r+0x346>
 8007f2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80b7 	beq.w	80080a8 <_dtoa_r+0x518>
 8007f3a:	4b86      	ldr	r3, [pc, #536]	@ (8008154 <_dtoa_r+0x5c4>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f000 80ae 	beq.w	80080a8 <_dtoa_r+0x518>
 8007f4c:	9b07      	ldr	r3, [sp, #28]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 80aa 	beq.w	80080a8 <_dtoa_r+0x518>
 8007f54:	9b00      	ldr	r3, [sp, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	dd37      	ble.n	8007fca <_dtoa_r+0x43a>
 8007f5a:	1e7b      	subs	r3, r7, #1
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4b7d      	ldr	r3, [pc, #500]	@ (8008158 <_dtoa_r+0x5c8>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	4629      	mov	r1, r5
 8007f66:	f7f8 fb47 	bl	80005f8 <__aeabi_dmul>
 8007f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f6e:	9c00      	ldr	r4, [sp, #0]
 8007f70:	3601      	adds	r6, #1
 8007f72:	4630      	mov	r0, r6
 8007f74:	f7f8 fad6 	bl	8000524 <__aeabi_i2d>
 8007f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f7c:	f7f8 fb3c 	bl	80005f8 <__aeabi_dmul>
 8007f80:	4b76      	ldr	r3, [pc, #472]	@ (800815c <_dtoa_r+0x5cc>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	f7f8 f982 	bl	800028c <__adddf3>
 8007f88:	4605      	mov	r5, r0
 8007f8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	f040 808d 	bne.w	80080ae <_dtoa_r+0x51e>
 8007f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f98:	4b71      	ldr	r3, [pc, #452]	@ (8008160 <_dtoa_r+0x5d0>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f7f8 f974 	bl	8000288 <__aeabi_dsub>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fa8:	462a      	mov	r2, r5
 8007faa:	4633      	mov	r3, r6
 8007fac:	f7f8 fdb4 	bl	8000b18 <__aeabi_dcmpgt>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	f040 828b 	bne.w	80084cc <_dtoa_r+0x93c>
 8007fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fba:	462a      	mov	r2, r5
 8007fbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007fc0:	f7f8 fd8c 	bl	8000adc <__aeabi_dcmplt>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	f040 8128 	bne.w	800821a <_dtoa_r+0x68a>
 8007fca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007fce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007fd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f2c0 815a 	blt.w	800828e <_dtoa_r+0x6fe>
 8007fda:	2f0e      	cmp	r7, #14
 8007fdc:	f300 8157 	bgt.w	800828e <_dtoa_r+0x6fe>
 8007fe0:	4b5a      	ldr	r3, [pc, #360]	@ (800814c <_dtoa_r+0x5bc>)
 8007fe2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fe6:	ed93 7b00 	vldr	d7, [r3]
 8007fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	ed8d 7b00 	vstr	d7, [sp]
 8007ff2:	da03      	bge.n	8007ffc <_dtoa_r+0x46c>
 8007ff4:	9b07      	ldr	r3, [sp, #28]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f340 8101 	ble.w	80081fe <_dtoa_r+0x66e>
 8007ffc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008000:	4656      	mov	r6, sl
 8008002:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 fc1f 	bl	800084c <__aeabi_ddiv>
 800800e:	f7f8 fda3 	bl	8000b58 <__aeabi_d2iz>
 8008012:	4680      	mov	r8, r0
 8008014:	f7f8 fa86 	bl	8000524 <__aeabi_i2d>
 8008018:	e9dd 2300 	ldrd	r2, r3, [sp]
 800801c:	f7f8 faec 	bl	80005f8 <__aeabi_dmul>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4620      	mov	r0, r4
 8008026:	4629      	mov	r1, r5
 8008028:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800802c:	f7f8 f92c 	bl	8000288 <__aeabi_dsub>
 8008030:	f806 4b01 	strb.w	r4, [r6], #1
 8008034:	9d07      	ldr	r5, [sp, #28]
 8008036:	eba6 040a 	sub.w	r4, r6, sl
 800803a:	42a5      	cmp	r5, r4
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	f040 8117 	bne.w	8008272 <_dtoa_r+0x6e2>
 8008044:	f7f8 f922 	bl	800028c <__adddf3>
 8008048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800804c:	4604      	mov	r4, r0
 800804e:	460d      	mov	r5, r1
 8008050:	f7f8 fd62 	bl	8000b18 <__aeabi_dcmpgt>
 8008054:	2800      	cmp	r0, #0
 8008056:	f040 80f9 	bne.w	800824c <_dtoa_r+0x6bc>
 800805a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8008066:	b118      	cbz	r0, 8008070 <_dtoa_r+0x4e0>
 8008068:	f018 0f01 	tst.w	r8, #1
 800806c:	f040 80ee 	bne.w	800824c <_dtoa_r+0x6bc>
 8008070:	4649      	mov	r1, r9
 8008072:	4658      	mov	r0, fp
 8008074:	f000 fc90 	bl	8008998 <_Bfree>
 8008078:	2300      	movs	r3, #0
 800807a:	7033      	strb	r3, [r6, #0]
 800807c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800807e:	3701      	adds	r7, #1
 8008080:	601f      	str	r7, [r3, #0]
 8008082:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 831d 	beq.w	80086c4 <_dtoa_r+0xb34>
 800808a:	601e      	str	r6, [r3, #0]
 800808c:	e31a      	b.n	80086c4 <_dtoa_r+0xb34>
 800808e:	07e2      	lsls	r2, r4, #31
 8008090:	d505      	bpl.n	800809e <_dtoa_r+0x50e>
 8008092:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008096:	f7f8 faaf 	bl	80005f8 <__aeabi_dmul>
 800809a:	3601      	adds	r6, #1
 800809c:	2301      	movs	r3, #1
 800809e:	1064      	asrs	r4, r4, #1
 80080a0:	3508      	adds	r5, #8
 80080a2:	e73f      	b.n	8007f24 <_dtoa_r+0x394>
 80080a4:	2602      	movs	r6, #2
 80080a6:	e742      	b.n	8007f2e <_dtoa_r+0x39e>
 80080a8:	9c07      	ldr	r4, [sp, #28]
 80080aa:	9704      	str	r7, [sp, #16]
 80080ac:	e761      	b.n	8007f72 <_dtoa_r+0x3e2>
 80080ae:	4b27      	ldr	r3, [pc, #156]	@ (800814c <_dtoa_r+0x5bc>)
 80080b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80080b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080ba:	4454      	add	r4, sl
 80080bc:	2900      	cmp	r1, #0
 80080be:	d053      	beq.n	8008168 <_dtoa_r+0x5d8>
 80080c0:	4928      	ldr	r1, [pc, #160]	@ (8008164 <_dtoa_r+0x5d4>)
 80080c2:	2000      	movs	r0, #0
 80080c4:	f7f8 fbc2 	bl	800084c <__aeabi_ddiv>
 80080c8:	4633      	mov	r3, r6
 80080ca:	462a      	mov	r2, r5
 80080cc:	f7f8 f8dc 	bl	8000288 <__aeabi_dsub>
 80080d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080d4:	4656      	mov	r6, sl
 80080d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080da:	f7f8 fd3d 	bl	8000b58 <__aeabi_d2iz>
 80080de:	4605      	mov	r5, r0
 80080e0:	f7f8 fa20 	bl	8000524 <__aeabi_i2d>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ec:	f7f8 f8cc 	bl	8000288 <__aeabi_dsub>
 80080f0:	3530      	adds	r5, #48	@ 0x30
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080fa:	f806 5b01 	strb.w	r5, [r6], #1
 80080fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008102:	f7f8 fceb 	bl	8000adc <__aeabi_dcmplt>
 8008106:	2800      	cmp	r0, #0
 8008108:	d171      	bne.n	80081ee <_dtoa_r+0x65e>
 800810a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800810e:	4911      	ldr	r1, [pc, #68]	@ (8008154 <_dtoa_r+0x5c4>)
 8008110:	2000      	movs	r0, #0
 8008112:	f7f8 f8b9 	bl	8000288 <__aeabi_dsub>
 8008116:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800811a:	f7f8 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800811e:	2800      	cmp	r0, #0
 8008120:	f040 8095 	bne.w	800824e <_dtoa_r+0x6be>
 8008124:	42a6      	cmp	r6, r4
 8008126:	f43f af50 	beq.w	8007fca <_dtoa_r+0x43a>
 800812a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800812e:	4b0a      	ldr	r3, [pc, #40]	@ (8008158 <_dtoa_r+0x5c8>)
 8008130:	2200      	movs	r2, #0
 8008132:	f7f8 fa61 	bl	80005f8 <__aeabi_dmul>
 8008136:	4b08      	ldr	r3, [pc, #32]	@ (8008158 <_dtoa_r+0x5c8>)
 8008138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800813c:	2200      	movs	r2, #0
 800813e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008142:	f7f8 fa59 	bl	80005f8 <__aeabi_dmul>
 8008146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800814a:	e7c4      	b.n	80080d6 <_dtoa_r+0x546>
 800814c:	0800a8b0 	.word	0x0800a8b0
 8008150:	0800a888 	.word	0x0800a888
 8008154:	3ff00000 	.word	0x3ff00000
 8008158:	40240000 	.word	0x40240000
 800815c:	401c0000 	.word	0x401c0000
 8008160:	40140000 	.word	0x40140000
 8008164:	3fe00000 	.word	0x3fe00000
 8008168:	4631      	mov	r1, r6
 800816a:	4628      	mov	r0, r5
 800816c:	f7f8 fa44 	bl	80005f8 <__aeabi_dmul>
 8008170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008174:	9415      	str	r4, [sp, #84]	@ 0x54
 8008176:	4656      	mov	r6, sl
 8008178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800817c:	f7f8 fcec 	bl	8000b58 <__aeabi_d2iz>
 8008180:	4605      	mov	r5, r0
 8008182:	f7f8 f9cf 	bl	8000524 <__aeabi_i2d>
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800818e:	f7f8 f87b 	bl	8000288 <__aeabi_dsub>
 8008192:	3530      	adds	r5, #48	@ 0x30
 8008194:	f806 5b01 	strb.w	r5, [r6], #1
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	42a6      	cmp	r6, r4
 800819e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	d124      	bne.n	80081f2 <_dtoa_r+0x662>
 80081a8:	4bac      	ldr	r3, [pc, #688]	@ (800845c <_dtoa_r+0x8cc>)
 80081aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081ae:	f7f8 f86d 	bl	800028c <__adddf3>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ba:	f7f8 fcad 	bl	8000b18 <__aeabi_dcmpgt>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d145      	bne.n	800824e <_dtoa_r+0x6be>
 80081c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081c6:	49a5      	ldr	r1, [pc, #660]	@ (800845c <_dtoa_r+0x8cc>)
 80081c8:	2000      	movs	r0, #0
 80081ca:	f7f8 f85d 	bl	8000288 <__aeabi_dsub>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081d6:	f7f8 fc81 	bl	8000adc <__aeabi_dcmplt>
 80081da:	2800      	cmp	r0, #0
 80081dc:	f43f aef5 	beq.w	8007fca <_dtoa_r+0x43a>
 80081e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80081e2:	1e73      	subs	r3, r6, #1
 80081e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80081e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80081ea:	2b30      	cmp	r3, #48	@ 0x30
 80081ec:	d0f8      	beq.n	80081e0 <_dtoa_r+0x650>
 80081ee:	9f04      	ldr	r7, [sp, #16]
 80081f0:	e73e      	b.n	8008070 <_dtoa_r+0x4e0>
 80081f2:	4b9b      	ldr	r3, [pc, #620]	@ (8008460 <_dtoa_r+0x8d0>)
 80081f4:	f7f8 fa00 	bl	80005f8 <__aeabi_dmul>
 80081f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081fc:	e7bc      	b.n	8008178 <_dtoa_r+0x5e8>
 80081fe:	d10c      	bne.n	800821a <_dtoa_r+0x68a>
 8008200:	4b98      	ldr	r3, [pc, #608]	@ (8008464 <_dtoa_r+0x8d4>)
 8008202:	2200      	movs	r2, #0
 8008204:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008208:	f7f8 f9f6 	bl	80005f8 <__aeabi_dmul>
 800820c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008210:	f7f8 fc78 	bl	8000b04 <__aeabi_dcmpge>
 8008214:	2800      	cmp	r0, #0
 8008216:	f000 8157 	beq.w	80084c8 <_dtoa_r+0x938>
 800821a:	2400      	movs	r4, #0
 800821c:	4625      	mov	r5, r4
 800821e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008220:	43db      	mvns	r3, r3
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	4656      	mov	r6, sl
 8008226:	2700      	movs	r7, #0
 8008228:	4621      	mov	r1, r4
 800822a:	4658      	mov	r0, fp
 800822c:	f000 fbb4 	bl	8008998 <_Bfree>
 8008230:	2d00      	cmp	r5, #0
 8008232:	d0dc      	beq.n	80081ee <_dtoa_r+0x65e>
 8008234:	b12f      	cbz	r7, 8008242 <_dtoa_r+0x6b2>
 8008236:	42af      	cmp	r7, r5
 8008238:	d003      	beq.n	8008242 <_dtoa_r+0x6b2>
 800823a:	4639      	mov	r1, r7
 800823c:	4658      	mov	r0, fp
 800823e:	f000 fbab 	bl	8008998 <_Bfree>
 8008242:	4629      	mov	r1, r5
 8008244:	4658      	mov	r0, fp
 8008246:	f000 fba7 	bl	8008998 <_Bfree>
 800824a:	e7d0      	b.n	80081ee <_dtoa_r+0x65e>
 800824c:	9704      	str	r7, [sp, #16]
 800824e:	4633      	mov	r3, r6
 8008250:	461e      	mov	r6, r3
 8008252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008256:	2a39      	cmp	r2, #57	@ 0x39
 8008258:	d107      	bne.n	800826a <_dtoa_r+0x6da>
 800825a:	459a      	cmp	sl, r3
 800825c:	d1f8      	bne.n	8008250 <_dtoa_r+0x6c0>
 800825e:	9a04      	ldr	r2, [sp, #16]
 8008260:	3201      	adds	r2, #1
 8008262:	9204      	str	r2, [sp, #16]
 8008264:	2230      	movs	r2, #48	@ 0x30
 8008266:	f88a 2000 	strb.w	r2, [sl]
 800826a:	781a      	ldrb	r2, [r3, #0]
 800826c:	3201      	adds	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	e7bd      	b.n	80081ee <_dtoa_r+0x65e>
 8008272:	4b7b      	ldr	r3, [pc, #492]	@ (8008460 <_dtoa_r+0x8d0>)
 8008274:	2200      	movs	r2, #0
 8008276:	f7f8 f9bf 	bl	80005f8 <__aeabi_dmul>
 800827a:	2200      	movs	r2, #0
 800827c:	2300      	movs	r3, #0
 800827e:	4604      	mov	r4, r0
 8008280:	460d      	mov	r5, r1
 8008282:	f7f8 fc21 	bl	8000ac8 <__aeabi_dcmpeq>
 8008286:	2800      	cmp	r0, #0
 8008288:	f43f aebb 	beq.w	8008002 <_dtoa_r+0x472>
 800828c:	e6f0      	b.n	8008070 <_dtoa_r+0x4e0>
 800828e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008290:	2a00      	cmp	r2, #0
 8008292:	f000 80db 	beq.w	800844c <_dtoa_r+0x8bc>
 8008296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008298:	2a01      	cmp	r2, #1
 800829a:	f300 80bf 	bgt.w	800841c <_dtoa_r+0x88c>
 800829e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	f000 80b7 	beq.w	8008414 <_dtoa_r+0x884>
 80082a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80082aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082ac:	4646      	mov	r6, r8
 80082ae:	9a08      	ldr	r2, [sp, #32]
 80082b0:	2101      	movs	r1, #1
 80082b2:	441a      	add	r2, r3
 80082b4:	4658      	mov	r0, fp
 80082b6:	4498      	add	r8, r3
 80082b8:	9208      	str	r2, [sp, #32]
 80082ba:	f000 fc21 	bl	8008b00 <__i2b>
 80082be:	4605      	mov	r5, r0
 80082c0:	b15e      	cbz	r6, 80082da <_dtoa_r+0x74a>
 80082c2:	9b08      	ldr	r3, [sp, #32]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dd08      	ble.n	80082da <_dtoa_r+0x74a>
 80082c8:	42b3      	cmp	r3, r6
 80082ca:	9a08      	ldr	r2, [sp, #32]
 80082cc:	bfa8      	it	ge
 80082ce:	4633      	movge	r3, r6
 80082d0:	eba8 0803 	sub.w	r8, r8, r3
 80082d4:	1af6      	subs	r6, r6, r3
 80082d6:	1ad3      	subs	r3, r2, r3
 80082d8:	9308      	str	r3, [sp, #32]
 80082da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082dc:	b1f3      	cbz	r3, 800831c <_dtoa_r+0x78c>
 80082de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80b7 	beq.w	8008454 <_dtoa_r+0x8c4>
 80082e6:	b18c      	cbz	r4, 800830c <_dtoa_r+0x77c>
 80082e8:	4629      	mov	r1, r5
 80082ea:	4622      	mov	r2, r4
 80082ec:	4658      	mov	r0, fp
 80082ee:	f000 fcc7 	bl	8008c80 <__pow5mult>
 80082f2:	464a      	mov	r2, r9
 80082f4:	4601      	mov	r1, r0
 80082f6:	4605      	mov	r5, r0
 80082f8:	4658      	mov	r0, fp
 80082fa:	f000 fc17 	bl	8008b2c <__multiply>
 80082fe:	4649      	mov	r1, r9
 8008300:	9004      	str	r0, [sp, #16]
 8008302:	4658      	mov	r0, fp
 8008304:	f000 fb48 	bl	8008998 <_Bfree>
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	4699      	mov	r9, r3
 800830c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800830e:	1b1a      	subs	r2, r3, r4
 8008310:	d004      	beq.n	800831c <_dtoa_r+0x78c>
 8008312:	4649      	mov	r1, r9
 8008314:	4658      	mov	r0, fp
 8008316:	f000 fcb3 	bl	8008c80 <__pow5mult>
 800831a:	4681      	mov	r9, r0
 800831c:	2101      	movs	r1, #1
 800831e:	4658      	mov	r0, fp
 8008320:	f000 fbee 	bl	8008b00 <__i2b>
 8008324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008326:	4604      	mov	r4, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 81cf 	beq.w	80086cc <_dtoa_r+0xb3c>
 800832e:	461a      	mov	r2, r3
 8008330:	4601      	mov	r1, r0
 8008332:	4658      	mov	r0, fp
 8008334:	f000 fca4 	bl	8008c80 <__pow5mult>
 8008338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800833a:	2b01      	cmp	r3, #1
 800833c:	4604      	mov	r4, r0
 800833e:	f300 8095 	bgt.w	800846c <_dtoa_r+0x8dc>
 8008342:	9b02      	ldr	r3, [sp, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f040 8087 	bne.w	8008458 <_dtoa_r+0x8c8>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008350:	2b00      	cmp	r3, #0
 8008352:	f040 8089 	bne.w	8008468 <_dtoa_r+0x8d8>
 8008356:	9b03      	ldr	r3, [sp, #12]
 8008358:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800835c:	0d1b      	lsrs	r3, r3, #20
 800835e:	051b      	lsls	r3, r3, #20
 8008360:	b12b      	cbz	r3, 800836e <_dtoa_r+0x7de>
 8008362:	9b08      	ldr	r3, [sp, #32]
 8008364:	3301      	adds	r3, #1
 8008366:	9308      	str	r3, [sp, #32]
 8008368:	f108 0801 	add.w	r8, r8, #1
 800836c:	2301      	movs	r3, #1
 800836e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 81b0 	beq.w	80086d8 <_dtoa_r+0xb48>
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800837e:	6918      	ldr	r0, [r3, #16]
 8008380:	f000 fb72 	bl	8008a68 <__hi0bits>
 8008384:	f1c0 0020 	rsb	r0, r0, #32
 8008388:	9b08      	ldr	r3, [sp, #32]
 800838a:	4418      	add	r0, r3
 800838c:	f010 001f 	ands.w	r0, r0, #31
 8008390:	d077      	beq.n	8008482 <_dtoa_r+0x8f2>
 8008392:	f1c0 0320 	rsb	r3, r0, #32
 8008396:	2b04      	cmp	r3, #4
 8008398:	dd6b      	ble.n	8008472 <_dtoa_r+0x8e2>
 800839a:	9b08      	ldr	r3, [sp, #32]
 800839c:	f1c0 001c 	rsb	r0, r0, #28
 80083a0:	4403      	add	r3, r0
 80083a2:	4480      	add	r8, r0
 80083a4:	4406      	add	r6, r0
 80083a6:	9308      	str	r3, [sp, #32]
 80083a8:	f1b8 0f00 	cmp.w	r8, #0
 80083ac:	dd05      	ble.n	80083ba <_dtoa_r+0x82a>
 80083ae:	4649      	mov	r1, r9
 80083b0:	4642      	mov	r2, r8
 80083b2:	4658      	mov	r0, fp
 80083b4:	f000 fcbe 	bl	8008d34 <__lshift>
 80083b8:	4681      	mov	r9, r0
 80083ba:	9b08      	ldr	r3, [sp, #32]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	dd05      	ble.n	80083cc <_dtoa_r+0x83c>
 80083c0:	4621      	mov	r1, r4
 80083c2:	461a      	mov	r2, r3
 80083c4:	4658      	mov	r0, fp
 80083c6:	f000 fcb5 	bl	8008d34 <__lshift>
 80083ca:	4604      	mov	r4, r0
 80083cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d059      	beq.n	8008486 <_dtoa_r+0x8f6>
 80083d2:	4621      	mov	r1, r4
 80083d4:	4648      	mov	r0, r9
 80083d6:	f000 fd19 	bl	8008e0c <__mcmp>
 80083da:	2800      	cmp	r0, #0
 80083dc:	da53      	bge.n	8008486 <_dtoa_r+0x8f6>
 80083de:	1e7b      	subs	r3, r7, #1
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	4649      	mov	r1, r9
 80083e4:	2300      	movs	r3, #0
 80083e6:	220a      	movs	r2, #10
 80083e8:	4658      	mov	r0, fp
 80083ea:	f000 faf7 	bl	80089dc <__multadd>
 80083ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083f0:	4681      	mov	r9, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 8172 	beq.w	80086dc <_dtoa_r+0xb4c>
 80083f8:	2300      	movs	r3, #0
 80083fa:	4629      	mov	r1, r5
 80083fc:	220a      	movs	r2, #10
 80083fe:	4658      	mov	r0, fp
 8008400:	f000 faec 	bl	80089dc <__multadd>
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	4605      	mov	r5, r0
 800840a:	dc67      	bgt.n	80084dc <_dtoa_r+0x94c>
 800840c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800840e:	2b02      	cmp	r3, #2
 8008410:	dc41      	bgt.n	8008496 <_dtoa_r+0x906>
 8008412:	e063      	b.n	80084dc <_dtoa_r+0x94c>
 8008414:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008416:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800841a:	e746      	b.n	80082aa <_dtoa_r+0x71a>
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	1e5c      	subs	r4, r3, #1
 8008420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008422:	42a3      	cmp	r3, r4
 8008424:	bfbf      	itttt	lt
 8008426:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008428:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800842a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800842c:	1ae3      	sublt	r3, r4, r3
 800842e:	bfb4      	ite	lt
 8008430:	18d2      	addlt	r2, r2, r3
 8008432:	1b1c      	subge	r4, r3, r4
 8008434:	9b07      	ldr	r3, [sp, #28]
 8008436:	bfbc      	itt	lt
 8008438:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800843a:	2400      	movlt	r4, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	bfb5      	itete	lt
 8008440:	eba8 0603 	sublt.w	r6, r8, r3
 8008444:	9b07      	ldrge	r3, [sp, #28]
 8008446:	2300      	movlt	r3, #0
 8008448:	4646      	movge	r6, r8
 800844a:	e730      	b.n	80082ae <_dtoa_r+0x71e>
 800844c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800844e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008450:	4646      	mov	r6, r8
 8008452:	e735      	b.n	80082c0 <_dtoa_r+0x730>
 8008454:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008456:	e75c      	b.n	8008312 <_dtoa_r+0x782>
 8008458:	2300      	movs	r3, #0
 800845a:	e788      	b.n	800836e <_dtoa_r+0x7de>
 800845c:	3fe00000 	.word	0x3fe00000
 8008460:	40240000 	.word	0x40240000
 8008464:	40140000 	.word	0x40140000
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	e780      	b.n	800836e <_dtoa_r+0x7de>
 800846c:	2300      	movs	r3, #0
 800846e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008470:	e782      	b.n	8008378 <_dtoa_r+0x7e8>
 8008472:	d099      	beq.n	80083a8 <_dtoa_r+0x818>
 8008474:	9a08      	ldr	r2, [sp, #32]
 8008476:	331c      	adds	r3, #28
 8008478:	441a      	add	r2, r3
 800847a:	4498      	add	r8, r3
 800847c:	441e      	add	r6, r3
 800847e:	9208      	str	r2, [sp, #32]
 8008480:	e792      	b.n	80083a8 <_dtoa_r+0x818>
 8008482:	4603      	mov	r3, r0
 8008484:	e7f6      	b.n	8008474 <_dtoa_r+0x8e4>
 8008486:	9b07      	ldr	r3, [sp, #28]
 8008488:	9704      	str	r7, [sp, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	dc20      	bgt.n	80084d0 <_dtoa_r+0x940>
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008492:	2b02      	cmp	r3, #2
 8008494:	dd1e      	ble.n	80084d4 <_dtoa_r+0x944>
 8008496:	9b00      	ldr	r3, [sp, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f47f aec0 	bne.w	800821e <_dtoa_r+0x68e>
 800849e:	4621      	mov	r1, r4
 80084a0:	2205      	movs	r2, #5
 80084a2:	4658      	mov	r0, fp
 80084a4:	f000 fa9a 	bl	80089dc <__multadd>
 80084a8:	4601      	mov	r1, r0
 80084aa:	4604      	mov	r4, r0
 80084ac:	4648      	mov	r0, r9
 80084ae:	f000 fcad 	bl	8008e0c <__mcmp>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f77f aeb3 	ble.w	800821e <_dtoa_r+0x68e>
 80084b8:	4656      	mov	r6, sl
 80084ba:	2331      	movs	r3, #49	@ 0x31
 80084bc:	f806 3b01 	strb.w	r3, [r6], #1
 80084c0:	9b04      	ldr	r3, [sp, #16]
 80084c2:	3301      	adds	r3, #1
 80084c4:	9304      	str	r3, [sp, #16]
 80084c6:	e6ae      	b.n	8008226 <_dtoa_r+0x696>
 80084c8:	9c07      	ldr	r4, [sp, #28]
 80084ca:	9704      	str	r7, [sp, #16]
 80084cc:	4625      	mov	r5, r4
 80084ce:	e7f3      	b.n	80084b8 <_dtoa_r+0x928>
 80084d0:	9b07      	ldr	r3, [sp, #28]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 8104 	beq.w	80086e4 <_dtoa_r+0xb54>
 80084dc:	2e00      	cmp	r6, #0
 80084de:	dd05      	ble.n	80084ec <_dtoa_r+0x95c>
 80084e0:	4629      	mov	r1, r5
 80084e2:	4632      	mov	r2, r6
 80084e4:	4658      	mov	r0, fp
 80084e6:	f000 fc25 	bl	8008d34 <__lshift>
 80084ea:	4605      	mov	r5, r0
 80084ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d05a      	beq.n	80085a8 <_dtoa_r+0xa18>
 80084f2:	6869      	ldr	r1, [r5, #4]
 80084f4:	4658      	mov	r0, fp
 80084f6:	f000 fa0f 	bl	8008918 <_Balloc>
 80084fa:	4606      	mov	r6, r0
 80084fc:	b928      	cbnz	r0, 800850a <_dtoa_r+0x97a>
 80084fe:	4b84      	ldr	r3, [pc, #528]	@ (8008710 <_dtoa_r+0xb80>)
 8008500:	4602      	mov	r2, r0
 8008502:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008506:	f7ff bb5a 	b.w	8007bbe <_dtoa_r+0x2e>
 800850a:	692a      	ldr	r2, [r5, #16]
 800850c:	3202      	adds	r2, #2
 800850e:	0092      	lsls	r2, r2, #2
 8008510:	f105 010c 	add.w	r1, r5, #12
 8008514:	300c      	adds	r0, #12
 8008516:	f001 fb3d 	bl	8009b94 <memcpy>
 800851a:	2201      	movs	r2, #1
 800851c:	4631      	mov	r1, r6
 800851e:	4658      	mov	r0, fp
 8008520:	f000 fc08 	bl	8008d34 <__lshift>
 8008524:	f10a 0301 	add.w	r3, sl, #1
 8008528:	9307      	str	r3, [sp, #28]
 800852a:	9b00      	ldr	r3, [sp, #0]
 800852c:	4453      	add	r3, sl
 800852e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008530:	9b02      	ldr	r3, [sp, #8]
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	462f      	mov	r7, r5
 8008538:	930a      	str	r3, [sp, #40]	@ 0x28
 800853a:	4605      	mov	r5, r0
 800853c:	9b07      	ldr	r3, [sp, #28]
 800853e:	4621      	mov	r1, r4
 8008540:	3b01      	subs	r3, #1
 8008542:	4648      	mov	r0, r9
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	f7ff fa98 	bl	8007a7a <quorem>
 800854a:	4639      	mov	r1, r7
 800854c:	9002      	str	r0, [sp, #8]
 800854e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008552:	4648      	mov	r0, r9
 8008554:	f000 fc5a 	bl	8008e0c <__mcmp>
 8008558:	462a      	mov	r2, r5
 800855a:	9008      	str	r0, [sp, #32]
 800855c:	4621      	mov	r1, r4
 800855e:	4658      	mov	r0, fp
 8008560:	f000 fc70 	bl	8008e44 <__mdiff>
 8008564:	68c2      	ldr	r2, [r0, #12]
 8008566:	4606      	mov	r6, r0
 8008568:	bb02      	cbnz	r2, 80085ac <_dtoa_r+0xa1c>
 800856a:	4601      	mov	r1, r0
 800856c:	4648      	mov	r0, r9
 800856e:	f000 fc4d 	bl	8008e0c <__mcmp>
 8008572:	4602      	mov	r2, r0
 8008574:	4631      	mov	r1, r6
 8008576:	4658      	mov	r0, fp
 8008578:	920e      	str	r2, [sp, #56]	@ 0x38
 800857a:	f000 fa0d 	bl	8008998 <_Bfree>
 800857e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008580:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008582:	9e07      	ldr	r6, [sp, #28]
 8008584:	ea43 0102 	orr.w	r1, r3, r2
 8008588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800858a:	4319      	orrs	r1, r3
 800858c:	d110      	bne.n	80085b0 <_dtoa_r+0xa20>
 800858e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008592:	d029      	beq.n	80085e8 <_dtoa_r+0xa58>
 8008594:	9b08      	ldr	r3, [sp, #32]
 8008596:	2b00      	cmp	r3, #0
 8008598:	dd02      	ble.n	80085a0 <_dtoa_r+0xa10>
 800859a:	9b02      	ldr	r3, [sp, #8]
 800859c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80085a0:	9b00      	ldr	r3, [sp, #0]
 80085a2:	f883 8000 	strb.w	r8, [r3]
 80085a6:	e63f      	b.n	8008228 <_dtoa_r+0x698>
 80085a8:	4628      	mov	r0, r5
 80085aa:	e7bb      	b.n	8008524 <_dtoa_r+0x994>
 80085ac:	2201      	movs	r2, #1
 80085ae:	e7e1      	b.n	8008574 <_dtoa_r+0x9e4>
 80085b0:	9b08      	ldr	r3, [sp, #32]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	db04      	blt.n	80085c0 <_dtoa_r+0xa30>
 80085b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085b8:	430b      	orrs	r3, r1
 80085ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80085bc:	430b      	orrs	r3, r1
 80085be:	d120      	bne.n	8008602 <_dtoa_r+0xa72>
 80085c0:	2a00      	cmp	r2, #0
 80085c2:	dded      	ble.n	80085a0 <_dtoa_r+0xa10>
 80085c4:	4649      	mov	r1, r9
 80085c6:	2201      	movs	r2, #1
 80085c8:	4658      	mov	r0, fp
 80085ca:	f000 fbb3 	bl	8008d34 <__lshift>
 80085ce:	4621      	mov	r1, r4
 80085d0:	4681      	mov	r9, r0
 80085d2:	f000 fc1b 	bl	8008e0c <__mcmp>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	dc03      	bgt.n	80085e2 <_dtoa_r+0xa52>
 80085da:	d1e1      	bne.n	80085a0 <_dtoa_r+0xa10>
 80085dc:	f018 0f01 	tst.w	r8, #1
 80085e0:	d0de      	beq.n	80085a0 <_dtoa_r+0xa10>
 80085e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085e6:	d1d8      	bne.n	800859a <_dtoa_r+0xa0a>
 80085e8:	9a00      	ldr	r2, [sp, #0]
 80085ea:	2339      	movs	r3, #57	@ 0x39
 80085ec:	7013      	strb	r3, [r2, #0]
 80085ee:	4633      	mov	r3, r6
 80085f0:	461e      	mov	r6, r3
 80085f2:	3b01      	subs	r3, #1
 80085f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80085f8:	2a39      	cmp	r2, #57	@ 0x39
 80085fa:	d052      	beq.n	80086a2 <_dtoa_r+0xb12>
 80085fc:	3201      	adds	r2, #1
 80085fe:	701a      	strb	r2, [r3, #0]
 8008600:	e612      	b.n	8008228 <_dtoa_r+0x698>
 8008602:	2a00      	cmp	r2, #0
 8008604:	dd07      	ble.n	8008616 <_dtoa_r+0xa86>
 8008606:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800860a:	d0ed      	beq.n	80085e8 <_dtoa_r+0xa58>
 800860c:	9a00      	ldr	r2, [sp, #0]
 800860e:	f108 0301 	add.w	r3, r8, #1
 8008612:	7013      	strb	r3, [r2, #0]
 8008614:	e608      	b.n	8008228 <_dtoa_r+0x698>
 8008616:	9b07      	ldr	r3, [sp, #28]
 8008618:	9a07      	ldr	r2, [sp, #28]
 800861a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800861e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008620:	4293      	cmp	r3, r2
 8008622:	d028      	beq.n	8008676 <_dtoa_r+0xae6>
 8008624:	4649      	mov	r1, r9
 8008626:	2300      	movs	r3, #0
 8008628:	220a      	movs	r2, #10
 800862a:	4658      	mov	r0, fp
 800862c:	f000 f9d6 	bl	80089dc <__multadd>
 8008630:	42af      	cmp	r7, r5
 8008632:	4681      	mov	r9, r0
 8008634:	f04f 0300 	mov.w	r3, #0
 8008638:	f04f 020a 	mov.w	r2, #10
 800863c:	4639      	mov	r1, r7
 800863e:	4658      	mov	r0, fp
 8008640:	d107      	bne.n	8008652 <_dtoa_r+0xac2>
 8008642:	f000 f9cb 	bl	80089dc <__multadd>
 8008646:	4607      	mov	r7, r0
 8008648:	4605      	mov	r5, r0
 800864a:	9b07      	ldr	r3, [sp, #28]
 800864c:	3301      	adds	r3, #1
 800864e:	9307      	str	r3, [sp, #28]
 8008650:	e774      	b.n	800853c <_dtoa_r+0x9ac>
 8008652:	f000 f9c3 	bl	80089dc <__multadd>
 8008656:	4629      	mov	r1, r5
 8008658:	4607      	mov	r7, r0
 800865a:	2300      	movs	r3, #0
 800865c:	220a      	movs	r2, #10
 800865e:	4658      	mov	r0, fp
 8008660:	f000 f9bc 	bl	80089dc <__multadd>
 8008664:	4605      	mov	r5, r0
 8008666:	e7f0      	b.n	800864a <_dtoa_r+0xaba>
 8008668:	9b00      	ldr	r3, [sp, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	bfcc      	ite	gt
 800866e:	461e      	movgt	r6, r3
 8008670:	2601      	movle	r6, #1
 8008672:	4456      	add	r6, sl
 8008674:	2700      	movs	r7, #0
 8008676:	4649      	mov	r1, r9
 8008678:	2201      	movs	r2, #1
 800867a:	4658      	mov	r0, fp
 800867c:	f000 fb5a 	bl	8008d34 <__lshift>
 8008680:	4621      	mov	r1, r4
 8008682:	4681      	mov	r9, r0
 8008684:	f000 fbc2 	bl	8008e0c <__mcmp>
 8008688:	2800      	cmp	r0, #0
 800868a:	dcb0      	bgt.n	80085ee <_dtoa_r+0xa5e>
 800868c:	d102      	bne.n	8008694 <_dtoa_r+0xb04>
 800868e:	f018 0f01 	tst.w	r8, #1
 8008692:	d1ac      	bne.n	80085ee <_dtoa_r+0xa5e>
 8008694:	4633      	mov	r3, r6
 8008696:	461e      	mov	r6, r3
 8008698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800869c:	2a30      	cmp	r2, #48	@ 0x30
 800869e:	d0fa      	beq.n	8008696 <_dtoa_r+0xb06>
 80086a0:	e5c2      	b.n	8008228 <_dtoa_r+0x698>
 80086a2:	459a      	cmp	sl, r3
 80086a4:	d1a4      	bne.n	80085f0 <_dtoa_r+0xa60>
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	3301      	adds	r3, #1
 80086aa:	9304      	str	r3, [sp, #16]
 80086ac:	2331      	movs	r3, #49	@ 0x31
 80086ae:	f88a 3000 	strb.w	r3, [sl]
 80086b2:	e5b9      	b.n	8008228 <_dtoa_r+0x698>
 80086b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008714 <_dtoa_r+0xb84>
 80086ba:	b11b      	cbz	r3, 80086c4 <_dtoa_r+0xb34>
 80086bc:	f10a 0308 	add.w	r3, sl, #8
 80086c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	4650      	mov	r0, sl
 80086c6:	b019      	add	sp, #100	@ 0x64
 80086c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	f77f ae37 	ble.w	8008342 <_dtoa_r+0x7b2>
 80086d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80086d8:	2001      	movs	r0, #1
 80086da:	e655      	b.n	8008388 <_dtoa_r+0x7f8>
 80086dc:	9b00      	ldr	r3, [sp, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f77f aed6 	ble.w	8008490 <_dtoa_r+0x900>
 80086e4:	4656      	mov	r6, sl
 80086e6:	4621      	mov	r1, r4
 80086e8:	4648      	mov	r0, r9
 80086ea:	f7ff f9c6 	bl	8007a7a <quorem>
 80086ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80086f2:	f806 8b01 	strb.w	r8, [r6], #1
 80086f6:	9b00      	ldr	r3, [sp, #0]
 80086f8:	eba6 020a 	sub.w	r2, r6, sl
 80086fc:	4293      	cmp	r3, r2
 80086fe:	ddb3      	ble.n	8008668 <_dtoa_r+0xad8>
 8008700:	4649      	mov	r1, r9
 8008702:	2300      	movs	r3, #0
 8008704:	220a      	movs	r2, #10
 8008706:	4658      	mov	r0, fp
 8008708:	f000 f968 	bl	80089dc <__multadd>
 800870c:	4681      	mov	r9, r0
 800870e:	e7ea      	b.n	80086e6 <_dtoa_r+0xb56>
 8008710:	0800a80e 	.word	0x0800a80e
 8008714:	0800a792 	.word	0x0800a792

08008718 <_free_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4605      	mov	r5, r0
 800871c:	2900      	cmp	r1, #0
 800871e:	d041      	beq.n	80087a4 <_free_r+0x8c>
 8008720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008724:	1f0c      	subs	r4, r1, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	bfb8      	it	lt
 800872a:	18e4      	addlt	r4, r4, r3
 800872c:	f000 f8e8 	bl	8008900 <__malloc_lock>
 8008730:	4a1d      	ldr	r2, [pc, #116]	@ (80087a8 <_free_r+0x90>)
 8008732:	6813      	ldr	r3, [r2, #0]
 8008734:	b933      	cbnz	r3, 8008744 <_free_r+0x2c>
 8008736:	6063      	str	r3, [r4, #4]
 8008738:	6014      	str	r4, [r2, #0]
 800873a:	4628      	mov	r0, r5
 800873c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008740:	f000 b8e4 	b.w	800890c <__malloc_unlock>
 8008744:	42a3      	cmp	r3, r4
 8008746:	d908      	bls.n	800875a <_free_r+0x42>
 8008748:	6820      	ldr	r0, [r4, #0]
 800874a:	1821      	adds	r1, r4, r0
 800874c:	428b      	cmp	r3, r1
 800874e:	bf01      	itttt	eq
 8008750:	6819      	ldreq	r1, [r3, #0]
 8008752:	685b      	ldreq	r3, [r3, #4]
 8008754:	1809      	addeq	r1, r1, r0
 8008756:	6021      	streq	r1, [r4, #0]
 8008758:	e7ed      	b.n	8008736 <_free_r+0x1e>
 800875a:	461a      	mov	r2, r3
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	b10b      	cbz	r3, 8008764 <_free_r+0x4c>
 8008760:	42a3      	cmp	r3, r4
 8008762:	d9fa      	bls.n	800875a <_free_r+0x42>
 8008764:	6811      	ldr	r1, [r2, #0]
 8008766:	1850      	adds	r0, r2, r1
 8008768:	42a0      	cmp	r0, r4
 800876a:	d10b      	bne.n	8008784 <_free_r+0x6c>
 800876c:	6820      	ldr	r0, [r4, #0]
 800876e:	4401      	add	r1, r0
 8008770:	1850      	adds	r0, r2, r1
 8008772:	4283      	cmp	r3, r0
 8008774:	6011      	str	r1, [r2, #0]
 8008776:	d1e0      	bne.n	800873a <_free_r+0x22>
 8008778:	6818      	ldr	r0, [r3, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	6053      	str	r3, [r2, #4]
 800877e:	4408      	add	r0, r1
 8008780:	6010      	str	r0, [r2, #0]
 8008782:	e7da      	b.n	800873a <_free_r+0x22>
 8008784:	d902      	bls.n	800878c <_free_r+0x74>
 8008786:	230c      	movs	r3, #12
 8008788:	602b      	str	r3, [r5, #0]
 800878a:	e7d6      	b.n	800873a <_free_r+0x22>
 800878c:	6820      	ldr	r0, [r4, #0]
 800878e:	1821      	adds	r1, r4, r0
 8008790:	428b      	cmp	r3, r1
 8008792:	bf04      	itt	eq
 8008794:	6819      	ldreq	r1, [r3, #0]
 8008796:	685b      	ldreq	r3, [r3, #4]
 8008798:	6063      	str	r3, [r4, #4]
 800879a:	bf04      	itt	eq
 800879c:	1809      	addeq	r1, r1, r0
 800879e:	6021      	streq	r1, [r4, #0]
 80087a0:	6054      	str	r4, [r2, #4]
 80087a2:	e7ca      	b.n	800873a <_free_r+0x22>
 80087a4:	bd38      	pop	{r3, r4, r5, pc}
 80087a6:	bf00      	nop
 80087a8:	20000a0c 	.word	0x20000a0c

080087ac <malloc>:
 80087ac:	4b02      	ldr	r3, [pc, #8]	@ (80087b8 <malloc+0xc>)
 80087ae:	4601      	mov	r1, r0
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	f000 b825 	b.w	8008800 <_malloc_r>
 80087b6:	bf00      	nop
 80087b8:	20000048 	.word	0x20000048

080087bc <sbrk_aligned>:
 80087bc:	b570      	push	{r4, r5, r6, lr}
 80087be:	4e0f      	ldr	r6, [pc, #60]	@ (80087fc <sbrk_aligned+0x40>)
 80087c0:	460c      	mov	r4, r1
 80087c2:	6831      	ldr	r1, [r6, #0]
 80087c4:	4605      	mov	r5, r0
 80087c6:	b911      	cbnz	r1, 80087ce <sbrk_aligned+0x12>
 80087c8:	f001 f9d4 	bl	8009b74 <_sbrk_r>
 80087cc:	6030      	str	r0, [r6, #0]
 80087ce:	4621      	mov	r1, r4
 80087d0:	4628      	mov	r0, r5
 80087d2:	f001 f9cf 	bl	8009b74 <_sbrk_r>
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	d103      	bne.n	80087e2 <sbrk_aligned+0x26>
 80087da:	f04f 34ff 	mov.w	r4, #4294967295
 80087de:	4620      	mov	r0, r4
 80087e0:	bd70      	pop	{r4, r5, r6, pc}
 80087e2:	1cc4      	adds	r4, r0, #3
 80087e4:	f024 0403 	bic.w	r4, r4, #3
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d0f8      	beq.n	80087de <sbrk_aligned+0x22>
 80087ec:	1a21      	subs	r1, r4, r0
 80087ee:	4628      	mov	r0, r5
 80087f0:	f001 f9c0 	bl	8009b74 <_sbrk_r>
 80087f4:	3001      	adds	r0, #1
 80087f6:	d1f2      	bne.n	80087de <sbrk_aligned+0x22>
 80087f8:	e7ef      	b.n	80087da <sbrk_aligned+0x1e>
 80087fa:	bf00      	nop
 80087fc:	20000a08 	.word	0x20000a08

08008800 <_malloc_r>:
 8008800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008804:	1ccd      	adds	r5, r1, #3
 8008806:	f025 0503 	bic.w	r5, r5, #3
 800880a:	3508      	adds	r5, #8
 800880c:	2d0c      	cmp	r5, #12
 800880e:	bf38      	it	cc
 8008810:	250c      	movcc	r5, #12
 8008812:	2d00      	cmp	r5, #0
 8008814:	4606      	mov	r6, r0
 8008816:	db01      	blt.n	800881c <_malloc_r+0x1c>
 8008818:	42a9      	cmp	r1, r5
 800881a:	d904      	bls.n	8008826 <_malloc_r+0x26>
 800881c:	230c      	movs	r3, #12
 800881e:	6033      	str	r3, [r6, #0]
 8008820:	2000      	movs	r0, #0
 8008822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80088fc <_malloc_r+0xfc>
 800882a:	f000 f869 	bl	8008900 <__malloc_lock>
 800882e:	f8d8 3000 	ldr.w	r3, [r8]
 8008832:	461c      	mov	r4, r3
 8008834:	bb44      	cbnz	r4, 8008888 <_malloc_r+0x88>
 8008836:	4629      	mov	r1, r5
 8008838:	4630      	mov	r0, r6
 800883a:	f7ff ffbf 	bl	80087bc <sbrk_aligned>
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	4604      	mov	r4, r0
 8008842:	d158      	bne.n	80088f6 <_malloc_r+0xf6>
 8008844:	f8d8 4000 	ldr.w	r4, [r8]
 8008848:	4627      	mov	r7, r4
 800884a:	2f00      	cmp	r7, #0
 800884c:	d143      	bne.n	80088d6 <_malloc_r+0xd6>
 800884e:	2c00      	cmp	r4, #0
 8008850:	d04b      	beq.n	80088ea <_malloc_r+0xea>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	4639      	mov	r1, r7
 8008856:	4630      	mov	r0, r6
 8008858:	eb04 0903 	add.w	r9, r4, r3
 800885c:	f001 f98a 	bl	8009b74 <_sbrk_r>
 8008860:	4581      	cmp	r9, r0
 8008862:	d142      	bne.n	80088ea <_malloc_r+0xea>
 8008864:	6821      	ldr	r1, [r4, #0]
 8008866:	1a6d      	subs	r5, r5, r1
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f7ff ffa6 	bl	80087bc <sbrk_aligned>
 8008870:	3001      	adds	r0, #1
 8008872:	d03a      	beq.n	80088ea <_malloc_r+0xea>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	442b      	add	r3, r5
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	f8d8 3000 	ldr.w	r3, [r8]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	bb62      	cbnz	r2, 80088dc <_malloc_r+0xdc>
 8008882:	f8c8 7000 	str.w	r7, [r8]
 8008886:	e00f      	b.n	80088a8 <_malloc_r+0xa8>
 8008888:	6822      	ldr	r2, [r4, #0]
 800888a:	1b52      	subs	r2, r2, r5
 800888c:	d420      	bmi.n	80088d0 <_malloc_r+0xd0>
 800888e:	2a0b      	cmp	r2, #11
 8008890:	d917      	bls.n	80088c2 <_malloc_r+0xc2>
 8008892:	1961      	adds	r1, r4, r5
 8008894:	42a3      	cmp	r3, r4
 8008896:	6025      	str	r5, [r4, #0]
 8008898:	bf18      	it	ne
 800889a:	6059      	strne	r1, [r3, #4]
 800889c:	6863      	ldr	r3, [r4, #4]
 800889e:	bf08      	it	eq
 80088a0:	f8c8 1000 	streq.w	r1, [r8]
 80088a4:	5162      	str	r2, [r4, r5]
 80088a6:	604b      	str	r3, [r1, #4]
 80088a8:	4630      	mov	r0, r6
 80088aa:	f000 f82f 	bl	800890c <__malloc_unlock>
 80088ae:	f104 000b 	add.w	r0, r4, #11
 80088b2:	1d23      	adds	r3, r4, #4
 80088b4:	f020 0007 	bic.w	r0, r0, #7
 80088b8:	1ac2      	subs	r2, r0, r3
 80088ba:	bf1c      	itt	ne
 80088bc:	1a1b      	subne	r3, r3, r0
 80088be:	50a3      	strne	r3, [r4, r2]
 80088c0:	e7af      	b.n	8008822 <_malloc_r+0x22>
 80088c2:	6862      	ldr	r2, [r4, #4]
 80088c4:	42a3      	cmp	r3, r4
 80088c6:	bf0c      	ite	eq
 80088c8:	f8c8 2000 	streq.w	r2, [r8]
 80088cc:	605a      	strne	r2, [r3, #4]
 80088ce:	e7eb      	b.n	80088a8 <_malloc_r+0xa8>
 80088d0:	4623      	mov	r3, r4
 80088d2:	6864      	ldr	r4, [r4, #4]
 80088d4:	e7ae      	b.n	8008834 <_malloc_r+0x34>
 80088d6:	463c      	mov	r4, r7
 80088d8:	687f      	ldr	r7, [r7, #4]
 80088da:	e7b6      	b.n	800884a <_malloc_r+0x4a>
 80088dc:	461a      	mov	r2, r3
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	42a3      	cmp	r3, r4
 80088e2:	d1fb      	bne.n	80088dc <_malloc_r+0xdc>
 80088e4:	2300      	movs	r3, #0
 80088e6:	6053      	str	r3, [r2, #4]
 80088e8:	e7de      	b.n	80088a8 <_malloc_r+0xa8>
 80088ea:	230c      	movs	r3, #12
 80088ec:	6033      	str	r3, [r6, #0]
 80088ee:	4630      	mov	r0, r6
 80088f0:	f000 f80c 	bl	800890c <__malloc_unlock>
 80088f4:	e794      	b.n	8008820 <_malloc_r+0x20>
 80088f6:	6005      	str	r5, [r0, #0]
 80088f8:	e7d6      	b.n	80088a8 <_malloc_r+0xa8>
 80088fa:	bf00      	nop
 80088fc:	20000a0c 	.word	0x20000a0c

08008900 <__malloc_lock>:
 8008900:	4801      	ldr	r0, [pc, #4]	@ (8008908 <__malloc_lock+0x8>)
 8008902:	f7ff b8b8 	b.w	8007a76 <__retarget_lock_acquire_recursive>
 8008906:	bf00      	nop
 8008908:	20000a04 	.word	0x20000a04

0800890c <__malloc_unlock>:
 800890c:	4801      	ldr	r0, [pc, #4]	@ (8008914 <__malloc_unlock+0x8>)
 800890e:	f7ff b8b3 	b.w	8007a78 <__retarget_lock_release_recursive>
 8008912:	bf00      	nop
 8008914:	20000a04 	.word	0x20000a04

08008918 <_Balloc>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	69c6      	ldr	r6, [r0, #28]
 800891c:	4604      	mov	r4, r0
 800891e:	460d      	mov	r5, r1
 8008920:	b976      	cbnz	r6, 8008940 <_Balloc+0x28>
 8008922:	2010      	movs	r0, #16
 8008924:	f7ff ff42 	bl	80087ac <malloc>
 8008928:	4602      	mov	r2, r0
 800892a:	61e0      	str	r0, [r4, #28]
 800892c:	b920      	cbnz	r0, 8008938 <_Balloc+0x20>
 800892e:	4b18      	ldr	r3, [pc, #96]	@ (8008990 <_Balloc+0x78>)
 8008930:	4818      	ldr	r0, [pc, #96]	@ (8008994 <_Balloc+0x7c>)
 8008932:	216b      	movs	r1, #107	@ 0x6b
 8008934:	f001 f93c 	bl	8009bb0 <__assert_func>
 8008938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800893c:	6006      	str	r6, [r0, #0]
 800893e:	60c6      	str	r6, [r0, #12]
 8008940:	69e6      	ldr	r6, [r4, #28]
 8008942:	68f3      	ldr	r3, [r6, #12]
 8008944:	b183      	cbz	r3, 8008968 <_Balloc+0x50>
 8008946:	69e3      	ldr	r3, [r4, #28]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800894e:	b9b8      	cbnz	r0, 8008980 <_Balloc+0x68>
 8008950:	2101      	movs	r1, #1
 8008952:	fa01 f605 	lsl.w	r6, r1, r5
 8008956:	1d72      	adds	r2, r6, #5
 8008958:	0092      	lsls	r2, r2, #2
 800895a:	4620      	mov	r0, r4
 800895c:	f001 f946 	bl	8009bec <_calloc_r>
 8008960:	b160      	cbz	r0, 800897c <_Balloc+0x64>
 8008962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008966:	e00e      	b.n	8008986 <_Balloc+0x6e>
 8008968:	2221      	movs	r2, #33	@ 0x21
 800896a:	2104      	movs	r1, #4
 800896c:	4620      	mov	r0, r4
 800896e:	f001 f93d 	bl	8009bec <_calloc_r>
 8008972:	69e3      	ldr	r3, [r4, #28]
 8008974:	60f0      	str	r0, [r6, #12]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e4      	bne.n	8008946 <_Balloc+0x2e>
 800897c:	2000      	movs	r0, #0
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	6802      	ldr	r2, [r0, #0]
 8008982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008986:	2300      	movs	r3, #0
 8008988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800898c:	e7f7      	b.n	800897e <_Balloc+0x66>
 800898e:	bf00      	nop
 8008990:	0800a79f 	.word	0x0800a79f
 8008994:	0800a81f 	.word	0x0800a81f

08008998 <_Bfree>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	69c6      	ldr	r6, [r0, #28]
 800899c:	4605      	mov	r5, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	b976      	cbnz	r6, 80089c0 <_Bfree+0x28>
 80089a2:	2010      	movs	r0, #16
 80089a4:	f7ff ff02 	bl	80087ac <malloc>
 80089a8:	4602      	mov	r2, r0
 80089aa:	61e8      	str	r0, [r5, #28]
 80089ac:	b920      	cbnz	r0, 80089b8 <_Bfree+0x20>
 80089ae:	4b09      	ldr	r3, [pc, #36]	@ (80089d4 <_Bfree+0x3c>)
 80089b0:	4809      	ldr	r0, [pc, #36]	@ (80089d8 <_Bfree+0x40>)
 80089b2:	218f      	movs	r1, #143	@ 0x8f
 80089b4:	f001 f8fc 	bl	8009bb0 <__assert_func>
 80089b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089bc:	6006      	str	r6, [r0, #0]
 80089be:	60c6      	str	r6, [r0, #12]
 80089c0:	b13c      	cbz	r4, 80089d2 <_Bfree+0x3a>
 80089c2:	69eb      	ldr	r3, [r5, #28]
 80089c4:	6862      	ldr	r2, [r4, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089cc:	6021      	str	r1, [r4, #0]
 80089ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
 80089d4:	0800a79f 	.word	0x0800a79f
 80089d8:	0800a81f 	.word	0x0800a81f

080089dc <__multadd>:
 80089dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e0:	690d      	ldr	r5, [r1, #16]
 80089e2:	4607      	mov	r7, r0
 80089e4:	460c      	mov	r4, r1
 80089e6:	461e      	mov	r6, r3
 80089e8:	f101 0c14 	add.w	ip, r1, #20
 80089ec:	2000      	movs	r0, #0
 80089ee:	f8dc 3000 	ldr.w	r3, [ip]
 80089f2:	b299      	uxth	r1, r3
 80089f4:	fb02 6101 	mla	r1, r2, r1, r6
 80089f8:	0c1e      	lsrs	r6, r3, #16
 80089fa:	0c0b      	lsrs	r3, r1, #16
 80089fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008a00:	b289      	uxth	r1, r1
 8008a02:	3001      	adds	r0, #1
 8008a04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a08:	4285      	cmp	r5, r0
 8008a0a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a12:	dcec      	bgt.n	80089ee <__multadd+0x12>
 8008a14:	b30e      	cbz	r6, 8008a5a <__multadd+0x7e>
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	dc19      	bgt.n	8008a50 <__multadd+0x74>
 8008a1c:	6861      	ldr	r1, [r4, #4]
 8008a1e:	4638      	mov	r0, r7
 8008a20:	3101      	adds	r1, #1
 8008a22:	f7ff ff79 	bl	8008918 <_Balloc>
 8008a26:	4680      	mov	r8, r0
 8008a28:	b928      	cbnz	r0, 8008a36 <__multadd+0x5a>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008a60 <__multadd+0x84>)
 8008a2e:	480d      	ldr	r0, [pc, #52]	@ (8008a64 <__multadd+0x88>)
 8008a30:	21ba      	movs	r1, #186	@ 0xba
 8008a32:	f001 f8bd 	bl	8009bb0 <__assert_func>
 8008a36:	6922      	ldr	r2, [r4, #16]
 8008a38:	3202      	adds	r2, #2
 8008a3a:	f104 010c 	add.w	r1, r4, #12
 8008a3e:	0092      	lsls	r2, r2, #2
 8008a40:	300c      	adds	r0, #12
 8008a42:	f001 f8a7 	bl	8009b94 <memcpy>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7ff ffa5 	bl	8008998 <_Bfree>
 8008a4e:	4644      	mov	r4, r8
 8008a50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a54:	3501      	adds	r5, #1
 8008a56:	615e      	str	r6, [r3, #20]
 8008a58:	6125      	str	r5, [r4, #16]
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a60:	0800a80e 	.word	0x0800a80e
 8008a64:	0800a81f 	.word	0x0800a81f

08008a68 <__hi0bits>:
 8008a68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	bf36      	itet	cc
 8008a70:	0403      	lslcc	r3, r0, #16
 8008a72:	2000      	movcs	r0, #0
 8008a74:	2010      	movcc	r0, #16
 8008a76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a7a:	bf3c      	itt	cc
 8008a7c:	021b      	lslcc	r3, r3, #8
 8008a7e:	3008      	addcc	r0, #8
 8008a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a84:	bf3c      	itt	cc
 8008a86:	011b      	lslcc	r3, r3, #4
 8008a88:	3004      	addcc	r0, #4
 8008a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a8e:	bf3c      	itt	cc
 8008a90:	009b      	lslcc	r3, r3, #2
 8008a92:	3002      	addcc	r0, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	db05      	blt.n	8008aa4 <__hi0bits+0x3c>
 8008a98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a9c:	f100 0001 	add.w	r0, r0, #1
 8008aa0:	bf08      	it	eq
 8008aa2:	2020      	moveq	r0, #32
 8008aa4:	4770      	bx	lr

08008aa6 <__lo0bits>:
 8008aa6:	6803      	ldr	r3, [r0, #0]
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	f013 0007 	ands.w	r0, r3, #7
 8008aae:	d00b      	beq.n	8008ac8 <__lo0bits+0x22>
 8008ab0:	07d9      	lsls	r1, r3, #31
 8008ab2:	d421      	bmi.n	8008af8 <__lo0bits+0x52>
 8008ab4:	0798      	lsls	r0, r3, #30
 8008ab6:	bf49      	itett	mi
 8008ab8:	085b      	lsrmi	r3, r3, #1
 8008aba:	089b      	lsrpl	r3, r3, #2
 8008abc:	2001      	movmi	r0, #1
 8008abe:	6013      	strmi	r3, [r2, #0]
 8008ac0:	bf5c      	itt	pl
 8008ac2:	6013      	strpl	r3, [r2, #0]
 8008ac4:	2002      	movpl	r0, #2
 8008ac6:	4770      	bx	lr
 8008ac8:	b299      	uxth	r1, r3
 8008aca:	b909      	cbnz	r1, 8008ad0 <__lo0bits+0x2a>
 8008acc:	0c1b      	lsrs	r3, r3, #16
 8008ace:	2010      	movs	r0, #16
 8008ad0:	b2d9      	uxtb	r1, r3
 8008ad2:	b909      	cbnz	r1, 8008ad8 <__lo0bits+0x32>
 8008ad4:	3008      	adds	r0, #8
 8008ad6:	0a1b      	lsrs	r3, r3, #8
 8008ad8:	0719      	lsls	r1, r3, #28
 8008ada:	bf04      	itt	eq
 8008adc:	091b      	lsreq	r3, r3, #4
 8008ade:	3004      	addeq	r0, #4
 8008ae0:	0799      	lsls	r1, r3, #30
 8008ae2:	bf04      	itt	eq
 8008ae4:	089b      	lsreq	r3, r3, #2
 8008ae6:	3002      	addeq	r0, #2
 8008ae8:	07d9      	lsls	r1, r3, #31
 8008aea:	d403      	bmi.n	8008af4 <__lo0bits+0x4e>
 8008aec:	085b      	lsrs	r3, r3, #1
 8008aee:	f100 0001 	add.w	r0, r0, #1
 8008af2:	d003      	beq.n	8008afc <__lo0bits+0x56>
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	4770      	bx	lr
 8008af8:	2000      	movs	r0, #0
 8008afa:	4770      	bx	lr
 8008afc:	2020      	movs	r0, #32
 8008afe:	4770      	bx	lr

08008b00 <__i2b>:
 8008b00:	b510      	push	{r4, lr}
 8008b02:	460c      	mov	r4, r1
 8008b04:	2101      	movs	r1, #1
 8008b06:	f7ff ff07 	bl	8008918 <_Balloc>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	b928      	cbnz	r0, 8008b1a <__i2b+0x1a>
 8008b0e:	4b05      	ldr	r3, [pc, #20]	@ (8008b24 <__i2b+0x24>)
 8008b10:	4805      	ldr	r0, [pc, #20]	@ (8008b28 <__i2b+0x28>)
 8008b12:	f240 1145 	movw	r1, #325	@ 0x145
 8008b16:	f001 f84b 	bl	8009bb0 <__assert_func>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	6144      	str	r4, [r0, #20]
 8008b1e:	6103      	str	r3, [r0, #16]
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	bf00      	nop
 8008b24:	0800a80e 	.word	0x0800a80e
 8008b28:	0800a81f 	.word	0x0800a81f

08008b2c <__multiply>:
 8008b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b30:	4614      	mov	r4, r2
 8008b32:	690a      	ldr	r2, [r1, #16]
 8008b34:	6923      	ldr	r3, [r4, #16]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	bfa8      	it	ge
 8008b3a:	4623      	movge	r3, r4
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	bfa4      	itt	ge
 8008b40:	460c      	movge	r4, r1
 8008b42:	461f      	movge	r7, r3
 8008b44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b4c:	68a3      	ldr	r3, [r4, #8]
 8008b4e:	6861      	ldr	r1, [r4, #4]
 8008b50:	eb0a 0609 	add.w	r6, sl, r9
 8008b54:	42b3      	cmp	r3, r6
 8008b56:	b085      	sub	sp, #20
 8008b58:	bfb8      	it	lt
 8008b5a:	3101      	addlt	r1, #1
 8008b5c:	f7ff fedc 	bl	8008918 <_Balloc>
 8008b60:	b930      	cbnz	r0, 8008b70 <__multiply+0x44>
 8008b62:	4602      	mov	r2, r0
 8008b64:	4b44      	ldr	r3, [pc, #272]	@ (8008c78 <__multiply+0x14c>)
 8008b66:	4845      	ldr	r0, [pc, #276]	@ (8008c7c <__multiply+0x150>)
 8008b68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b6c:	f001 f820 	bl	8009bb0 <__assert_func>
 8008b70:	f100 0514 	add.w	r5, r0, #20
 8008b74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b78:	462b      	mov	r3, r5
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4543      	cmp	r3, r8
 8008b7e:	d321      	bcc.n	8008bc4 <__multiply+0x98>
 8008b80:	f107 0114 	add.w	r1, r7, #20
 8008b84:	f104 0214 	add.w	r2, r4, #20
 8008b88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b90:	9302      	str	r3, [sp, #8]
 8008b92:	1b13      	subs	r3, r2, r4
 8008b94:	3b15      	subs	r3, #21
 8008b96:	f023 0303 	bic.w	r3, r3, #3
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	f104 0715 	add.w	r7, r4, #21
 8008ba0:	42ba      	cmp	r2, r7
 8008ba2:	bf38      	it	cc
 8008ba4:	2304      	movcc	r3, #4
 8008ba6:	9301      	str	r3, [sp, #4]
 8008ba8:	9b02      	ldr	r3, [sp, #8]
 8008baa:	9103      	str	r1, [sp, #12]
 8008bac:	428b      	cmp	r3, r1
 8008bae:	d80c      	bhi.n	8008bca <__multiply+0x9e>
 8008bb0:	2e00      	cmp	r6, #0
 8008bb2:	dd03      	ble.n	8008bbc <__multiply+0x90>
 8008bb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d05b      	beq.n	8008c74 <__multiply+0x148>
 8008bbc:	6106      	str	r6, [r0, #16]
 8008bbe:	b005      	add	sp, #20
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	f843 2b04 	str.w	r2, [r3], #4
 8008bc8:	e7d8      	b.n	8008b7c <__multiply+0x50>
 8008bca:	f8b1 a000 	ldrh.w	sl, [r1]
 8008bce:	f1ba 0f00 	cmp.w	sl, #0
 8008bd2:	d024      	beq.n	8008c1e <__multiply+0xf2>
 8008bd4:	f104 0e14 	add.w	lr, r4, #20
 8008bd8:	46a9      	mov	r9, r5
 8008bda:	f04f 0c00 	mov.w	ip, #0
 8008bde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008be2:	f8d9 3000 	ldr.w	r3, [r9]
 8008be6:	fa1f fb87 	uxth.w	fp, r7
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	fb0a 330b 	mla	r3, sl, fp, r3
 8008bf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008bf4:	f8d9 7000 	ldr.w	r7, [r9]
 8008bf8:	4463      	add	r3, ip
 8008bfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bfe:	fb0a c70b 	mla	r7, sl, fp, ip
 8008c02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c0c:	4572      	cmp	r2, lr
 8008c0e:	f849 3b04 	str.w	r3, [r9], #4
 8008c12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008c16:	d8e2      	bhi.n	8008bde <__multiply+0xb2>
 8008c18:	9b01      	ldr	r3, [sp, #4]
 8008c1a:	f845 c003 	str.w	ip, [r5, r3]
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008c24:	3104      	adds	r1, #4
 8008c26:	f1b9 0f00 	cmp.w	r9, #0
 8008c2a:	d021      	beq.n	8008c70 <__multiply+0x144>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	f104 0c14 	add.w	ip, r4, #20
 8008c32:	46ae      	mov	lr, r5
 8008c34:	f04f 0a00 	mov.w	sl, #0
 8008c38:	f8bc b000 	ldrh.w	fp, [ip]
 8008c3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c40:	fb09 770b 	mla	r7, r9, fp, r7
 8008c44:	4457      	add	r7, sl
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c4c:	f84e 3b04 	str.w	r3, [lr], #4
 8008c50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c58:	f8be 3000 	ldrh.w	r3, [lr]
 8008c5c:	fb09 330a 	mla	r3, r9, sl, r3
 8008c60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c64:	4562      	cmp	r2, ip
 8008c66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c6a:	d8e5      	bhi.n	8008c38 <__multiply+0x10c>
 8008c6c:	9f01      	ldr	r7, [sp, #4]
 8008c6e:	51eb      	str	r3, [r5, r7]
 8008c70:	3504      	adds	r5, #4
 8008c72:	e799      	b.n	8008ba8 <__multiply+0x7c>
 8008c74:	3e01      	subs	r6, #1
 8008c76:	e79b      	b.n	8008bb0 <__multiply+0x84>
 8008c78:	0800a80e 	.word	0x0800a80e
 8008c7c:	0800a81f 	.word	0x0800a81f

08008c80 <__pow5mult>:
 8008c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c84:	4615      	mov	r5, r2
 8008c86:	f012 0203 	ands.w	r2, r2, #3
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	d007      	beq.n	8008ca0 <__pow5mult+0x20>
 8008c90:	4c25      	ldr	r4, [pc, #148]	@ (8008d28 <__pow5mult+0xa8>)
 8008c92:	3a01      	subs	r2, #1
 8008c94:	2300      	movs	r3, #0
 8008c96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c9a:	f7ff fe9f 	bl	80089dc <__multadd>
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	10ad      	asrs	r5, r5, #2
 8008ca2:	d03d      	beq.n	8008d20 <__pow5mult+0xa0>
 8008ca4:	69fc      	ldr	r4, [r7, #28]
 8008ca6:	b97c      	cbnz	r4, 8008cc8 <__pow5mult+0x48>
 8008ca8:	2010      	movs	r0, #16
 8008caa:	f7ff fd7f 	bl	80087ac <malloc>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	61f8      	str	r0, [r7, #28]
 8008cb2:	b928      	cbnz	r0, 8008cc0 <__pow5mult+0x40>
 8008cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d2c <__pow5mult+0xac>)
 8008cb6:	481e      	ldr	r0, [pc, #120]	@ (8008d30 <__pow5mult+0xb0>)
 8008cb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008cbc:	f000 ff78 	bl	8009bb0 <__assert_func>
 8008cc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cc4:	6004      	str	r4, [r0, #0]
 8008cc6:	60c4      	str	r4, [r0, #12]
 8008cc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008ccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cd0:	b94c      	cbnz	r4, 8008ce6 <__pow5mult+0x66>
 8008cd2:	f240 2171 	movw	r1, #625	@ 0x271
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f7ff ff12 	bl	8008b00 <__i2b>
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	6003      	str	r3, [r0, #0]
 8008ce6:	f04f 0900 	mov.w	r9, #0
 8008cea:	07eb      	lsls	r3, r5, #31
 8008cec:	d50a      	bpl.n	8008d04 <__pow5mult+0x84>
 8008cee:	4631      	mov	r1, r6
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	f7ff ff1a 	bl	8008b2c <__multiply>
 8008cf8:	4631      	mov	r1, r6
 8008cfa:	4680      	mov	r8, r0
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f7ff fe4b 	bl	8008998 <_Bfree>
 8008d02:	4646      	mov	r6, r8
 8008d04:	106d      	asrs	r5, r5, #1
 8008d06:	d00b      	beq.n	8008d20 <__pow5mult+0xa0>
 8008d08:	6820      	ldr	r0, [r4, #0]
 8008d0a:	b938      	cbnz	r0, 8008d1c <__pow5mult+0x9c>
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4638      	mov	r0, r7
 8008d12:	f7ff ff0b 	bl	8008b2c <__multiply>
 8008d16:	6020      	str	r0, [r4, #0]
 8008d18:	f8c0 9000 	str.w	r9, [r0]
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	e7e4      	b.n	8008cea <__pow5mult+0x6a>
 8008d20:	4630      	mov	r0, r6
 8008d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d26:	bf00      	nop
 8008d28:	0800a878 	.word	0x0800a878
 8008d2c:	0800a79f 	.word	0x0800a79f
 8008d30:	0800a81f 	.word	0x0800a81f

08008d34 <__lshift>:
 8008d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d38:	460c      	mov	r4, r1
 8008d3a:	6849      	ldr	r1, [r1, #4]
 8008d3c:	6923      	ldr	r3, [r4, #16]
 8008d3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	4607      	mov	r7, r0
 8008d46:	4691      	mov	r9, r2
 8008d48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d4c:	f108 0601 	add.w	r6, r8, #1
 8008d50:	42b3      	cmp	r3, r6
 8008d52:	db0b      	blt.n	8008d6c <__lshift+0x38>
 8008d54:	4638      	mov	r0, r7
 8008d56:	f7ff fddf 	bl	8008918 <_Balloc>
 8008d5a:	4605      	mov	r5, r0
 8008d5c:	b948      	cbnz	r0, 8008d72 <__lshift+0x3e>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4b28      	ldr	r3, [pc, #160]	@ (8008e04 <__lshift+0xd0>)
 8008d62:	4829      	ldr	r0, [pc, #164]	@ (8008e08 <__lshift+0xd4>)
 8008d64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d68:	f000 ff22 	bl	8009bb0 <__assert_func>
 8008d6c:	3101      	adds	r1, #1
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	e7ee      	b.n	8008d50 <__lshift+0x1c>
 8008d72:	2300      	movs	r3, #0
 8008d74:	f100 0114 	add.w	r1, r0, #20
 8008d78:	f100 0210 	add.w	r2, r0, #16
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	4553      	cmp	r3, sl
 8008d80:	db33      	blt.n	8008dea <__lshift+0xb6>
 8008d82:	6920      	ldr	r0, [r4, #16]
 8008d84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d88:	f104 0314 	add.w	r3, r4, #20
 8008d8c:	f019 091f 	ands.w	r9, r9, #31
 8008d90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d98:	d02b      	beq.n	8008df2 <__lshift+0xbe>
 8008d9a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d9e:	468a      	mov	sl, r1
 8008da0:	2200      	movs	r2, #0
 8008da2:	6818      	ldr	r0, [r3, #0]
 8008da4:	fa00 f009 	lsl.w	r0, r0, r9
 8008da8:	4310      	orrs	r0, r2
 8008daa:	f84a 0b04 	str.w	r0, [sl], #4
 8008dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db2:	459c      	cmp	ip, r3
 8008db4:	fa22 f20e 	lsr.w	r2, r2, lr
 8008db8:	d8f3      	bhi.n	8008da2 <__lshift+0x6e>
 8008dba:	ebac 0304 	sub.w	r3, ip, r4
 8008dbe:	3b15      	subs	r3, #21
 8008dc0:	f023 0303 	bic.w	r3, r3, #3
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	f104 0015 	add.w	r0, r4, #21
 8008dca:	4584      	cmp	ip, r0
 8008dcc:	bf38      	it	cc
 8008dce:	2304      	movcc	r3, #4
 8008dd0:	50ca      	str	r2, [r1, r3]
 8008dd2:	b10a      	cbz	r2, 8008dd8 <__lshift+0xa4>
 8008dd4:	f108 0602 	add.w	r6, r8, #2
 8008dd8:	3e01      	subs	r6, #1
 8008dda:	4638      	mov	r0, r7
 8008ddc:	612e      	str	r6, [r5, #16]
 8008dde:	4621      	mov	r1, r4
 8008de0:	f7ff fdda 	bl	8008998 <_Bfree>
 8008de4:	4628      	mov	r0, r5
 8008de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dea:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dee:	3301      	adds	r3, #1
 8008df0:	e7c5      	b.n	8008d7e <__lshift+0x4a>
 8008df2:	3904      	subs	r1, #4
 8008df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dfc:	459c      	cmp	ip, r3
 8008dfe:	d8f9      	bhi.n	8008df4 <__lshift+0xc0>
 8008e00:	e7ea      	b.n	8008dd8 <__lshift+0xa4>
 8008e02:	bf00      	nop
 8008e04:	0800a80e 	.word	0x0800a80e
 8008e08:	0800a81f 	.word	0x0800a81f

08008e0c <__mcmp>:
 8008e0c:	690a      	ldr	r2, [r1, #16]
 8008e0e:	4603      	mov	r3, r0
 8008e10:	6900      	ldr	r0, [r0, #16]
 8008e12:	1a80      	subs	r0, r0, r2
 8008e14:	b530      	push	{r4, r5, lr}
 8008e16:	d10e      	bne.n	8008e36 <__mcmp+0x2a>
 8008e18:	3314      	adds	r3, #20
 8008e1a:	3114      	adds	r1, #20
 8008e1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e2c:	4295      	cmp	r5, r2
 8008e2e:	d003      	beq.n	8008e38 <__mcmp+0x2c>
 8008e30:	d205      	bcs.n	8008e3e <__mcmp+0x32>
 8008e32:	f04f 30ff 	mov.w	r0, #4294967295
 8008e36:	bd30      	pop	{r4, r5, pc}
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d3f3      	bcc.n	8008e24 <__mcmp+0x18>
 8008e3c:	e7fb      	b.n	8008e36 <__mcmp+0x2a>
 8008e3e:	2001      	movs	r0, #1
 8008e40:	e7f9      	b.n	8008e36 <__mcmp+0x2a>
	...

08008e44 <__mdiff>:
 8008e44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e48:	4689      	mov	r9, r1
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	4648      	mov	r0, r9
 8008e50:	4614      	mov	r4, r2
 8008e52:	f7ff ffdb 	bl	8008e0c <__mcmp>
 8008e56:	1e05      	subs	r5, r0, #0
 8008e58:	d112      	bne.n	8008e80 <__mdiff+0x3c>
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f7ff fd5b 	bl	8008918 <_Balloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	b928      	cbnz	r0, 8008e72 <__mdiff+0x2e>
 8008e66:	4b3f      	ldr	r3, [pc, #252]	@ (8008f64 <__mdiff+0x120>)
 8008e68:	f240 2137 	movw	r1, #567	@ 0x237
 8008e6c:	483e      	ldr	r0, [pc, #248]	@ (8008f68 <__mdiff+0x124>)
 8008e6e:	f000 fe9f 	bl	8009bb0 <__assert_func>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e78:	4610      	mov	r0, r2
 8008e7a:	b003      	add	sp, #12
 8008e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e80:	bfbc      	itt	lt
 8008e82:	464b      	movlt	r3, r9
 8008e84:	46a1      	movlt	r9, r4
 8008e86:	4630      	mov	r0, r6
 8008e88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e8c:	bfba      	itte	lt
 8008e8e:	461c      	movlt	r4, r3
 8008e90:	2501      	movlt	r5, #1
 8008e92:	2500      	movge	r5, #0
 8008e94:	f7ff fd40 	bl	8008918 <_Balloc>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	b918      	cbnz	r0, 8008ea4 <__mdiff+0x60>
 8008e9c:	4b31      	ldr	r3, [pc, #196]	@ (8008f64 <__mdiff+0x120>)
 8008e9e:	f240 2145 	movw	r1, #581	@ 0x245
 8008ea2:	e7e3      	b.n	8008e6c <__mdiff+0x28>
 8008ea4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ea8:	6926      	ldr	r6, [r4, #16]
 8008eaa:	60c5      	str	r5, [r0, #12]
 8008eac:	f109 0310 	add.w	r3, r9, #16
 8008eb0:	f109 0514 	add.w	r5, r9, #20
 8008eb4:	f104 0e14 	add.w	lr, r4, #20
 8008eb8:	f100 0b14 	add.w	fp, r0, #20
 8008ebc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ec0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	46d9      	mov	r9, fp
 8008ec8:	f04f 0c00 	mov.w	ip, #0
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ed2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	fa1f f38a 	uxth.w	r3, sl
 8008edc:	4619      	mov	r1, r3
 8008ede:	b283      	uxth	r3, r0
 8008ee0:	1acb      	subs	r3, r1, r3
 8008ee2:	0c00      	lsrs	r0, r0, #16
 8008ee4:	4463      	add	r3, ip
 8008ee6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008eea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ef4:	4576      	cmp	r6, lr
 8008ef6:	f849 3b04 	str.w	r3, [r9], #4
 8008efa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008efe:	d8e5      	bhi.n	8008ecc <__mdiff+0x88>
 8008f00:	1b33      	subs	r3, r6, r4
 8008f02:	3b15      	subs	r3, #21
 8008f04:	f023 0303 	bic.w	r3, r3, #3
 8008f08:	3415      	adds	r4, #21
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	42a6      	cmp	r6, r4
 8008f0e:	bf38      	it	cc
 8008f10:	2304      	movcc	r3, #4
 8008f12:	441d      	add	r5, r3
 8008f14:	445b      	add	r3, fp
 8008f16:	461e      	mov	r6, r3
 8008f18:	462c      	mov	r4, r5
 8008f1a:	4544      	cmp	r4, r8
 8008f1c:	d30e      	bcc.n	8008f3c <__mdiff+0xf8>
 8008f1e:	f108 0103 	add.w	r1, r8, #3
 8008f22:	1b49      	subs	r1, r1, r5
 8008f24:	f021 0103 	bic.w	r1, r1, #3
 8008f28:	3d03      	subs	r5, #3
 8008f2a:	45a8      	cmp	r8, r5
 8008f2c:	bf38      	it	cc
 8008f2e:	2100      	movcc	r1, #0
 8008f30:	440b      	add	r3, r1
 8008f32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f36:	b191      	cbz	r1, 8008f5e <__mdiff+0x11a>
 8008f38:	6117      	str	r7, [r2, #16]
 8008f3a:	e79d      	b.n	8008e78 <__mdiff+0x34>
 8008f3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f40:	46e6      	mov	lr, ip
 8008f42:	0c08      	lsrs	r0, r1, #16
 8008f44:	fa1c fc81 	uxtah	ip, ip, r1
 8008f48:	4471      	add	r1, lr
 8008f4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f4e:	b289      	uxth	r1, r1
 8008f50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f54:	f846 1b04 	str.w	r1, [r6], #4
 8008f58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f5c:	e7dd      	b.n	8008f1a <__mdiff+0xd6>
 8008f5e:	3f01      	subs	r7, #1
 8008f60:	e7e7      	b.n	8008f32 <__mdiff+0xee>
 8008f62:	bf00      	nop
 8008f64:	0800a80e 	.word	0x0800a80e
 8008f68:	0800a81f 	.word	0x0800a81f

08008f6c <__d2b>:
 8008f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f70:	460f      	mov	r7, r1
 8008f72:	2101      	movs	r1, #1
 8008f74:	ec59 8b10 	vmov	r8, r9, d0
 8008f78:	4616      	mov	r6, r2
 8008f7a:	f7ff fccd 	bl	8008918 <_Balloc>
 8008f7e:	4604      	mov	r4, r0
 8008f80:	b930      	cbnz	r0, 8008f90 <__d2b+0x24>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b23      	ldr	r3, [pc, #140]	@ (8009014 <__d2b+0xa8>)
 8008f86:	4824      	ldr	r0, [pc, #144]	@ (8009018 <__d2b+0xac>)
 8008f88:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f8c:	f000 fe10 	bl	8009bb0 <__assert_func>
 8008f90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f98:	b10d      	cbz	r5, 8008f9e <__d2b+0x32>
 8008f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8008fa4:	d023      	beq.n	8008fee <__d2b+0x82>
 8008fa6:	4668      	mov	r0, sp
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	f7ff fd7c 	bl	8008aa6 <__lo0bits>
 8008fae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fb2:	b1d0      	cbz	r0, 8008fea <__d2b+0x7e>
 8008fb4:	f1c0 0320 	rsb	r3, r0, #32
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	40c2      	lsrs	r2, r0
 8008fc0:	6163      	str	r3, [r4, #20]
 8008fc2:	9201      	str	r2, [sp, #4]
 8008fc4:	9b01      	ldr	r3, [sp, #4]
 8008fc6:	61a3      	str	r3, [r4, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	bf0c      	ite	eq
 8008fcc:	2201      	moveq	r2, #1
 8008fce:	2202      	movne	r2, #2
 8008fd0:	6122      	str	r2, [r4, #16]
 8008fd2:	b1a5      	cbz	r5, 8008ffe <__d2b+0x92>
 8008fd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fd8:	4405      	add	r5, r0
 8008fda:	603d      	str	r5, [r7, #0]
 8008fdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fe0:	6030      	str	r0, [r6, #0]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	b003      	add	sp, #12
 8008fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fea:	6161      	str	r1, [r4, #20]
 8008fec:	e7ea      	b.n	8008fc4 <__d2b+0x58>
 8008fee:	a801      	add	r0, sp, #4
 8008ff0:	f7ff fd59 	bl	8008aa6 <__lo0bits>
 8008ff4:	9b01      	ldr	r3, [sp, #4]
 8008ff6:	6163      	str	r3, [r4, #20]
 8008ff8:	3020      	adds	r0, #32
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	e7e8      	b.n	8008fd0 <__d2b+0x64>
 8008ffe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009002:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009006:	6038      	str	r0, [r7, #0]
 8009008:	6918      	ldr	r0, [r3, #16]
 800900a:	f7ff fd2d 	bl	8008a68 <__hi0bits>
 800900e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009012:	e7e5      	b.n	8008fe0 <__d2b+0x74>
 8009014:	0800a80e 	.word	0x0800a80e
 8009018:	0800a81f 	.word	0x0800a81f

0800901c <__ssputs_r>:
 800901c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009020:	688e      	ldr	r6, [r1, #8]
 8009022:	461f      	mov	r7, r3
 8009024:	42be      	cmp	r6, r7
 8009026:	680b      	ldr	r3, [r1, #0]
 8009028:	4682      	mov	sl, r0
 800902a:	460c      	mov	r4, r1
 800902c:	4690      	mov	r8, r2
 800902e:	d82d      	bhi.n	800908c <__ssputs_r+0x70>
 8009030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009038:	d026      	beq.n	8009088 <__ssputs_r+0x6c>
 800903a:	6965      	ldr	r5, [r4, #20]
 800903c:	6909      	ldr	r1, [r1, #16]
 800903e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009042:	eba3 0901 	sub.w	r9, r3, r1
 8009046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800904a:	1c7b      	adds	r3, r7, #1
 800904c:	444b      	add	r3, r9
 800904e:	106d      	asrs	r5, r5, #1
 8009050:	429d      	cmp	r5, r3
 8009052:	bf38      	it	cc
 8009054:	461d      	movcc	r5, r3
 8009056:	0553      	lsls	r3, r2, #21
 8009058:	d527      	bpl.n	80090aa <__ssputs_r+0x8e>
 800905a:	4629      	mov	r1, r5
 800905c:	f7ff fbd0 	bl	8008800 <_malloc_r>
 8009060:	4606      	mov	r6, r0
 8009062:	b360      	cbz	r0, 80090be <__ssputs_r+0xa2>
 8009064:	6921      	ldr	r1, [r4, #16]
 8009066:	464a      	mov	r2, r9
 8009068:	f000 fd94 	bl	8009b94 <memcpy>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	6126      	str	r6, [r4, #16]
 800907a:	6165      	str	r5, [r4, #20]
 800907c:	444e      	add	r6, r9
 800907e:	eba5 0509 	sub.w	r5, r5, r9
 8009082:	6026      	str	r6, [r4, #0]
 8009084:	60a5      	str	r5, [r4, #8]
 8009086:	463e      	mov	r6, r7
 8009088:	42be      	cmp	r6, r7
 800908a:	d900      	bls.n	800908e <__ssputs_r+0x72>
 800908c:	463e      	mov	r6, r7
 800908e:	6820      	ldr	r0, [r4, #0]
 8009090:	4632      	mov	r2, r6
 8009092:	4641      	mov	r1, r8
 8009094:	f000 fd53 	bl	8009b3e <memmove>
 8009098:	68a3      	ldr	r3, [r4, #8]
 800909a:	1b9b      	subs	r3, r3, r6
 800909c:	60a3      	str	r3, [r4, #8]
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	4433      	add	r3, r6
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	2000      	movs	r0, #0
 80090a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090aa:	462a      	mov	r2, r5
 80090ac:	f000 fdc4 	bl	8009c38 <_realloc_r>
 80090b0:	4606      	mov	r6, r0
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d1e0      	bne.n	8009078 <__ssputs_r+0x5c>
 80090b6:	6921      	ldr	r1, [r4, #16]
 80090b8:	4650      	mov	r0, sl
 80090ba:	f7ff fb2d 	bl	8008718 <_free_r>
 80090be:	230c      	movs	r3, #12
 80090c0:	f8ca 3000 	str.w	r3, [sl]
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090ca:	81a3      	strh	r3, [r4, #12]
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295
 80090d0:	e7e9      	b.n	80090a6 <__ssputs_r+0x8a>
	...

080090d4 <_svfiprintf_r>:
 80090d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d8:	4698      	mov	r8, r3
 80090da:	898b      	ldrh	r3, [r1, #12]
 80090dc:	061b      	lsls	r3, r3, #24
 80090de:	b09d      	sub	sp, #116	@ 0x74
 80090e0:	4607      	mov	r7, r0
 80090e2:	460d      	mov	r5, r1
 80090e4:	4614      	mov	r4, r2
 80090e6:	d510      	bpl.n	800910a <_svfiprintf_r+0x36>
 80090e8:	690b      	ldr	r3, [r1, #16]
 80090ea:	b973      	cbnz	r3, 800910a <_svfiprintf_r+0x36>
 80090ec:	2140      	movs	r1, #64	@ 0x40
 80090ee:	f7ff fb87 	bl	8008800 <_malloc_r>
 80090f2:	6028      	str	r0, [r5, #0]
 80090f4:	6128      	str	r0, [r5, #16]
 80090f6:	b930      	cbnz	r0, 8009106 <_svfiprintf_r+0x32>
 80090f8:	230c      	movs	r3, #12
 80090fa:	603b      	str	r3, [r7, #0]
 80090fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009100:	b01d      	add	sp, #116	@ 0x74
 8009102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009106:	2340      	movs	r3, #64	@ 0x40
 8009108:	616b      	str	r3, [r5, #20]
 800910a:	2300      	movs	r3, #0
 800910c:	9309      	str	r3, [sp, #36]	@ 0x24
 800910e:	2320      	movs	r3, #32
 8009110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009114:	f8cd 800c 	str.w	r8, [sp, #12]
 8009118:	2330      	movs	r3, #48	@ 0x30
 800911a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092b8 <_svfiprintf_r+0x1e4>
 800911e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009122:	f04f 0901 	mov.w	r9, #1
 8009126:	4623      	mov	r3, r4
 8009128:	469a      	mov	sl, r3
 800912a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800912e:	b10a      	cbz	r2, 8009134 <_svfiprintf_r+0x60>
 8009130:	2a25      	cmp	r2, #37	@ 0x25
 8009132:	d1f9      	bne.n	8009128 <_svfiprintf_r+0x54>
 8009134:	ebba 0b04 	subs.w	fp, sl, r4
 8009138:	d00b      	beq.n	8009152 <_svfiprintf_r+0x7e>
 800913a:	465b      	mov	r3, fp
 800913c:	4622      	mov	r2, r4
 800913e:	4629      	mov	r1, r5
 8009140:	4638      	mov	r0, r7
 8009142:	f7ff ff6b 	bl	800901c <__ssputs_r>
 8009146:	3001      	adds	r0, #1
 8009148:	f000 80a7 	beq.w	800929a <_svfiprintf_r+0x1c6>
 800914c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800914e:	445a      	add	r2, fp
 8009150:	9209      	str	r2, [sp, #36]	@ 0x24
 8009152:	f89a 3000 	ldrb.w	r3, [sl]
 8009156:	2b00      	cmp	r3, #0
 8009158:	f000 809f 	beq.w	800929a <_svfiprintf_r+0x1c6>
 800915c:	2300      	movs	r3, #0
 800915e:	f04f 32ff 	mov.w	r2, #4294967295
 8009162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009166:	f10a 0a01 	add.w	sl, sl, #1
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	9307      	str	r3, [sp, #28]
 800916e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009172:	931a      	str	r3, [sp, #104]	@ 0x68
 8009174:	4654      	mov	r4, sl
 8009176:	2205      	movs	r2, #5
 8009178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917c:	484e      	ldr	r0, [pc, #312]	@ (80092b8 <_svfiprintf_r+0x1e4>)
 800917e:	f7f7 f827 	bl	80001d0 <memchr>
 8009182:	9a04      	ldr	r2, [sp, #16]
 8009184:	b9d8      	cbnz	r0, 80091be <_svfiprintf_r+0xea>
 8009186:	06d0      	lsls	r0, r2, #27
 8009188:	bf44      	itt	mi
 800918a:	2320      	movmi	r3, #32
 800918c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009190:	0711      	lsls	r1, r2, #28
 8009192:	bf44      	itt	mi
 8009194:	232b      	movmi	r3, #43	@ 0x2b
 8009196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800919a:	f89a 3000 	ldrb.w	r3, [sl]
 800919e:	2b2a      	cmp	r3, #42	@ 0x2a
 80091a0:	d015      	beq.n	80091ce <_svfiprintf_r+0xfa>
 80091a2:	9a07      	ldr	r2, [sp, #28]
 80091a4:	4654      	mov	r4, sl
 80091a6:	2000      	movs	r0, #0
 80091a8:	f04f 0c0a 	mov.w	ip, #10
 80091ac:	4621      	mov	r1, r4
 80091ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091b2:	3b30      	subs	r3, #48	@ 0x30
 80091b4:	2b09      	cmp	r3, #9
 80091b6:	d94b      	bls.n	8009250 <_svfiprintf_r+0x17c>
 80091b8:	b1b0      	cbz	r0, 80091e8 <_svfiprintf_r+0x114>
 80091ba:	9207      	str	r2, [sp, #28]
 80091bc:	e014      	b.n	80091e8 <_svfiprintf_r+0x114>
 80091be:	eba0 0308 	sub.w	r3, r0, r8
 80091c2:	fa09 f303 	lsl.w	r3, r9, r3
 80091c6:	4313      	orrs	r3, r2
 80091c8:	9304      	str	r3, [sp, #16]
 80091ca:	46a2      	mov	sl, r4
 80091cc:	e7d2      	b.n	8009174 <_svfiprintf_r+0xa0>
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	1d19      	adds	r1, r3, #4
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	9103      	str	r1, [sp, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	bfbb      	ittet	lt
 80091da:	425b      	neglt	r3, r3
 80091dc:	f042 0202 	orrlt.w	r2, r2, #2
 80091e0:	9307      	strge	r3, [sp, #28]
 80091e2:	9307      	strlt	r3, [sp, #28]
 80091e4:	bfb8      	it	lt
 80091e6:	9204      	strlt	r2, [sp, #16]
 80091e8:	7823      	ldrb	r3, [r4, #0]
 80091ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80091ec:	d10a      	bne.n	8009204 <_svfiprintf_r+0x130>
 80091ee:	7863      	ldrb	r3, [r4, #1]
 80091f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80091f2:	d132      	bne.n	800925a <_svfiprintf_r+0x186>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	1d1a      	adds	r2, r3, #4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	9203      	str	r2, [sp, #12]
 80091fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009200:	3402      	adds	r4, #2
 8009202:	9305      	str	r3, [sp, #20]
 8009204:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092c8 <_svfiprintf_r+0x1f4>
 8009208:	7821      	ldrb	r1, [r4, #0]
 800920a:	2203      	movs	r2, #3
 800920c:	4650      	mov	r0, sl
 800920e:	f7f6 ffdf 	bl	80001d0 <memchr>
 8009212:	b138      	cbz	r0, 8009224 <_svfiprintf_r+0x150>
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	eba0 000a 	sub.w	r0, r0, sl
 800921a:	2240      	movs	r2, #64	@ 0x40
 800921c:	4082      	lsls	r2, r0
 800921e:	4313      	orrs	r3, r2
 8009220:	3401      	adds	r4, #1
 8009222:	9304      	str	r3, [sp, #16]
 8009224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009228:	4824      	ldr	r0, [pc, #144]	@ (80092bc <_svfiprintf_r+0x1e8>)
 800922a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800922e:	2206      	movs	r2, #6
 8009230:	f7f6 ffce 	bl	80001d0 <memchr>
 8009234:	2800      	cmp	r0, #0
 8009236:	d036      	beq.n	80092a6 <_svfiprintf_r+0x1d2>
 8009238:	4b21      	ldr	r3, [pc, #132]	@ (80092c0 <_svfiprintf_r+0x1ec>)
 800923a:	bb1b      	cbnz	r3, 8009284 <_svfiprintf_r+0x1b0>
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	3307      	adds	r3, #7
 8009240:	f023 0307 	bic.w	r3, r3, #7
 8009244:	3308      	adds	r3, #8
 8009246:	9303      	str	r3, [sp, #12]
 8009248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800924a:	4433      	add	r3, r6
 800924c:	9309      	str	r3, [sp, #36]	@ 0x24
 800924e:	e76a      	b.n	8009126 <_svfiprintf_r+0x52>
 8009250:	fb0c 3202 	mla	r2, ip, r2, r3
 8009254:	460c      	mov	r4, r1
 8009256:	2001      	movs	r0, #1
 8009258:	e7a8      	b.n	80091ac <_svfiprintf_r+0xd8>
 800925a:	2300      	movs	r3, #0
 800925c:	3401      	adds	r4, #1
 800925e:	9305      	str	r3, [sp, #20]
 8009260:	4619      	mov	r1, r3
 8009262:	f04f 0c0a 	mov.w	ip, #10
 8009266:	4620      	mov	r0, r4
 8009268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800926c:	3a30      	subs	r2, #48	@ 0x30
 800926e:	2a09      	cmp	r2, #9
 8009270:	d903      	bls.n	800927a <_svfiprintf_r+0x1a6>
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0c6      	beq.n	8009204 <_svfiprintf_r+0x130>
 8009276:	9105      	str	r1, [sp, #20]
 8009278:	e7c4      	b.n	8009204 <_svfiprintf_r+0x130>
 800927a:	fb0c 2101 	mla	r1, ip, r1, r2
 800927e:	4604      	mov	r4, r0
 8009280:	2301      	movs	r3, #1
 8009282:	e7f0      	b.n	8009266 <_svfiprintf_r+0x192>
 8009284:	ab03      	add	r3, sp, #12
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	462a      	mov	r2, r5
 800928a:	4b0e      	ldr	r3, [pc, #56]	@ (80092c4 <_svfiprintf_r+0x1f0>)
 800928c:	a904      	add	r1, sp, #16
 800928e:	4638      	mov	r0, r7
 8009290:	f7fd fdf8 	bl	8006e84 <_printf_float>
 8009294:	1c42      	adds	r2, r0, #1
 8009296:	4606      	mov	r6, r0
 8009298:	d1d6      	bne.n	8009248 <_svfiprintf_r+0x174>
 800929a:	89ab      	ldrh	r3, [r5, #12]
 800929c:	065b      	lsls	r3, r3, #25
 800929e:	f53f af2d 	bmi.w	80090fc <_svfiprintf_r+0x28>
 80092a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092a4:	e72c      	b.n	8009100 <_svfiprintf_r+0x2c>
 80092a6:	ab03      	add	r3, sp, #12
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	462a      	mov	r2, r5
 80092ac:	4b05      	ldr	r3, [pc, #20]	@ (80092c4 <_svfiprintf_r+0x1f0>)
 80092ae:	a904      	add	r1, sp, #16
 80092b0:	4638      	mov	r0, r7
 80092b2:	f7fe f87f 	bl	80073b4 <_printf_i>
 80092b6:	e7ed      	b.n	8009294 <_svfiprintf_r+0x1c0>
 80092b8:	0800a978 	.word	0x0800a978
 80092bc:	0800a982 	.word	0x0800a982
 80092c0:	08006e85 	.word	0x08006e85
 80092c4:	0800901d 	.word	0x0800901d
 80092c8:	0800a97e 	.word	0x0800a97e

080092cc <_sungetc_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	1c4b      	adds	r3, r1, #1
 80092d0:	4614      	mov	r4, r2
 80092d2:	d103      	bne.n	80092dc <_sungetc_r+0x10>
 80092d4:	f04f 35ff 	mov.w	r5, #4294967295
 80092d8:	4628      	mov	r0, r5
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	8993      	ldrh	r3, [r2, #12]
 80092de:	f023 0320 	bic.w	r3, r3, #32
 80092e2:	8193      	strh	r3, [r2, #12]
 80092e4:	6853      	ldr	r3, [r2, #4]
 80092e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80092e8:	b2cd      	uxtb	r5, r1
 80092ea:	b18a      	cbz	r2, 8009310 <_sungetc_r+0x44>
 80092ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80092ee:	429a      	cmp	r2, r3
 80092f0:	dd08      	ble.n	8009304 <_sungetc_r+0x38>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	1e5a      	subs	r2, r3, #1
 80092f6:	6022      	str	r2, [r4, #0]
 80092f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	3301      	adds	r3, #1
 8009300:	6063      	str	r3, [r4, #4]
 8009302:	e7e9      	b.n	80092d8 <_sungetc_r+0xc>
 8009304:	4621      	mov	r1, r4
 8009306:	f000 fbe0 	bl	8009aca <__submore>
 800930a:	2800      	cmp	r0, #0
 800930c:	d0f1      	beq.n	80092f2 <_sungetc_r+0x26>
 800930e:	e7e1      	b.n	80092d4 <_sungetc_r+0x8>
 8009310:	6921      	ldr	r1, [r4, #16]
 8009312:	6822      	ldr	r2, [r4, #0]
 8009314:	b141      	cbz	r1, 8009328 <_sungetc_r+0x5c>
 8009316:	4291      	cmp	r1, r2
 8009318:	d206      	bcs.n	8009328 <_sungetc_r+0x5c>
 800931a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800931e:	42a9      	cmp	r1, r5
 8009320:	d102      	bne.n	8009328 <_sungetc_r+0x5c>
 8009322:	3a01      	subs	r2, #1
 8009324:	6022      	str	r2, [r4, #0]
 8009326:	e7ea      	b.n	80092fe <_sungetc_r+0x32>
 8009328:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800932c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009330:	6363      	str	r3, [r4, #52]	@ 0x34
 8009332:	2303      	movs	r3, #3
 8009334:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009336:	4623      	mov	r3, r4
 8009338:	f803 5f46 	strb.w	r5, [r3, #70]!
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	2301      	movs	r3, #1
 8009340:	e7de      	b.n	8009300 <_sungetc_r+0x34>

08009342 <__ssrefill_r>:
 8009342:	b510      	push	{r4, lr}
 8009344:	460c      	mov	r4, r1
 8009346:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009348:	b169      	cbz	r1, 8009366 <__ssrefill_r+0x24>
 800934a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800934e:	4299      	cmp	r1, r3
 8009350:	d001      	beq.n	8009356 <__ssrefill_r+0x14>
 8009352:	f7ff f9e1 	bl	8008718 <_free_r>
 8009356:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009358:	6063      	str	r3, [r4, #4]
 800935a:	2000      	movs	r0, #0
 800935c:	6360      	str	r0, [r4, #52]	@ 0x34
 800935e:	b113      	cbz	r3, 8009366 <__ssrefill_r+0x24>
 8009360:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	bd10      	pop	{r4, pc}
 8009366:	6923      	ldr	r3, [r4, #16]
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	2300      	movs	r3, #0
 800936c:	6063      	str	r3, [r4, #4]
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	f043 0320 	orr.w	r3, r3, #32
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	f04f 30ff 	mov.w	r0, #4294967295
 800937a:	e7f3      	b.n	8009364 <__ssrefill_r+0x22>

0800937c <__ssvfiscanf_r>:
 800937c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009380:	460c      	mov	r4, r1
 8009382:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009386:	2100      	movs	r1, #0
 8009388:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800938c:	49a5      	ldr	r1, [pc, #660]	@ (8009624 <__ssvfiscanf_r+0x2a8>)
 800938e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009390:	f10d 0804 	add.w	r8, sp, #4
 8009394:	49a4      	ldr	r1, [pc, #656]	@ (8009628 <__ssvfiscanf_r+0x2ac>)
 8009396:	4fa5      	ldr	r7, [pc, #660]	@ (800962c <__ssvfiscanf_r+0x2b0>)
 8009398:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800939c:	4606      	mov	r6, r0
 800939e:	91a1      	str	r1, [sp, #644]	@ 0x284
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	7813      	ldrb	r3, [r2, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 8158 	beq.w	800965a <__ssvfiscanf_r+0x2de>
 80093aa:	5cf9      	ldrb	r1, [r7, r3]
 80093ac:	f011 0108 	ands.w	r1, r1, #8
 80093b0:	f102 0501 	add.w	r5, r2, #1
 80093b4:	d019      	beq.n	80093ea <__ssvfiscanf_r+0x6e>
 80093b6:	6863      	ldr	r3, [r4, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	dd0f      	ble.n	80093dc <__ssvfiscanf_r+0x60>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	5cba      	ldrb	r2, [r7, r2]
 80093c2:	0712      	lsls	r2, r2, #28
 80093c4:	d401      	bmi.n	80093ca <__ssvfiscanf_r+0x4e>
 80093c6:	462a      	mov	r2, r5
 80093c8:	e7eb      	b.n	80093a2 <__ssvfiscanf_r+0x26>
 80093ca:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80093cc:	3201      	adds	r2, #1
 80093ce:	9245      	str	r2, [sp, #276]	@ 0x114
 80093d0:	6862      	ldr	r2, [r4, #4]
 80093d2:	3301      	adds	r3, #1
 80093d4:	3a01      	subs	r2, #1
 80093d6:	6062      	str	r2, [r4, #4]
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	e7ec      	b.n	80093b6 <__ssvfiscanf_r+0x3a>
 80093dc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80093de:	4621      	mov	r1, r4
 80093e0:	4630      	mov	r0, r6
 80093e2:	4798      	blx	r3
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d0e9      	beq.n	80093bc <__ssvfiscanf_r+0x40>
 80093e8:	e7ed      	b.n	80093c6 <__ssvfiscanf_r+0x4a>
 80093ea:	2b25      	cmp	r3, #37	@ 0x25
 80093ec:	d012      	beq.n	8009414 <__ssvfiscanf_r+0x98>
 80093ee:	4699      	mov	r9, r3
 80093f0:	6863      	ldr	r3, [r4, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f340 8093 	ble.w	800951e <__ssvfiscanf_r+0x1a2>
 80093f8:	6822      	ldr	r2, [r4, #0]
 80093fa:	7813      	ldrb	r3, [r2, #0]
 80093fc:	454b      	cmp	r3, r9
 80093fe:	f040 812c 	bne.w	800965a <__ssvfiscanf_r+0x2de>
 8009402:	6863      	ldr	r3, [r4, #4]
 8009404:	3b01      	subs	r3, #1
 8009406:	6063      	str	r3, [r4, #4]
 8009408:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800940a:	3201      	adds	r2, #1
 800940c:	3301      	adds	r3, #1
 800940e:	6022      	str	r2, [r4, #0]
 8009410:	9345      	str	r3, [sp, #276]	@ 0x114
 8009412:	e7d8      	b.n	80093c6 <__ssvfiscanf_r+0x4a>
 8009414:	9141      	str	r1, [sp, #260]	@ 0x104
 8009416:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009418:	7853      	ldrb	r3, [r2, #1]
 800941a:	2b2a      	cmp	r3, #42	@ 0x2a
 800941c:	bf02      	ittt	eq
 800941e:	2310      	moveq	r3, #16
 8009420:	1c95      	addeq	r5, r2, #2
 8009422:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009424:	220a      	movs	r2, #10
 8009426:	46a9      	mov	r9, r5
 8009428:	f819 1b01 	ldrb.w	r1, [r9], #1
 800942c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009430:	2b09      	cmp	r3, #9
 8009432:	d91e      	bls.n	8009472 <__ssvfiscanf_r+0xf6>
 8009434:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009630 <__ssvfiscanf_r+0x2b4>
 8009438:	2203      	movs	r2, #3
 800943a:	4650      	mov	r0, sl
 800943c:	f7f6 fec8 	bl	80001d0 <memchr>
 8009440:	b138      	cbz	r0, 8009452 <__ssvfiscanf_r+0xd6>
 8009442:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009444:	eba0 000a 	sub.w	r0, r0, sl
 8009448:	2301      	movs	r3, #1
 800944a:	4083      	lsls	r3, r0
 800944c:	4313      	orrs	r3, r2
 800944e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009450:	464d      	mov	r5, r9
 8009452:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009456:	2b78      	cmp	r3, #120	@ 0x78
 8009458:	d806      	bhi.n	8009468 <__ssvfiscanf_r+0xec>
 800945a:	2b57      	cmp	r3, #87	@ 0x57
 800945c:	d810      	bhi.n	8009480 <__ssvfiscanf_r+0x104>
 800945e:	2b25      	cmp	r3, #37	@ 0x25
 8009460:	d0c5      	beq.n	80093ee <__ssvfiscanf_r+0x72>
 8009462:	d857      	bhi.n	8009514 <__ssvfiscanf_r+0x198>
 8009464:	2b00      	cmp	r3, #0
 8009466:	d065      	beq.n	8009534 <__ssvfiscanf_r+0x1b8>
 8009468:	2303      	movs	r3, #3
 800946a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800946c:	230a      	movs	r3, #10
 800946e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009470:	e078      	b.n	8009564 <__ssvfiscanf_r+0x1e8>
 8009472:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009474:	fb02 1103 	mla	r1, r2, r3, r1
 8009478:	3930      	subs	r1, #48	@ 0x30
 800947a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800947c:	464d      	mov	r5, r9
 800947e:	e7d2      	b.n	8009426 <__ssvfiscanf_r+0xaa>
 8009480:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009484:	2a20      	cmp	r2, #32
 8009486:	d8ef      	bhi.n	8009468 <__ssvfiscanf_r+0xec>
 8009488:	a101      	add	r1, pc, #4	@ (adr r1, 8009490 <__ssvfiscanf_r+0x114>)
 800948a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800948e:	bf00      	nop
 8009490:	08009543 	.word	0x08009543
 8009494:	08009469 	.word	0x08009469
 8009498:	08009469 	.word	0x08009469
 800949c:	0800959d 	.word	0x0800959d
 80094a0:	08009469 	.word	0x08009469
 80094a4:	08009469 	.word	0x08009469
 80094a8:	08009469 	.word	0x08009469
 80094ac:	08009469 	.word	0x08009469
 80094b0:	08009469 	.word	0x08009469
 80094b4:	08009469 	.word	0x08009469
 80094b8:	08009469 	.word	0x08009469
 80094bc:	080095b3 	.word	0x080095b3
 80094c0:	08009599 	.word	0x08009599
 80094c4:	0800951b 	.word	0x0800951b
 80094c8:	0800951b 	.word	0x0800951b
 80094cc:	0800951b 	.word	0x0800951b
 80094d0:	08009469 	.word	0x08009469
 80094d4:	08009555 	.word	0x08009555
 80094d8:	08009469 	.word	0x08009469
 80094dc:	08009469 	.word	0x08009469
 80094e0:	08009469 	.word	0x08009469
 80094e4:	08009469 	.word	0x08009469
 80094e8:	080095c3 	.word	0x080095c3
 80094ec:	0800955d 	.word	0x0800955d
 80094f0:	0800953b 	.word	0x0800953b
 80094f4:	08009469 	.word	0x08009469
 80094f8:	08009469 	.word	0x08009469
 80094fc:	080095bf 	.word	0x080095bf
 8009500:	08009469 	.word	0x08009469
 8009504:	08009599 	.word	0x08009599
 8009508:	08009469 	.word	0x08009469
 800950c:	08009469 	.word	0x08009469
 8009510:	08009543 	.word	0x08009543
 8009514:	3b45      	subs	r3, #69	@ 0x45
 8009516:	2b02      	cmp	r3, #2
 8009518:	d8a6      	bhi.n	8009468 <__ssvfiscanf_r+0xec>
 800951a:	2305      	movs	r3, #5
 800951c:	e021      	b.n	8009562 <__ssvfiscanf_r+0x1e6>
 800951e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009520:	4621      	mov	r1, r4
 8009522:	4630      	mov	r0, r6
 8009524:	4798      	blx	r3
 8009526:	2800      	cmp	r0, #0
 8009528:	f43f af66 	beq.w	80093f8 <__ssvfiscanf_r+0x7c>
 800952c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800952e:	2800      	cmp	r0, #0
 8009530:	f040 808b 	bne.w	800964a <__ssvfiscanf_r+0x2ce>
 8009534:	f04f 30ff 	mov.w	r0, #4294967295
 8009538:	e08b      	b.n	8009652 <__ssvfiscanf_r+0x2d6>
 800953a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800953c:	f042 0220 	orr.w	r2, r2, #32
 8009540:	9241      	str	r2, [sp, #260]	@ 0x104
 8009542:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009548:	9241      	str	r2, [sp, #260]	@ 0x104
 800954a:	2210      	movs	r2, #16
 800954c:	2b6e      	cmp	r3, #110	@ 0x6e
 800954e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009550:	d902      	bls.n	8009558 <__ssvfiscanf_r+0x1dc>
 8009552:	e005      	b.n	8009560 <__ssvfiscanf_r+0x1e4>
 8009554:	2300      	movs	r3, #0
 8009556:	9342      	str	r3, [sp, #264]	@ 0x108
 8009558:	2303      	movs	r3, #3
 800955a:	e002      	b.n	8009562 <__ssvfiscanf_r+0x1e6>
 800955c:	2308      	movs	r3, #8
 800955e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009560:	2304      	movs	r3, #4
 8009562:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009564:	6863      	ldr	r3, [r4, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	dd39      	ble.n	80095de <__ssvfiscanf_r+0x262>
 800956a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800956c:	0659      	lsls	r1, r3, #25
 800956e:	d404      	bmi.n	800957a <__ssvfiscanf_r+0x1fe>
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	781a      	ldrb	r2, [r3, #0]
 8009574:	5cba      	ldrb	r2, [r7, r2]
 8009576:	0712      	lsls	r2, r2, #28
 8009578:	d438      	bmi.n	80095ec <__ssvfiscanf_r+0x270>
 800957a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800957c:	2b02      	cmp	r3, #2
 800957e:	dc47      	bgt.n	8009610 <__ssvfiscanf_r+0x294>
 8009580:	466b      	mov	r3, sp
 8009582:	4622      	mov	r2, r4
 8009584:	a941      	add	r1, sp, #260	@ 0x104
 8009586:	4630      	mov	r0, r6
 8009588:	f000 f86c 	bl	8009664 <_scanf_chars>
 800958c:	2801      	cmp	r0, #1
 800958e:	d064      	beq.n	800965a <__ssvfiscanf_r+0x2de>
 8009590:	2802      	cmp	r0, #2
 8009592:	f47f af18 	bne.w	80093c6 <__ssvfiscanf_r+0x4a>
 8009596:	e7c9      	b.n	800952c <__ssvfiscanf_r+0x1b0>
 8009598:	220a      	movs	r2, #10
 800959a:	e7d7      	b.n	800954c <__ssvfiscanf_r+0x1d0>
 800959c:	4629      	mov	r1, r5
 800959e:	4640      	mov	r0, r8
 80095a0:	f000 fa5a 	bl	8009a58 <__sccl>
 80095a4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80095a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80095ac:	4605      	mov	r5, r0
 80095ae:	2301      	movs	r3, #1
 80095b0:	e7d7      	b.n	8009562 <__ssvfiscanf_r+0x1e6>
 80095b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80095b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095b8:	9341      	str	r3, [sp, #260]	@ 0x104
 80095ba:	2300      	movs	r3, #0
 80095bc:	e7d1      	b.n	8009562 <__ssvfiscanf_r+0x1e6>
 80095be:	2302      	movs	r3, #2
 80095c0:	e7cf      	b.n	8009562 <__ssvfiscanf_r+0x1e6>
 80095c2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80095c4:	06c3      	lsls	r3, r0, #27
 80095c6:	f53f aefe 	bmi.w	80093c6 <__ssvfiscanf_r+0x4a>
 80095ca:	9b00      	ldr	r3, [sp, #0]
 80095cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80095ce:	1d19      	adds	r1, r3, #4
 80095d0:	9100      	str	r1, [sp, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	07c0      	lsls	r0, r0, #31
 80095d6:	bf4c      	ite	mi
 80095d8:	801a      	strhmi	r2, [r3, #0]
 80095da:	601a      	strpl	r2, [r3, #0]
 80095dc:	e6f3      	b.n	80093c6 <__ssvfiscanf_r+0x4a>
 80095de:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80095e0:	4621      	mov	r1, r4
 80095e2:	4630      	mov	r0, r6
 80095e4:	4798      	blx	r3
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d0bf      	beq.n	800956a <__ssvfiscanf_r+0x1ee>
 80095ea:	e79f      	b.n	800952c <__ssvfiscanf_r+0x1b0>
 80095ec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80095ee:	3201      	adds	r2, #1
 80095f0:	9245      	str	r2, [sp, #276]	@ 0x114
 80095f2:	6862      	ldr	r2, [r4, #4]
 80095f4:	3a01      	subs	r2, #1
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	6062      	str	r2, [r4, #4]
 80095fa:	dd02      	ble.n	8009602 <__ssvfiscanf_r+0x286>
 80095fc:	3301      	adds	r3, #1
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	e7b6      	b.n	8009570 <__ssvfiscanf_r+0x1f4>
 8009602:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009604:	4621      	mov	r1, r4
 8009606:	4630      	mov	r0, r6
 8009608:	4798      	blx	r3
 800960a:	2800      	cmp	r0, #0
 800960c:	d0b0      	beq.n	8009570 <__ssvfiscanf_r+0x1f4>
 800960e:	e78d      	b.n	800952c <__ssvfiscanf_r+0x1b0>
 8009610:	2b04      	cmp	r3, #4
 8009612:	dc0f      	bgt.n	8009634 <__ssvfiscanf_r+0x2b8>
 8009614:	466b      	mov	r3, sp
 8009616:	4622      	mov	r2, r4
 8009618:	a941      	add	r1, sp, #260	@ 0x104
 800961a:	4630      	mov	r0, r6
 800961c:	f000 f87c 	bl	8009718 <_scanf_i>
 8009620:	e7b4      	b.n	800958c <__ssvfiscanf_r+0x210>
 8009622:	bf00      	nop
 8009624:	080092cd 	.word	0x080092cd
 8009628:	08009343 	.word	0x08009343
 800962c:	0800a9eb 	.word	0x0800a9eb
 8009630:	0800a97e 	.word	0x0800a97e
 8009634:	4b0a      	ldr	r3, [pc, #40]	@ (8009660 <__ssvfiscanf_r+0x2e4>)
 8009636:	2b00      	cmp	r3, #0
 8009638:	f43f aec5 	beq.w	80093c6 <__ssvfiscanf_r+0x4a>
 800963c:	466b      	mov	r3, sp
 800963e:	4622      	mov	r2, r4
 8009640:	a941      	add	r1, sp, #260	@ 0x104
 8009642:	4630      	mov	r0, r6
 8009644:	f3af 8000 	nop.w
 8009648:	e7a0      	b.n	800958c <__ssvfiscanf_r+0x210>
 800964a:	89a3      	ldrh	r3, [r4, #12]
 800964c:	065b      	lsls	r3, r3, #25
 800964e:	f53f af71 	bmi.w	8009534 <__ssvfiscanf_r+0x1b8>
 8009652:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800965c:	e7f9      	b.n	8009652 <__ssvfiscanf_r+0x2d6>
 800965e:	bf00      	nop
 8009660:	00000000 	.word	0x00000000

08009664 <_scanf_chars>:
 8009664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009668:	4615      	mov	r5, r2
 800966a:	688a      	ldr	r2, [r1, #8]
 800966c:	4680      	mov	r8, r0
 800966e:	460c      	mov	r4, r1
 8009670:	b932      	cbnz	r2, 8009680 <_scanf_chars+0x1c>
 8009672:	698a      	ldr	r2, [r1, #24]
 8009674:	2a00      	cmp	r2, #0
 8009676:	bf14      	ite	ne
 8009678:	f04f 32ff 	movne.w	r2, #4294967295
 800967c:	2201      	moveq	r2, #1
 800967e:	608a      	str	r2, [r1, #8]
 8009680:	6822      	ldr	r2, [r4, #0]
 8009682:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009714 <_scanf_chars+0xb0>
 8009686:	06d1      	lsls	r1, r2, #27
 8009688:	bf5f      	itttt	pl
 800968a:	681a      	ldrpl	r2, [r3, #0]
 800968c:	1d11      	addpl	r1, r2, #4
 800968e:	6019      	strpl	r1, [r3, #0]
 8009690:	6816      	ldrpl	r6, [r2, #0]
 8009692:	2700      	movs	r7, #0
 8009694:	69a0      	ldr	r0, [r4, #24]
 8009696:	b188      	cbz	r0, 80096bc <_scanf_chars+0x58>
 8009698:	2801      	cmp	r0, #1
 800969a:	d107      	bne.n	80096ac <_scanf_chars+0x48>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	781a      	ldrb	r2, [r3, #0]
 80096a0:	6963      	ldr	r3, [r4, #20]
 80096a2:	5c9b      	ldrb	r3, [r3, r2]
 80096a4:	b953      	cbnz	r3, 80096bc <_scanf_chars+0x58>
 80096a6:	2f00      	cmp	r7, #0
 80096a8:	d031      	beq.n	800970e <_scanf_chars+0xaa>
 80096aa:	e022      	b.n	80096f2 <_scanf_chars+0x8e>
 80096ac:	2802      	cmp	r0, #2
 80096ae:	d120      	bne.n	80096f2 <_scanf_chars+0x8e>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	781b      	ldrb	r3, [r3, #0]
 80096b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80096b8:	071b      	lsls	r3, r3, #28
 80096ba:	d41a      	bmi.n	80096f2 <_scanf_chars+0x8e>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	06da      	lsls	r2, r3, #27
 80096c0:	bf5e      	ittt	pl
 80096c2:	682b      	ldrpl	r3, [r5, #0]
 80096c4:	781b      	ldrbpl	r3, [r3, #0]
 80096c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80096ca:	682a      	ldr	r2, [r5, #0]
 80096cc:	686b      	ldr	r3, [r5, #4]
 80096ce:	3201      	adds	r2, #1
 80096d0:	602a      	str	r2, [r5, #0]
 80096d2:	68a2      	ldr	r2, [r4, #8]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	3a01      	subs	r2, #1
 80096d8:	606b      	str	r3, [r5, #4]
 80096da:	3701      	adds	r7, #1
 80096dc:	60a2      	str	r2, [r4, #8]
 80096de:	b142      	cbz	r2, 80096f2 <_scanf_chars+0x8e>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dcd7      	bgt.n	8009694 <_scanf_chars+0x30>
 80096e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80096e8:	4629      	mov	r1, r5
 80096ea:	4640      	mov	r0, r8
 80096ec:	4798      	blx	r3
 80096ee:	2800      	cmp	r0, #0
 80096f0:	d0d0      	beq.n	8009694 <_scanf_chars+0x30>
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	f013 0310 	ands.w	r3, r3, #16
 80096f8:	d105      	bne.n	8009706 <_scanf_chars+0xa2>
 80096fa:	68e2      	ldr	r2, [r4, #12]
 80096fc:	3201      	adds	r2, #1
 80096fe:	60e2      	str	r2, [r4, #12]
 8009700:	69a2      	ldr	r2, [r4, #24]
 8009702:	b102      	cbz	r2, 8009706 <_scanf_chars+0xa2>
 8009704:	7033      	strb	r3, [r6, #0]
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	443b      	add	r3, r7
 800970a:	6123      	str	r3, [r4, #16]
 800970c:	2000      	movs	r0, #0
 800970e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009712:	bf00      	nop
 8009714:	0800a9eb 	.word	0x0800a9eb

08009718 <_scanf_i>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	4698      	mov	r8, r3
 800971e:	4b74      	ldr	r3, [pc, #464]	@ (80098f0 <_scanf_i+0x1d8>)
 8009720:	460c      	mov	r4, r1
 8009722:	4682      	mov	sl, r0
 8009724:	4616      	mov	r6, r2
 8009726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800972a:	b087      	sub	sp, #28
 800972c:	ab03      	add	r3, sp, #12
 800972e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009732:	4b70      	ldr	r3, [pc, #448]	@ (80098f4 <_scanf_i+0x1dc>)
 8009734:	69a1      	ldr	r1, [r4, #24]
 8009736:	4a70      	ldr	r2, [pc, #448]	@ (80098f8 <_scanf_i+0x1e0>)
 8009738:	2903      	cmp	r1, #3
 800973a:	bf08      	it	eq
 800973c:	461a      	moveq	r2, r3
 800973e:	68a3      	ldr	r3, [r4, #8]
 8009740:	9201      	str	r2, [sp, #4]
 8009742:	1e5a      	subs	r2, r3, #1
 8009744:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009748:	bf88      	it	hi
 800974a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800974e:	4627      	mov	r7, r4
 8009750:	bf82      	ittt	hi
 8009752:	eb03 0905 	addhi.w	r9, r3, r5
 8009756:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800975a:	60a3      	strhi	r3, [r4, #8]
 800975c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009760:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009764:	bf98      	it	ls
 8009766:	f04f 0900 	movls.w	r9, #0
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	463d      	mov	r5, r7
 800976e:	f04f 0b00 	mov.w	fp, #0
 8009772:	6831      	ldr	r1, [r6, #0]
 8009774:	ab03      	add	r3, sp, #12
 8009776:	7809      	ldrb	r1, [r1, #0]
 8009778:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800977c:	2202      	movs	r2, #2
 800977e:	f7f6 fd27 	bl	80001d0 <memchr>
 8009782:	b328      	cbz	r0, 80097d0 <_scanf_i+0xb8>
 8009784:	f1bb 0f01 	cmp.w	fp, #1
 8009788:	d159      	bne.n	800983e <_scanf_i+0x126>
 800978a:	6862      	ldr	r2, [r4, #4]
 800978c:	b92a      	cbnz	r2, 800979a <_scanf_i+0x82>
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	2108      	movs	r1, #8
 8009792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009796:	6061      	str	r1, [r4, #4]
 8009798:	6022      	str	r2, [r4, #0]
 800979a:	6822      	ldr	r2, [r4, #0]
 800979c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80097a0:	6022      	str	r2, [r4, #0]
 80097a2:	68a2      	ldr	r2, [r4, #8]
 80097a4:	1e51      	subs	r1, r2, #1
 80097a6:	60a1      	str	r1, [r4, #8]
 80097a8:	b192      	cbz	r2, 80097d0 <_scanf_i+0xb8>
 80097aa:	6832      	ldr	r2, [r6, #0]
 80097ac:	1c51      	adds	r1, r2, #1
 80097ae:	6031      	str	r1, [r6, #0]
 80097b0:	7812      	ldrb	r2, [r2, #0]
 80097b2:	f805 2b01 	strb.w	r2, [r5], #1
 80097b6:	6872      	ldr	r2, [r6, #4]
 80097b8:	3a01      	subs	r2, #1
 80097ba:	2a00      	cmp	r2, #0
 80097bc:	6072      	str	r2, [r6, #4]
 80097be:	dc07      	bgt.n	80097d0 <_scanf_i+0xb8>
 80097c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80097c4:	4631      	mov	r1, r6
 80097c6:	4650      	mov	r0, sl
 80097c8:	4790      	blx	r2
 80097ca:	2800      	cmp	r0, #0
 80097cc:	f040 8085 	bne.w	80098da <_scanf_i+0x1c2>
 80097d0:	f10b 0b01 	add.w	fp, fp, #1
 80097d4:	f1bb 0f03 	cmp.w	fp, #3
 80097d8:	d1cb      	bne.n	8009772 <_scanf_i+0x5a>
 80097da:	6863      	ldr	r3, [r4, #4]
 80097dc:	b90b      	cbnz	r3, 80097e2 <_scanf_i+0xca>
 80097de:	230a      	movs	r3, #10
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	6863      	ldr	r3, [r4, #4]
 80097e4:	4945      	ldr	r1, [pc, #276]	@ (80098fc <_scanf_i+0x1e4>)
 80097e6:	6960      	ldr	r0, [r4, #20]
 80097e8:	1ac9      	subs	r1, r1, r3
 80097ea:	f000 f935 	bl	8009a58 <__sccl>
 80097ee:	f04f 0b00 	mov.w	fp, #0
 80097f2:	68a3      	ldr	r3, [r4, #8]
 80097f4:	6822      	ldr	r2, [r4, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d03d      	beq.n	8009876 <_scanf_i+0x15e>
 80097fa:	6831      	ldr	r1, [r6, #0]
 80097fc:	6960      	ldr	r0, [r4, #20]
 80097fe:	f891 c000 	ldrb.w	ip, [r1]
 8009802:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009806:	2800      	cmp	r0, #0
 8009808:	d035      	beq.n	8009876 <_scanf_i+0x15e>
 800980a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800980e:	d124      	bne.n	800985a <_scanf_i+0x142>
 8009810:	0510      	lsls	r0, r2, #20
 8009812:	d522      	bpl.n	800985a <_scanf_i+0x142>
 8009814:	f10b 0b01 	add.w	fp, fp, #1
 8009818:	f1b9 0f00 	cmp.w	r9, #0
 800981c:	d003      	beq.n	8009826 <_scanf_i+0x10e>
 800981e:	3301      	adds	r3, #1
 8009820:	f109 39ff 	add.w	r9, r9, #4294967295
 8009824:	60a3      	str	r3, [r4, #8]
 8009826:	6873      	ldr	r3, [r6, #4]
 8009828:	3b01      	subs	r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	6073      	str	r3, [r6, #4]
 800982e:	dd1b      	ble.n	8009868 <_scanf_i+0x150>
 8009830:	6833      	ldr	r3, [r6, #0]
 8009832:	3301      	adds	r3, #1
 8009834:	6033      	str	r3, [r6, #0]
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	3b01      	subs	r3, #1
 800983a:	60a3      	str	r3, [r4, #8]
 800983c:	e7d9      	b.n	80097f2 <_scanf_i+0xda>
 800983e:	f1bb 0f02 	cmp.w	fp, #2
 8009842:	d1ae      	bne.n	80097a2 <_scanf_i+0x8a>
 8009844:	6822      	ldr	r2, [r4, #0]
 8009846:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800984a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800984e:	d1bf      	bne.n	80097d0 <_scanf_i+0xb8>
 8009850:	2110      	movs	r1, #16
 8009852:	6061      	str	r1, [r4, #4]
 8009854:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009858:	e7a2      	b.n	80097a0 <_scanf_i+0x88>
 800985a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800985e:	6022      	str	r2, [r4, #0]
 8009860:	780b      	ldrb	r3, [r1, #0]
 8009862:	f805 3b01 	strb.w	r3, [r5], #1
 8009866:	e7de      	b.n	8009826 <_scanf_i+0x10e>
 8009868:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800986c:	4631      	mov	r1, r6
 800986e:	4650      	mov	r0, sl
 8009870:	4798      	blx	r3
 8009872:	2800      	cmp	r0, #0
 8009874:	d0df      	beq.n	8009836 <_scanf_i+0x11e>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	05d9      	lsls	r1, r3, #23
 800987a:	d50d      	bpl.n	8009898 <_scanf_i+0x180>
 800987c:	42bd      	cmp	r5, r7
 800987e:	d909      	bls.n	8009894 <_scanf_i+0x17c>
 8009880:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009884:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009888:	4632      	mov	r2, r6
 800988a:	4650      	mov	r0, sl
 800988c:	4798      	blx	r3
 800988e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009892:	464d      	mov	r5, r9
 8009894:	42bd      	cmp	r5, r7
 8009896:	d028      	beq.n	80098ea <_scanf_i+0x1d2>
 8009898:	6822      	ldr	r2, [r4, #0]
 800989a:	f012 0210 	ands.w	r2, r2, #16
 800989e:	d113      	bne.n	80098c8 <_scanf_i+0x1b0>
 80098a0:	702a      	strb	r2, [r5, #0]
 80098a2:	6863      	ldr	r3, [r4, #4]
 80098a4:	9e01      	ldr	r6, [sp, #4]
 80098a6:	4639      	mov	r1, r7
 80098a8:	4650      	mov	r0, sl
 80098aa:	47b0      	blx	r6
 80098ac:	f8d8 3000 	ldr.w	r3, [r8]
 80098b0:	6821      	ldr	r1, [r4, #0]
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	f8c8 2000 	str.w	r2, [r8]
 80098b8:	f011 0f20 	tst.w	r1, #32
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	d00f      	beq.n	80098e0 <_scanf_i+0x1c8>
 80098c0:	6018      	str	r0, [r3, #0]
 80098c2:	68e3      	ldr	r3, [r4, #12]
 80098c4:	3301      	adds	r3, #1
 80098c6:	60e3      	str	r3, [r4, #12]
 80098c8:	6923      	ldr	r3, [r4, #16]
 80098ca:	1bed      	subs	r5, r5, r7
 80098cc:	445d      	add	r5, fp
 80098ce:	442b      	add	r3, r5
 80098d0:	6123      	str	r3, [r4, #16]
 80098d2:	2000      	movs	r0, #0
 80098d4:	b007      	add	sp, #28
 80098d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098da:	f04f 0b00 	mov.w	fp, #0
 80098de:	e7ca      	b.n	8009876 <_scanf_i+0x15e>
 80098e0:	07ca      	lsls	r2, r1, #31
 80098e2:	bf4c      	ite	mi
 80098e4:	8018      	strhmi	r0, [r3, #0]
 80098e6:	6018      	strpl	r0, [r3, #0]
 80098e8:	e7eb      	b.n	80098c2 <_scanf_i+0x1aa>
 80098ea:	2001      	movs	r0, #1
 80098ec:	e7f2      	b.n	80098d4 <_scanf_i+0x1bc>
 80098ee:	bf00      	nop
 80098f0:	0800a70c 	.word	0x0800a70c
 80098f4:	08009d89 	.word	0x08009d89
 80098f8:	08009e69 	.word	0x08009e69
 80098fc:	0800a999 	.word	0x0800a999

08009900 <__sflush_r>:
 8009900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009908:	0716      	lsls	r6, r2, #28
 800990a:	4605      	mov	r5, r0
 800990c:	460c      	mov	r4, r1
 800990e:	d454      	bmi.n	80099ba <__sflush_r+0xba>
 8009910:	684b      	ldr	r3, [r1, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	dc02      	bgt.n	800991c <__sflush_r+0x1c>
 8009916:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009918:	2b00      	cmp	r3, #0
 800991a:	dd48      	ble.n	80099ae <__sflush_r+0xae>
 800991c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800991e:	2e00      	cmp	r6, #0
 8009920:	d045      	beq.n	80099ae <__sflush_r+0xae>
 8009922:	2300      	movs	r3, #0
 8009924:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009928:	682f      	ldr	r7, [r5, #0]
 800992a:	6a21      	ldr	r1, [r4, #32]
 800992c:	602b      	str	r3, [r5, #0]
 800992e:	d030      	beq.n	8009992 <__sflush_r+0x92>
 8009930:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	0759      	lsls	r1, r3, #29
 8009936:	d505      	bpl.n	8009944 <__sflush_r+0x44>
 8009938:	6863      	ldr	r3, [r4, #4]
 800993a:	1ad2      	subs	r2, r2, r3
 800993c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800993e:	b10b      	cbz	r3, 8009944 <__sflush_r+0x44>
 8009940:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009942:	1ad2      	subs	r2, r2, r3
 8009944:	2300      	movs	r3, #0
 8009946:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009948:	6a21      	ldr	r1, [r4, #32]
 800994a:	4628      	mov	r0, r5
 800994c:	47b0      	blx	r6
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	d106      	bne.n	8009962 <__sflush_r+0x62>
 8009954:	6829      	ldr	r1, [r5, #0]
 8009956:	291d      	cmp	r1, #29
 8009958:	d82b      	bhi.n	80099b2 <__sflush_r+0xb2>
 800995a:	4a2a      	ldr	r2, [pc, #168]	@ (8009a04 <__sflush_r+0x104>)
 800995c:	410a      	asrs	r2, r1
 800995e:	07d6      	lsls	r6, r2, #31
 8009960:	d427      	bmi.n	80099b2 <__sflush_r+0xb2>
 8009962:	2200      	movs	r2, #0
 8009964:	6062      	str	r2, [r4, #4]
 8009966:	04d9      	lsls	r1, r3, #19
 8009968:	6922      	ldr	r2, [r4, #16]
 800996a:	6022      	str	r2, [r4, #0]
 800996c:	d504      	bpl.n	8009978 <__sflush_r+0x78>
 800996e:	1c42      	adds	r2, r0, #1
 8009970:	d101      	bne.n	8009976 <__sflush_r+0x76>
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	b903      	cbnz	r3, 8009978 <__sflush_r+0x78>
 8009976:	6560      	str	r0, [r4, #84]	@ 0x54
 8009978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800997a:	602f      	str	r7, [r5, #0]
 800997c:	b1b9      	cbz	r1, 80099ae <__sflush_r+0xae>
 800997e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009982:	4299      	cmp	r1, r3
 8009984:	d002      	beq.n	800998c <__sflush_r+0x8c>
 8009986:	4628      	mov	r0, r5
 8009988:	f7fe fec6 	bl	8008718 <_free_r>
 800998c:	2300      	movs	r3, #0
 800998e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009990:	e00d      	b.n	80099ae <__sflush_r+0xae>
 8009992:	2301      	movs	r3, #1
 8009994:	4628      	mov	r0, r5
 8009996:	47b0      	blx	r6
 8009998:	4602      	mov	r2, r0
 800999a:	1c50      	adds	r0, r2, #1
 800999c:	d1c9      	bne.n	8009932 <__sflush_r+0x32>
 800999e:	682b      	ldr	r3, [r5, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0c6      	beq.n	8009932 <__sflush_r+0x32>
 80099a4:	2b1d      	cmp	r3, #29
 80099a6:	d001      	beq.n	80099ac <__sflush_r+0xac>
 80099a8:	2b16      	cmp	r3, #22
 80099aa:	d11e      	bne.n	80099ea <__sflush_r+0xea>
 80099ac:	602f      	str	r7, [r5, #0]
 80099ae:	2000      	movs	r0, #0
 80099b0:	e022      	b.n	80099f8 <__sflush_r+0xf8>
 80099b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099b6:	b21b      	sxth	r3, r3
 80099b8:	e01b      	b.n	80099f2 <__sflush_r+0xf2>
 80099ba:	690f      	ldr	r7, [r1, #16]
 80099bc:	2f00      	cmp	r7, #0
 80099be:	d0f6      	beq.n	80099ae <__sflush_r+0xae>
 80099c0:	0793      	lsls	r3, r2, #30
 80099c2:	680e      	ldr	r6, [r1, #0]
 80099c4:	bf08      	it	eq
 80099c6:	694b      	ldreq	r3, [r1, #20]
 80099c8:	600f      	str	r7, [r1, #0]
 80099ca:	bf18      	it	ne
 80099cc:	2300      	movne	r3, #0
 80099ce:	eba6 0807 	sub.w	r8, r6, r7
 80099d2:	608b      	str	r3, [r1, #8]
 80099d4:	f1b8 0f00 	cmp.w	r8, #0
 80099d8:	dde9      	ble.n	80099ae <__sflush_r+0xae>
 80099da:	6a21      	ldr	r1, [r4, #32]
 80099dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099de:	4643      	mov	r3, r8
 80099e0:	463a      	mov	r2, r7
 80099e2:	4628      	mov	r0, r5
 80099e4:	47b0      	blx	r6
 80099e6:	2800      	cmp	r0, #0
 80099e8:	dc08      	bgt.n	80099fc <__sflush_r+0xfc>
 80099ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	f04f 30ff 	mov.w	r0, #4294967295
 80099f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099fc:	4407      	add	r7, r0
 80099fe:	eba8 0800 	sub.w	r8, r8, r0
 8009a02:	e7e7      	b.n	80099d4 <__sflush_r+0xd4>
 8009a04:	dfbffffe 	.word	0xdfbffffe

08009a08 <_fflush_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	690b      	ldr	r3, [r1, #16]
 8009a0c:	4605      	mov	r5, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	b913      	cbnz	r3, 8009a18 <_fflush_r+0x10>
 8009a12:	2500      	movs	r5, #0
 8009a14:	4628      	mov	r0, r5
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	b118      	cbz	r0, 8009a22 <_fflush_r+0x1a>
 8009a1a:	6a03      	ldr	r3, [r0, #32]
 8009a1c:	b90b      	cbnz	r3, 8009a22 <_fflush_r+0x1a>
 8009a1e:	f7fd fe75 	bl	800770c <__sinit>
 8009a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d0f3      	beq.n	8009a12 <_fflush_r+0xa>
 8009a2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a2c:	07d0      	lsls	r0, r2, #31
 8009a2e:	d404      	bmi.n	8009a3a <_fflush_r+0x32>
 8009a30:	0599      	lsls	r1, r3, #22
 8009a32:	d402      	bmi.n	8009a3a <_fflush_r+0x32>
 8009a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a36:	f7fe f81e 	bl	8007a76 <__retarget_lock_acquire_recursive>
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	f7ff ff5f 	bl	8009900 <__sflush_r>
 8009a42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a44:	07da      	lsls	r2, r3, #31
 8009a46:	4605      	mov	r5, r0
 8009a48:	d4e4      	bmi.n	8009a14 <_fflush_r+0xc>
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	059b      	lsls	r3, r3, #22
 8009a4e:	d4e1      	bmi.n	8009a14 <_fflush_r+0xc>
 8009a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a52:	f7fe f811 	bl	8007a78 <__retarget_lock_release_recursive>
 8009a56:	e7dd      	b.n	8009a14 <_fflush_r+0xc>

08009a58 <__sccl>:
 8009a58:	b570      	push	{r4, r5, r6, lr}
 8009a5a:	780b      	ldrb	r3, [r1, #0]
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	2b5e      	cmp	r3, #94	@ 0x5e
 8009a60:	bf0b      	itete	eq
 8009a62:	784b      	ldrbeq	r3, [r1, #1]
 8009a64:	1c4a      	addne	r2, r1, #1
 8009a66:	1c8a      	addeq	r2, r1, #2
 8009a68:	2100      	movne	r1, #0
 8009a6a:	bf08      	it	eq
 8009a6c:	2101      	moveq	r1, #1
 8009a6e:	3801      	subs	r0, #1
 8009a70:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009a74:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009a78:	42a8      	cmp	r0, r5
 8009a7a:	d1fb      	bne.n	8009a74 <__sccl+0x1c>
 8009a7c:	b90b      	cbnz	r3, 8009a82 <__sccl+0x2a>
 8009a7e:	1e50      	subs	r0, r2, #1
 8009a80:	bd70      	pop	{r4, r5, r6, pc}
 8009a82:	f081 0101 	eor.w	r1, r1, #1
 8009a86:	54e1      	strb	r1, [r4, r3]
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009a90:	2d2d      	cmp	r5, #45	@ 0x2d
 8009a92:	d005      	beq.n	8009aa0 <__sccl+0x48>
 8009a94:	2d5d      	cmp	r5, #93	@ 0x5d
 8009a96:	d016      	beq.n	8009ac6 <__sccl+0x6e>
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	d0f1      	beq.n	8009a80 <__sccl+0x28>
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	e7f2      	b.n	8009a86 <__sccl+0x2e>
 8009aa0:	7846      	ldrb	r6, [r0, #1]
 8009aa2:	2e5d      	cmp	r6, #93	@ 0x5d
 8009aa4:	d0fa      	beq.n	8009a9c <__sccl+0x44>
 8009aa6:	42b3      	cmp	r3, r6
 8009aa8:	dcf8      	bgt.n	8009a9c <__sccl+0x44>
 8009aaa:	3002      	adds	r0, #2
 8009aac:	461a      	mov	r2, r3
 8009aae:	3201      	adds	r2, #1
 8009ab0:	4296      	cmp	r6, r2
 8009ab2:	54a1      	strb	r1, [r4, r2]
 8009ab4:	dcfb      	bgt.n	8009aae <__sccl+0x56>
 8009ab6:	1af2      	subs	r2, r6, r3
 8009ab8:	3a01      	subs	r2, #1
 8009aba:	1c5d      	adds	r5, r3, #1
 8009abc:	42b3      	cmp	r3, r6
 8009abe:	bfa8      	it	ge
 8009ac0:	2200      	movge	r2, #0
 8009ac2:	18ab      	adds	r3, r5, r2
 8009ac4:	e7e1      	b.n	8009a8a <__sccl+0x32>
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	e7da      	b.n	8009a80 <__sccl+0x28>

08009aca <__submore>:
 8009aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ace:	460c      	mov	r4, r1
 8009ad0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	d11d      	bne.n	8009b16 <__submore+0x4c>
 8009ada:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009ade:	f7fe fe8f 	bl	8008800 <_malloc_r>
 8009ae2:	b918      	cbnz	r0, 8009aec <__submore+0x22>
 8009ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009af0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009af2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009af6:	6360      	str	r0, [r4, #52]	@ 0x34
 8009af8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009afc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009b00:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009b04:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009b08:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009b0c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009b10:	6020      	str	r0, [r4, #0]
 8009b12:	2000      	movs	r0, #0
 8009b14:	e7e8      	b.n	8009ae8 <__submore+0x1e>
 8009b16:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009b18:	0077      	lsls	r7, r6, #1
 8009b1a:	463a      	mov	r2, r7
 8009b1c:	f000 f88c 	bl	8009c38 <_realloc_r>
 8009b20:	4605      	mov	r5, r0
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d0de      	beq.n	8009ae4 <__submore+0x1a>
 8009b26:	eb00 0806 	add.w	r8, r0, r6
 8009b2a:	4601      	mov	r1, r0
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4640      	mov	r0, r8
 8009b30:	f000 f830 	bl	8009b94 <memcpy>
 8009b34:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009b38:	f8c4 8000 	str.w	r8, [r4]
 8009b3c:	e7e9      	b.n	8009b12 <__submore+0x48>

08009b3e <memmove>:
 8009b3e:	4288      	cmp	r0, r1
 8009b40:	b510      	push	{r4, lr}
 8009b42:	eb01 0402 	add.w	r4, r1, r2
 8009b46:	d902      	bls.n	8009b4e <memmove+0x10>
 8009b48:	4284      	cmp	r4, r0
 8009b4a:	4623      	mov	r3, r4
 8009b4c:	d807      	bhi.n	8009b5e <memmove+0x20>
 8009b4e:	1e43      	subs	r3, r0, #1
 8009b50:	42a1      	cmp	r1, r4
 8009b52:	d008      	beq.n	8009b66 <memmove+0x28>
 8009b54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b5c:	e7f8      	b.n	8009b50 <memmove+0x12>
 8009b5e:	4402      	add	r2, r0
 8009b60:	4601      	mov	r1, r0
 8009b62:	428a      	cmp	r2, r1
 8009b64:	d100      	bne.n	8009b68 <memmove+0x2a>
 8009b66:	bd10      	pop	{r4, pc}
 8009b68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b70:	e7f7      	b.n	8009b62 <memmove+0x24>
	...

08009b74 <_sbrk_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d06      	ldr	r5, [pc, #24]	@ (8009b90 <_sbrk_r+0x1c>)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	602b      	str	r3, [r5, #0]
 8009b80:	f7f8 fa4e 	bl	8002020 <_sbrk>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_sbrk_r+0x1a>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_sbrk_r+0x1a>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	20000a00 	.word	0x20000a00

08009b94 <memcpy>:
 8009b94:	440a      	add	r2, r1
 8009b96:	4291      	cmp	r1, r2
 8009b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b9c:	d100      	bne.n	8009ba0 <memcpy+0xc>
 8009b9e:	4770      	bx	lr
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009baa:	4291      	cmp	r1, r2
 8009bac:	d1f9      	bne.n	8009ba2 <memcpy+0xe>
 8009bae:	bd10      	pop	{r4, pc}

08009bb0 <__assert_func>:
 8009bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bb2:	4614      	mov	r4, r2
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	4b09      	ldr	r3, [pc, #36]	@ (8009bdc <__assert_func+0x2c>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4605      	mov	r5, r0
 8009bbc:	68d8      	ldr	r0, [r3, #12]
 8009bbe:	b954      	cbnz	r4, 8009bd6 <__assert_func+0x26>
 8009bc0:	4b07      	ldr	r3, [pc, #28]	@ (8009be0 <__assert_func+0x30>)
 8009bc2:	461c      	mov	r4, r3
 8009bc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bc8:	9100      	str	r1, [sp, #0]
 8009bca:	462b      	mov	r3, r5
 8009bcc:	4905      	ldr	r1, [pc, #20]	@ (8009be4 <__assert_func+0x34>)
 8009bce:	f000 f95b 	bl	8009e88 <fiprintf>
 8009bd2:	f000 f96b 	bl	8009eac <abort>
 8009bd6:	4b04      	ldr	r3, [pc, #16]	@ (8009be8 <__assert_func+0x38>)
 8009bd8:	e7f4      	b.n	8009bc4 <__assert_func+0x14>
 8009bda:	bf00      	nop
 8009bdc:	20000048 	.word	0x20000048
 8009be0:	0800a9e9 	.word	0x0800a9e9
 8009be4:	0800a9bb 	.word	0x0800a9bb
 8009be8:	0800a9ae 	.word	0x0800a9ae

08009bec <_calloc_r>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	fba1 5402 	umull	r5, r4, r1, r2
 8009bf2:	b93c      	cbnz	r4, 8009c04 <_calloc_r+0x18>
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	f7fe fe03 	bl	8008800 <_malloc_r>
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	b928      	cbnz	r0, 8009c0a <_calloc_r+0x1e>
 8009bfe:	2600      	movs	r6, #0
 8009c00:	4630      	mov	r0, r6
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	220c      	movs	r2, #12
 8009c06:	6002      	str	r2, [r0, #0]
 8009c08:	e7f9      	b.n	8009bfe <_calloc_r+0x12>
 8009c0a:	462a      	mov	r2, r5
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	f7fd fe56 	bl	80078be <memset>
 8009c12:	e7f5      	b.n	8009c00 <_calloc_r+0x14>

08009c14 <__ascii_mbtowc>:
 8009c14:	b082      	sub	sp, #8
 8009c16:	b901      	cbnz	r1, 8009c1a <__ascii_mbtowc+0x6>
 8009c18:	a901      	add	r1, sp, #4
 8009c1a:	b142      	cbz	r2, 8009c2e <__ascii_mbtowc+0x1a>
 8009c1c:	b14b      	cbz	r3, 8009c32 <__ascii_mbtowc+0x1e>
 8009c1e:	7813      	ldrb	r3, [r2, #0]
 8009c20:	600b      	str	r3, [r1, #0]
 8009c22:	7812      	ldrb	r2, [r2, #0]
 8009c24:	1e10      	subs	r0, r2, #0
 8009c26:	bf18      	it	ne
 8009c28:	2001      	movne	r0, #1
 8009c2a:	b002      	add	sp, #8
 8009c2c:	4770      	bx	lr
 8009c2e:	4610      	mov	r0, r2
 8009c30:	e7fb      	b.n	8009c2a <__ascii_mbtowc+0x16>
 8009c32:	f06f 0001 	mvn.w	r0, #1
 8009c36:	e7f8      	b.n	8009c2a <__ascii_mbtowc+0x16>

08009c38 <_realloc_r>:
 8009c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	4615      	mov	r5, r2
 8009c40:	460c      	mov	r4, r1
 8009c42:	b921      	cbnz	r1, 8009c4e <_realloc_r+0x16>
 8009c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c48:	4611      	mov	r1, r2
 8009c4a:	f7fe bdd9 	b.w	8008800 <_malloc_r>
 8009c4e:	b92a      	cbnz	r2, 8009c5c <_realloc_r+0x24>
 8009c50:	f7fe fd62 	bl	8008718 <_free_r>
 8009c54:	2400      	movs	r4, #0
 8009c56:	4620      	mov	r0, r4
 8009c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c5c:	f000 f92d 	bl	8009eba <_malloc_usable_size_r>
 8009c60:	4285      	cmp	r5, r0
 8009c62:	4606      	mov	r6, r0
 8009c64:	d802      	bhi.n	8009c6c <_realloc_r+0x34>
 8009c66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009c6a:	d8f4      	bhi.n	8009c56 <_realloc_r+0x1e>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f7fe fdc6 	bl	8008800 <_malloc_r>
 8009c74:	4607      	mov	r7, r0
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d0ec      	beq.n	8009c54 <_realloc_r+0x1c>
 8009c7a:	42b5      	cmp	r5, r6
 8009c7c:	462a      	mov	r2, r5
 8009c7e:	4621      	mov	r1, r4
 8009c80:	bf28      	it	cs
 8009c82:	4632      	movcs	r2, r6
 8009c84:	f7ff ff86 	bl	8009b94 <memcpy>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	f7fe fd44 	bl	8008718 <_free_r>
 8009c90:	463c      	mov	r4, r7
 8009c92:	e7e0      	b.n	8009c56 <_realloc_r+0x1e>

08009c94 <_strtol_l.constprop.0>:
 8009c94:	2b24      	cmp	r3, #36	@ 0x24
 8009c96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9a:	4686      	mov	lr, r0
 8009c9c:	4690      	mov	r8, r2
 8009c9e:	d801      	bhi.n	8009ca4 <_strtol_l.constprop.0+0x10>
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d106      	bne.n	8009cb2 <_strtol_l.constprop.0+0x1e>
 8009ca4:	f7fd febc 	bl	8007a20 <__errno>
 8009ca8:	2316      	movs	r3, #22
 8009caa:	6003      	str	r3, [r0, #0]
 8009cac:	2000      	movs	r0, #0
 8009cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb2:	4834      	ldr	r0, [pc, #208]	@ (8009d84 <_strtol_l.constprop.0+0xf0>)
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cbc:	5d06      	ldrb	r6, [r0, r4]
 8009cbe:	f016 0608 	ands.w	r6, r6, #8
 8009cc2:	d1f8      	bne.n	8009cb6 <_strtol_l.constprop.0+0x22>
 8009cc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009cc6:	d12d      	bne.n	8009d24 <_strtol_l.constprop.0+0x90>
 8009cc8:	782c      	ldrb	r4, [r5, #0]
 8009cca:	2601      	movs	r6, #1
 8009ccc:	1c95      	adds	r5, r2, #2
 8009cce:	f033 0210 	bics.w	r2, r3, #16
 8009cd2:	d109      	bne.n	8009ce8 <_strtol_l.constprop.0+0x54>
 8009cd4:	2c30      	cmp	r4, #48	@ 0x30
 8009cd6:	d12a      	bne.n	8009d2e <_strtol_l.constprop.0+0x9a>
 8009cd8:	782a      	ldrb	r2, [r5, #0]
 8009cda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009cde:	2a58      	cmp	r2, #88	@ 0x58
 8009ce0:	d125      	bne.n	8009d2e <_strtol_l.constprop.0+0x9a>
 8009ce2:	786c      	ldrb	r4, [r5, #1]
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	3502      	adds	r5, #2
 8009ce8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009cec:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	fbbc f9f3 	udiv	r9, ip, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009cfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d00:	2f09      	cmp	r7, #9
 8009d02:	d81b      	bhi.n	8009d3c <_strtol_l.constprop.0+0xa8>
 8009d04:	463c      	mov	r4, r7
 8009d06:	42a3      	cmp	r3, r4
 8009d08:	dd27      	ble.n	8009d5a <_strtol_l.constprop.0+0xc6>
 8009d0a:	1c57      	adds	r7, r2, #1
 8009d0c:	d007      	beq.n	8009d1e <_strtol_l.constprop.0+0x8a>
 8009d0e:	4581      	cmp	r9, r0
 8009d10:	d320      	bcc.n	8009d54 <_strtol_l.constprop.0+0xc0>
 8009d12:	d101      	bne.n	8009d18 <_strtol_l.constprop.0+0x84>
 8009d14:	45a2      	cmp	sl, r4
 8009d16:	db1d      	blt.n	8009d54 <_strtol_l.constprop.0+0xc0>
 8009d18:	fb00 4003 	mla	r0, r0, r3, r4
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d22:	e7eb      	b.n	8009cfc <_strtol_l.constprop.0+0x68>
 8009d24:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d26:	bf04      	itt	eq
 8009d28:	782c      	ldrbeq	r4, [r5, #0]
 8009d2a:	1c95      	addeq	r5, r2, #2
 8009d2c:	e7cf      	b.n	8009cce <_strtol_l.constprop.0+0x3a>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1da      	bne.n	8009ce8 <_strtol_l.constprop.0+0x54>
 8009d32:	2c30      	cmp	r4, #48	@ 0x30
 8009d34:	bf0c      	ite	eq
 8009d36:	2308      	moveq	r3, #8
 8009d38:	230a      	movne	r3, #10
 8009d3a:	e7d5      	b.n	8009ce8 <_strtol_l.constprop.0+0x54>
 8009d3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009d40:	2f19      	cmp	r7, #25
 8009d42:	d801      	bhi.n	8009d48 <_strtol_l.constprop.0+0xb4>
 8009d44:	3c37      	subs	r4, #55	@ 0x37
 8009d46:	e7de      	b.n	8009d06 <_strtol_l.constprop.0+0x72>
 8009d48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009d4c:	2f19      	cmp	r7, #25
 8009d4e:	d804      	bhi.n	8009d5a <_strtol_l.constprop.0+0xc6>
 8009d50:	3c57      	subs	r4, #87	@ 0x57
 8009d52:	e7d8      	b.n	8009d06 <_strtol_l.constprop.0+0x72>
 8009d54:	f04f 32ff 	mov.w	r2, #4294967295
 8009d58:	e7e1      	b.n	8009d1e <_strtol_l.constprop.0+0x8a>
 8009d5a:	1c53      	adds	r3, r2, #1
 8009d5c:	d108      	bne.n	8009d70 <_strtol_l.constprop.0+0xdc>
 8009d5e:	2322      	movs	r3, #34	@ 0x22
 8009d60:	f8ce 3000 	str.w	r3, [lr]
 8009d64:	4660      	mov	r0, ip
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	d0a0      	beq.n	8009cae <_strtol_l.constprop.0+0x1a>
 8009d6c:	1e69      	subs	r1, r5, #1
 8009d6e:	e006      	b.n	8009d7e <_strtol_l.constprop.0+0xea>
 8009d70:	b106      	cbz	r6, 8009d74 <_strtol_l.constprop.0+0xe0>
 8009d72:	4240      	negs	r0, r0
 8009d74:	f1b8 0f00 	cmp.w	r8, #0
 8009d78:	d099      	beq.n	8009cae <_strtol_l.constprop.0+0x1a>
 8009d7a:	2a00      	cmp	r2, #0
 8009d7c:	d1f6      	bne.n	8009d6c <_strtol_l.constprop.0+0xd8>
 8009d7e:	f8c8 1000 	str.w	r1, [r8]
 8009d82:	e794      	b.n	8009cae <_strtol_l.constprop.0+0x1a>
 8009d84:	0800a9eb 	.word	0x0800a9eb

08009d88 <_strtol_r>:
 8009d88:	f7ff bf84 	b.w	8009c94 <_strtol_l.constprop.0>

08009d8c <_strtoul_l.constprop.0>:
 8009d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d90:	4e34      	ldr	r6, [pc, #208]	@ (8009e64 <_strtoul_l.constprop.0+0xd8>)
 8009d92:	4686      	mov	lr, r0
 8009d94:	460d      	mov	r5, r1
 8009d96:	4628      	mov	r0, r5
 8009d98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d9c:	5d37      	ldrb	r7, [r6, r4]
 8009d9e:	f017 0708 	ands.w	r7, r7, #8
 8009da2:	d1f8      	bne.n	8009d96 <_strtoul_l.constprop.0+0xa>
 8009da4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009da6:	d12f      	bne.n	8009e08 <_strtoul_l.constprop.0+0x7c>
 8009da8:	782c      	ldrb	r4, [r5, #0]
 8009daa:	2701      	movs	r7, #1
 8009dac:	1c85      	adds	r5, r0, #2
 8009dae:	f033 0010 	bics.w	r0, r3, #16
 8009db2:	d109      	bne.n	8009dc8 <_strtoul_l.constprop.0+0x3c>
 8009db4:	2c30      	cmp	r4, #48	@ 0x30
 8009db6:	d12c      	bne.n	8009e12 <_strtoul_l.constprop.0+0x86>
 8009db8:	7828      	ldrb	r0, [r5, #0]
 8009dba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009dbe:	2858      	cmp	r0, #88	@ 0x58
 8009dc0:	d127      	bne.n	8009e12 <_strtoul_l.constprop.0+0x86>
 8009dc2:	786c      	ldrb	r4, [r5, #1]
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	3502      	adds	r5, #2
 8009dc8:	f04f 38ff 	mov.w	r8, #4294967295
 8009dcc:	2600      	movs	r6, #0
 8009dce:	fbb8 f8f3 	udiv	r8, r8, r3
 8009dd2:	fb03 f908 	mul.w	r9, r3, r8
 8009dd6:	ea6f 0909 	mvn.w	r9, r9
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009de0:	f1bc 0f09 	cmp.w	ip, #9
 8009de4:	d81c      	bhi.n	8009e20 <_strtoul_l.constprop.0+0x94>
 8009de6:	4664      	mov	r4, ip
 8009de8:	42a3      	cmp	r3, r4
 8009dea:	dd2a      	ble.n	8009e42 <_strtoul_l.constprop.0+0xb6>
 8009dec:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009df0:	d007      	beq.n	8009e02 <_strtoul_l.constprop.0+0x76>
 8009df2:	4580      	cmp	r8, r0
 8009df4:	d322      	bcc.n	8009e3c <_strtoul_l.constprop.0+0xb0>
 8009df6:	d101      	bne.n	8009dfc <_strtoul_l.constprop.0+0x70>
 8009df8:	45a1      	cmp	r9, r4
 8009dfa:	db1f      	blt.n	8009e3c <_strtoul_l.constprop.0+0xb0>
 8009dfc:	fb00 4003 	mla	r0, r0, r3, r4
 8009e00:	2601      	movs	r6, #1
 8009e02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e06:	e7e9      	b.n	8009ddc <_strtoul_l.constprop.0+0x50>
 8009e08:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e0a:	bf04      	itt	eq
 8009e0c:	782c      	ldrbeq	r4, [r5, #0]
 8009e0e:	1c85      	addeq	r5, r0, #2
 8009e10:	e7cd      	b.n	8009dae <_strtoul_l.constprop.0+0x22>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1d8      	bne.n	8009dc8 <_strtoul_l.constprop.0+0x3c>
 8009e16:	2c30      	cmp	r4, #48	@ 0x30
 8009e18:	bf0c      	ite	eq
 8009e1a:	2308      	moveq	r3, #8
 8009e1c:	230a      	movne	r3, #10
 8009e1e:	e7d3      	b.n	8009dc8 <_strtoul_l.constprop.0+0x3c>
 8009e20:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009e24:	f1bc 0f19 	cmp.w	ip, #25
 8009e28:	d801      	bhi.n	8009e2e <_strtoul_l.constprop.0+0xa2>
 8009e2a:	3c37      	subs	r4, #55	@ 0x37
 8009e2c:	e7dc      	b.n	8009de8 <_strtoul_l.constprop.0+0x5c>
 8009e2e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009e32:	f1bc 0f19 	cmp.w	ip, #25
 8009e36:	d804      	bhi.n	8009e42 <_strtoul_l.constprop.0+0xb6>
 8009e38:	3c57      	subs	r4, #87	@ 0x57
 8009e3a:	e7d5      	b.n	8009de8 <_strtoul_l.constprop.0+0x5c>
 8009e3c:	f04f 36ff 	mov.w	r6, #4294967295
 8009e40:	e7df      	b.n	8009e02 <_strtoul_l.constprop.0+0x76>
 8009e42:	1c73      	adds	r3, r6, #1
 8009e44:	d106      	bne.n	8009e54 <_strtoul_l.constprop.0+0xc8>
 8009e46:	2322      	movs	r3, #34	@ 0x22
 8009e48:	f8ce 3000 	str.w	r3, [lr]
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	b932      	cbnz	r2, 8009e5e <_strtoul_l.constprop.0+0xd2>
 8009e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e54:	b107      	cbz	r7, 8009e58 <_strtoul_l.constprop.0+0xcc>
 8009e56:	4240      	negs	r0, r0
 8009e58:	2a00      	cmp	r2, #0
 8009e5a:	d0f9      	beq.n	8009e50 <_strtoul_l.constprop.0+0xc4>
 8009e5c:	b106      	cbz	r6, 8009e60 <_strtoul_l.constprop.0+0xd4>
 8009e5e:	1e69      	subs	r1, r5, #1
 8009e60:	6011      	str	r1, [r2, #0]
 8009e62:	e7f5      	b.n	8009e50 <_strtoul_l.constprop.0+0xc4>
 8009e64:	0800a9eb 	.word	0x0800a9eb

08009e68 <_strtoul_r>:
 8009e68:	f7ff bf90 	b.w	8009d8c <_strtoul_l.constprop.0>

08009e6c <__ascii_wctomb>:
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	4608      	mov	r0, r1
 8009e70:	b141      	cbz	r1, 8009e84 <__ascii_wctomb+0x18>
 8009e72:	2aff      	cmp	r2, #255	@ 0xff
 8009e74:	d904      	bls.n	8009e80 <__ascii_wctomb+0x14>
 8009e76:	228a      	movs	r2, #138	@ 0x8a
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e7e:	4770      	bx	lr
 8009e80:	700a      	strb	r2, [r1, #0]
 8009e82:	2001      	movs	r0, #1
 8009e84:	4770      	bx	lr
	...

08009e88 <fiprintf>:
 8009e88:	b40e      	push	{r1, r2, r3}
 8009e8a:	b503      	push	{r0, r1, lr}
 8009e8c:	4601      	mov	r1, r0
 8009e8e:	ab03      	add	r3, sp, #12
 8009e90:	4805      	ldr	r0, [pc, #20]	@ (8009ea8 <fiprintf+0x20>)
 8009e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e96:	6800      	ldr	r0, [r0, #0]
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	f000 f83f 	bl	8009f1c <_vfiprintf_r>
 8009e9e:	b002      	add	sp, #8
 8009ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ea4:	b003      	add	sp, #12
 8009ea6:	4770      	bx	lr
 8009ea8:	20000048 	.word	0x20000048

08009eac <abort>:
 8009eac:	b508      	push	{r3, lr}
 8009eae:	2006      	movs	r0, #6
 8009eb0:	f000 fa08 	bl	800a2c4 <raise>
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	f7f8 f83b 	bl	8001f30 <_exit>

08009eba <_malloc_usable_size_r>:
 8009eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ebe:	1f18      	subs	r0, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bfbc      	itt	lt
 8009ec4:	580b      	ldrlt	r3, [r1, r0]
 8009ec6:	18c0      	addlt	r0, r0, r3
 8009ec8:	4770      	bx	lr

08009eca <__sfputc_r>:
 8009eca:	6893      	ldr	r3, [r2, #8]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	b410      	push	{r4}
 8009ed2:	6093      	str	r3, [r2, #8]
 8009ed4:	da08      	bge.n	8009ee8 <__sfputc_r+0x1e>
 8009ed6:	6994      	ldr	r4, [r2, #24]
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	db01      	blt.n	8009ee0 <__sfputc_r+0x16>
 8009edc:	290a      	cmp	r1, #10
 8009ede:	d103      	bne.n	8009ee8 <__sfputc_r+0x1e>
 8009ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ee4:	f000 b932 	b.w	800a14c <__swbuf_r>
 8009ee8:	6813      	ldr	r3, [r2, #0]
 8009eea:	1c58      	adds	r0, r3, #1
 8009eec:	6010      	str	r0, [r2, #0]
 8009eee:	7019      	strb	r1, [r3, #0]
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <__sfputs_r>:
 8009ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009efa:	4606      	mov	r6, r0
 8009efc:	460f      	mov	r7, r1
 8009efe:	4614      	mov	r4, r2
 8009f00:	18d5      	adds	r5, r2, r3
 8009f02:	42ac      	cmp	r4, r5
 8009f04:	d101      	bne.n	8009f0a <__sfputs_r+0x12>
 8009f06:	2000      	movs	r0, #0
 8009f08:	e007      	b.n	8009f1a <__sfputs_r+0x22>
 8009f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0e:	463a      	mov	r2, r7
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff ffda 	bl	8009eca <__sfputc_r>
 8009f16:	1c43      	adds	r3, r0, #1
 8009f18:	d1f3      	bne.n	8009f02 <__sfputs_r+0xa>
 8009f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f1c <_vfiprintf_r>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	460d      	mov	r5, r1
 8009f22:	b09d      	sub	sp, #116	@ 0x74
 8009f24:	4614      	mov	r4, r2
 8009f26:	4698      	mov	r8, r3
 8009f28:	4606      	mov	r6, r0
 8009f2a:	b118      	cbz	r0, 8009f34 <_vfiprintf_r+0x18>
 8009f2c:	6a03      	ldr	r3, [r0, #32]
 8009f2e:	b90b      	cbnz	r3, 8009f34 <_vfiprintf_r+0x18>
 8009f30:	f7fd fbec 	bl	800770c <__sinit>
 8009f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f36:	07d9      	lsls	r1, r3, #31
 8009f38:	d405      	bmi.n	8009f46 <_vfiprintf_r+0x2a>
 8009f3a:	89ab      	ldrh	r3, [r5, #12]
 8009f3c:	059a      	lsls	r2, r3, #22
 8009f3e:	d402      	bmi.n	8009f46 <_vfiprintf_r+0x2a>
 8009f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f42:	f7fd fd98 	bl	8007a76 <__retarget_lock_acquire_recursive>
 8009f46:	89ab      	ldrh	r3, [r5, #12]
 8009f48:	071b      	lsls	r3, r3, #28
 8009f4a:	d501      	bpl.n	8009f50 <_vfiprintf_r+0x34>
 8009f4c:	692b      	ldr	r3, [r5, #16]
 8009f4e:	b99b      	cbnz	r3, 8009f78 <_vfiprintf_r+0x5c>
 8009f50:	4629      	mov	r1, r5
 8009f52:	4630      	mov	r0, r6
 8009f54:	f000 f938 	bl	800a1c8 <__swsetup_r>
 8009f58:	b170      	cbz	r0, 8009f78 <_vfiprintf_r+0x5c>
 8009f5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f5c:	07dc      	lsls	r4, r3, #31
 8009f5e:	d504      	bpl.n	8009f6a <_vfiprintf_r+0x4e>
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	b01d      	add	sp, #116	@ 0x74
 8009f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6a:	89ab      	ldrh	r3, [r5, #12]
 8009f6c:	0598      	lsls	r0, r3, #22
 8009f6e:	d4f7      	bmi.n	8009f60 <_vfiprintf_r+0x44>
 8009f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f72:	f7fd fd81 	bl	8007a78 <__retarget_lock_release_recursive>
 8009f76:	e7f3      	b.n	8009f60 <_vfiprintf_r+0x44>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f7c:	2320      	movs	r3, #32
 8009f7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f86:	2330      	movs	r3, #48	@ 0x30
 8009f88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a138 <_vfiprintf_r+0x21c>
 8009f8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f90:	f04f 0901 	mov.w	r9, #1
 8009f94:	4623      	mov	r3, r4
 8009f96:	469a      	mov	sl, r3
 8009f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f9c:	b10a      	cbz	r2, 8009fa2 <_vfiprintf_r+0x86>
 8009f9e:	2a25      	cmp	r2, #37	@ 0x25
 8009fa0:	d1f9      	bne.n	8009f96 <_vfiprintf_r+0x7a>
 8009fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fa6:	d00b      	beq.n	8009fc0 <_vfiprintf_r+0xa4>
 8009fa8:	465b      	mov	r3, fp
 8009faa:	4622      	mov	r2, r4
 8009fac:	4629      	mov	r1, r5
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f7ff ffa2 	bl	8009ef8 <__sfputs_r>
 8009fb4:	3001      	adds	r0, #1
 8009fb6:	f000 80a7 	beq.w	800a108 <_vfiprintf_r+0x1ec>
 8009fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fbc:	445a      	add	r2, fp
 8009fbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 809f 	beq.w	800a108 <_vfiprintf_r+0x1ec>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fd4:	f10a 0a01 	add.w	sl, sl, #1
 8009fd8:	9304      	str	r3, [sp, #16]
 8009fda:	9307      	str	r3, [sp, #28]
 8009fdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fe0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fe2:	4654      	mov	r4, sl
 8009fe4:	2205      	movs	r2, #5
 8009fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fea:	4853      	ldr	r0, [pc, #332]	@ (800a138 <_vfiprintf_r+0x21c>)
 8009fec:	f7f6 f8f0 	bl	80001d0 <memchr>
 8009ff0:	9a04      	ldr	r2, [sp, #16]
 8009ff2:	b9d8      	cbnz	r0, 800a02c <_vfiprintf_r+0x110>
 8009ff4:	06d1      	lsls	r1, r2, #27
 8009ff6:	bf44      	itt	mi
 8009ff8:	2320      	movmi	r3, #32
 8009ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ffe:	0713      	lsls	r3, r2, #28
 800a000:	bf44      	itt	mi
 800a002:	232b      	movmi	r3, #43	@ 0x2b
 800a004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a008:	f89a 3000 	ldrb.w	r3, [sl]
 800a00c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a00e:	d015      	beq.n	800a03c <_vfiprintf_r+0x120>
 800a010:	9a07      	ldr	r2, [sp, #28]
 800a012:	4654      	mov	r4, sl
 800a014:	2000      	movs	r0, #0
 800a016:	f04f 0c0a 	mov.w	ip, #10
 800a01a:	4621      	mov	r1, r4
 800a01c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a020:	3b30      	subs	r3, #48	@ 0x30
 800a022:	2b09      	cmp	r3, #9
 800a024:	d94b      	bls.n	800a0be <_vfiprintf_r+0x1a2>
 800a026:	b1b0      	cbz	r0, 800a056 <_vfiprintf_r+0x13a>
 800a028:	9207      	str	r2, [sp, #28]
 800a02a:	e014      	b.n	800a056 <_vfiprintf_r+0x13a>
 800a02c:	eba0 0308 	sub.w	r3, r0, r8
 800a030:	fa09 f303 	lsl.w	r3, r9, r3
 800a034:	4313      	orrs	r3, r2
 800a036:	9304      	str	r3, [sp, #16]
 800a038:	46a2      	mov	sl, r4
 800a03a:	e7d2      	b.n	8009fe2 <_vfiprintf_r+0xc6>
 800a03c:	9b03      	ldr	r3, [sp, #12]
 800a03e:	1d19      	adds	r1, r3, #4
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	9103      	str	r1, [sp, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	bfbb      	ittet	lt
 800a048:	425b      	neglt	r3, r3
 800a04a:	f042 0202 	orrlt.w	r2, r2, #2
 800a04e:	9307      	strge	r3, [sp, #28]
 800a050:	9307      	strlt	r3, [sp, #28]
 800a052:	bfb8      	it	lt
 800a054:	9204      	strlt	r2, [sp, #16]
 800a056:	7823      	ldrb	r3, [r4, #0]
 800a058:	2b2e      	cmp	r3, #46	@ 0x2e
 800a05a:	d10a      	bne.n	800a072 <_vfiprintf_r+0x156>
 800a05c:	7863      	ldrb	r3, [r4, #1]
 800a05e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a060:	d132      	bne.n	800a0c8 <_vfiprintf_r+0x1ac>
 800a062:	9b03      	ldr	r3, [sp, #12]
 800a064:	1d1a      	adds	r2, r3, #4
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	9203      	str	r2, [sp, #12]
 800a06a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a06e:	3402      	adds	r4, #2
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a148 <_vfiprintf_r+0x22c>
 800a076:	7821      	ldrb	r1, [r4, #0]
 800a078:	2203      	movs	r2, #3
 800a07a:	4650      	mov	r0, sl
 800a07c:	f7f6 f8a8 	bl	80001d0 <memchr>
 800a080:	b138      	cbz	r0, 800a092 <_vfiprintf_r+0x176>
 800a082:	9b04      	ldr	r3, [sp, #16]
 800a084:	eba0 000a 	sub.w	r0, r0, sl
 800a088:	2240      	movs	r2, #64	@ 0x40
 800a08a:	4082      	lsls	r2, r0
 800a08c:	4313      	orrs	r3, r2
 800a08e:	3401      	adds	r4, #1
 800a090:	9304      	str	r3, [sp, #16]
 800a092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a096:	4829      	ldr	r0, [pc, #164]	@ (800a13c <_vfiprintf_r+0x220>)
 800a098:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a09c:	2206      	movs	r2, #6
 800a09e:	f7f6 f897 	bl	80001d0 <memchr>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d03f      	beq.n	800a126 <_vfiprintf_r+0x20a>
 800a0a6:	4b26      	ldr	r3, [pc, #152]	@ (800a140 <_vfiprintf_r+0x224>)
 800a0a8:	bb1b      	cbnz	r3, 800a0f2 <_vfiprintf_r+0x1d6>
 800a0aa:	9b03      	ldr	r3, [sp, #12]
 800a0ac:	3307      	adds	r3, #7
 800a0ae:	f023 0307 	bic.w	r3, r3, #7
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	9303      	str	r3, [sp, #12]
 800a0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b8:	443b      	add	r3, r7
 800a0ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0bc:	e76a      	b.n	8009f94 <_vfiprintf_r+0x78>
 800a0be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	2001      	movs	r0, #1
 800a0c6:	e7a8      	b.n	800a01a <_vfiprintf_r+0xfe>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	3401      	adds	r4, #1
 800a0cc:	9305      	str	r3, [sp, #20]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	f04f 0c0a 	mov.w	ip, #10
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0da:	3a30      	subs	r2, #48	@ 0x30
 800a0dc:	2a09      	cmp	r2, #9
 800a0de:	d903      	bls.n	800a0e8 <_vfiprintf_r+0x1cc>
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d0c6      	beq.n	800a072 <_vfiprintf_r+0x156>
 800a0e4:	9105      	str	r1, [sp, #20]
 800a0e6:	e7c4      	b.n	800a072 <_vfiprintf_r+0x156>
 800a0e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e7f0      	b.n	800a0d4 <_vfiprintf_r+0x1b8>
 800a0f2:	ab03      	add	r3, sp, #12
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	462a      	mov	r2, r5
 800a0f8:	4b12      	ldr	r3, [pc, #72]	@ (800a144 <_vfiprintf_r+0x228>)
 800a0fa:	a904      	add	r1, sp, #16
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7fc fec1 	bl	8006e84 <_printf_float>
 800a102:	4607      	mov	r7, r0
 800a104:	1c78      	adds	r0, r7, #1
 800a106:	d1d6      	bne.n	800a0b6 <_vfiprintf_r+0x19a>
 800a108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a10a:	07d9      	lsls	r1, r3, #31
 800a10c:	d405      	bmi.n	800a11a <_vfiprintf_r+0x1fe>
 800a10e:	89ab      	ldrh	r3, [r5, #12]
 800a110:	059a      	lsls	r2, r3, #22
 800a112:	d402      	bmi.n	800a11a <_vfiprintf_r+0x1fe>
 800a114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a116:	f7fd fcaf 	bl	8007a78 <__retarget_lock_release_recursive>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	065b      	lsls	r3, r3, #25
 800a11e:	f53f af1f 	bmi.w	8009f60 <_vfiprintf_r+0x44>
 800a122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a124:	e71e      	b.n	8009f64 <_vfiprintf_r+0x48>
 800a126:	ab03      	add	r3, sp, #12
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	462a      	mov	r2, r5
 800a12c:	4b05      	ldr	r3, [pc, #20]	@ (800a144 <_vfiprintf_r+0x228>)
 800a12e:	a904      	add	r1, sp, #16
 800a130:	4630      	mov	r0, r6
 800a132:	f7fd f93f 	bl	80073b4 <_printf_i>
 800a136:	e7e4      	b.n	800a102 <_vfiprintf_r+0x1e6>
 800a138:	0800a978 	.word	0x0800a978
 800a13c:	0800a982 	.word	0x0800a982
 800a140:	08006e85 	.word	0x08006e85
 800a144:	08009ef9 	.word	0x08009ef9
 800a148:	0800a97e 	.word	0x0800a97e

0800a14c <__swbuf_r>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	460e      	mov	r6, r1
 800a150:	4614      	mov	r4, r2
 800a152:	4605      	mov	r5, r0
 800a154:	b118      	cbz	r0, 800a15e <__swbuf_r+0x12>
 800a156:	6a03      	ldr	r3, [r0, #32]
 800a158:	b90b      	cbnz	r3, 800a15e <__swbuf_r+0x12>
 800a15a:	f7fd fad7 	bl	800770c <__sinit>
 800a15e:	69a3      	ldr	r3, [r4, #24]
 800a160:	60a3      	str	r3, [r4, #8]
 800a162:	89a3      	ldrh	r3, [r4, #12]
 800a164:	071a      	lsls	r2, r3, #28
 800a166:	d501      	bpl.n	800a16c <__swbuf_r+0x20>
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	b943      	cbnz	r3, 800a17e <__swbuf_r+0x32>
 800a16c:	4621      	mov	r1, r4
 800a16e:	4628      	mov	r0, r5
 800a170:	f000 f82a 	bl	800a1c8 <__swsetup_r>
 800a174:	b118      	cbz	r0, 800a17e <__swbuf_r+0x32>
 800a176:	f04f 37ff 	mov.w	r7, #4294967295
 800a17a:	4638      	mov	r0, r7
 800a17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	6922      	ldr	r2, [r4, #16]
 800a182:	1a98      	subs	r0, r3, r2
 800a184:	6963      	ldr	r3, [r4, #20]
 800a186:	b2f6      	uxtb	r6, r6
 800a188:	4283      	cmp	r3, r0
 800a18a:	4637      	mov	r7, r6
 800a18c:	dc05      	bgt.n	800a19a <__swbuf_r+0x4e>
 800a18e:	4621      	mov	r1, r4
 800a190:	4628      	mov	r0, r5
 800a192:	f7ff fc39 	bl	8009a08 <_fflush_r>
 800a196:	2800      	cmp	r0, #0
 800a198:	d1ed      	bne.n	800a176 <__swbuf_r+0x2a>
 800a19a:	68a3      	ldr	r3, [r4, #8]
 800a19c:	3b01      	subs	r3, #1
 800a19e:	60a3      	str	r3, [r4, #8]
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	6022      	str	r2, [r4, #0]
 800a1a6:	701e      	strb	r6, [r3, #0]
 800a1a8:	6962      	ldr	r2, [r4, #20]
 800a1aa:	1c43      	adds	r3, r0, #1
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d004      	beq.n	800a1ba <__swbuf_r+0x6e>
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	07db      	lsls	r3, r3, #31
 800a1b4:	d5e1      	bpl.n	800a17a <__swbuf_r+0x2e>
 800a1b6:	2e0a      	cmp	r6, #10
 800a1b8:	d1df      	bne.n	800a17a <__swbuf_r+0x2e>
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4628      	mov	r0, r5
 800a1be:	f7ff fc23 	bl	8009a08 <_fflush_r>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d0d9      	beq.n	800a17a <__swbuf_r+0x2e>
 800a1c6:	e7d6      	b.n	800a176 <__swbuf_r+0x2a>

0800a1c8 <__swsetup_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4b29      	ldr	r3, [pc, #164]	@ (800a270 <__swsetup_r+0xa8>)
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	6818      	ldr	r0, [r3, #0]
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	b118      	cbz	r0, 800a1dc <__swsetup_r+0x14>
 800a1d4:	6a03      	ldr	r3, [r0, #32]
 800a1d6:	b90b      	cbnz	r3, 800a1dc <__swsetup_r+0x14>
 800a1d8:	f7fd fa98 	bl	800770c <__sinit>
 800a1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1e0:	0719      	lsls	r1, r3, #28
 800a1e2:	d422      	bmi.n	800a22a <__swsetup_r+0x62>
 800a1e4:	06da      	lsls	r2, r3, #27
 800a1e6:	d407      	bmi.n	800a1f8 <__swsetup_r+0x30>
 800a1e8:	2209      	movs	r2, #9
 800a1ea:	602a      	str	r2, [r5, #0]
 800a1ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1f0:	81a3      	strh	r3, [r4, #12]
 800a1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f6:	e033      	b.n	800a260 <__swsetup_r+0x98>
 800a1f8:	0758      	lsls	r0, r3, #29
 800a1fa:	d512      	bpl.n	800a222 <__swsetup_r+0x5a>
 800a1fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1fe:	b141      	cbz	r1, 800a212 <__swsetup_r+0x4a>
 800a200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a204:	4299      	cmp	r1, r3
 800a206:	d002      	beq.n	800a20e <__swsetup_r+0x46>
 800a208:	4628      	mov	r0, r5
 800a20a:	f7fe fa85 	bl	8008718 <_free_r>
 800a20e:	2300      	movs	r3, #0
 800a210:	6363      	str	r3, [r4, #52]	@ 0x34
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a218:	81a3      	strh	r3, [r4, #12]
 800a21a:	2300      	movs	r3, #0
 800a21c:	6063      	str	r3, [r4, #4]
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	89a3      	ldrh	r3, [r4, #12]
 800a224:	f043 0308 	orr.w	r3, r3, #8
 800a228:	81a3      	strh	r3, [r4, #12]
 800a22a:	6923      	ldr	r3, [r4, #16]
 800a22c:	b94b      	cbnz	r3, 800a242 <__swsetup_r+0x7a>
 800a22e:	89a3      	ldrh	r3, [r4, #12]
 800a230:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a238:	d003      	beq.n	800a242 <__swsetup_r+0x7a>
 800a23a:	4621      	mov	r1, r4
 800a23c:	4628      	mov	r0, r5
 800a23e:	f000 f883 	bl	800a348 <__smakebuf_r>
 800a242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a246:	f013 0201 	ands.w	r2, r3, #1
 800a24a:	d00a      	beq.n	800a262 <__swsetup_r+0x9a>
 800a24c:	2200      	movs	r2, #0
 800a24e:	60a2      	str	r2, [r4, #8]
 800a250:	6962      	ldr	r2, [r4, #20]
 800a252:	4252      	negs	r2, r2
 800a254:	61a2      	str	r2, [r4, #24]
 800a256:	6922      	ldr	r2, [r4, #16]
 800a258:	b942      	cbnz	r2, 800a26c <__swsetup_r+0xa4>
 800a25a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a25e:	d1c5      	bne.n	800a1ec <__swsetup_r+0x24>
 800a260:	bd38      	pop	{r3, r4, r5, pc}
 800a262:	0799      	lsls	r1, r3, #30
 800a264:	bf58      	it	pl
 800a266:	6962      	ldrpl	r2, [r4, #20]
 800a268:	60a2      	str	r2, [r4, #8]
 800a26a:	e7f4      	b.n	800a256 <__swsetup_r+0x8e>
 800a26c:	2000      	movs	r0, #0
 800a26e:	e7f7      	b.n	800a260 <__swsetup_r+0x98>
 800a270:	20000048 	.word	0x20000048

0800a274 <_raise_r>:
 800a274:	291f      	cmp	r1, #31
 800a276:	b538      	push	{r3, r4, r5, lr}
 800a278:	4605      	mov	r5, r0
 800a27a:	460c      	mov	r4, r1
 800a27c:	d904      	bls.n	800a288 <_raise_r+0x14>
 800a27e:	2316      	movs	r3, #22
 800a280:	6003      	str	r3, [r0, #0]
 800a282:	f04f 30ff 	mov.w	r0, #4294967295
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a28a:	b112      	cbz	r2, 800a292 <_raise_r+0x1e>
 800a28c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a290:	b94b      	cbnz	r3, 800a2a6 <_raise_r+0x32>
 800a292:	4628      	mov	r0, r5
 800a294:	f000 f830 	bl	800a2f8 <_getpid_r>
 800a298:	4622      	mov	r2, r4
 800a29a:	4601      	mov	r1, r0
 800a29c:	4628      	mov	r0, r5
 800a29e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2a2:	f000 b817 	b.w	800a2d4 <_kill_r>
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d00a      	beq.n	800a2c0 <_raise_r+0x4c>
 800a2aa:	1c59      	adds	r1, r3, #1
 800a2ac:	d103      	bne.n	800a2b6 <_raise_r+0x42>
 800a2ae:	2316      	movs	r3, #22
 800a2b0:	6003      	str	r3, [r0, #0]
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	e7e7      	b.n	800a286 <_raise_r+0x12>
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a2bc:	4620      	mov	r0, r4
 800a2be:	4798      	blx	r3
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e7e0      	b.n	800a286 <_raise_r+0x12>

0800a2c4 <raise>:
 800a2c4:	4b02      	ldr	r3, [pc, #8]	@ (800a2d0 <raise+0xc>)
 800a2c6:	4601      	mov	r1, r0
 800a2c8:	6818      	ldr	r0, [r3, #0]
 800a2ca:	f7ff bfd3 	b.w	800a274 <_raise_r>
 800a2ce:	bf00      	nop
 800a2d0:	20000048 	.word	0x20000048

0800a2d4 <_kill_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d07      	ldr	r5, [pc, #28]	@ (800a2f4 <_kill_r+0x20>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	f7f7 fe15 	bl	8001f10 <_kill>
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	d102      	bne.n	800a2f0 <_kill_r+0x1c>
 800a2ea:	682b      	ldr	r3, [r5, #0]
 800a2ec:	b103      	cbz	r3, 800a2f0 <_kill_r+0x1c>
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	bd38      	pop	{r3, r4, r5, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20000a00 	.word	0x20000a00

0800a2f8 <_getpid_r>:
 800a2f8:	f7f7 be02 	b.w	8001f00 <_getpid>

0800a2fc <__swhatbuf_r>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	460c      	mov	r4, r1
 800a300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a304:	2900      	cmp	r1, #0
 800a306:	b096      	sub	sp, #88	@ 0x58
 800a308:	4615      	mov	r5, r2
 800a30a:	461e      	mov	r6, r3
 800a30c:	da0d      	bge.n	800a32a <__swhatbuf_r+0x2e>
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a314:	f04f 0100 	mov.w	r1, #0
 800a318:	bf14      	ite	ne
 800a31a:	2340      	movne	r3, #64	@ 0x40
 800a31c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a320:	2000      	movs	r0, #0
 800a322:	6031      	str	r1, [r6, #0]
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	b016      	add	sp, #88	@ 0x58
 800a328:	bd70      	pop	{r4, r5, r6, pc}
 800a32a:	466a      	mov	r2, sp
 800a32c:	f000 f848 	bl	800a3c0 <_fstat_r>
 800a330:	2800      	cmp	r0, #0
 800a332:	dbec      	blt.n	800a30e <__swhatbuf_r+0x12>
 800a334:	9901      	ldr	r1, [sp, #4]
 800a336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a33a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a33e:	4259      	negs	r1, r3
 800a340:	4159      	adcs	r1, r3
 800a342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a346:	e7eb      	b.n	800a320 <__swhatbuf_r+0x24>

0800a348 <__smakebuf_r>:
 800a348:	898b      	ldrh	r3, [r1, #12]
 800a34a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a34c:	079d      	lsls	r5, r3, #30
 800a34e:	4606      	mov	r6, r0
 800a350:	460c      	mov	r4, r1
 800a352:	d507      	bpl.n	800a364 <__smakebuf_r+0x1c>
 800a354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	6123      	str	r3, [r4, #16]
 800a35c:	2301      	movs	r3, #1
 800a35e:	6163      	str	r3, [r4, #20]
 800a360:	b003      	add	sp, #12
 800a362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a364:	ab01      	add	r3, sp, #4
 800a366:	466a      	mov	r2, sp
 800a368:	f7ff ffc8 	bl	800a2fc <__swhatbuf_r>
 800a36c:	9f00      	ldr	r7, [sp, #0]
 800a36e:	4605      	mov	r5, r0
 800a370:	4639      	mov	r1, r7
 800a372:	4630      	mov	r0, r6
 800a374:	f7fe fa44 	bl	8008800 <_malloc_r>
 800a378:	b948      	cbnz	r0, 800a38e <__smakebuf_r+0x46>
 800a37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a37e:	059a      	lsls	r2, r3, #22
 800a380:	d4ee      	bmi.n	800a360 <__smakebuf_r+0x18>
 800a382:	f023 0303 	bic.w	r3, r3, #3
 800a386:	f043 0302 	orr.w	r3, r3, #2
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	e7e2      	b.n	800a354 <__smakebuf_r+0xc>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	6020      	str	r0, [r4, #0]
 800a392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a396:	81a3      	strh	r3, [r4, #12]
 800a398:	9b01      	ldr	r3, [sp, #4]
 800a39a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a39e:	b15b      	cbz	r3, 800a3b8 <__smakebuf_r+0x70>
 800a3a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 f81d 	bl	800a3e4 <_isatty_r>
 800a3aa:	b128      	cbz	r0, 800a3b8 <__smakebuf_r+0x70>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f023 0303 	bic.w	r3, r3, #3
 800a3b2:	f043 0301 	orr.w	r3, r3, #1
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	431d      	orrs	r5, r3
 800a3bc:	81a5      	strh	r5, [r4, #12]
 800a3be:	e7cf      	b.n	800a360 <__smakebuf_r+0x18>

0800a3c0 <_fstat_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d07      	ldr	r5, [pc, #28]	@ (800a3e0 <_fstat_r+0x20>)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	602b      	str	r3, [r5, #0]
 800a3ce:	f7f7 fdff 	bl	8001fd0 <_fstat>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	d102      	bne.n	800a3dc <_fstat_r+0x1c>
 800a3d6:	682b      	ldr	r3, [r5, #0]
 800a3d8:	b103      	cbz	r3, 800a3dc <_fstat_r+0x1c>
 800a3da:	6023      	str	r3, [r4, #0]
 800a3dc:	bd38      	pop	{r3, r4, r5, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000a00 	.word	0x20000a00

0800a3e4 <_isatty_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d06      	ldr	r5, [pc, #24]	@ (800a400 <_isatty_r+0x1c>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	602b      	str	r3, [r5, #0]
 800a3f0:	f7f7 fdfe 	bl	8001ff0 <_isatty>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_isatty_r+0x1a>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_isatty_r+0x1a>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	20000a00 	.word	0x20000a00

0800a404 <_init>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	bf00      	nop
 800a408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40a:	bc08      	pop	{r3}
 800a40c:	469e      	mov	lr, r3
 800a40e:	4770      	bx	lr

0800a410 <_fini>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	bf00      	nop
 800a414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a416:	bc08      	pop	{r3}
 800a418:	469e      	mov	lr, r3
 800a41a:	4770      	bx	lr
